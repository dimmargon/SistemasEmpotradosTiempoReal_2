
practica3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a274  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800a408  0800a408  0001a408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9ac  0800a9ac  00020298  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9ac  0800a9ac  0001a9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9b4  0800a9b4  00020298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9b4  0800a9b4  0001a9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9b8  0800a9b8  0001a9b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000298  20000000  0800a9bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000092c  20000298  0800ac54  00020298  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bc4  0800ac54  00020bc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bac0  00000000  00000000  0002030b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004127  00000000  00000000  0003bdcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a28  00000000  00000000  0003fef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013fd  00000000  00000000  00041920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a60e  00000000  00000000  00042d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020977  00000000  00000000  0006d32b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fabea  00000000  00000000  0008dca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007d10  00000000  00000000  0018888c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0019059c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000298 	.word	0x20000298
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a3ec 	.word	0x0800a3ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000029c 	.word	0x2000029c
 80001cc:	0800a3ec 	.word	0x0800a3ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000eac:	4b27      	ldr	r3, [pc, #156]	; (8000f4c <I2Cx_MspInit+0xa8>)
 8000eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb0:	4a26      	ldr	r2, [pc, #152]	; (8000f4c <I2Cx_MspInit+0xa8>)
 8000eb2:	f043 0302 	orr.w	r3, r3, #2
 8000eb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb8:	4b24      	ldr	r3, [pc, #144]	; (8000f4c <I2Cx_MspInit+0xa8>)
 8000eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebc:	f003 0302 	and.w	r3, r3, #2
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8000ec4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ec8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000eca:	2312      	movs	r3, #18
 8000ecc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	481b      	ldr	r0, [pc, #108]	; (8000f50 <I2Cx_MspInit+0xac>)
 8000ee2:	f002 fd2b 	bl	800393c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	4818      	ldr	r0, [pc, #96]	; (8000f50 <I2Cx_MspInit+0xac>)
 8000eee:	f002 fd25 	bl	800393c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <I2Cx_MspInit+0xa8>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef6:	4a15      	ldr	r2, [pc, #84]	; (8000f4c <I2Cx_MspInit+0xa8>)
 8000ef8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000efc:	6593      	str	r3, [r2, #88]	; 0x58
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <I2Cx_MspInit+0xa8>)
 8000f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <I2Cx_MspInit+0xa8>)
 8000f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f0e:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <I2Cx_MspInit+0xa8>)
 8000f10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f14:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8000f16:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <I2Cx_MspInit+0xa8>)
 8000f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f1a:	4a0c      	ldr	r2, [pc, #48]	; (8000f4c <I2Cx_MspInit+0xa8>)
 8000f1c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000f20:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	210f      	movs	r1, #15
 8000f26:	2021      	movs	r0, #33	; 0x21
 8000f28:	f002 fbc5 	bl	80036b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000f2c:	2021      	movs	r0, #33	; 0x21
 8000f2e:	f002 fbde 	bl	80036ee <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	210f      	movs	r1, #15
 8000f36:	2022      	movs	r0, #34	; 0x22
 8000f38:	f002 fbbd 	bl	80036b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000f3c:	2022      	movs	r0, #34	; 0x22
 8000f3e:	f002 fbd6 	bl	80036ee <HAL_NVIC_EnableIRQ>
}
 8000f42:	bf00      	nop
 8000f44:	3728      	adds	r7, #40	; 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	48000400 	.word	0x48000400

08000f54 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <I2Cx_Init+0x54>)
 8000f60:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a11      	ldr	r2, [pc, #68]	; (8000fac <I2Cx_Init+0x58>)
 8000f66:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2201      	movs	r2, #1
 8000f72:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ff89 	bl	8000ea4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f002 ffab 	bl	8003eee <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8000f98:	2100      	movs	r1, #0
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f003 fd62 	bl	8004a64 <HAL_I2CEx_ConfigAnalogFilter>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40005800 	.word	0x40005800
 8000fac:	00702681 	.word	0x00702681

08000fb0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af04      	add	r7, sp, #16
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	4608      	mov	r0, r1
 8000fba:	4611      	mov	r1, r2
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	72fb      	strb	r3, [r7, #11]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	813b      	strh	r3, [r7, #8]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000fce:	7afb      	ldrb	r3, [r7, #11]
 8000fd0:	b299      	uxth	r1, r3
 8000fd2:	88f8      	ldrh	r0, [r7, #6]
 8000fd4:	893a      	ldrh	r2, [r7, #8]
 8000fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fda:	9302      	str	r3, [sp, #8]
 8000fdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	6a3b      	ldr	r3, [r7, #32]
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f003 f960 	bl	80042ac <HAL_I2C_Mem_Read>
 8000fec:	4603      	mov	r3, r0
 8000fee:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000ff0:	7dfb      	ldrb	r3, [r7, #23]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d004      	beq.n	8001000 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8000ff6:	7afb      	ldrb	r3, [r7, #11]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f000 f832 	bl	8001064 <I2Cx_Error>
  }
  return status;
 8001000:	7dfb      	ldrb	r3, [r7, #23]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b08a      	sub	sp, #40	; 0x28
 800100e:	af04      	add	r7, sp, #16
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	4608      	mov	r0, r1
 8001014:	4611      	mov	r1, r2
 8001016:	461a      	mov	r2, r3
 8001018:	4603      	mov	r3, r0
 800101a:	72fb      	strb	r3, [r7, #11]
 800101c:	460b      	mov	r3, r1
 800101e:	813b      	strh	r3, [r7, #8]
 8001020:	4613      	mov	r3, r2
 8001022:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001028:	7afb      	ldrb	r3, [r7, #11]
 800102a:	b299      	uxth	r1, r3
 800102c:	88f8      	ldrh	r0, [r7, #6]
 800102e:	893a      	ldrh	r2, [r7, #8]
 8001030:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	6a3b      	ldr	r3, [r7, #32]
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	4603      	mov	r3, r0
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f003 f81f 	bl	8004084 <HAL_I2C_Mem_Write>
 8001046:	4603      	mov	r3, r0
 8001048:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800104a:	7dfb      	ldrb	r3, [r7, #23]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d004      	beq.n	800105a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001050:	7afb      	ldrb	r3, [r7, #11]
 8001052:	4619      	mov	r1, r3
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f000 f805 	bl	8001064 <I2Cx_Error>
  }
  return status;
 800105a:	7dfb      	ldrb	r3, [r7, #23]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f002 ffd7 	bl	8004024 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ff6c 	bl	8000f54 <I2Cx_Init>
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <SENSOR_IO_Init+0x10>)
 800108a:	f7ff ff63 	bl	8000f54 <I2Cx_Init>
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200002b4 	.word	0x200002b4

08001098 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af02      	add	r7, sp, #8
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
 80010a2:	460b      	mov	r3, r1
 80010a4:	71bb      	strb	r3, [r7, #6]
 80010a6:	4613      	mov	r3, r2
 80010a8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	79f9      	ldrb	r1, [r7, #7]
 80010b0:	2301      	movs	r3, #1
 80010b2:	9301      	str	r3, [sp, #4]
 80010b4:	1d7b      	adds	r3, r7, #5
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	2301      	movs	r3, #1
 80010ba:	4803      	ldr	r0, [pc, #12]	; (80010c8 <SENSOR_IO_Write+0x30>)
 80010bc:	f7ff ffa5 	bl	800100a <I2Cx_WriteMultiple>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200002b4 	.word	0x200002b4

080010cc <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	4603      	mov	r3, r0
 80010d4:	460a      	mov	r2, r1
 80010d6:	71fb      	strb	r3, [r7, #7]
 80010d8:	4613      	mov	r3, r2
 80010da:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80010e0:	79bb      	ldrb	r3, [r7, #6]
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	79f9      	ldrb	r1, [r7, #7]
 80010e6:	2301      	movs	r3, #1
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	f107 030f 	add.w	r3, r7, #15
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	4804      	ldr	r0, [pc, #16]	; (8001104 <SENSOR_IO_Read+0x38>)
 80010f4:	f7ff ff5c 	bl	8000fb0 <I2Cx_ReadMultiple>

  return read_value;
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200002b4 	.word	0x200002b4

08001108 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af02      	add	r7, sp, #8
 800110e:	603a      	str	r2, [r7, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
 8001116:	460b      	mov	r3, r1
 8001118:	71bb      	strb	r3, [r7, #6]
 800111a:	4613      	mov	r3, r2
 800111c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800111e:	79bb      	ldrb	r3, [r7, #6]
 8001120:	b29a      	uxth	r2, r3
 8001122:	79f9      	ldrb	r1, [r7, #7]
 8001124:	88bb      	ldrh	r3, [r7, #4]
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2301      	movs	r3, #1
 800112e:	4804      	ldr	r0, [pc, #16]	; (8001140 <SENSOR_IO_ReadMultiple+0x38>)
 8001130:	f7ff ff3e 	bl	8000fb0 <I2Cx_ReadMultiple>
 8001134:	4603      	mov	r3, r0
 8001136:	b29b      	uxth	r3, r3
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	200002b4 	.word	0x200002b4

08001144 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800114e:	2300      	movs	r3, #0
 8001150:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001152:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <BSP_ACCELERO_Init+0x74>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	4798      	blx	r3
 8001158:	4603      	mov	r3, r0
 800115a:	2b6a      	cmp	r3, #106	; 0x6a
 800115c:	d002      	beq.n	8001164 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	73fb      	strb	r3, [r7, #15]
 8001162:	e024      	b.n	80011ae <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <BSP_ACCELERO_Init+0x78>)
 8001166:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <BSP_ACCELERO_Init+0x74>)
 8001168:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800116a:	2330      	movs	r3, #48	; 0x30
 800116c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001172:	2300      	movs	r3, #0
 8001174:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001176:	2340      	movs	r3, #64	; 0x40
 8001178:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001182:	797a      	ldrb	r2, [r7, #5]
 8001184:	7abb      	ldrb	r3, [r7, #10]
 8001186:	4313      	orrs	r3, r2
 8001188:	b2db      	uxtb	r3, r3
 800118a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800118c:	7a3b      	ldrb	r3, [r7, #8]
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	b2db      	uxtb	r3, r3
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	b21a      	sxth	r2, r3
 8001198:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800119c:	4313      	orrs	r3, r2
 800119e:	b21b      	sxth	r3, r3
 80011a0:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <BSP_ACCELERO_Init+0x78>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	89ba      	ldrh	r2, [r7, #12]
 80011aa:	4610      	mov	r0, r2
 80011ac:	4798      	blx	r3
  }  

  return ret;
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	2000005c 	.word	0x2000005c
 80011bc:	20000308 	.word	0x20000308

080011c0 <BSP_ACCELERO_DeInit>:
/**
  * @brief  DeInitialize the ACCELERO.
  * @retval None.
  */
void BSP_ACCELERO_DeInit(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* DeInitialize the accelerometer IO interfaces */
  if(AccelerometerDrv != NULL)
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <BSP_ACCELERO_DeInit+0x24>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d008      	beq.n	80011de <BSP_ACCELERO_DeInit+0x1e>
  {
    if(AccelerometerDrv->DeInit != NULL)
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <BSP_ACCELERO_DeInit+0x24>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <BSP_ACCELERO_DeInit+0x1e>
    {
      AccelerometerDrv->DeInit();
 80011d6:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <BSP_ACCELERO_DeInit+0x24>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	4798      	blx	r3
    }
  }
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000308 	.word	0x20000308

080011e8 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d009      	beq.n	800120c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d004      	beq.n	800120c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	4798      	blx	r3
    }
  }
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000308 	.word	0x20000308

08001218 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001222:	2300      	movs	r3, #0
 8001224:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001226:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <BSP_GYRO_Init+0x7c>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	4798      	blx	r3
 800122c:	4603      	mov	r3, r0
 800122e:	2b6a      	cmp	r3, #106	; 0x6a
 8001230:	d002      	beq.n	8001238 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	73fb      	strb	r3, [r7, #15]
 8001236:	e028      	b.n	800128a <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8001238:	4b17      	ldr	r3, [pc, #92]	; (8001298 <BSP_GYRO_Init+0x80>)
 800123a:	4a16      	ldr	r2, [pc, #88]	; (8001294 <BSP_GYRO_Init+0x7c>)
 800123c:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8001242:	2330      	movs	r3, #48	; 0x30
 8001244:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800124e:	2340      	movs	r3, #64	; 0x40
 8001250:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8001256:	230c      	movs	r3, #12
 8001258:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800125a:	7aba      	ldrb	r2, [r7, #10]
 800125c:	797b      	ldrb	r3, [r7, #5]
 800125e:	4313      	orrs	r3, r2
 8001260:	b2db      	uxtb	r3, r3
 8001262:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001264:	7a3b      	ldrb	r3, [r7, #8]
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	b2db      	uxtb	r3, r3
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	b21a      	sxth	r2, r3
 8001270:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001274:	4313      	orrs	r3, r2
 8001276:	b21b      	sxth	r3, r3
 8001278:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <BSP_GYRO_Init+0x80>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	89ba      	ldrh	r2, [r7, #12]
 8001282:	4610      	mov	r0, r2
 8001284:	4798      	blx	r3
    
    ret = GYRO_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800128a:	7bfb      	ldrb	r3, [r7, #15]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000090 	.word	0x20000090
 8001298:	2000030c 	.word	0x2000030c

0800129c <BSP_GYRO_DeInit>:

/**
  * @brief  DeInitialize Gyroscope.
  */
void BSP_GYRO_DeInit(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* DeInitialize the Gyroscope IO interfaces */
  if(GyroscopeDrv != NULL)
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <BSP_GYRO_DeInit+0x24>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d008      	beq.n	80012ba <BSP_GYRO_DeInit+0x1e>
  {
    if(GyroscopeDrv->DeInit!= NULL)
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <BSP_GYRO_DeInit+0x24>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <BSP_GYRO_DeInit+0x1e>
    {
      GyroscopeDrv->DeInit();
 80012b2:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <BSP_GYRO_DeInit+0x24>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	4798      	blx	r3
    }
  }
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	2000030c 	.word	0x2000030c

080012c4 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <BSP_GYRO_GetXYZ+0x2c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d009      	beq.n	80012e8 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <BSP_GYRO_GetXYZ+0x2c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d004      	beq.n	80012e8 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 80012de:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <BSP_GYRO_GetXYZ+0x2c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	4798      	blx	r3
    }
  }
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2000030c 	.word	0x2000030c

080012f4 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <BSP_HSENSOR_Init+0x38>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	20be      	movs	r0, #190	; 0xbe
 8001300:	4798      	blx	r3
 8001302:	4603      	mov	r3, r0
 8001304:	2bbc      	cmp	r3, #188	; 0xbc
 8001306:	d002      	beq.n	800130e <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	e009      	b.n	8001322 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <BSP_HSENSOR_Init+0x3c>)
 8001310:	4a06      	ldr	r2, [pc, #24]	; (800132c <BSP_HSENSOR_Init+0x38>)
 8001312:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <BSP_HSENSOR_Init+0x3c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	20be      	movs	r0, #190	; 0xbe
 800131c:	4798      	blx	r3
    ret = HSENSOR_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001322:	687b      	ldr	r3, [r7, #4]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000000 	.word	0x20000000
 8001330:	20000310 	.word	0x20000310

08001334 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <BSP_HSENSOR_ReadHumidity+0x18>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	20be      	movs	r0, #190	; 0xbe
 8001340:	4798      	blx	r3
 8001342:	eef0 7a40 	vmov.f32	s15, s0
}
 8001346:	eeb0 0a67 	vmov.f32	s0, s15
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000310 	.word	0x20000310

08001350 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <BSP_MAGNETO_Init+0x50>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	4798      	blx	r3
 8001360:	4603      	mov	r3, r0
 8001362:	2b3d      	cmp	r3, #61	; 0x3d
 8001364:	d002      	beq.n	800136c <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	71fb      	strb	r3, [r7, #7]
 800136a:	e013      	b.n	8001394 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <BSP_MAGNETO_Init+0x54>)
 800136e:	4a0c      	ldr	r2, [pc, #48]	; (80013a0 <BSP_MAGNETO_Init+0x50>)
 8001370:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8001372:	2358      	movs	r3, #88	; 0x58
 8001374:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8001376:	2300      	movs	r3, #0
 8001378:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 800137a:	2300      	movs	r3, #0
 800137c:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 800137e:	2308      	movs	r3, #8
 8001380:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8001382:	2340      	movs	r3, #64	; 0x40
 8001384:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <BSP_MAGNETO_Init+0x54>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	463a      	mov	r2, r7
 800138e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001392:	4798      	blx	r3
  } 

  return ret;  
 8001394:	79fb      	ldrb	r3, [r7, #7]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	2000001c 	.word	0x2000001c
 80013a4:	20000314 	.word	0x20000314

080013a8 <BSP_MAGNETO_DeInit>:

/**
  * @brief  DeInitialize the MAGNETO.
  */
void BSP_MAGNETO_DeInit(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* DeInitialize the  magnetometer IO interfaces */
  if(MagnetoDrv != NULL)
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <BSP_MAGNETO_DeInit+0x24>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d008      	beq.n	80013c6 <BSP_MAGNETO_DeInit+0x1e>
  {
    if(MagnetoDrv->DeInit != NULL)
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <BSP_MAGNETO_DeInit+0x24>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <BSP_MAGNETO_DeInit+0x1e>
    {
      MagnetoDrv->DeInit();
 80013be:	4b03      	ldr	r3, [pc, #12]	; (80013cc <BSP_MAGNETO_DeInit+0x24>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	4798      	blx	r3
    }
  }
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000314 	.word	0x20000314

080013d0 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <BSP_MAGNETO_GetXYZ+0x2c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d009      	beq.n	80013f4 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <BSP_MAGNETO_GetXYZ+0x2c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d004      	beq.n	80013f4 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 80013ea:	4b04      	ldr	r3, [pc, #16]	; (80013fc <BSP_MAGNETO_GetXYZ+0x2c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	4798      	blx	r3
    }
  }
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000314 	.word	0x20000314

08001400 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <BSP_PSENSOR_Init+0x38>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	20ba      	movs	r0, #186	; 0xba
 800140c:	4798      	blx	r3
 800140e:	4603      	mov	r3, r0
 8001410:	2bb1      	cmp	r3, #177	; 0xb1
 8001412:	d002      	beq.n	800141a <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	e009      	b.n	800142e <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <BSP_PSENSOR_Init+0x3c>)
 800141c:	4a06      	ldr	r2, [pc, #24]	; (8001438 <BSP_PSENSOR_Init+0x38>)
 800141e:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <BSP_PSENSOR_Init+0x3c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	20ba      	movs	r0, #186	; 0xba
 8001428:	4798      	blx	r3
    ret = PSENSOR_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800142e:	687b      	ldr	r3, [r7, #4]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000050 	.word	0x20000050
 800143c:	20000318 	.word	0x20000318

08001440 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <BSP_PSENSOR_ReadPressure+0x18>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	20ba      	movs	r0, #186	; 0xba
 800144c:	4798      	blx	r3
 800144e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001452:	eeb0 0a67 	vmov.f32	s0, s15
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000318 	.word	0x20000318

0800145c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <BSP_TSENSOR_Init+0x30>)
 8001468:	4a09      	ldr	r2, [pc, #36]	; (8001490 <BSP_TSENSOR_Init+0x34>)
 800146a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800146c:	f7ff fe0a 	bl	8001084 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <BSP_TSENSOR_Init+0x30>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2100      	movs	r1, #0
 8001478:	20be      	movs	r0, #190	; 0xbe
 800147a:	4798      	blx	r3

  ret = TSENSOR_OK;
 800147c:	2300      	movs	r3, #0
 800147e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001480:	79fb      	ldrb	r3, [r7, #7]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000031c 	.word	0x2000031c
 8001490:	2000000c 	.word	0x2000000c

08001494 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <BSP_TSENSOR_ReadTemp+0x18>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	20be      	movs	r0, #190	; 0xbe
 80014a0:	4798      	blx	r3
 80014a2:	eef0 7a40 	vmov.f32	s15, s0
}
 80014a6:	eeb0 0a67 	vmov.f32	s0, s15
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	2000031c 	.word	0x2000031c

080014b0 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2120      	movs	r1, #32
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fe03 	bl	80010cc <SENSOR_IO_Read>
 80014c6:	4603      	mov	r3, r0
 80014c8:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	f023 0304 	bic.w	r3, r3, #4
 80014d0:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	f023 0303 	bic.w	r3, r3, #3
 80014e0:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014f0:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	7bfa      	ldrb	r2, [r7, #15]
 80014f8:	2120      	movs	r1, #32
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fdcc 	bl	8001098 <SENSOR_IO_Write>
}
 8001500:	bf00      	nop
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001512:	2300      	movs	r3, #0
 8001514:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8001516:	f7ff fdb5 	bl	8001084 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	210f      	movs	r1, #15
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fdd3 	bl	80010cc <SENSOR_IO_Read>
 8001526:	4603      	mov	r3, r0
 8001528:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800152a:	7bfb      	ldrb	r3, [r7, #15]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	b2d8      	uxtb	r0, r3
 8001542:	f107 020c 	add.w	r2, r7, #12
 8001546:	2302      	movs	r3, #2
 8001548:	21b0      	movs	r1, #176	; 0xb0
 800154a:	f7ff fddd 	bl	8001108 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800154e:	7b3b      	ldrb	r3, [r7, #12]
 8001550:	085b      	lsrs	r3, r3, #1
 8001552:	b2db      	uxtb	r3, r3
 8001554:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8001556:	7b7b      	ldrb	r3, [r7, #13]
 8001558:	085b      	lsrs	r3, r3, #1
 800155a:	b2db      	uxtb	r3, r3
 800155c:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	b2d8      	uxtb	r0, r3
 8001562:	f107 020c 	add.w	r2, r7, #12
 8001566:	2302      	movs	r3, #2
 8001568:	21b6      	movs	r1, #182	; 0xb6
 800156a:	f7ff fdcd 	bl	8001108 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800156e:	7b7b      	ldrb	r3, [r7, #13]
 8001570:	021b      	lsls	r3, r3, #8
 8001572:	b21a      	sxth	r2, r3
 8001574:	7b3b      	ldrb	r3, [r7, #12]
 8001576:	b21b      	sxth	r3, r3
 8001578:	4313      	orrs	r3, r2
 800157a:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 800157c:	88fb      	ldrh	r3, [r7, #6]
 800157e:	b2d8      	uxtb	r0, r3
 8001580:	f107 020c 	add.w	r2, r7, #12
 8001584:	2302      	movs	r3, #2
 8001586:	21ba      	movs	r1, #186	; 0xba
 8001588:	f7ff fdbe 	bl	8001108 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800158c:	7b7b      	ldrb	r3, [r7, #13]
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	b21a      	sxth	r2, r3
 8001592:	7b3b      	ldrb	r3, [r7, #12]
 8001594:	b21b      	sxth	r3, r3
 8001596:	4313      	orrs	r3, r2
 8001598:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	b2d8      	uxtb	r0, r3
 800159e:	f107 020c 	add.w	r2, r7, #12
 80015a2:	2302      	movs	r3, #2
 80015a4:	21a8      	movs	r1, #168	; 0xa8
 80015a6:	f7ff fdaf 	bl	8001108 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80015aa:	7b7b      	ldrb	r3, [r7, #13]
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	7b3b      	ldrb	r3, [r7, #12]
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	4313      	orrs	r3, r2
 80015b6:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80015b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015bc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	ee07 3a90 	vmov	s15, r3
 80015c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ca:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80015ce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	ee07 3a90 	vmov	s15, r3
 80015d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015dc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80015e0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80015e4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	ee07 3a90 	vmov	s15, r3
 80015ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015f6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80015fa:	ee07 3a90 	vmov	s15, r3
 80015fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001606:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800160a:	edd7 7a04 	vldr	s15, [r7, #16]
 800160e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001612:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001616:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800161a:	edd7 7a04 	vldr	s15, [r7, #16]
 800161e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001664 <HTS221_H_ReadHumidity+0x130>
 8001622:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162a:	dd01      	ble.n	8001630 <HTS221_H_ReadHumidity+0xfc>
 800162c:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <HTS221_H_ReadHumidity+0x134>)
 800162e:	e00a      	b.n	8001646 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8001630:	edd7 7a04 	vldr	s15, [r7, #16]
 8001634:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163c:	d502      	bpl.n	8001644 <HTS221_H_ReadHumidity+0x110>
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	e000      	b.n	8001646 <HTS221_H_ReadHumidity+0x112>
 8001644:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001646:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001648:	edd7 7a04 	vldr	s15, [r7, #16]
 800164c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001650:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001654:	eef0 7a66 	vmov.f32	s15, s13
}
 8001658:	eeb0 0a67 	vmov.f32	s0, s15
 800165c:	3720      	adds	r7, #32
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	447a0000 	.word	0x447a0000
 8001668:	447a0000 	.word	0x447a0000

0800166c <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2120      	movs	r1, #32
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fd24 	bl	80010cc <SENSOR_IO_Read>
 8001684:	4603      	mov	r3, r0
 8001686:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	f023 0304 	bic.w	r3, r3, #4
 800168e:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	f043 0304 	orr.w	r3, r3, #4
 8001696:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	f023 0303 	bic.w	r3, r3, #3
 800169e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016ae:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	7bfa      	ldrb	r2, [r7, #15]
 80016b6:	2120      	movs	r1, #32
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fced 	bl	8001098 <SENSOR_IO_Write>
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b088      	sub	sp, #32
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	b2d8      	uxtb	r0, r3
 80016d4:	f107 0208 	add.w	r2, r7, #8
 80016d8:	2302      	movs	r3, #2
 80016da:	21b2      	movs	r1, #178	; 0xb2
 80016dc:	f7ff fd14 	bl	8001108 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80016e0:	88fb      	ldrh	r3, [r7, #6]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2135      	movs	r1, #53	; 0x35
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fcf0 	bl	80010cc <SENSOR_IO_Read>
 80016ec:	4603      	mov	r3, r0
 80016ee:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80016f0:	7ffb      	ldrb	r3, [r7, #31]
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	b21b      	sxth	r3, r3
 80016f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016fa:	b21a      	sxth	r2, r3
 80016fc:	7a3b      	ldrb	r3, [r7, #8]
 80016fe:	b21b      	sxth	r3, r3
 8001700:	4313      	orrs	r3, r2
 8001702:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001704:	7ffb      	ldrb	r3, [r7, #31]
 8001706:	019b      	lsls	r3, r3, #6
 8001708:	b21b      	sxth	r3, r3
 800170a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800170e:	b21a      	sxth	r2, r3
 8001710:	7a7b      	ldrb	r3, [r7, #9]
 8001712:	b21b      	sxth	r3, r3
 8001714:	4313      	orrs	r3, r2
 8001716:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001718:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800171c:	10db      	asrs	r3, r3, #3
 800171e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001720:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001724:	10db      	asrs	r3, r3, #3
 8001726:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001728:	88fb      	ldrh	r3, [r7, #6]
 800172a:	b2d8      	uxtb	r0, r3
 800172c:	f107 0208 	add.w	r2, r7, #8
 8001730:	2304      	movs	r3, #4
 8001732:	21bc      	movs	r1, #188	; 0xbc
 8001734:	f7ff fce8 	bl	8001108 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001738:	7a7b      	ldrb	r3, [r7, #9]
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	b21a      	sxth	r2, r3
 800173e:	7a3b      	ldrb	r3, [r7, #8]
 8001740:	b21b      	sxth	r3, r3
 8001742:	4313      	orrs	r3, r2
 8001744:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001746:	7afb      	ldrb	r3, [r7, #11]
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	b21a      	sxth	r2, r3
 800174c:	7abb      	ldrb	r3, [r7, #10]
 800174e:	b21b      	sxth	r3, r3
 8001750:	4313      	orrs	r3, r2
 8001752:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001754:	88fb      	ldrh	r3, [r7, #6]
 8001756:	b2d8      	uxtb	r0, r3
 8001758:	f107 0208 	add.w	r2, r7, #8
 800175c:	2302      	movs	r3, #2
 800175e:	21aa      	movs	r1, #170	; 0xaa
 8001760:	f7ff fcd2 	bl	8001108 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001764:	7a7b      	ldrb	r3, [r7, #9]
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	b21a      	sxth	r2, r3
 800176a:	7a3b      	ldrb	r3, [r7, #8]
 800176c:	b21b      	sxth	r3, r3
 800176e:	4313      	orrs	r3, r2
 8001770:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001772:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001776:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	ee07 3a90 	vmov	s15, r3
 8001780:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001784:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001788:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	ee07 3a90 	vmov	s15, r3
 8001792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001796:	ee67 6a27 	vmul.f32	s13, s14, s15
 800179a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800179e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017b0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017b4:	ee07 3a90 	vmov	s15, r3
 80017b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c0:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	ee07 3a90 	vmov	s15, r3
}
 80017ca:	eeb0 0a67 	vmov.f32	s0, s15
 80017ce:	3720      	adds	r7, #32
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	463b      	mov	r3, r7
 80017dc:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 80017e0:	783b      	ldrb	r3, [r7, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	2120      	movs	r1, #32
 80017e6:	203c      	movs	r0, #60	; 0x3c
 80017e8:	f7ff fc56 	bl	8001098 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 80017ec:	787b      	ldrb	r3, [r7, #1]
 80017ee:	461a      	mov	r2, r3
 80017f0:	2121      	movs	r1, #33	; 0x21
 80017f2:	203c      	movs	r0, #60	; 0x3c
 80017f4:	f7ff fc50 	bl	8001098 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 80017f8:	78bb      	ldrb	r3, [r7, #2]
 80017fa:	461a      	mov	r2, r3
 80017fc:	2122      	movs	r1, #34	; 0x22
 80017fe:	203c      	movs	r0, #60	; 0x3c
 8001800:	f7ff fc4a 	bl	8001098 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	461a      	mov	r2, r3
 8001808:	2123      	movs	r1, #35	; 0x23
 800180a:	203c      	movs	r0, #60	; 0x3c
 800180c:	f7ff fc44 	bl	8001098 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8001810:	793b      	ldrb	r3, [r7, #4]
 8001812:	461a      	mov	r2, r3
 8001814:	2124      	movs	r1, #36	; 0x24
 8001816:	203c      	movs	r0, #60	; 0x3c
 8001818:	f7ff fc3e 	bl	8001098 <SENSOR_IO_Write>
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800182a:	2300      	movs	r3, #0
 800182c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800182e:	2122      	movs	r1, #34	; 0x22
 8001830:	203c      	movs	r0, #60	; 0x3c
 8001832:	f7ff fc4b 	bl	80010cc <SENSOR_IO_Read>
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	f023 0303 	bic.w	r3, r3, #3
 8001840:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	f043 0303 	orr.w	r3, r3, #3
 8001848:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	461a      	mov	r2, r3
 800184e:	2122      	movs	r1, #34	; 0x22
 8001850:	203c      	movs	r0, #60	; 0x3c
 8001852:	f7ff fc21 	bl	8001098 <SENSOR_IO_Write>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001862:	f7ff fc0f 	bl	8001084 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8001866:	210f      	movs	r1, #15
 8001868:	203c      	movs	r0, #60	; 0x3c
 800186a:	f7ff fc2f 	bl	80010cc <SENSOR_IO_Read>
 800186e:	4603      	mov	r3, r0
}
 8001870:	4618      	mov	r0, r3
 8001872:	bd80      	pop	{r7, pc}

08001874 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001882:	2122      	movs	r1, #34	; 0x22
 8001884:	203c      	movs	r0, #60	; 0x3c
 8001886:	f7ff fc21 	bl	80010cc <SENSOR_IO_Read>
 800188a:	4603      	mov	r3, r0
 800188c:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	f023 0320 	bic.w	r3, r3, #32
 8001894:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	f043 0320 	orr.w	r3, r3, #32
 80018a2:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	461a      	mov	r2, r3
 80018a8:	2122      	movs	r1, #34	; 0x22
 80018aa:	203c      	movs	r0, #60	; 0x3c
 80018ac:	f7ff fbf4 	bl	8001098 <SENSOR_IO_Write>
}
 80018b0:	bf00      	nop
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 80018ce:	2121      	movs	r1, #33	; 0x21
 80018d0:	203c      	movs	r0, #60	; 0x3c
 80018d2:	f7ff fbfb 	bl	80010cc <SENSOR_IO_Read>
 80018d6:	4603      	mov	r3, r0
 80018d8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 80018da:	f107 0208 	add.w	r2, r7, #8
 80018de:	2306      	movs	r3, #6
 80018e0:	21a8      	movs	r1, #168	; 0xa8
 80018e2:	203c      	movs	r0, #60	; 0x3c
 80018e4:	f7ff fc10 	bl	8001108 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80018e8:	2300      	movs	r3, #0
 80018ea:	77fb      	strb	r3, [r7, #31]
 80018ec:	e01c      	b.n	8001928 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80018ee:	7ffb      	ldrb	r3, [r7, #31]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	3301      	adds	r3, #1
 80018f4:	3320      	adds	r3, #32
 80018f6:	443b      	add	r3, r7
 80018f8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	021b      	lsls	r3, r3, #8
 8001900:	b29a      	uxth	r2, r3
 8001902:	7ffb      	ldrb	r3, [r7, #31]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	3320      	adds	r3, #32
 8001908:	443b      	add	r3, r7
 800190a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800190e:	b29b      	uxth	r3, r3
 8001910:	4413      	add	r3, r2
 8001912:	b29a      	uxth	r2, r3
 8001914:	7ffb      	ldrb	r3, [r7, #31]
 8001916:	b212      	sxth	r2, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	3320      	adds	r3, #32
 800191c:	443b      	add	r3, r7
 800191e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001922:	7ffb      	ldrb	r3, [r7, #31]
 8001924:	3301      	adds	r3, #1
 8001926:	77fb      	strb	r3, [r7, #31]
 8001928:	7ffb      	ldrb	r3, [r7, #31]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d9df      	bls.n	80018ee <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 800192e:	7dfb      	ldrb	r3, [r7, #23]
 8001930:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001934:	2b60      	cmp	r3, #96	; 0x60
 8001936:	d013      	beq.n	8001960 <LIS3MDL_MagReadXYZ+0xa8>
 8001938:	2b60      	cmp	r3, #96	; 0x60
 800193a:	dc14      	bgt.n	8001966 <LIS3MDL_MagReadXYZ+0xae>
 800193c:	2b40      	cmp	r3, #64	; 0x40
 800193e:	d00c      	beq.n	800195a <LIS3MDL_MagReadXYZ+0xa2>
 8001940:	2b40      	cmp	r3, #64	; 0x40
 8001942:	dc10      	bgt.n	8001966 <LIS3MDL_MagReadXYZ+0xae>
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <LIS3MDL_MagReadXYZ+0x96>
 8001948:	2b20      	cmp	r3, #32
 800194a:	d003      	beq.n	8001954 <LIS3MDL_MagReadXYZ+0x9c>
 800194c:	e00b      	b.n	8001966 <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 800194e:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <LIS3MDL_MagReadXYZ+0xfc>)
 8001950:	61bb      	str	r3, [r7, #24]
    break;
 8001952:	e008      	b.n	8001966 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8001954:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <LIS3MDL_MagReadXYZ+0x100>)
 8001956:	61bb      	str	r3, [r7, #24]
    break;
 8001958:	e005      	b.n	8001966 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 800195a:	4b18      	ldr	r3, [pc, #96]	; (80019bc <LIS3MDL_MagReadXYZ+0x104>)
 800195c:	61bb      	str	r3, [r7, #24]
    break;
 800195e:	e002      	b.n	8001966 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8001960:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <LIS3MDL_MagReadXYZ+0x108>)
 8001962:	61bb      	str	r3, [r7, #24]
    break;    
 8001964:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8001966:	2300      	movs	r3, #0
 8001968:	77fb      	strb	r3, [r7, #31]
 800196a:	e01a      	b.n	80019a2 <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800196c:	7ffb      	ldrb	r3, [r7, #31]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	3320      	adds	r3, #32
 8001972:	443b      	add	r3, r7
 8001974:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001978:	ee07 3a90 	vmov	s15, r3
 800197c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001980:	edd7 7a06 	vldr	s15, [r7, #24]
 8001984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001988:	7ffb      	ldrb	r3, [r7, #31]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	4413      	add	r3, r2
 8001990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001994:	ee17 2a90 	vmov	r2, s15
 8001998:	b212      	sxth	r2, r2
 800199a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800199c:	7ffb      	ldrb	r3, [r7, #31]
 800199e:	3301      	adds	r3, #1
 80019a0:	77fb      	strb	r3, [r7, #31]
 80019a2:	7ffb      	ldrb	r3, [r7, #31]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d9e1      	bls.n	800196c <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	3720      	adds	r7, #32
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	3e0f5c29 	.word	0x3e0f5c29
 80019b8:	3e947ae1 	.word	0x3e947ae1
 80019bc:	3edc28f6 	.word	0x3edc28f6
 80019c0:	3f147ae1 	.word	0x3f147ae1

080019c4 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 f879 	bl	8001ac8 <LPS22HB_Init>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 80019de:	b580      	push	{r7, lr}
 80019e0:	b084      	sub	sp, #16
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	4603      	mov	r3, r0
 80019e6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80019e8:	2300      	movs	r3, #0
 80019ea:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 80019ec:	f7ff fb4a 	bl	8001084 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	210f      	movs	r1, #15
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fb68 	bl	80010cc <SENSOR_IO_Read>
 80019fc:	4603      	mov	r3, r0
 80019fe:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	74fb      	strb	r3, [r7, #19]
 8001a1e:	e013      	b.n	8001a48 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	7cfb      	ldrb	r3, [r7, #19]
 8001a26:	3328      	adds	r3, #40	; 0x28
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	7cfc      	ldrb	r4, [r7, #19]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4610      	mov	r0, r2
 8001a30:	f7ff fb4c 	bl	80010cc <SENSOR_IO_Read>
 8001a34:	4603      	mov	r3, r0
 8001a36:	461a      	mov	r2, r3
 8001a38:	f104 0318 	add.w	r3, r4, #24
 8001a3c:	443b      	add	r3, r7
 8001a3e:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8001a42:	7cfb      	ldrb	r3, [r7, #19]
 8001a44:	3301      	adds	r3, #1
 8001a46:	74fb      	strb	r3, [r7, #19]
 8001a48:	7cfb      	ldrb	r3, [r7, #19]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d9e8      	bls.n	8001a20 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	74fb      	strb	r3, [r7, #19]
 8001a52:	e00f      	b.n	8001a74 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8001a54:	7cfb      	ldrb	r3, [r7, #19]
 8001a56:	3318      	adds	r3, #24
 8001a58:	443b      	add	r3, r7
 8001a5a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	7cfb      	ldrb	r3, [r7, #19]
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8001a6e:	7cfb      	ldrb	r3, [r7, #19]
 8001a70:	3301      	adds	r3, #1
 8001a72:	74fb      	strb	r3, [r7, #19]
 8001a74:	7cfb      	ldrb	r3, [r7, #19]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d9ec      	bls.n	8001a54 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a8a:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2264      	movs	r2, #100	; 0x64
 8001a94:	fb02 f303 	mul.w	r3, r2, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	da01      	bge.n	8001aa0 <LPS22HB_P_ReadPressure+0x94>
 8001a9c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001aa0:	131b      	asrs	r3, r3, #12
 8001aa2:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	ee07 3a90 	vmov	s15, r3
 8001aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aae:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001ac4 <LPS22HB_P_ReadPressure+0xb8>
 8001ab2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001ab6:	eef0 7a66 	vmov.f32	s15, s13
}
 8001aba:	eeb0 0a67 	vmov.f32	s0, s15
 8001abe:	371c      	adds	r7, #28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd90      	pop	{r4, r7, pc}
 8001ac4:	42c80000 	.word	0x42c80000

08001ac8 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	211a      	movs	r1, #26
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff faf7 	bl	80010cc <SENSOR_IO_Read>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	f023 0301 	bic.w	r3, r3, #1
 8001ae8:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	7bfa      	ldrb	r2, [r7, #15]
 8001af8:	211a      	movs	r1, #26
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff facc 	bl	8001098 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2110      	movs	r1, #16
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fae0 	bl	80010cc <SENSOR_IO_Read>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b16:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001b1e:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
 8001b22:	f023 0302 	bic.w	r3, r3, #2
 8001b26:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	f043 0302 	orr.w	r3, r3, #2
 8001b2e:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	7bfa      	ldrb	r2, [r7, #15]
 8001b36:	2110      	movs	r1, #16
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff faad 	bl	8001098 <SENSOR_IO_Write>
}  
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b084      	sub	sp, #16
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001b50:	2300      	movs	r3, #0
 8001b52:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001b54:	2110      	movs	r1, #16
 8001b56:	20d4      	movs	r0, #212	; 0xd4
 8001b58:	f7ff fab8 	bl	80010cc <SENSOR_IO_Read>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001b64:	7bbb      	ldrb	r3, [r7, #14]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001b6c:	7bba      	ldrb	r2, [r7, #14]
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8001b74:	7bbb      	ldrb	r3, [r7, #14]
 8001b76:	461a      	mov	r2, r3
 8001b78:	2110      	movs	r1, #16
 8001b7a:	20d4      	movs	r0, #212	; 0xd4
 8001b7c:	f7ff fa8c 	bl	8001098 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001b80:	2112      	movs	r1, #18
 8001b82:	20d4      	movs	r0, #212	; 0xd4
 8001b84:	f7ff faa2 	bl	80010cc <SENSOR_IO_Read>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	0a1b      	lsrs	r3, r3, #8
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001b94:	7bbb      	ldrb	r3, [r7, #14]
 8001b96:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001b9a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001b9c:	7bba      	ldrb	r2, [r7, #14]
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001ba4:	7bbb      	ldrb	r3, [r7, #14]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	2112      	movs	r1, #18
 8001baa:	20d4      	movs	r0, #212	; 0xd4
 8001bac:	f7ff fa74 	bl	8001098 <SENSOR_IO_Write>
}
 8001bb0:	bf00      	nop
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001bc2:	2110      	movs	r1, #16
 8001bc4:	20d4      	movs	r0, #212	; 0xd4
 8001bc6:	f7ff fa81 	bl	80010cc <SENSOR_IO_Read>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	2110      	movs	r1, #16
 8001bdc:	20d4      	movs	r0, #212	; 0xd4
 8001bde:	f7ff fa5b 	bl	8001098 <SENSOR_IO_Write>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8001bea:	b580      	push	{r7, lr}
 8001bec:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8001bee:	f7ff fa49 	bl	8001084 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8001bf2:	210f      	movs	r1, #15
 8001bf4:	20d4      	movs	r0, #212	; 0xd4
 8001bf6:	f7ff fa69 	bl	80010cc <SENSOR_IO_Read>
 8001bfa:	4603      	mov	r3, r0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8001c0e:	2115      	movs	r1, #21
 8001c10:	20d4      	movs	r0, #212	; 0xd4
 8001c12:	f7ff fa5b 	bl	80010cc <SENSOR_IO_Read>
 8001c16:	4603      	mov	r3, r0
 8001c18:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
 8001c1c:	f023 0310 	bic.w	r3, r3, #16
 8001c20:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	f043 0310 	orr.w	r3, r3, #16
 8001c2e:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	461a      	mov	r2, r3
 8001c34:	2115      	movs	r1, #21
 8001c36:	20d4      	movs	r0, #212	; 0xd4
 8001c38:	f7ff fa2e 	bl	8001098 <SENSOR_IO_Write>
}
 8001c3c:	bf00      	nop
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001c5a:	2110      	movs	r1, #16
 8001c5c:	20d4      	movs	r0, #212	; 0xd4
 8001c5e:	f7ff fa35 	bl	80010cc <SENSOR_IO_Read>
 8001c62:	4603      	mov	r3, r0
 8001c64:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001c66:	f107 0208 	add.w	r2, r7, #8
 8001c6a:	2306      	movs	r3, #6
 8001c6c:	2128      	movs	r1, #40	; 0x28
 8001c6e:	20d4      	movs	r0, #212	; 0xd4
 8001c70:	f7ff fa4a 	bl	8001108 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001c74:	2300      	movs	r3, #0
 8001c76:	77fb      	strb	r3, [r7, #31]
 8001c78:	e01c      	b.n	8001cb4 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001c7a:	7ffb      	ldrb	r3, [r7, #31]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	3301      	adds	r3, #1
 8001c80:	3320      	adds	r3, #32
 8001c82:	443b      	add	r3, r7
 8001c84:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	021b      	lsls	r3, r3, #8
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	7ffb      	ldrb	r3, [r7, #31]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	3320      	adds	r3, #32
 8001c94:	443b      	add	r3, r7
 8001c96:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	7ffb      	ldrb	r3, [r7, #31]
 8001ca2:	b212      	sxth	r2, r2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	3320      	adds	r3, #32
 8001ca8:	443b      	add	r3, r7
 8001caa:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001cae:	7ffb      	ldrb	r3, [r7, #31]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	77fb      	strb	r3, [r7, #31]
 8001cb4:	7ffb      	ldrb	r3, [r7, #31]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d9df      	bls.n	8001c7a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8001cba:	7dfb      	ldrb	r3, [r7, #23]
 8001cbc:	f003 030c 	and.w	r3, r3, #12
 8001cc0:	2b0c      	cmp	r3, #12
 8001cc2:	d829      	bhi.n	8001d18 <LSM6DSL_AccReadXYZ+0xd4>
 8001cc4:	a201      	add	r2, pc, #4	; (adr r2, 8001ccc <LSM6DSL_AccReadXYZ+0x88>)
 8001cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cca:	bf00      	nop
 8001ccc:	08001d01 	.word	0x08001d01
 8001cd0:	08001d19 	.word	0x08001d19
 8001cd4:	08001d19 	.word	0x08001d19
 8001cd8:	08001d19 	.word	0x08001d19
 8001cdc:	08001d13 	.word	0x08001d13
 8001ce0:	08001d19 	.word	0x08001d19
 8001ce4:	08001d19 	.word	0x08001d19
 8001ce8:	08001d19 	.word	0x08001d19
 8001cec:	08001d07 	.word	0x08001d07
 8001cf0:	08001d19 	.word	0x08001d19
 8001cf4:	08001d19 	.word	0x08001d19
 8001cf8:	08001d19 	.word	0x08001d19
 8001cfc:	08001d0d 	.word	0x08001d0d
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8001d00:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <LSM6DSL_AccReadXYZ+0x120>)
 8001d02:	61bb      	str	r3, [r7, #24]
    break;
 8001d04:	e008      	b.n	8001d18 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8001d06:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <LSM6DSL_AccReadXYZ+0x124>)
 8001d08:	61bb      	str	r3, [r7, #24]
    break;
 8001d0a:	e005      	b.n	8001d18 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8001d0c:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <LSM6DSL_AccReadXYZ+0x128>)
 8001d0e:	61bb      	str	r3, [r7, #24]
    break;
 8001d10:	e002      	b.n	8001d18 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8001d12:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <LSM6DSL_AccReadXYZ+0x12c>)
 8001d14:	61bb      	str	r3, [r7, #24]
    break;    
 8001d16:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001d18:	2300      	movs	r3, #0
 8001d1a:	77fb      	strb	r3, [r7, #31]
 8001d1c:	e01a      	b.n	8001d54 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001d1e:	7ffb      	ldrb	r3, [r7, #31]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	3320      	adds	r3, #32
 8001d24:	443b      	add	r3, r7
 8001d26:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001d2a:	ee07 3a90 	vmov	s15, r3
 8001d2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d32:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d3a:	7ffb      	ldrb	r3, [r7, #31]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d46:	ee17 2a90 	vmov	r2, s15
 8001d4a:	b212      	sxth	r2, r2
 8001d4c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001d4e:	7ffb      	ldrb	r3, [r7, #31]
 8001d50:	3301      	adds	r3, #1
 8001d52:	77fb      	strb	r3, [r7, #31]
 8001d54:	7ffb      	ldrb	r3, [r7, #31]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d9e1      	bls.n	8001d1e <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	bf00      	nop
 8001d5e:	3720      	adds	r7, #32
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	3d79db23 	.word	0x3d79db23
 8001d68:	3df9db23 	.word	0x3df9db23
 8001d6c:	3e79db23 	.word	0x3e79db23
 8001d70:	3ef9db23 	.word	0x3ef9db23

08001d74 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001d82:	2111      	movs	r1, #17
 8001d84:	20d4      	movs	r0, #212	; 0xd4
 8001d86:	f7ff f9a1 	bl	80010cc <SENSOR_IO_Read>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001d92:	7bbb      	ldrb	r3, [r7, #14]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001d9a:	7bba      	ldrb	r2, [r7, #14]
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8001da2:	7bbb      	ldrb	r3, [r7, #14]
 8001da4:	461a      	mov	r2, r3
 8001da6:	2111      	movs	r1, #17
 8001da8:	20d4      	movs	r0, #212	; 0xd4
 8001daa:	f7ff f975 	bl	8001098 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001dae:	2112      	movs	r1, #18
 8001db0:	20d4      	movs	r0, #212	; 0xd4
 8001db2:	f7ff f98b 	bl	80010cc <SENSOR_IO_Read>
 8001db6:	4603      	mov	r3, r0
 8001db8:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001dc2:	7bbb      	ldrb	r3, [r7, #14]
 8001dc4:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001dc8:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001dca:	7bba      	ldrb	r2, [r7, #14]
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001dd2:	7bbb      	ldrb	r3, [r7, #14]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	2112      	movs	r1, #18
 8001dd8:	20d4      	movs	r0, #212	; 0xd4
 8001dda:	f7ff f95d 	bl	8001098 <SENSOR_IO_Write>
}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001dec:	2300      	movs	r3, #0
 8001dee:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001df0:	2111      	movs	r1, #17
 8001df2:	20d4      	movs	r0, #212	; 0xd4
 8001df4:	f7ff f96a 	bl	80010cc <SENSOR_IO_Read>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	461a      	mov	r2, r3
 8001e08:	2111      	movs	r1, #17
 8001e0a:	20d4      	movs	r0, #212	; 0xd4
 8001e0c:	f7ff f944 	bl	8001098 <SENSOR_IO_Write>
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001e1c:	f7ff f932 	bl	8001084 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8001e20:	210f      	movs	r1, #15
 8001e22:	20d4      	movs	r0, #212	; 0xd4
 8001e24:	f7ff f952 	bl	80010cc <SENSOR_IO_Read>
 8001e28:	4603      	mov	r3, r0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b084      	sub	sp, #16
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8001e3c:	2116      	movs	r1, #22
 8001e3e:	20d4      	movs	r0, #212	; 0xd4
 8001e40:	f7ff f944 	bl	80010cc <SENSOR_IO_Read>
 8001e44:	4603      	mov	r3, r0
 8001e46:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e4e:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001e50:	88fb      	ldrh	r3, [r7, #6]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e5c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	461a      	mov	r2, r3
 8001e62:	2116      	movs	r1, #22
 8001e64:	20d4      	movs	r0, #212	; 0xd4
 8001e66:	f7ff f917 	bl	8001098 <SENSOR_IO_Write>
}
 8001e6a:	bf00      	nop
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001e8a:	2111      	movs	r1, #17
 8001e8c:	20d4      	movs	r0, #212	; 0xd4
 8001e8e:	f7ff f91d 	bl	80010cc <SENSOR_IO_Read>
 8001e92:	4603      	mov	r3, r0
 8001e94:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8001e96:	f107 0208 	add.w	r2, r7, #8
 8001e9a:	2306      	movs	r3, #6
 8001e9c:	2122      	movs	r1, #34	; 0x22
 8001e9e:	20d4      	movs	r0, #212	; 0xd4
 8001ea0:	f7ff f932 	bl	8001108 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	77fb      	strb	r3, [r7, #31]
 8001ea8:	e01c      	b.n	8001ee4 <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001eaa:	7ffb      	ldrb	r3, [r7, #31]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	3301      	adds	r3, #1
 8001eb0:	3320      	adds	r3, #32
 8001eb2:	443b      	add	r3, r7
 8001eb4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	021b      	lsls	r3, r3, #8
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	7ffb      	ldrb	r3, [r7, #31]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	3320      	adds	r3, #32
 8001ec4:	443b      	add	r3, r7
 8001ec6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	4413      	add	r3, r2
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	7ffb      	ldrb	r3, [r7, #31]
 8001ed2:	b212      	sxth	r2, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	3320      	adds	r3, #32
 8001ed8:	443b      	add	r3, r7
 8001eda:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001ede:	7ffb      	ldrb	r3, [r7, #31]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	77fb      	strb	r3, [r7, #31]
 8001ee4:	7ffb      	ldrb	r3, [r7, #31]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d9df      	bls.n	8001eaa <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8001eea:	7dfb      	ldrb	r3, [r7, #23]
 8001eec:	f003 030c 	and.w	r3, r3, #12
 8001ef0:	2b0c      	cmp	r3, #12
 8001ef2:	d829      	bhi.n	8001f48 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8001ef4:	a201      	add	r2, pc, #4	; (adr r2, 8001efc <LSM6DSL_GyroReadXYZAngRate+0x88>)
 8001ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efa:	bf00      	nop
 8001efc:	08001f31 	.word	0x08001f31
 8001f00:	08001f49 	.word	0x08001f49
 8001f04:	08001f49 	.word	0x08001f49
 8001f08:	08001f49 	.word	0x08001f49
 8001f0c:	08001f37 	.word	0x08001f37
 8001f10:	08001f49 	.word	0x08001f49
 8001f14:	08001f49 	.word	0x08001f49
 8001f18:	08001f49 	.word	0x08001f49
 8001f1c:	08001f3d 	.word	0x08001f3d
 8001f20:	08001f49 	.word	0x08001f49
 8001f24:	08001f49 	.word	0x08001f49
 8001f28:	08001f49 	.word	0x08001f49
 8001f2c:	08001f43 	.word	0x08001f43
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8001f30:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8001f32:	61bb      	str	r3, [r7, #24]
    break;
 8001f34:	e008      	b.n	8001f48 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8001f36:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8001f38:	61bb      	str	r3, [r7, #24]
    break;
 8001f3a:	e005      	b.n	8001f48 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8001f3c:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8001f3e:	61bb      	str	r3, [r7, #24]
    break;
 8001f40:	e002      	b.n	8001f48 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8001f44:	61bb      	str	r3, [r7, #24]
    break;    
 8001f46:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	77fb      	strb	r3, [r7, #31]
 8001f4c:	e016      	b.n	8001f7c <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8001f4e:	7ffb      	ldrb	r3, [r7, #31]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	3320      	adds	r3, #32
 8001f54:	443b      	add	r3, r7
 8001f56:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001f5a:	ee07 3a90 	vmov	s15, r3
 8001f5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f62:	7ffb      	ldrb	r3, [r7, #31]
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f72:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001f76:	7ffb      	ldrb	r3, [r7, #31]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	77fb      	strb	r3, [r7, #31]
 8001f7c:	7ffb      	ldrb	r3, [r7, #31]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d9e5      	bls.n	8001f4e <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 8001f82:	bf00      	nop
 8001f84:	bf00      	nop
 8001f86:	3720      	adds	r7, #32
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	410c0000 	.word	0x410c0000
 8001f90:	418c0000 	.word	0x418c0000
 8001f94:	420c0000 	.word	0x420c0000
 8001f98:	428c0000 	.word	0x428c0000

08001f9c <__io_putchar>:
UART_HandleTypeDef huart3;

PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USER CODE BEGIN PV */
int __io_putchar(int ch){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	while(HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t *) &ch,1,30000)){
 8001fa4:	bf00      	nop
 8001fa6:	1d39      	adds	r1, r7, #4
 8001fa8:	f247 5330 	movw	r3, #30000	; 0x7530
 8001fac:	2201      	movs	r2, #1
 8001fae:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <__io_putchar+0x28>)
 8001fb0:	f004 fc1f 	bl	80067f2 <HAL_UART_Transmit>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f5      	bne.n	8001fa6 <__io_putchar+0xa>
		;
	}
	return ch;
 8001fba:	687b      	ldr	r3, [r7, #4]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000454 	.word	0x20000454

08001fc8 <__io_getchar>:

int __io_getchar(void){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	71fb      	strb	r3, [r7, #7]
	while(HAL_OK != HAL_UART_Receive(&huart1, (uint8_t *) &ch,1,30000)){
 8001fd2:	bf00      	nop
 8001fd4:	1df9      	adds	r1, r7, #7
 8001fd6:	f247 5330 	movw	r3, #30000	; 0x7530
 8001fda:	2201      	movs	r2, #1
 8001fdc:	4805      	ldr	r0, [pc, #20]	; (8001ff4 <__io_getchar+0x2c>)
 8001fde:	f004 fc92 	bl	8006906 <HAL_UART_Receive>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f5      	bne.n	8001fd4 <__io_getchar+0xc>
		;
	}
	return ch;
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000454 	.word	0x20000454

08001ff8 <Pressure_Test>:

void Pressure_Test(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
	float press_value = 0;
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	607b      	str	r3, [r7, #4]
	BSP_PSENSOR_Init();
 8002004:	f7ff f9fc 	bl	8001400 <BSP_PSENSOR_Init>
	press_value = BSP_PSENSOR_ReadPressure();
 8002008:	f7ff fa1a 	bl	8001440 <BSP_PSENSOR_ReadPressure>
 800200c:	ed87 0a01 	vstr	s0, [r7, #4]
	printf("PRESSURE is = %.2f mBar\r\n", press_value);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7fe fa99 	bl	8000548 <__aeabi_f2d>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4807      	ldr	r0, [pc, #28]	; (8002038 <Pressure_Test+0x40>)
 800201c:	f006 f9e4 	bl	80083e8 <iprintf>
	printf("---------------------------\r\n");
 8002020:	4806      	ldr	r0, [pc, #24]	; (800203c <Pressure_Test+0x44>)
 8002022:	f006 fa47 	bl	80084b4 <puts>
	HAL_Delay(1000);
 8002026:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800202a:	f001 fa45 	bl	80034b8 <HAL_Delay>
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	0800a408 	.word	0x0800a408
 800203c:	0800a424 	.word	0x0800a424

08002040 <Pressure_Test2>:
void Pressure_Test2(float *press_value)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
    BSP_PSENSOR_Init();
 8002048:	f7ff f9da 	bl	8001400 <BSP_PSENSOR_Init>
    *press_value = BSP_PSENSOR_ReadPressure();
 800204c:	f7ff f9f8 	bl	8001440 <BSP_PSENSOR_ReadPressure>
 8002050:	eef0 7a40 	vmov.f32	s15, s0
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	edc3 7a00 	vstr	s15, [r3]
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <Humidity_Test>:

void Humidity_Test(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
	float humidity_value = 0;
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	607b      	str	r3, [r7, #4]
	BSP_HSENSOR_Init();
 8002070:	f7ff f940 	bl	80012f4 <BSP_HSENSOR_Init>

	humidity_value = BSP_HSENSOR_ReadHumidity();
 8002074:	f7ff f95e 	bl	8001334 <BSP_HSENSOR_ReadHumidity>
 8002078:	ed87 0a01 	vstr	s0, [r7, #4]
	printf("HUMIDITY is = %.2f %%\r\n", humidity_value);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7fe fa63 	bl	8000548 <__aeabi_f2d>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4807      	ldr	r0, [pc, #28]	; (80020a4 <Humidity_Test+0x40>)
 8002088:	f006 f9ae 	bl	80083e8 <iprintf>
	printf("---------------------------\r\n");
 800208c:	4806      	ldr	r0, [pc, #24]	; (80020a8 <Humidity_Test+0x44>)
 800208e:	f006 fa11 	bl	80084b4 <puts>
	HAL_Delay(1000);
 8002092:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002096:	f001 fa0f 	bl	80034b8 <HAL_Delay>

}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	0800a444 	.word	0x0800a444
 80020a8:	0800a424 	.word	0x0800a424

080020ac <Humidity_Test2>:
void Humidity_Test2(float *humidity_value)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
    BSP_HSENSOR_Init();
 80020b4:	f7ff f91e 	bl	80012f4 <BSP_HSENSOR_Init>
    *humidity_value = BSP_HSENSOR_ReadHumidity();
 80020b8:	f7ff f93c 	bl	8001334 <BSP_HSENSOR_ReadHumidity>
 80020bc:	eef0 7a40 	vmov.f32	s15, s0
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	edc3 7a00 	vstr	s15, [r3]
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <Temperature_Test>:

void Temperature_Test(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
	float temperature_value = 0;
 80020d6:	f04f 0300 	mov.w	r3, #0
 80020da:	607b      	str	r3, [r7, #4]
	BSP_TSENSOR_Init();
 80020dc:	f7ff f9be 	bl	800145c <BSP_TSENSOR_Init>

	temperature_value = BSP_TSENSOR_ReadTemp();
 80020e0:	f7ff f9d8 	bl	8001494 <BSP_TSENSOR_ReadTemp>
 80020e4:	ed87 0a01 	vstr	s0, [r7, #4]
	printf("TEMPERATURE is = %.2f ºC\r\n", temperature_value);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7fe fa2d 	bl	8000548 <__aeabi_f2d>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4807      	ldr	r0, [pc, #28]	; (8002110 <Temperature_Test+0x40>)
 80020f4:	f006 f978 	bl	80083e8 <iprintf>
	printf("---------------------------\r\n");
 80020f8:	4806      	ldr	r0, [pc, #24]	; (8002114 <Temperature_Test+0x44>)
 80020fa:	f006 f9db 	bl	80084b4 <puts>
	HAL_Delay(1000);
 80020fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002102:	f001 f9d9 	bl	80034b8 <HAL_Delay>

}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	0800a45c 	.word	0x0800a45c
 8002114:	0800a424 	.word	0x0800a424

08002118 <Temperature_Test2>:
void Temperature_Test2(float *temperature_value)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
    BSP_TSENSOR_Init();
 8002120:	f7ff f99c 	bl	800145c <BSP_TSENSOR_Init>
    *temperature_value = BSP_TSENSOR_ReadTemp();
 8002124:	f7ff f9b6 	bl	8001494 <BSP_TSENSOR_ReadTemp>
 8002128:	eef0 7a40 	vmov.f32	s15, s0
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	edc3 7a00 	vstr	s15, [r3]
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <Accelero_Test>:

void Accelero_Test(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
	int16_t pDataXYZ[3] = { 0 };
 8002142:	463b      	mov	r3, r7
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	809a      	strh	r2, [r3, #4]
	BSP_ACCELERO_Init();
 800214a:	f7fe fffb 	bl	8001144 <BSP_ACCELERO_Init>

	BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 800214e:	463b      	mov	r3, r7
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff f849 	bl	80011e8 <BSP_ACCELERO_AccGetXYZ>
	printf("X=%d, Y=%d, Z=%d\r\n", pDataXYZ[0], pDataXYZ[1], pDataXYZ[2]);
 8002156:	f9b7 3000 	ldrsh.w	r3, [r7]
 800215a:	4619      	mov	r1, r3
 800215c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002160:	461a      	mov	r2, r3
 8002162:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002166:	4808      	ldr	r0, [pc, #32]	; (8002188 <Accelero_Test+0x4c>)
 8002168:	f006 f93e 	bl	80083e8 <iprintf>
	printf("---------------------------\r\n");
 800216c:	4807      	ldr	r0, [pc, #28]	; (800218c <Accelero_Test+0x50>)
 800216e:	f006 f9a1 	bl	80084b4 <puts>
	HAL_Delay(1000);
 8002172:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002176:	f001 f99f 	bl	80034b8 <HAL_Delay>

	BSP_ACCELERO_DeInit();
 800217a:	f7ff f821 	bl	80011c0 <BSP_ACCELERO_DeInit>
	//printf("\n*** End of Accelerometer Test ***\n");
	return;
 800217e:	bf00      	nop
}
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	0800a478 	.word	0x0800a478
 800218c:	0800a424 	.word	0x0800a424

08002190 <Accelero_Test2>:
void Accelero_Test2(int16_t *pDataXYZ)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
    BSP_ACCELERO_Init();
 8002198:	f7fe ffd4 	bl	8001144 <BSP_ACCELERO_Init>
    BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff f823 	bl	80011e8 <BSP_ACCELERO_AccGetXYZ>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <Gyro_Test>:

void Gyro_Test(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
	float pGyroDataXYZ[3] = { 0 };
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
	BSP_GYRO_Init();
 80021bc:	f7ff f82c 	bl	8001218 <BSP_GYRO_Init>

	BSP_GYRO_GetXYZ(pGyroDataXYZ);
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff f87e 	bl	80012c4 <BSP_GYRO_GetXYZ>
	printf("GYRO_X = %.2f \r\n", pGyroDataXYZ[0]);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe f9bc 	bl	8000548 <__aeabi_f2d>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4810      	ldr	r0, [pc, #64]	; (8002218 <Gyro_Test+0x6c>)
 80021d6:	f006 f907 	bl	80083e8 <iprintf>
	printf("GYRO_Y = %.2f \r\n", pGyroDataXYZ[1]);
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe f9b3 	bl	8000548 <__aeabi_f2d>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	480d      	ldr	r0, [pc, #52]	; (800221c <Gyro_Test+0x70>)
 80021e8:	f006 f8fe 	bl	80083e8 <iprintf>
	printf("GYRO_Z = %.2f \r\n", pGyroDataXYZ[2]);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe f9aa 	bl	8000548 <__aeabi_f2d>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4809      	ldr	r0, [pc, #36]	; (8002220 <Gyro_Test+0x74>)
 80021fa:	f006 f8f5 	bl	80083e8 <iprintf>
	printf("---------------------------\r\n");
 80021fe:	4809      	ldr	r0, [pc, #36]	; (8002224 <Gyro_Test+0x78>)
 8002200:	f006 f958 	bl	80084b4 <puts>
	HAL_Delay(1000);
 8002204:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002208:	f001 f956 	bl	80034b8 <HAL_Delay>

	BSP_GYRO_DeInit();
 800220c:	f7ff f846 	bl	800129c <BSP_GYRO_DeInit>
	//printf("\n*** End of Gyro Test ***\n");
	return;
 8002210:	bf00      	nop
}
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	0800a48c 	.word	0x0800a48c
 800221c:	0800a4a0 	.word	0x0800a4a0
 8002220:	0800a4b4 	.word	0x0800a4b4
 8002224:	0800a424 	.word	0x0800a424

08002228 <Gyro_Test2>:
void Gyro_Test2(float *pGyroDataXYZ)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
    BSP_GYRO_Init();
 8002230:	f7fe fff2 	bl	8001218 <BSP_GYRO_Init>
    BSP_GYRO_GetXYZ(pGyroDataXYZ);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff f845 	bl	80012c4 <BSP_GYRO_GetXYZ>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <Magneto_Test>:

void Magneto_Test(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
	int16_t pDataXYZ[3] = { 0 };
 800224a:	463b      	mov	r3, r7
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	809a      	strh	r2, [r3, #4]
	BSP_MAGNETO_Init();
 8002252:	f7ff f87d 	bl	8001350 <BSP_MAGNETO_Init>

	BSP_MAGNETO_GetXYZ(pDataXYZ);
 8002256:	463b      	mov	r3, r7
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff f8b9 	bl	80013d0 <BSP_MAGNETO_GetXYZ>
	printf("MAGNETO_X = %d \r\n", pDataXYZ[0]);
 800225e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002262:	4619      	mov	r1, r3
 8002264:	480c      	ldr	r0, [pc, #48]	; (8002298 <Magneto_Test+0x54>)
 8002266:	f006 f8bf 	bl	80083e8 <iprintf>
	printf("MAGNETO_Y = %d \r\n", pDataXYZ[1]);
 800226a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800226e:	4619      	mov	r1, r3
 8002270:	480a      	ldr	r0, [pc, #40]	; (800229c <Magneto_Test+0x58>)
 8002272:	f006 f8b9 	bl	80083e8 <iprintf>
	printf("MAGNETO_Z = %d \r\n", pDataXYZ[2]);
 8002276:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800227a:	4619      	mov	r1, r3
 800227c:	4808      	ldr	r0, [pc, #32]	; (80022a0 <Magneto_Test+0x5c>)
 800227e:	f006 f8b3 	bl	80083e8 <iprintf>
	HAL_Delay(1000);
 8002282:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002286:	f001 f917 	bl	80034b8 <HAL_Delay>

	BSP_MAGNETO_DeInit();
 800228a:	f7ff f88d 	bl	80013a8 <BSP_MAGNETO_DeInit>
	//printf("\n*** End of Magneto Test ***\n");
	return;
 800228e:	bf00      	nop
}
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	0800a4c8 	.word	0x0800a4c8
 800229c:	0800a4dc 	.word	0x0800a4dc
 80022a0:	0800a4f0 	.word	0x0800a4f0

080022a4 <Magneto_Test2>:
void Magneto_Test2(int16_t *pDataXYZ)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
    BSP_MAGNETO_Init();
 80022ac:	f7ff f850 	bl	8001350 <BSP_MAGNETO_Init>
    BSP_MAGNETO_GetXYZ(pDataXYZ);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff f88d 	bl	80013d0 <BSP_MAGNETO_GetXYZ>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80022c4:	b090      	sub	sp, #64	; 0x40
 80022c6:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022c8:	f001 f881 	bl	80033ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022cc:	f000 f8d8 	bl	8002480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022d0:	f000 faa0 	bl	8002814 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80022d4:	f000 f936 	bl	8002544 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80022d8:	f000 f96c 	bl	80025b4 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80022dc:	f000 f9a8 	bl	8002630 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80022e0:	f000 f9cc 	bl	800267c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80022e4:	f000 fa08 	bl	80026f8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80022e8:	f000 fa36 	bl	8002758 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80022ec:	f000 fa64 	bl	80027b8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  int mode = 2; //cada sensor tiene una version 1 y 2, mirar mas arriba.
 80022f0:	2302      	movs	r3, #2
 80022f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  int breakEnable = 0; //0: muestras infinitas | 1: break tras 1 muestra.
 80022f4:	2300      	movs	r3, #0
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		switch (mode) {
 80022f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d003      	beq.n	8002306 <main+0x46>
 80022fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002300:	2b02      	cmp	r3, #2
 8002302:	d01e      	beq.n	8002342 <main+0x82>
 8002304:	e7f8      	b.n	80022f8 <main+0x38>
		case (1):
			printf("\n\n\n###########################\r\n");
 8002306:	4857      	ldr	r0, [pc, #348]	; (8002464 <main+0x1a4>)
 8002308:	f006 f8d4 	bl	80084b4 <puts>
			printf("Lectura de sensores:\r\n");
 800230c:	4856      	ldr	r0, [pc, #344]	; (8002468 <main+0x1a8>)
 800230e:	f006 f8d1 	bl	80084b4 <puts>
			printf("###########################\r\n\n");
 8002312:	4856      	ldr	r0, [pc, #344]	; (800246c <main+0x1ac>)
 8002314:	f006 f8ce 	bl	80084b4 <puts>
			Pressure_Test();
 8002318:	f7ff fe6e 	bl	8001ff8 <Pressure_Test>
			Humidity_Test();
 800231c:	f7ff fea2 	bl	8002064 <Humidity_Test>
			Temperature_Test();
 8002320:	f7ff fed6 	bl	80020d0 <Temperature_Test>
			Accelero_Test();
 8002324:	f7ff ff0a 	bl	800213c <Accelero_Test>
			Gyro_Test();
 8002328:	f7ff ff40 	bl	80021ac <Gyro_Test>
			Magneto_Test();
 800232c:	f7ff ff8a 	bl	8002244 <Magneto_Test>
			if (breakEnable == 1) {
 8002330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002332:	2b01      	cmp	r3, #1
 8002334:	f040 8092 	bne.w	800245c <main+0x19c>
				if (__io_getchar() == 0) {
 8002338:	f7ff fe46 	bl	8001fc8 <__io_getchar>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
					break;
				}
			}
			break;
 8002340:	e08c      	b.n	800245c <main+0x19c>
		case (2):
			float press_value = 0, humidity_value = 0, temperature_value = 0;
 8002342:	f04f 0300 	mov.w	r3, #0
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	623b      	str	r3, [r7, #32]
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	61fb      	str	r3, [r7, #28]
			int16_t accel_data[3] = { 0 };
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	809a      	strh	r2, [r3, #4]
			float gyro_data[3] = { 0 };
 800235e:	f107 0308 	add.w	r3, r7, #8
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	609a      	str	r2, [r3, #8]
			int16_t magneto_data[3] = { 0 };
 800236a:	463b      	mov	r3, r7
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	809a      	strh	r2, [r3, #4]

			Pressure_Test2(&press_value);
 8002372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fe62 	bl	8002040 <Pressure_Test2>
			Humidity_Test2(&humidity_value);
 800237c:	f107 0320 	add.w	r3, r7, #32
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fe93 	bl	80020ac <Humidity_Test2>
			Temperature_Test2(&temperature_value);
 8002386:	f107 031c 	add.w	r3, r7, #28
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fec4 	bl	8002118 <Temperature_Test2>
			Accelero_Test2(accel_data);
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fefb 	bl	8002190 <Accelero_Test2>
			Gyro_Test2(gyro_data);
 800239a:	f107 0308 	add.w	r3, r7, #8
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ff42 	bl	8002228 <Gyro_Test2>
			Magneto_Test2(magneto_data);
 80023a4:	463b      	mov	r3, r7
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff ff7c 	bl	80022a4 <Magneto_Test2>

			printf("PRES=%7.2f, HUM=%5.2f %%, TEMP=%5.2f ºC, ", press_value, humidity_value, temperature_value);
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe f8ca 	bl	8000548 <__aeabi_f2d>
 80023b4:	4680      	mov	r8, r0
 80023b6:	4689      	mov	r9, r1
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe f8c4 	bl	8000548 <__aeabi_f2d>
 80023c0:	4604      	mov	r4, r0
 80023c2:	460d      	mov	r5, r1
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe f8be 	bl	8000548 <__aeabi_f2d>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80023d4:	e9cd 4500 	strd	r4, r5, [sp]
 80023d8:	4642      	mov	r2, r8
 80023da:	464b      	mov	r3, r9
 80023dc:	4824      	ldr	r0, [pc, #144]	; (8002470 <main+0x1b0>)
 80023de:	f006 f803 	bl	80083e8 <iprintf>
			printf("ACCX=%5d, ACCY=%5d, ACCZ=%5d, ", accel_data[0], accel_data[1], accel_data[2]);
 80023e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80023e6:	4619      	mov	r1, r3
 80023e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80023ec:	461a      	mov	r2, r3
 80023ee:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80023f2:	4820      	ldr	r0, [pc, #128]	; (8002474 <main+0x1b4>)
 80023f4:	f005 fff8 	bl	80083e8 <iprintf>
			printf("GYRX=%10.2f, GYRY=%10.2f, GYRZ=%10.2f, ", gyro_data[0], gyro_data[1], gyro_data[2]);
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe f8a4 	bl	8000548 <__aeabi_f2d>
 8002400:	4680      	mov	r8, r0
 8002402:	4689      	mov	r9, r1
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe f89e 	bl	8000548 <__aeabi_f2d>
 800240c:	4604      	mov	r4, r0
 800240e:	460d      	mov	r5, r1
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe f898 	bl	8000548 <__aeabi_f2d>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002420:	e9cd 4500 	strd	r4, r5, [sp]
 8002424:	4642      	mov	r2, r8
 8002426:	464b      	mov	r3, r9
 8002428:	4813      	ldr	r0, [pc, #76]	; (8002478 <main+0x1b8>)
 800242a:	f005 ffdd 	bl	80083e8 <iprintf>
			printf("MAGX=%5d, MAGY=%5d, MAGZ=%5d\r\n", magneto_data[0], magneto_data[1], magneto_data[2]);
 800242e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002432:	4619      	mov	r1, r3
 8002434:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002438:	461a      	mov	r2, r3
 800243a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800243e:	480f      	ldr	r0, [pc, #60]	; (800247c <main+0x1bc>)
 8002440:	f005 ffd2 	bl	80083e8 <iprintf>

			HAL_Delay(1000);
 8002444:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002448:	f001 f836 	bl	80034b8 <HAL_Delay>
			if(breakEnable == 1){
 800244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244e:	2b01      	cmp	r3, #1
 8002450:	d106      	bne.n	8002460 <main+0x1a0>
				if (__io_getchar() == 0) {
 8002452:	f7ff fdb9 	bl	8001fc8 <__io_getchar>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
					break;
				}
			}
			break;
 800245a:	e001      	b.n	8002460 <main+0x1a0>
			break;
 800245c:	bf00      	nop
 800245e:	e74b      	b.n	80022f8 <main+0x38>
			break;
 8002460:	bf00      	nop
		switch (mode) {
 8002462:	e749      	b.n	80022f8 <main+0x38>
 8002464:	0800a504 	.word	0x0800a504
 8002468:	0800a524 	.word	0x0800a524
 800246c:	0800a53c 	.word	0x0800a53c
 8002470:	0800a55c 	.word	0x0800a55c
 8002474:	0800a588 	.word	0x0800a588
 8002478:	0800a5a8 	.word	0x0800a5a8
 800247c:	0800a5d0 	.word	0x0800a5d0

08002480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b096      	sub	sp, #88	; 0x58
 8002484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002486:	f107 0314 	add.w	r3, r7, #20
 800248a:	2244      	movs	r2, #68	; 0x44
 800248c:	2100      	movs	r1, #0
 800248e:	4618      	mov	r0, r3
 8002490:	f006 f8f0 	bl	8008674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002494:	463b      	mov	r3, r7
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]
 800249c:	609a      	str	r2, [r3, #8]
 800249e:	60da      	str	r2, [r3, #12]
 80024a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80024a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80024a6:	f002 fcc5 	bl	8004e34 <HAL_PWREx_ControlVoltageScaling>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80024b0:	f000 fb62 	bl	8002b78 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80024b4:	f002 fca0 	bl	8004df8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80024b8:	4b21      	ldr	r3, [pc, #132]	; (8002540 <SystemClock_Config+0xc0>)
 80024ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024be:	4a20      	ldr	r2, [pc, #128]	; (8002540 <SystemClock_Config+0xc0>)
 80024c0:	f023 0318 	bic.w	r3, r3, #24
 80024c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80024c8:	2314      	movs	r3, #20
 80024ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80024cc:	2301      	movs	r3, #1
 80024ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80024d0:	2301      	movs	r3, #1
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80024d8:	2360      	movs	r3, #96	; 0x60
 80024da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024dc:	2302      	movs	r3, #2
 80024de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80024e0:	2301      	movs	r3, #1
 80024e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80024e4:	2301      	movs	r3, #1
 80024e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80024e8:	2328      	movs	r3, #40	; 0x28
 80024ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80024ec:	2307      	movs	r3, #7
 80024ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80024f0:	2302      	movs	r3, #2
 80024f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80024f4:	2302      	movs	r3, #2
 80024f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	4618      	mov	r0, r3
 80024fe:	f002 fdbb 	bl	8005078 <HAL_RCC_OscConfig>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002508:	f000 fb36 	bl	8002b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800250c:	230f      	movs	r3, #15
 800250e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002510:	2303      	movs	r3, #3
 8002512:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002514:	2300      	movs	r3, #0
 8002516:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800251c:	2300      	movs	r3, #0
 800251e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002520:	463b      	mov	r3, r7
 8002522:	2104      	movs	r1, #4
 8002524:	4618      	mov	r0, r3
 8002526:	f003 f983 	bl	8005830 <HAL_RCC_ClockConfig>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002530:	f000 fb22 	bl	8002b78 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002534:	f003 fe8a 	bl	800624c <HAL_RCCEx_EnableMSIPLLMode>
}
 8002538:	bf00      	nop
 800253a:	3758      	adds	r7, #88	; 0x58
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021000 	.word	0x40021000

08002544 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8002548:	4b18      	ldr	r3, [pc, #96]	; (80025ac <MX_DFSDM1_Init+0x68>)
 800254a:	4a19      	ldr	r2, [pc, #100]	; (80025b0 <MX_DFSDM1_Init+0x6c>)
 800254c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800254e:	4b17      	ldr	r3, [pc, #92]	; (80025ac <MX_DFSDM1_Init+0x68>)
 8002550:	2201      	movs	r2, #1
 8002552:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8002554:	4b15      	ldr	r3, [pc, #84]	; (80025ac <MX_DFSDM1_Init+0x68>)
 8002556:	2200      	movs	r2, #0
 8002558:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800255a:	4b14      	ldr	r3, [pc, #80]	; (80025ac <MX_DFSDM1_Init+0x68>)
 800255c:	2202      	movs	r2, #2
 800255e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002560:	4b12      	ldr	r3, [pc, #72]	; (80025ac <MX_DFSDM1_Init+0x68>)
 8002562:	2200      	movs	r2, #0
 8002564:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8002566:	4b11      	ldr	r3, [pc, #68]	; (80025ac <MX_DFSDM1_Init+0x68>)
 8002568:	2200      	movs	r2, #0
 800256a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800256c:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <MX_DFSDM1_Init+0x68>)
 800256e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002572:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8002574:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <MX_DFSDM1_Init+0x68>)
 8002576:	2200      	movs	r2, #0
 8002578:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800257a:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <MX_DFSDM1_Init+0x68>)
 800257c:	2204      	movs	r2, #4
 800257e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8002580:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <MX_DFSDM1_Init+0x68>)
 8002582:	2200      	movs	r2, #0
 8002584:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <MX_DFSDM1_Init+0x68>)
 8002588:	2201      	movs	r2, #1
 800258a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800258c:	4b07      	ldr	r3, [pc, #28]	; (80025ac <MX_DFSDM1_Init+0x68>)
 800258e:	2200      	movs	r2, #0
 8002590:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <MX_DFSDM1_Init+0x68>)
 8002594:	2200      	movs	r2, #0
 8002596:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8002598:	4804      	ldr	r0, [pc, #16]	; (80025ac <MX_DFSDM1_Init+0x68>)
 800259a:	f001 f8c3 	bl	8003724 <HAL_DFSDM_ChannelInit>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80025a4:	f000 fae8 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80025a8:	bf00      	nop
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000320 	.word	0x20000320
 80025b0:	40016020 	.word	0x40016020

080025b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80025b8:	4b1b      	ldr	r3, [pc, #108]	; (8002628 <MX_I2C2_Init+0x74>)
 80025ba:	4a1c      	ldr	r2, [pc, #112]	; (800262c <MX_I2C2_Init+0x78>)
 80025bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80025be:	4b1a      	ldr	r3, [pc, #104]	; (8002628 <MX_I2C2_Init+0x74>)
 80025c0:	f640 6214 	movw	r2, #3604	; 0xe14
 80025c4:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80025c6:	4b18      	ldr	r3, [pc, #96]	; (8002628 <MX_I2C2_Init+0x74>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025cc:	4b16      	ldr	r3, [pc, #88]	; (8002628 <MX_I2C2_Init+0x74>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025d2:	4b15      	ldr	r3, [pc, #84]	; (8002628 <MX_I2C2_Init+0x74>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80025d8:	4b13      	ldr	r3, [pc, #76]	; (8002628 <MX_I2C2_Init+0x74>)
 80025da:	2200      	movs	r2, #0
 80025dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025de:	4b12      	ldr	r3, [pc, #72]	; (8002628 <MX_I2C2_Init+0x74>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025e4:	4b10      	ldr	r3, [pc, #64]	; (8002628 <MX_I2C2_Init+0x74>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025ea:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <MX_I2C2_Init+0x74>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80025f0:	480d      	ldr	r0, [pc, #52]	; (8002628 <MX_I2C2_Init+0x74>)
 80025f2:	f001 fc7c 	bl	8003eee <HAL_I2C_Init>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80025fc:	f000 fabc 	bl	8002b78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002600:	2100      	movs	r1, #0
 8002602:	4809      	ldr	r0, [pc, #36]	; (8002628 <MX_I2C2_Init+0x74>)
 8002604:	f002 fa2e 	bl	8004a64 <HAL_I2CEx_ConfigAnalogFilter>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800260e:	f000 fab3 	bl	8002b78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002612:	2100      	movs	r1, #0
 8002614:	4804      	ldr	r0, [pc, #16]	; (8002628 <MX_I2C2_Init+0x74>)
 8002616:	f002 fa70 	bl	8004afa <HAL_I2CEx_ConfigDigitalFilter>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8002620:	f000 faaa 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000358 	.word	0x20000358
 800262c:	40005800 	.word	0x40005800

08002630 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002634:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <MX_QUADSPI_Init+0x44>)
 8002636:	4a10      	ldr	r2, [pc, #64]	; (8002678 <MX_QUADSPI_Init+0x48>)
 8002638:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800263a:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <MX_QUADSPI_Init+0x44>)
 800263c:	2202      	movs	r2, #2
 800263e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8002640:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <MX_QUADSPI_Init+0x44>)
 8002642:	2204      	movs	r2, #4
 8002644:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002646:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <MX_QUADSPI_Init+0x44>)
 8002648:	2210      	movs	r2, #16
 800264a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800264c:	4b09      	ldr	r3, [pc, #36]	; (8002674 <MX_QUADSPI_Init+0x44>)
 800264e:	2217      	movs	r2, #23
 8002650:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002652:	4b08      	ldr	r3, [pc, #32]	; (8002674 <MX_QUADSPI_Init+0x44>)
 8002654:	2200      	movs	r2, #0
 8002656:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <MX_QUADSPI_Init+0x44>)
 800265a:	2200      	movs	r2, #0
 800265c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800265e:	4805      	ldr	r0, [pc, #20]	; (8002674 <MX_QUADSPI_Init+0x44>)
 8002660:	f002 fc4e 	bl	8004f00 <HAL_QSPI_Init>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800266a:	f000 fa85 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	200003ac 	.word	0x200003ac
 8002678:	a0001000 	.word	0xa0001000

0800267c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002680:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <MX_SPI3_Init+0x74>)
 8002682:	4a1c      	ldr	r2, [pc, #112]	; (80026f4 <MX_SPI3_Init+0x78>)
 8002684:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002686:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <MX_SPI3_Init+0x74>)
 8002688:	f44f 7282 	mov.w	r2, #260	; 0x104
 800268c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800268e:	4b18      	ldr	r3, [pc, #96]	; (80026f0 <MX_SPI3_Init+0x74>)
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002694:	4b16      	ldr	r3, [pc, #88]	; (80026f0 <MX_SPI3_Init+0x74>)
 8002696:	f44f 7240 	mov.w	r2, #768	; 0x300
 800269a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800269c:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <MX_SPI3_Init+0x74>)
 800269e:	2200      	movs	r2, #0
 80026a0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026a2:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <MX_SPI3_Init+0x74>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <MX_SPI3_Init+0x74>)
 80026aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ae:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026b0:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <MX_SPI3_Init+0x74>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026b6:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <MX_SPI3_Init+0x74>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80026bc:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <MX_SPI3_Init+0x74>)
 80026be:	2200      	movs	r2, #0
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026c2:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <MX_SPI3_Init+0x74>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80026c8:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <MX_SPI3_Init+0x74>)
 80026ca:	2207      	movs	r2, #7
 80026cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80026ce:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <MX_SPI3_Init+0x74>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <MX_SPI3_Init+0x74>)
 80026d6:	2208      	movs	r2, #8
 80026d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80026da:	4805      	ldr	r0, [pc, #20]	; (80026f0 <MX_SPI3_Init+0x74>)
 80026dc:	f003 ff98 	bl	8006610 <HAL_SPI_Init>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80026e6:	f000 fa47 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	200003f0 	.word	0x200003f0
 80026f4:	40003c00 	.word	0x40003c00

080026f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026fc:	4b14      	ldr	r3, [pc, #80]	; (8002750 <MX_USART1_UART_Init+0x58>)
 80026fe:	4a15      	ldr	r2, [pc, #84]	; (8002754 <MX_USART1_UART_Init+0x5c>)
 8002700:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002702:	4b13      	ldr	r3, [pc, #76]	; (8002750 <MX_USART1_UART_Init+0x58>)
 8002704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002708:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800270a:	4b11      	ldr	r3, [pc, #68]	; (8002750 <MX_USART1_UART_Init+0x58>)
 800270c:	2200      	movs	r2, #0
 800270e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002710:	4b0f      	ldr	r3, [pc, #60]	; (8002750 <MX_USART1_UART_Init+0x58>)
 8002712:	2200      	movs	r2, #0
 8002714:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002716:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <MX_USART1_UART_Init+0x58>)
 8002718:	2200      	movs	r2, #0
 800271a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <MX_USART1_UART_Init+0x58>)
 800271e:	220c      	movs	r2, #12
 8002720:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002722:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <MX_USART1_UART_Init+0x58>)
 8002724:	2200      	movs	r2, #0
 8002726:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002728:	4b09      	ldr	r3, [pc, #36]	; (8002750 <MX_USART1_UART_Init+0x58>)
 800272a:	2200      	movs	r2, #0
 800272c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800272e:	4b08      	ldr	r3, [pc, #32]	; (8002750 <MX_USART1_UART_Init+0x58>)
 8002730:	2200      	movs	r2, #0
 8002732:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <MX_USART1_UART_Init+0x58>)
 8002736:	2200      	movs	r2, #0
 8002738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800273a:	4805      	ldr	r0, [pc, #20]	; (8002750 <MX_USART1_UART_Init+0x58>)
 800273c:	f004 f80b 	bl	8006756 <HAL_UART_Init>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002746:	f000 fa17 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000454 	.word	0x20000454
 8002754:	40013800 	.word	0x40013800

08002758 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800275c:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <MX_USART3_UART_Init+0x58>)
 800275e:	4a15      	ldr	r2, [pc, #84]	; (80027b4 <MX_USART3_UART_Init+0x5c>)
 8002760:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002762:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <MX_USART3_UART_Init+0x58>)
 8002764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002768:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800276a:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <MX_USART3_UART_Init+0x58>)
 800276c:	2200      	movs	r2, #0
 800276e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002770:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <MX_USART3_UART_Init+0x58>)
 8002772:	2200      	movs	r2, #0
 8002774:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <MX_USART3_UART_Init+0x58>)
 8002778:	2200      	movs	r2, #0
 800277a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <MX_USART3_UART_Init+0x58>)
 800277e:	220c      	movs	r2, #12
 8002780:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002782:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <MX_USART3_UART_Init+0x58>)
 8002784:	2200      	movs	r2, #0
 8002786:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <MX_USART3_UART_Init+0x58>)
 800278a:	2200      	movs	r2, #0
 800278c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800278e:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <MX_USART3_UART_Init+0x58>)
 8002790:	2200      	movs	r2, #0
 8002792:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <MX_USART3_UART_Init+0x58>)
 8002796:	2200      	movs	r2, #0
 8002798:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800279a:	4805      	ldr	r0, [pc, #20]	; (80027b0 <MX_USART3_UART_Init+0x58>)
 800279c:	f003 ffdb 	bl	8006756 <HAL_UART_Init>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80027a6:	f000 f9e7 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	200004dc 	.word	0x200004dc
 80027b4:	40004800 	.word	0x40004800

080027b8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80027bc:	4b14      	ldr	r3, [pc, #80]	; (8002810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80027c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80027c4:	4b12      	ldr	r3, [pc, #72]	; (8002810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027c6:	2206      	movs	r2, #6
 80027c8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80027ca:	4b11      	ldr	r3, [pc, #68]	; (8002810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027cc:	2202      	movs	r2, #2
 80027ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80027d0:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027d2:	2202      	movs	r2, #2
 80027d4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80027d6:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027d8:	2200      	movs	r2, #0
 80027da:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80027dc:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027de:	2200      	movs	r2, #0
 80027e0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80027e2:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80027e8:	4b09      	ldr	r3, [pc, #36]	; (8002810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80027ee:	4b08      	ldr	r3, [pc, #32]	; (8002810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80027f4:	4b06      	ldr	r3, [pc, #24]	; (8002810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80027fa:	4805      	ldr	r0, [pc, #20]	; (8002810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027fc:	f002 f9c9 	bl	8004b92 <HAL_PCD_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002806:	f000 f9b7 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000564 	.word	0x20000564

08002814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08a      	sub	sp, #40	; 0x28
 8002818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281a:	f107 0314 	add.w	r3, r7, #20
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	605a      	str	r2, [r3, #4]
 8002824:	609a      	str	r2, [r3, #8]
 8002826:	60da      	str	r2, [r3, #12]
 8002828:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800282a:	4bbd      	ldr	r3, [pc, #756]	; (8002b20 <MX_GPIO_Init+0x30c>)
 800282c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282e:	4abc      	ldr	r2, [pc, #752]	; (8002b20 <MX_GPIO_Init+0x30c>)
 8002830:	f043 0310 	orr.w	r3, r3, #16
 8002834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002836:	4bba      	ldr	r3, [pc, #744]	; (8002b20 <MX_GPIO_Init+0x30c>)
 8002838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283a:	f003 0310 	and.w	r3, r3, #16
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002842:	4bb7      	ldr	r3, [pc, #732]	; (8002b20 <MX_GPIO_Init+0x30c>)
 8002844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002846:	4ab6      	ldr	r2, [pc, #728]	; (8002b20 <MX_GPIO_Init+0x30c>)
 8002848:	f043 0304 	orr.w	r3, r3, #4
 800284c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800284e:	4bb4      	ldr	r3, [pc, #720]	; (8002b20 <MX_GPIO_Init+0x30c>)
 8002850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800285a:	4bb1      	ldr	r3, [pc, #708]	; (8002b20 <MX_GPIO_Init+0x30c>)
 800285c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285e:	4ab0      	ldr	r2, [pc, #704]	; (8002b20 <MX_GPIO_Init+0x30c>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002866:	4bae      	ldr	r3, [pc, #696]	; (8002b20 <MX_GPIO_Init+0x30c>)
 8002868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002872:	4bab      	ldr	r3, [pc, #684]	; (8002b20 <MX_GPIO_Init+0x30c>)
 8002874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002876:	4aaa      	ldr	r2, [pc, #680]	; (8002b20 <MX_GPIO_Init+0x30c>)
 8002878:	f043 0302 	orr.w	r3, r3, #2
 800287c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800287e:	4ba8      	ldr	r3, [pc, #672]	; (8002b20 <MX_GPIO_Init+0x30c>)
 8002880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	607b      	str	r3, [r7, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800288a:	4ba5      	ldr	r3, [pc, #660]	; (8002b20 <MX_GPIO_Init+0x30c>)
 800288c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288e:	4aa4      	ldr	r2, [pc, #656]	; (8002b20 <MX_GPIO_Init+0x30c>)
 8002890:	f043 0308 	orr.w	r3, r3, #8
 8002894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002896:	4ba2      	ldr	r3, [pc, #648]	; (8002b20 <MX_GPIO_Init+0x30c>)
 8002898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80028a2:	2200      	movs	r2, #0
 80028a4:	f44f 718a 	mov.w	r1, #276	; 0x114
 80028a8:	489e      	ldr	r0, [pc, #632]	; (8002b24 <MX_GPIO_Init+0x310>)
 80028aa:	f001 fae5 	bl	8003e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80028ae:	2200      	movs	r2, #0
 80028b0:	f248 1104 	movw	r1, #33028	; 0x8104
 80028b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028b8:	f001 fade 	bl	8003e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80028bc:	2200      	movs	r2, #0
 80028be:	f24f 0114 	movw	r1, #61460	; 0xf014
 80028c2:	4899      	ldr	r0, [pc, #612]	; (8002b28 <MX_GPIO_Init+0x314>)
 80028c4:	f001 fad8 	bl	8003e78 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80028c8:	2200      	movs	r2, #0
 80028ca:	f241 0181 	movw	r1, #4225	; 0x1081
 80028ce:	4897      	ldr	r0, [pc, #604]	; (8002b2c <MX_GPIO_Init+0x318>)
 80028d0:	f001 fad2 	bl	8003e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80028d4:	2201      	movs	r2, #1
 80028d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028da:	4894      	ldr	r0, [pc, #592]	; (8002b2c <MX_GPIO_Init+0x318>)
 80028dc:	f001 facc 	bl	8003e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80028e0:	2200      	movs	r2, #0
 80028e2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80028e6:	4892      	ldr	r0, [pc, #584]	; (8002b30 <MX_GPIO_Init+0x31c>)
 80028e8:	f001 fac6 	bl	8003e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80028ec:	2201      	movs	r2, #1
 80028ee:	2120      	movs	r1, #32
 80028f0:	488d      	ldr	r0, [pc, #564]	; (8002b28 <MX_GPIO_Init+0x314>)
 80028f2:	f001 fac1 	bl	8003e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80028f6:	2201      	movs	r2, #1
 80028f8:	2101      	movs	r1, #1
 80028fa:	488a      	ldr	r0, [pc, #552]	; (8002b24 <MX_GPIO_Init+0x310>)
 80028fc:	f001 fabc 	bl	8003e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8002900:	f240 1315 	movw	r3, #277	; 0x115
 8002904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002906:	2301      	movs	r3, #1
 8002908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290e:	2300      	movs	r3, #0
 8002910:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002912:	f107 0314 	add.w	r3, r7, #20
 8002916:	4619      	mov	r1, r3
 8002918:	4882      	ldr	r0, [pc, #520]	; (8002b24 <MX_GPIO_Init+0x310>)
 800291a:	f001 f80f 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800291e:	236a      	movs	r3, #106	; 0x6a
 8002920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002922:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800292c:	f107 0314 	add.w	r3, r7, #20
 8002930:	4619      	mov	r1, r3
 8002932:	487c      	ldr	r0, [pc, #496]	; (8002b24 <MX_GPIO_Init+0x310>)
 8002934:	f001 f802 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8002938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800293c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800293e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8002948:	f107 0314 	add.w	r3, r7, #20
 800294c:	4619      	mov	r1, r3
 800294e:	4878      	ldr	r0, [pc, #480]	; (8002b30 <MX_GPIO_Init+0x31c>)
 8002950:	f000 fff4 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8002954:	233f      	movs	r3, #63	; 0x3f
 8002956:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002958:	230b      	movs	r3, #11
 800295a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	4619      	mov	r1, r3
 8002966:	4872      	ldr	r0, [pc, #456]	; (8002b30 <MX_GPIO_Init+0x31c>)
 8002968:	f000 ffe8 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800296c:	2303      	movs	r3, #3
 800296e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002970:	2302      	movs	r3, #2
 8002972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002978:	2303      	movs	r3, #3
 800297a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800297c:	2308      	movs	r3, #8
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002980:	f107 0314 	add.w	r3, r7, #20
 8002984:	4619      	mov	r1, r3
 8002986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800298a:	f000 ffd7 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800298e:	f248 1304 	movw	r3, #33028	; 0x8104
 8002992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002994:	2301      	movs	r3, #1
 8002996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299c:	2300      	movs	r3, #0
 800299e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	4619      	mov	r1, r3
 80029a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029aa:	f000 ffc7 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80029ae:	2308      	movs	r3, #8
 80029b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b2:	2302      	movs	r3, #2
 80029b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ba:	2300      	movs	r3, #0
 80029bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029be:	2301      	movs	r3, #1
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80029c2:	f107 0314 	add.w	r3, r7, #20
 80029c6:	4619      	mov	r1, r3
 80029c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029cc:	f000 ffb6 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80029d0:	2310      	movs	r3, #16
 80029d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80029d4:	230b      	movs	r3, #11
 80029d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	4619      	mov	r1, r3
 80029e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029e6:	f000 ffa9 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80029ea:	23e0      	movs	r3, #224	; 0xe0
 80029ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ee:	2302      	movs	r3, #2
 80029f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f6:	2303      	movs	r3, #3
 80029f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029fa:	2305      	movs	r3, #5
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fe:	f107 0314 	add.w	r3, r7, #20
 8002a02:	4619      	mov	r1, r3
 8002a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a08:	f000 ff98 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a10:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002a1a:	f107 0314 	add.w	r3, r7, #20
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4841      	ldr	r0, [pc, #260]	; (8002b28 <MX_GPIO_Init+0x314>)
 8002a22:	f000 ff8b 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002a26:	2302      	movs	r3, #2
 8002a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002a2a:	230b      	movs	r3, #11
 8002a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002a32:	f107 0314 	add.w	r3, r7, #20
 8002a36:	4619      	mov	r1, r3
 8002a38:	483b      	ldr	r0, [pc, #236]	; (8002b28 <MX_GPIO_Init+0x314>)
 8002a3a:	f000 ff7f 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8002a3e:	f24f 0334 	movw	r3, #61492	; 0xf034
 8002a42:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a44:	2301      	movs	r3, #1
 8002a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a50:	f107 0314 	add.w	r3, r7, #20
 8002a54:	4619      	mov	r1, r3
 8002a56:	4834      	ldr	r0, [pc, #208]	; (8002b28 <MX_GPIO_Init+0x314>)
 8002a58:	f000 ff70 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8002a5c:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8002a60:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	4619      	mov	r1, r3
 8002a72:	482e      	ldr	r0, [pc, #184]	; (8002b2c <MX_GPIO_Init+0x318>)
 8002a74:	f000 ff62 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8002a78:	f243 0381 	movw	r3, #12417	; 0x3081
 8002a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a86:	2300      	movs	r3, #0
 8002a88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a8a:	f107 0314 	add.w	r3, r7, #20
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4826      	ldr	r0, [pc, #152]	; (8002b2c <MX_GPIO_Init+0x318>)
 8002a92:	f000 ff53 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002a96:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	4619      	mov	r1, r3
 8002aae:	4820      	ldr	r0, [pc, #128]	; (8002b30 <MX_GPIO_Init+0x31c>)
 8002ab0:	f000 ff44 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8002ab4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002aba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4819      	ldr	r0, [pc, #100]	; (8002b30 <MX_GPIO_Init+0x31c>)
 8002acc:	f000 ff36 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002adc:	2303      	movs	r3, #3
 8002ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ae0:	2305      	movs	r3, #5
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002ae4:	f107 0314 	add.w	r3, r7, #20
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4810      	ldr	r0, [pc, #64]	; (8002b2c <MX_GPIO_Init+0x318>)
 8002aec:	f000 ff26 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8002af0:	2378      	movs	r3, #120	; 0x78
 8002af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af4:	2302      	movs	r3, #2
 8002af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afc:	2303      	movs	r3, #3
 8002afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b00:	2307      	movs	r3, #7
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b04:	f107 0314 	add.w	r3, r7, #20
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4808      	ldr	r0, [pc, #32]	; (8002b2c <MX_GPIO_Init+0x318>)
 8002b0c:	f000 ff16 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8002b10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b16:	2312      	movs	r3, #18
 8002b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	e00a      	b.n	8002b34 <MX_GPIO_Init+0x320>
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000
 8002b24:	48001000 	.word	0x48001000
 8002b28:	48000400 	.word	0x48000400
 8002b2c:	48000c00 	.word	0x48000c00
 8002b30:	48000800 	.word	0x48000800
 8002b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b36:	2303      	movs	r3, #3
 8002b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3e:	f107 0314 	add.w	r3, r7, #20
 8002b42:	4619      	mov	r1, r3
 8002b44:	480b      	ldr	r0, [pc, #44]	; (8002b74 <MX_GPIO_Init+0x360>)
 8002b46:	f000 fef9 	bl	800393c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	2017      	movs	r0, #23
 8002b50:	f000 fdb1 	bl	80036b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002b54:	2017      	movs	r0, #23
 8002b56:	f000 fdca 	bl	80036ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	2028      	movs	r0, #40	; 0x28
 8002b60:	f000 fda9 	bl	80036b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b64:	2028      	movs	r0, #40	; 0x28
 8002b66:	f000 fdc2 	bl	80036ee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b6a:	bf00      	nop
 8002b6c:	3728      	adds	r7, #40	; 0x28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	48000400 	.word	0x48000400

08002b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b7c:	b672      	cpsid	i
}
 8002b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b80:	e7fe      	b.n	8002b80 <Error_Handler+0x8>
	...

08002b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8a:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <HAL_MspInit+0x44>)
 8002b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b8e:	4a0e      	ldr	r2, [pc, #56]	; (8002bc8 <HAL_MspInit+0x44>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6613      	str	r3, [r2, #96]	; 0x60
 8002b96:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <HAL_MspInit+0x44>)
 8002b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	607b      	str	r3, [r7, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ba2:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <HAL_MspInit+0x44>)
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba6:	4a08      	ldr	r2, [pc, #32]	; (8002bc8 <HAL_MspInit+0x44>)
 8002ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bac:	6593      	str	r3, [r2, #88]	; 0x58
 8002bae:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <HAL_MspInit+0x44>)
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	603b      	str	r3, [r7, #0]
 8002bb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40021000 	.word	0x40021000

08002bcc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b0ac      	sub	sp, #176	; 0xb0
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	60da      	str	r2, [r3, #12]
 8002be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002be4:	f107 0314 	add.w	r3, r7, #20
 8002be8:	2288      	movs	r2, #136	; 0x88
 8002bea:	2100      	movs	r1, #0
 8002bec:	4618      	mov	r0, r3
 8002bee:	f005 fd41 	bl	8008674 <memset>
  if(DFSDM1_Init == 0)
 8002bf2:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d142      	bne.n	8002c80 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002bfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bfe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c06:	f107 0314 	add.w	r3, r7, #20
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f003 f834 	bl	8005c78 <HAL_RCCEx_PeriphCLKConfig>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8002c16:	f7ff ffaf 	bl	8002b78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002c1a:	4b1c      	ldr	r3, [pc, #112]	; (8002c8c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c1e:	4a1b      	ldr	r2, [pc, #108]	; (8002c8c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002c20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c24:	6613      	str	r3, [r2, #96]	; 0x60
 8002c26:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c32:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c36:	4a15      	ldr	r2, [pc, #84]	; (8002c8c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002c38:	f043 0310 	orr.w	r3, r3, #16
 8002c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c3e:	4b13      	ldr	r3, [pc, #76]	; (8002c8c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8002c4a:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002c4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c52:	2302      	movs	r3, #2
 8002c54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002c64:	2306      	movs	r3, #6
 8002c66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c6a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4807      	ldr	r0, [pc, #28]	; (8002c90 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8002c72:	f000 fe63 	bl	800393c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002c76:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	4a02      	ldr	r2, [pc, #8]	; (8002c88 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002c7e:	6013      	str	r3, [r2, #0]
  }

}
 8002c80:	bf00      	nop
 8002c82:	37b0      	adds	r7, #176	; 0xb0
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	20000a48 	.word	0x20000a48
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	48001000 	.word	0x48001000

08002c94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b0ac      	sub	sp, #176	; 0xb0
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
 8002caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cac:	f107 0314 	add.w	r3, r7, #20
 8002cb0:	2288      	movs	r2, #136	; 0x88
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f005 fcdd 	bl	8008674 <memset>
  if(hi2c->Instance==I2C2)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a21      	ldr	r2, [pc, #132]	; (8002d44 <HAL_I2C_MspInit+0xb0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d13b      	bne.n	8002d3c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f002 ffd1 	bl	8005c78 <HAL_RCCEx_PeriphCLKConfig>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002cdc:	f7ff ff4c 	bl	8002b78 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ce0:	4b19      	ldr	r3, [pc, #100]	; (8002d48 <HAL_I2C_MspInit+0xb4>)
 8002ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce4:	4a18      	ldr	r2, [pc, #96]	; (8002d48 <HAL_I2C_MspInit+0xb4>)
 8002ce6:	f043 0302 	orr.w	r3, r3, #2
 8002cea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cec:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <HAL_I2C_MspInit+0xb4>)
 8002cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002cf8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002cfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d00:	2312      	movs	r3, #18
 8002d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d06:	2301      	movs	r3, #1
 8002d08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d12:	2304      	movs	r3, #4
 8002d14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	480b      	ldr	r0, [pc, #44]	; (8002d4c <HAL_I2C_MspInit+0xb8>)
 8002d20:	f000 fe0c 	bl	800393c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d24:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <HAL_I2C_MspInit+0xb4>)
 8002d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d28:	4a07      	ldr	r2, [pc, #28]	; (8002d48 <HAL_I2C_MspInit+0xb4>)
 8002d2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_I2C_MspInit+0xb4>)
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002d3c:	bf00      	nop
 8002d3e:	37b0      	adds	r7, #176	; 0xb0
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40005800 	.word	0x40005800
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	48000400 	.word	0x48000400

08002d50 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a0b      	ldr	r2, [pc, #44]	; (8002d8c <HAL_I2C_MspDeInit+0x3c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d10f      	bne.n	8002d82 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002d62:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <HAL_I2C_MspDeInit+0x40>)
 8002d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d66:	4a0a      	ldr	r2, [pc, #40]	; (8002d90 <HAL_I2C_MspDeInit+0x40>)
 8002d68:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002d6c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8002d6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d72:	4808      	ldr	r0, [pc, #32]	; (8002d94 <HAL_I2C_MspDeInit+0x44>)
 8002d74:	f000 ff8c 	bl	8003c90 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8002d78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d7c:	4805      	ldr	r0, [pc, #20]	; (8002d94 <HAL_I2C_MspDeInit+0x44>)
 8002d7e:	f000 ff87 	bl	8003c90 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40005800 	.word	0x40005800
 8002d90:	40021000 	.word	0x40021000
 8002d94:	48000400 	.word	0x48000400

08002d98 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08a      	sub	sp, #40	; 0x28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da0:	f107 0314 	add.w	r3, r7, #20
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	60da      	str	r2, [r3, #12]
 8002dae:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a17      	ldr	r2, [pc, #92]	; (8002e14 <HAL_QSPI_MspInit+0x7c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d128      	bne.n	8002e0c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002dba:	4b17      	ldr	r3, [pc, #92]	; (8002e18 <HAL_QSPI_MspInit+0x80>)
 8002dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dbe:	4a16      	ldr	r2, [pc, #88]	; (8002e18 <HAL_QSPI_MspInit+0x80>)
 8002dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc4:	6513      	str	r3, [r2, #80]	; 0x50
 8002dc6:	4b14      	ldr	r3, [pc, #80]	; (8002e18 <HAL_QSPI_MspInit+0x80>)
 8002dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dd2:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <HAL_QSPI_MspInit+0x80>)
 8002dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd6:	4a10      	ldr	r2, [pc, #64]	; (8002e18 <HAL_QSPI_MspInit+0x80>)
 8002dd8:	f043 0310 	orr.w	r3, r3, #16
 8002ddc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dde:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <HAL_QSPI_MspInit+0x80>)
 8002de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8002dea:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002dee:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df0:	2302      	movs	r3, #2
 8002df2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002dfc:	230a      	movs	r3, #10
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e00:	f107 0314 	add.w	r3, r7, #20
 8002e04:	4619      	mov	r1, r3
 8002e06:	4805      	ldr	r0, [pc, #20]	; (8002e1c <HAL_QSPI_MspInit+0x84>)
 8002e08:	f000 fd98 	bl	800393c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002e0c:	bf00      	nop
 8002e0e:	3728      	adds	r7, #40	; 0x28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	a0001000 	.word	0xa0001000
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	48001000 	.word	0x48001000

08002e20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	; 0x28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e28:	f107 0314 	add.w	r3, r7, #20
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a17      	ldr	r2, [pc, #92]	; (8002e9c <HAL_SPI_MspInit+0x7c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d128      	bne.n	8002e94 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002e42:	4b17      	ldr	r3, [pc, #92]	; (8002ea0 <HAL_SPI_MspInit+0x80>)
 8002e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e46:	4a16      	ldr	r2, [pc, #88]	; (8002ea0 <HAL_SPI_MspInit+0x80>)
 8002e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e4c:	6593      	str	r3, [r2, #88]	; 0x58
 8002e4e:	4b14      	ldr	r3, [pc, #80]	; (8002ea0 <HAL_SPI_MspInit+0x80>)
 8002e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e56:	613b      	str	r3, [r7, #16]
 8002e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e5a:	4b11      	ldr	r3, [pc, #68]	; (8002ea0 <HAL_SPI_MspInit+0x80>)
 8002e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5e:	4a10      	ldr	r2, [pc, #64]	; (8002ea0 <HAL_SPI_MspInit+0x80>)
 8002e60:	f043 0304 	orr.w	r3, r3, #4
 8002e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e66:	4b0e      	ldr	r3, [pc, #56]	; (8002ea0 <HAL_SPI_MspInit+0x80>)
 8002e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002e72:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e80:	2303      	movs	r3, #3
 8002e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e84:	2306      	movs	r3, #6
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e88:	f107 0314 	add.w	r3, r7, #20
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4805      	ldr	r0, [pc, #20]	; (8002ea4 <HAL_SPI_MspInit+0x84>)
 8002e90:	f000 fd54 	bl	800393c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002e94:	bf00      	nop
 8002e96:	3728      	adds	r7, #40	; 0x28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40003c00 	.word	0x40003c00
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	48000800 	.word	0x48000800

08002ea8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b0ae      	sub	sp, #184	; 0xb8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ec0:	f107 031c 	add.w	r3, r7, #28
 8002ec4:	2288      	movs	r2, #136	; 0x88
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f005 fbd3 	bl	8008674 <memset>
  if(huart->Instance==USART1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a42      	ldr	r2, [pc, #264]	; (8002fdc <HAL_UART_MspInit+0x134>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d13b      	bne.n	8002f50 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002edc:	2300      	movs	r3, #0
 8002ede:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ee0:	f107 031c 	add.w	r3, r7, #28
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f002 fec7 	bl	8005c78 <HAL_RCCEx_PeriphCLKConfig>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ef0:	f7ff fe42 	bl	8002b78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ef4:	4b3a      	ldr	r3, [pc, #232]	; (8002fe0 <HAL_UART_MspInit+0x138>)
 8002ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef8:	4a39      	ldr	r2, [pc, #228]	; (8002fe0 <HAL_UART_MspInit+0x138>)
 8002efa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002efe:	6613      	str	r3, [r2, #96]	; 0x60
 8002f00:	4b37      	ldr	r3, [pc, #220]	; (8002fe0 <HAL_UART_MspInit+0x138>)
 8002f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f08:	61bb      	str	r3, [r7, #24]
 8002f0a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f0c:	4b34      	ldr	r3, [pc, #208]	; (8002fe0 <HAL_UART_MspInit+0x138>)
 8002f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f10:	4a33      	ldr	r2, [pc, #204]	; (8002fe0 <HAL_UART_MspInit+0x138>)
 8002f12:	f043 0302 	orr.w	r3, r3, #2
 8002f16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f18:	4b31      	ldr	r3, [pc, #196]	; (8002fe0 <HAL_UART_MspInit+0x138>)
 8002f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002f24:	23c0      	movs	r3, #192	; 0xc0
 8002f26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f36:	2303      	movs	r3, #3
 8002f38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f3c:	2307      	movs	r3, #7
 8002f3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f42:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f46:	4619      	mov	r1, r3
 8002f48:	4826      	ldr	r0, [pc, #152]	; (8002fe4 <HAL_UART_MspInit+0x13c>)
 8002f4a:	f000 fcf7 	bl	800393c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f4e:	e040      	b.n	8002fd2 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a24      	ldr	r2, [pc, #144]	; (8002fe8 <HAL_UART_MspInit+0x140>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d13b      	bne.n	8002fd2 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f62:	f107 031c 	add.w	r3, r7, #28
 8002f66:	4618      	mov	r0, r3
 8002f68:	f002 fe86 	bl	8005c78 <HAL_RCCEx_PeriphCLKConfig>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8002f72:	f7ff fe01 	bl	8002b78 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f76:	4b1a      	ldr	r3, [pc, #104]	; (8002fe0 <HAL_UART_MspInit+0x138>)
 8002f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7a:	4a19      	ldr	r2, [pc, #100]	; (8002fe0 <HAL_UART_MspInit+0x138>)
 8002f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f80:	6593      	str	r3, [r2, #88]	; 0x58
 8002f82:	4b17      	ldr	r3, [pc, #92]	; (8002fe0 <HAL_UART_MspInit+0x138>)
 8002f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f8e:	4b14      	ldr	r3, [pc, #80]	; (8002fe0 <HAL_UART_MspInit+0x138>)
 8002f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f92:	4a13      	ldr	r2, [pc, #76]	; (8002fe0 <HAL_UART_MspInit+0x138>)
 8002f94:	f043 0308 	orr.w	r3, r3, #8
 8002f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f9a:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <HAL_UART_MspInit+0x138>)
 8002f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002fa6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002faa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fc0:	2307      	movs	r3, #7
 8002fc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fc6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4807      	ldr	r0, [pc, #28]	; (8002fec <HAL_UART_MspInit+0x144>)
 8002fce:	f000 fcb5 	bl	800393c <HAL_GPIO_Init>
}
 8002fd2:	bf00      	nop
 8002fd4:	37b8      	adds	r7, #184	; 0xb8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40013800 	.word	0x40013800
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	48000400 	.word	0x48000400
 8002fe8:	40004800 	.word	0x40004800
 8002fec:	48000c00 	.word	0x48000c00

08002ff0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b0ac      	sub	sp, #176	; 0xb0
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	60da      	str	r2, [r3, #12]
 8003006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003008:	f107 0314 	add.w	r3, r7, #20
 800300c:	2288      	movs	r2, #136	; 0x88
 800300e:	2100      	movs	r1, #0
 8003010:	4618      	mov	r0, r3
 8003012:	f005 fb2f 	bl	8008674 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800301e:	d17c      	bne.n	800311a <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003020:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003024:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003026:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800302a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800302e:	2301      	movs	r3, #1
 8003030:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003032:	2301      	movs	r3, #1
 8003034:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8003036:	2318      	movs	r3, #24
 8003038:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800303a:	2307      	movs	r3, #7
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800303e:	2302      	movs	r3, #2
 8003040:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003042:	2302      	movs	r3, #2
 8003044:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8003046:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800304a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	4618      	mov	r0, r3
 8003052:	f002 fe11 	bl	8005c78 <HAL_RCCEx_PeriphCLKConfig>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800305c:	f7ff fd8c 	bl	8002b78 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003060:	4b30      	ldr	r3, [pc, #192]	; (8003124 <HAL_PCD_MspInit+0x134>)
 8003062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003064:	4a2f      	ldr	r2, [pc, #188]	; (8003124 <HAL_PCD_MspInit+0x134>)
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800306c:	4b2d      	ldr	r3, [pc, #180]	; (8003124 <HAL_PCD_MspInit+0x134>)
 800306e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8003078:	f44f 7300 	mov.w	r3, #512	; 0x200
 800307c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003080:	2300      	movs	r3, #0
 8003082:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003086:	2300      	movs	r3, #0
 8003088:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800308c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003090:	4619      	mov	r1, r3
 8003092:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003096:	f000 fc51 	bl	800393c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800309a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800309e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a2:	2302      	movs	r3, #2
 80030a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ae:	2303      	movs	r3, #3
 80030b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80030b4:	230a      	movs	r3, #10
 80030b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80030be:	4619      	mov	r1, r3
 80030c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030c4:	f000 fc3a 	bl	800393c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80030c8:	4b16      	ldr	r3, [pc, #88]	; (8003124 <HAL_PCD_MspInit+0x134>)
 80030ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030cc:	4a15      	ldr	r2, [pc, #84]	; (8003124 <HAL_PCD_MspInit+0x134>)
 80030ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030d4:	4b13      	ldr	r3, [pc, #76]	; (8003124 <HAL_PCD_MspInit+0x134>)
 80030d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e0:	4b10      	ldr	r3, [pc, #64]	; (8003124 <HAL_PCD_MspInit+0x134>)
 80030e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d114      	bne.n	8003116 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ec:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <HAL_PCD_MspInit+0x134>)
 80030ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f0:	4a0c      	ldr	r2, [pc, #48]	; (8003124 <HAL_PCD_MspInit+0x134>)
 80030f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f6:	6593      	str	r3, [r2, #88]	; 0x58
 80030f8:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <HAL_PCD_MspInit+0x134>)
 80030fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8003104:	f001 feec 	bl	8004ee0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003108:	4b06      	ldr	r3, [pc, #24]	; (8003124 <HAL_PCD_MspInit+0x134>)
 800310a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310c:	4a05      	ldr	r2, [pc, #20]	; (8003124 <HAL_PCD_MspInit+0x134>)
 800310e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003112:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003114:	e001      	b.n	800311a <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8003116:	f001 fee3 	bl	8004ee0 <HAL_PWREx_EnableVddUSB>
}
 800311a:	bf00      	nop
 800311c:	37b0      	adds	r7, #176	; 0xb0
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40021000 	.word	0x40021000

08003128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800312c:	e7fe      	b.n	800312c <NMI_Handler+0x4>

0800312e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800312e:	b480      	push	{r7}
 8003130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003132:	e7fe      	b.n	8003132 <HardFault_Handler+0x4>

08003134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003138:	e7fe      	b.n	8003138 <MemManage_Handler+0x4>

0800313a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800313a:	b480      	push	{r7}
 800313c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800313e:	e7fe      	b.n	800313e <BusFault_Handler+0x4>

08003140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003144:	e7fe      	b.n	8003144 <UsageFault_Handler+0x4>

08003146 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003146:	b480      	push	{r7}
 8003148:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800314a:	bf00      	nop
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003158:	bf00      	nop
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003162:	b480      	push	{r7}
 8003164:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003166:	bf00      	nop
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003174:	f000 f980 	bl	8003478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003178:	bf00      	nop
 800317a:	bd80      	pop	{r7, pc}

0800317c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8003180:	2020      	movs	r0, #32
 8003182:	f000 fe91 	bl	8003ea8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8003186:	2040      	movs	r0, #64	; 0x40
 8003188:	f000 fe8e 	bl	8003ea8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800318c:	2080      	movs	r0, #128	; 0x80
 800318e:	f000 fe8b 	bl	8003ea8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8003192:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003196:	f000 fe87 	bl	8003ea8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800319a:	bf00      	nop
 800319c:	bd80      	pop	{r7, pc}

0800319e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80031a2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80031a6:	f000 fe7f 	bl	8003ea8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80031aa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80031ae:	f000 fe7b 	bl	8003ea8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80031b2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80031b6:	f000 fe77 	bl	8003ea8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80031ba:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80031be:	f000 fe73 	bl	8003ea8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80031c2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80031c6:	f000 fe6f 	bl	8003ea8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}

080031ce <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031ce:	b480      	push	{r7}
 80031d0:	af00      	add	r7, sp, #0
  return 1;
 80031d2:	2301      	movs	r3, #1
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <_kill>:

int _kill(int pid, int sig)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031e8:	f005 fa96 	bl	8008718 <__errno>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2216      	movs	r2, #22
 80031f0:	601a      	str	r2, [r3, #0]
  return -1;
 80031f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <_exit>:

void _exit (int status)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003206:	f04f 31ff 	mov.w	r1, #4294967295
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff ffe7 	bl	80031de <_kill>
  while (1) {}    /* Make sure we hang here */
 8003210:	e7fe      	b.n	8003210 <_exit+0x12>

08003212 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b086      	sub	sp, #24
 8003216:	af00      	add	r7, sp, #0
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800321e:	2300      	movs	r3, #0
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	e00a      	b.n	800323a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003224:	f7fe fed0 	bl	8001fc8 <__io_getchar>
 8003228:	4601      	mov	r1, r0
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	60ba      	str	r2, [r7, #8]
 8003230:	b2ca      	uxtb	r2, r1
 8003232:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	3301      	adds	r3, #1
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	429a      	cmp	r2, r3
 8003240:	dbf0      	blt.n	8003224 <_read+0x12>
  }

  return len;
 8003242:	687b      	ldr	r3, [r7, #4]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	e009      	b.n	8003272 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	60ba      	str	r2, [r7, #8]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7fe fe98 	bl	8001f9c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	3301      	adds	r3, #1
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	429a      	cmp	r2, r3
 8003278:	dbf1      	blt.n	800325e <_write+0x12>
  }
  return len;
 800327a:	687b      	ldr	r3, [r7, #4]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <_close>:

int _close(int file)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800328c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003290:	4618      	mov	r0, r3
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032ac:	605a      	str	r2, [r3, #4]
  return 0;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <_isatty>:

int _isatty(int file)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80032c4:	2301      	movs	r3, #1
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b085      	sub	sp, #20
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	60f8      	str	r0, [r7, #12]
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032f4:	4a14      	ldr	r2, [pc, #80]	; (8003348 <_sbrk+0x5c>)
 80032f6:	4b15      	ldr	r3, [pc, #84]	; (800334c <_sbrk+0x60>)
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003300:	4b13      	ldr	r3, [pc, #76]	; (8003350 <_sbrk+0x64>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d102      	bne.n	800330e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003308:	4b11      	ldr	r3, [pc, #68]	; (8003350 <_sbrk+0x64>)
 800330a:	4a12      	ldr	r2, [pc, #72]	; (8003354 <_sbrk+0x68>)
 800330c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800330e:	4b10      	ldr	r3, [pc, #64]	; (8003350 <_sbrk+0x64>)
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4413      	add	r3, r2
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	429a      	cmp	r2, r3
 800331a:	d207      	bcs.n	800332c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800331c:	f005 f9fc 	bl	8008718 <__errno>
 8003320:	4603      	mov	r3, r0
 8003322:	220c      	movs	r2, #12
 8003324:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003326:	f04f 33ff 	mov.w	r3, #4294967295
 800332a:	e009      	b.n	8003340 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800332c:	4b08      	ldr	r3, [pc, #32]	; (8003350 <_sbrk+0x64>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003332:	4b07      	ldr	r3, [pc, #28]	; (8003350 <_sbrk+0x64>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4413      	add	r3, r2
 800333a:	4a05      	ldr	r2, [pc, #20]	; (8003350 <_sbrk+0x64>)
 800333c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800333e:	68fb      	ldr	r3, [r7, #12]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20018000 	.word	0x20018000
 800334c:	00000400 	.word	0x00000400
 8003350:	20000a4c 	.word	0x20000a4c
 8003354:	20000bc8 	.word	0x20000bc8

08003358 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <SystemInit+0x20>)
 800335e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003362:	4a05      	ldr	r2, [pc, #20]	; (8003378 <SystemInit+0x20>)
 8003364:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003368:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	e000ed00 	.word	0xe000ed00

0800337c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800337c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003380:	f7ff ffea 	bl	8003358 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003384:	480c      	ldr	r0, [pc, #48]	; (80033b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003386:	490d      	ldr	r1, [pc, #52]	; (80033bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003388:	4a0d      	ldr	r2, [pc, #52]	; (80033c0 <LoopForever+0xe>)
  movs r3, #0
 800338a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800338c:	e002      	b.n	8003394 <LoopCopyDataInit>

0800338e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800338e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003392:	3304      	adds	r3, #4

08003394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003398:	d3f9      	bcc.n	800338e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800339a:	4a0a      	ldr	r2, [pc, #40]	; (80033c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800339c:	4c0a      	ldr	r4, [pc, #40]	; (80033c8 <LoopForever+0x16>)
  movs r3, #0
 800339e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033a0:	e001      	b.n	80033a6 <LoopFillZerobss>

080033a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033a4:	3204      	adds	r2, #4

080033a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033a8:	d3fb      	bcc.n	80033a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033aa:	f005 f9bb 	bl	8008724 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80033ae:	f7fe ff87 	bl	80022c0 <main>

080033b2 <LoopForever>:

LoopForever:
    b LoopForever
 80033b2:	e7fe      	b.n	80033b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80033b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80033b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033bc:	20000298 	.word	0x20000298
  ldr r2, =_sidata
 80033c0:	0800a9bc 	.word	0x0800a9bc
  ldr r2, =_sbss
 80033c4:	20000298 	.word	0x20000298
  ldr r4, =_ebss
 80033c8:	20000bc4 	.word	0x20000bc4

080033cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80033cc:	e7fe      	b.n	80033cc <ADC1_2_IRQHandler>

080033ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033d8:	2003      	movs	r0, #3
 80033da:	f000 f961 	bl	80036a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033de:	2000      	movs	r0, #0
 80033e0:	f000 f80e 	bl	8003400 <HAL_InitTick>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	71fb      	strb	r3, [r7, #7]
 80033ee:	e001      	b.n	80033f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033f0:	f7ff fbc8 	bl	8002b84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033f4:	79fb      	ldrb	r3, [r7, #7]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003408:	2300      	movs	r3, #0
 800340a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800340c:	4b17      	ldr	r3, [pc, #92]	; (800346c <HAL_InitTick+0x6c>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d023      	beq.n	800345c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003414:	4b16      	ldr	r3, [pc, #88]	; (8003470 <HAL_InitTick+0x70>)
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	4b14      	ldr	r3, [pc, #80]	; (800346c <HAL_InitTick+0x6c>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	4619      	mov	r1, r3
 800341e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003422:	fbb3 f3f1 	udiv	r3, r3, r1
 8003426:	fbb2 f3f3 	udiv	r3, r2, r3
 800342a:	4618      	mov	r0, r3
 800342c:	f000 f96d 	bl	800370a <HAL_SYSTICK_Config>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10f      	bne.n	8003456 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b0f      	cmp	r3, #15
 800343a:	d809      	bhi.n	8003450 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800343c:	2200      	movs	r2, #0
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	f04f 30ff 	mov.w	r0, #4294967295
 8003444:	f000 f937 	bl	80036b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003448:	4a0a      	ldr	r2, [pc, #40]	; (8003474 <HAL_InitTick+0x74>)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	e007      	b.n	8003460 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	73fb      	strb	r3, [r7, #15]
 8003454:	e004      	b.n	8003460 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	73fb      	strb	r3, [r7, #15]
 800345a:	e001      	b.n	8003460 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003460:	7bfb      	ldrb	r3, [r7, #15]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	200000cc 	.word	0x200000cc
 8003470:	200000c4 	.word	0x200000c4
 8003474:	200000c8 	.word	0x200000c8

08003478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800347c:	4b06      	ldr	r3, [pc, #24]	; (8003498 <HAL_IncTick+0x20>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	461a      	mov	r2, r3
 8003482:	4b06      	ldr	r3, [pc, #24]	; (800349c <HAL_IncTick+0x24>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4413      	add	r3, r2
 8003488:	4a04      	ldr	r2, [pc, #16]	; (800349c <HAL_IncTick+0x24>)
 800348a:	6013      	str	r3, [r2, #0]
}
 800348c:	bf00      	nop
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	200000cc 	.word	0x200000cc
 800349c:	20000a50 	.word	0x20000a50

080034a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  return uwTick;
 80034a4:	4b03      	ldr	r3, [pc, #12]	; (80034b4 <HAL_GetTick+0x14>)
 80034a6:	681b      	ldr	r3, [r3, #0]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	20000a50 	.word	0x20000a50

080034b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034c0:	f7ff ffee 	bl	80034a0 <HAL_GetTick>
 80034c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d0:	d005      	beq.n	80034de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80034d2:	4b0a      	ldr	r3, [pc, #40]	; (80034fc <HAL_Delay+0x44>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4413      	add	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034de:	bf00      	nop
 80034e0:	f7ff ffde 	bl	80034a0 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d8f7      	bhi.n	80034e0 <HAL_Delay+0x28>
  {
  }
}
 80034f0:	bf00      	nop
 80034f2:	bf00      	nop
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	200000cc 	.word	0x200000cc

08003500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f003 0307 	and.w	r3, r3, #7
 800350e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003510:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <__NVIC_SetPriorityGrouping+0x44>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800351c:	4013      	ands	r3, r2
 800351e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003528:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800352c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003532:	4a04      	ldr	r2, [pc, #16]	; (8003544 <__NVIC_SetPriorityGrouping+0x44>)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	60d3      	str	r3, [r2, #12]
}
 8003538:	bf00      	nop
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	e000ed00 	.word	0xe000ed00

08003548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800354c:	4b04      	ldr	r3, [pc, #16]	; (8003560 <__NVIC_GetPriorityGrouping+0x18>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	0a1b      	lsrs	r3, r3, #8
 8003552:	f003 0307 	and.w	r3, r3, #7
}
 8003556:	4618      	mov	r0, r3
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	e000ed00 	.word	0xe000ed00

08003564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	4603      	mov	r3, r0
 800356c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800356e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003572:	2b00      	cmp	r3, #0
 8003574:	db0b      	blt.n	800358e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003576:	79fb      	ldrb	r3, [r7, #7]
 8003578:	f003 021f 	and.w	r2, r3, #31
 800357c:	4907      	ldr	r1, [pc, #28]	; (800359c <__NVIC_EnableIRQ+0x38>)
 800357e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003582:	095b      	lsrs	r3, r3, #5
 8003584:	2001      	movs	r0, #1
 8003586:	fa00 f202 	lsl.w	r2, r0, r2
 800358a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	e000e100 	.word	0xe000e100

080035a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	6039      	str	r1, [r7, #0]
 80035aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	db0a      	blt.n	80035ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	490c      	ldr	r1, [pc, #48]	; (80035ec <__NVIC_SetPriority+0x4c>)
 80035ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035be:	0112      	lsls	r2, r2, #4
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	440b      	add	r3, r1
 80035c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035c8:	e00a      	b.n	80035e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	4908      	ldr	r1, [pc, #32]	; (80035f0 <__NVIC_SetPriority+0x50>)
 80035d0:	79fb      	ldrb	r3, [r7, #7]
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	3b04      	subs	r3, #4
 80035d8:	0112      	lsls	r2, r2, #4
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	440b      	add	r3, r1
 80035de:	761a      	strb	r2, [r3, #24]
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	e000e100 	.word	0xe000e100
 80035f0:	e000ed00 	.word	0xe000ed00

080035f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b089      	sub	sp, #36	; 0x24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f1c3 0307 	rsb	r3, r3, #7
 800360e:	2b04      	cmp	r3, #4
 8003610:	bf28      	it	cs
 8003612:	2304      	movcs	r3, #4
 8003614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	3304      	adds	r3, #4
 800361a:	2b06      	cmp	r3, #6
 800361c:	d902      	bls.n	8003624 <NVIC_EncodePriority+0x30>
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	3b03      	subs	r3, #3
 8003622:	e000      	b.n	8003626 <NVIC_EncodePriority+0x32>
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003628:	f04f 32ff 	mov.w	r2, #4294967295
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43da      	mvns	r2, r3
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	401a      	ands	r2, r3
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800363c:	f04f 31ff 	mov.w	r1, #4294967295
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	fa01 f303 	lsl.w	r3, r1, r3
 8003646:	43d9      	mvns	r1, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800364c:	4313      	orrs	r3, r2
         );
}
 800364e:	4618      	mov	r0, r3
 8003650:	3724      	adds	r7, #36	; 0x24
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
	...

0800365c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3b01      	subs	r3, #1
 8003668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800366c:	d301      	bcc.n	8003672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800366e:	2301      	movs	r3, #1
 8003670:	e00f      	b.n	8003692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003672:	4a0a      	ldr	r2, [pc, #40]	; (800369c <SysTick_Config+0x40>)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3b01      	subs	r3, #1
 8003678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800367a:	210f      	movs	r1, #15
 800367c:	f04f 30ff 	mov.w	r0, #4294967295
 8003680:	f7ff ff8e 	bl	80035a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003684:	4b05      	ldr	r3, [pc, #20]	; (800369c <SysTick_Config+0x40>)
 8003686:	2200      	movs	r2, #0
 8003688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800368a:	4b04      	ldr	r3, [pc, #16]	; (800369c <SysTick_Config+0x40>)
 800368c:	2207      	movs	r2, #7
 800368e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	e000e010 	.word	0xe000e010

080036a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f7ff ff29 	bl	8003500 <__NVIC_SetPriorityGrouping>
}
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b086      	sub	sp, #24
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	4603      	mov	r3, r0
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	607a      	str	r2, [r7, #4]
 80036c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036c8:	f7ff ff3e 	bl	8003548 <__NVIC_GetPriorityGrouping>
 80036cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	68b9      	ldr	r1, [r7, #8]
 80036d2:	6978      	ldr	r0, [r7, #20]
 80036d4:	f7ff ff8e 	bl	80035f4 <NVIC_EncodePriority>
 80036d8:	4602      	mov	r2, r0
 80036da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036de:	4611      	mov	r1, r2
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff ff5d 	bl	80035a0 <__NVIC_SetPriority>
}
 80036e6:	bf00      	nop
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b082      	sub	sp, #8
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	4603      	mov	r3, r0
 80036f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff ff31 	bl	8003564 <__NVIC_EnableIRQ>
}
 8003702:	bf00      	nop
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b082      	sub	sp, #8
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff ffa2 	bl	800365c <SysTick_Config>
 8003718:	4603      	mov	r3, r0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e0ac      	b.n	8003890 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f000 f8b2 	bl	80038a4 <DFSDM_GetChannelFromInstance>
 8003740:	4603      	mov	r3, r0
 8003742:	4a55      	ldr	r2, [pc, #340]	; (8003898 <HAL_DFSDM_ChannelInit+0x174>)
 8003744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e09f      	b.n	8003890 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff fa3b 	bl	8002bcc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003756:	4b51      	ldr	r3, [pc, #324]	; (800389c <HAL_DFSDM_ChannelInit+0x178>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3301      	adds	r3, #1
 800375c:	4a4f      	ldr	r2, [pc, #316]	; (800389c <HAL_DFSDM_ChannelInit+0x178>)
 800375e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003760:	4b4e      	ldr	r3, [pc, #312]	; (800389c <HAL_DFSDM_ChannelInit+0x178>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d125      	bne.n	80037b4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003768:	4b4d      	ldr	r3, [pc, #308]	; (80038a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a4c      	ldr	r2, [pc, #304]	; (80038a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800376e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003772:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003774:	4b4a      	ldr	r3, [pc, #296]	; (80038a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	4948      	ldr	r1, [pc, #288]	; (80038a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800377e:	4313      	orrs	r3, r2
 8003780:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003782:	4b47      	ldr	r3, [pc, #284]	; (80038a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a46      	ldr	r2, [pc, #280]	; (80038a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003788:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800378c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	791b      	ldrb	r3, [r3, #4]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d108      	bne.n	80037a8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003796:	4b42      	ldr	r3, [pc, #264]	; (80038a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	3b01      	subs	r3, #1
 80037a0:	041b      	lsls	r3, r3, #16
 80037a2:	493f      	ldr	r1, [pc, #252]	; (80038a0 <HAL_DFSDM_ChannelInit+0x17c>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80037a8:	4b3d      	ldr	r3, [pc, #244]	; (80038a0 <HAL_DFSDM_ChannelInit+0x17c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a3c      	ldr	r2, [pc, #240]	; (80038a0 <HAL_DFSDM_ChannelInit+0x17c>)
 80037ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037b2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80037c2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6819      	ldr	r1, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80037d2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80037d8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 020f 	bic.w	r2, r2, #15
 80037f0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6819      	ldr	r1, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003818:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6899      	ldr	r1, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003828:	3b01      	subs	r3, #1
 800382a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f002 0207 	and.w	r2, r2, #7
 8003844:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6859      	ldr	r1, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003870:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f000 f810 	bl	80038a4 <DFSDM_GetChannelFromInstance>
 8003884:	4602      	mov	r2, r0
 8003886:	4904      	ldr	r1, [pc, #16]	; (8003898 <HAL_DFSDM_ChannelInit+0x174>)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	20000a58 	.word	0x20000a58
 800389c:	20000a54 	.word	0x20000a54
 80038a0:	40016000 	.word	0x40016000

080038a4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a1c      	ldr	r2, [pc, #112]	; (8003920 <DFSDM_GetChannelFromInstance+0x7c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d102      	bne.n	80038ba <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	e02b      	b.n	8003912 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a19      	ldr	r2, [pc, #100]	; (8003924 <DFSDM_GetChannelFromInstance+0x80>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d102      	bne.n	80038c8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80038c2:	2301      	movs	r3, #1
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	e024      	b.n	8003912 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a17      	ldr	r2, [pc, #92]	; (8003928 <DFSDM_GetChannelFromInstance+0x84>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d102      	bne.n	80038d6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80038d0:	2302      	movs	r3, #2
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	e01d      	b.n	8003912 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a14      	ldr	r2, [pc, #80]	; (800392c <DFSDM_GetChannelFromInstance+0x88>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d102      	bne.n	80038e4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80038de:	2304      	movs	r3, #4
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	e016      	b.n	8003912 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a12      	ldr	r2, [pc, #72]	; (8003930 <DFSDM_GetChannelFromInstance+0x8c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d102      	bne.n	80038f2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80038ec:	2305      	movs	r3, #5
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	e00f      	b.n	8003912 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a0f      	ldr	r2, [pc, #60]	; (8003934 <DFSDM_GetChannelFromInstance+0x90>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d102      	bne.n	8003900 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80038fa:	2306      	movs	r3, #6
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	e008      	b.n	8003912 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a0d      	ldr	r2, [pc, #52]	; (8003938 <DFSDM_GetChannelFromInstance+0x94>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d102      	bne.n	800390e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003908:	2307      	movs	r3, #7
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	e001      	b.n	8003912 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800390e:	2303      	movs	r3, #3
 8003910:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003912:	68fb      	ldr	r3, [r7, #12]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	40016000 	.word	0x40016000
 8003924:	40016020 	.word	0x40016020
 8003928:	40016040 	.word	0x40016040
 800392c:	40016080 	.word	0x40016080
 8003930:	400160a0 	.word	0x400160a0
 8003934:	400160c0 	.word	0x400160c0
 8003938:	400160e0 	.word	0x400160e0

0800393c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800394a:	e17f      	b.n	8003c4c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	2101      	movs	r1, #1
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	fa01 f303 	lsl.w	r3, r1, r3
 8003958:	4013      	ands	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 8171 	beq.w	8003c46 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	2b01      	cmp	r3, #1
 800396e:	d005      	beq.n	800397c <HAL_GPIO_Init+0x40>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d130      	bne.n	80039de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	2203      	movs	r2, #3
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	43db      	mvns	r3, r3
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4013      	ands	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039b2:	2201      	movs	r2, #1
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	43db      	mvns	r3, r3
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4013      	ands	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	091b      	lsrs	r3, r3, #4
 80039c8:	f003 0201 	and.w	r2, r3, #1
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	d118      	bne.n	8003a1c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80039f0:	2201      	movs	r2, #1
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	43db      	mvns	r3, r3
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4013      	ands	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	08db      	lsrs	r3, r3, #3
 8003a06:	f003 0201 	and.w	r2, r3, #1
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d017      	beq.n	8003a58 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	2203      	movs	r2, #3
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f003 0303 	and.w	r3, r3, #3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d123      	bne.n	8003aac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	08da      	lsrs	r2, r3, #3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3208      	adds	r2, #8
 8003a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a70:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	220f      	movs	r2, #15
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4013      	ands	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	691a      	ldr	r2, [r3, #16]
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	08da      	lsrs	r2, r3, #3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3208      	adds	r2, #8
 8003aa6:	6939      	ldr	r1, [r7, #16]
 8003aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	2203      	movs	r2, #3
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	43db      	mvns	r3, r3
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f003 0203 	and.w	r2, r3, #3
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 80ac 	beq.w	8003c46 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aee:	4b5f      	ldr	r3, [pc, #380]	; (8003c6c <HAL_GPIO_Init+0x330>)
 8003af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af2:	4a5e      	ldr	r2, [pc, #376]	; (8003c6c <HAL_GPIO_Init+0x330>)
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	6613      	str	r3, [r2, #96]	; 0x60
 8003afa:	4b5c      	ldr	r3, [pc, #368]	; (8003c6c <HAL_GPIO_Init+0x330>)
 8003afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	60bb      	str	r3, [r7, #8]
 8003b04:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b06:	4a5a      	ldr	r2, [pc, #360]	; (8003c70 <HAL_GPIO_Init+0x334>)
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	089b      	lsrs	r3, r3, #2
 8003b0c:	3302      	adds	r3, #2
 8003b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b12:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	220f      	movs	r2, #15
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	43db      	mvns	r3, r3
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4013      	ands	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b30:	d025      	beq.n	8003b7e <HAL_GPIO_Init+0x242>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a4f      	ldr	r2, [pc, #316]	; (8003c74 <HAL_GPIO_Init+0x338>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d01f      	beq.n	8003b7a <HAL_GPIO_Init+0x23e>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a4e      	ldr	r2, [pc, #312]	; (8003c78 <HAL_GPIO_Init+0x33c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d019      	beq.n	8003b76 <HAL_GPIO_Init+0x23a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a4d      	ldr	r2, [pc, #308]	; (8003c7c <HAL_GPIO_Init+0x340>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d013      	beq.n	8003b72 <HAL_GPIO_Init+0x236>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a4c      	ldr	r2, [pc, #304]	; (8003c80 <HAL_GPIO_Init+0x344>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00d      	beq.n	8003b6e <HAL_GPIO_Init+0x232>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a4b      	ldr	r2, [pc, #300]	; (8003c84 <HAL_GPIO_Init+0x348>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d007      	beq.n	8003b6a <HAL_GPIO_Init+0x22e>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a4a      	ldr	r2, [pc, #296]	; (8003c88 <HAL_GPIO_Init+0x34c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d101      	bne.n	8003b66 <HAL_GPIO_Init+0x22a>
 8003b62:	2306      	movs	r3, #6
 8003b64:	e00c      	b.n	8003b80 <HAL_GPIO_Init+0x244>
 8003b66:	2307      	movs	r3, #7
 8003b68:	e00a      	b.n	8003b80 <HAL_GPIO_Init+0x244>
 8003b6a:	2305      	movs	r3, #5
 8003b6c:	e008      	b.n	8003b80 <HAL_GPIO_Init+0x244>
 8003b6e:	2304      	movs	r3, #4
 8003b70:	e006      	b.n	8003b80 <HAL_GPIO_Init+0x244>
 8003b72:	2303      	movs	r3, #3
 8003b74:	e004      	b.n	8003b80 <HAL_GPIO_Init+0x244>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e002      	b.n	8003b80 <HAL_GPIO_Init+0x244>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <HAL_GPIO_Init+0x244>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	f002 0203 	and.w	r2, r2, #3
 8003b86:	0092      	lsls	r2, r2, #2
 8003b88:	4093      	lsls	r3, r2
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b90:	4937      	ldr	r1, [pc, #220]	; (8003c70 <HAL_GPIO_Init+0x334>)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	089b      	lsrs	r3, r3, #2
 8003b96:	3302      	adds	r3, #2
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b9e:	4b3b      	ldr	r3, [pc, #236]	; (8003c8c <HAL_GPIO_Init+0x350>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4013      	ands	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bc2:	4a32      	ldr	r2, [pc, #200]	; (8003c8c <HAL_GPIO_Init+0x350>)
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bc8:	4b30      	ldr	r3, [pc, #192]	; (8003c8c <HAL_GPIO_Init+0x350>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bec:	4a27      	ldr	r2, [pc, #156]	; (8003c8c <HAL_GPIO_Init+0x350>)
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003bf2:	4b26      	ldr	r3, [pc, #152]	; (8003c8c <HAL_GPIO_Init+0x350>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c16:	4a1d      	ldr	r2, [pc, #116]	; (8003c8c <HAL_GPIO_Init+0x350>)
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c1c:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <HAL_GPIO_Init+0x350>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	43db      	mvns	r3, r3
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c40:	4a12      	ldr	r2, [pc, #72]	; (8003c8c <HAL_GPIO_Init+0x350>)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	fa22 f303 	lsr.w	r3, r2, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f47f ae78 	bne.w	800394c <HAL_GPIO_Init+0x10>
  }
}
 8003c5c:	bf00      	nop
 8003c5e:	bf00      	nop
 8003c60:	371c      	adds	r7, #28
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40010000 	.word	0x40010000
 8003c74:	48000400 	.word	0x48000400
 8003c78:	48000800 	.word	0x48000800
 8003c7c:	48000c00 	.word	0x48000c00
 8003c80:	48001000 	.word	0x48001000
 8003c84:	48001400 	.word	0x48001400
 8003c88:	48001800 	.word	0x48001800
 8003c8c:	40010400 	.word	0x40010400

08003c90 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003c9e:	e0cd      	b.n	8003e3c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	4013      	ands	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80c0 	beq.w	8003e36 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003cb6:	4a68      	ldr	r2, [pc, #416]	; (8003e58 <HAL_GPIO_DeInit+0x1c8>)
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	089b      	lsrs	r3, r3, #2
 8003cbc:	3302      	adds	r3, #2
 8003cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f003 0303 	and.w	r3, r3, #3
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	220f      	movs	r2, #15
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003cde:	d025      	beq.n	8003d2c <HAL_GPIO_DeInit+0x9c>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a5e      	ldr	r2, [pc, #376]	; (8003e5c <HAL_GPIO_DeInit+0x1cc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d01f      	beq.n	8003d28 <HAL_GPIO_DeInit+0x98>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a5d      	ldr	r2, [pc, #372]	; (8003e60 <HAL_GPIO_DeInit+0x1d0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d019      	beq.n	8003d24 <HAL_GPIO_DeInit+0x94>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a5c      	ldr	r2, [pc, #368]	; (8003e64 <HAL_GPIO_DeInit+0x1d4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d013      	beq.n	8003d20 <HAL_GPIO_DeInit+0x90>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a5b      	ldr	r2, [pc, #364]	; (8003e68 <HAL_GPIO_DeInit+0x1d8>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00d      	beq.n	8003d1c <HAL_GPIO_DeInit+0x8c>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a5a      	ldr	r2, [pc, #360]	; (8003e6c <HAL_GPIO_DeInit+0x1dc>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d007      	beq.n	8003d18 <HAL_GPIO_DeInit+0x88>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a59      	ldr	r2, [pc, #356]	; (8003e70 <HAL_GPIO_DeInit+0x1e0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d101      	bne.n	8003d14 <HAL_GPIO_DeInit+0x84>
 8003d10:	2306      	movs	r3, #6
 8003d12:	e00c      	b.n	8003d2e <HAL_GPIO_DeInit+0x9e>
 8003d14:	2307      	movs	r3, #7
 8003d16:	e00a      	b.n	8003d2e <HAL_GPIO_DeInit+0x9e>
 8003d18:	2305      	movs	r3, #5
 8003d1a:	e008      	b.n	8003d2e <HAL_GPIO_DeInit+0x9e>
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	e006      	b.n	8003d2e <HAL_GPIO_DeInit+0x9e>
 8003d20:	2303      	movs	r3, #3
 8003d22:	e004      	b.n	8003d2e <HAL_GPIO_DeInit+0x9e>
 8003d24:	2302      	movs	r3, #2
 8003d26:	e002      	b.n	8003d2e <HAL_GPIO_DeInit+0x9e>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <HAL_GPIO_DeInit+0x9e>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	f002 0203 	and.w	r2, r2, #3
 8003d34:	0092      	lsls	r2, r2, #2
 8003d36:	4093      	lsls	r3, r2
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d132      	bne.n	8003da4 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003d3e:	4b4d      	ldr	r3, [pc, #308]	; (8003e74 <HAL_GPIO_DeInit+0x1e4>)
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	43db      	mvns	r3, r3
 8003d46:	494b      	ldr	r1, [pc, #300]	; (8003e74 <HAL_GPIO_DeInit+0x1e4>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003d4c:	4b49      	ldr	r3, [pc, #292]	; (8003e74 <HAL_GPIO_DeInit+0x1e4>)
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	43db      	mvns	r3, r3
 8003d54:	4947      	ldr	r1, [pc, #284]	; (8003e74 <HAL_GPIO_DeInit+0x1e4>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003d5a:	4b46      	ldr	r3, [pc, #280]	; (8003e74 <HAL_GPIO_DeInit+0x1e4>)
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	43db      	mvns	r3, r3
 8003d62:	4944      	ldr	r1, [pc, #272]	; (8003e74 <HAL_GPIO_DeInit+0x1e4>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003d68:	4b42      	ldr	r3, [pc, #264]	; (8003e74 <HAL_GPIO_DeInit+0x1e4>)
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	4940      	ldr	r1, [pc, #256]	; (8003e74 <HAL_GPIO_DeInit+0x1e4>)
 8003d72:	4013      	ands	r3, r2
 8003d74:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f003 0303 	and.w	r3, r3, #3
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	220f      	movs	r2, #15
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003d86:	4a34      	ldr	r2, [pc, #208]	; (8003e58 <HAL_GPIO_DeInit+0x1c8>)
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	089b      	lsrs	r3, r3, #2
 8003d8c:	3302      	adds	r3, #2
 8003d8e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	43da      	mvns	r2, r3
 8003d96:	4830      	ldr	r0, [pc, #192]	; (8003e58 <HAL_GPIO_DeInit+0x1c8>)
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	089b      	lsrs	r3, r3, #2
 8003d9c:	400a      	ands	r2, r1
 8003d9e:	3302      	adds	r3, #2
 8003da0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	2103      	movs	r1, #3
 8003dae:	fa01 f303 	lsl.w	r3, r1, r3
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	08da      	lsrs	r2, r3, #3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3208      	adds	r2, #8
 8003dc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	220f      	movs	r2, #15
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	08d2      	lsrs	r2, r2, #3
 8003dd8:	4019      	ands	r1, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3208      	adds	r2, #8
 8003dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	2103      	movs	r1, #3
 8003dec:	fa01 f303 	lsl.w	r3, r1, r3
 8003df0:	43db      	mvns	r3, r3
 8003df2:	401a      	ands	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	fa01 f303 	lsl.w	r3, r1, r3
 8003e04:	43db      	mvns	r3, r3
 8003e06:	401a      	ands	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	2103      	movs	r1, #3
 8003e16:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	401a      	ands	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e26:	2101      	movs	r1, #1
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	401a      	ands	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	fa22 f303 	lsr.w	r3, r2, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f47f af2b 	bne.w	8003ca0 <HAL_GPIO_DeInit+0x10>
  }
}
 8003e4a:	bf00      	nop
 8003e4c:	bf00      	nop
 8003e4e:	371c      	adds	r7, #28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	40010000 	.word	0x40010000
 8003e5c:	48000400 	.word	0x48000400
 8003e60:	48000800 	.word	0x48000800
 8003e64:	48000c00 	.word	0x48000c00
 8003e68:	48001000 	.word	0x48001000
 8003e6c:	48001400 	.word	0x48001400
 8003e70:	48001800 	.word	0x48001800
 8003e74:	40010400 	.word	0x40010400

08003e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	807b      	strh	r3, [r7, #2]
 8003e84:	4613      	mov	r3, r2
 8003e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e88:	787b      	ldrb	r3, [r7, #1]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e8e:	887a      	ldrh	r2, [r7, #2]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e94:	e002      	b.n	8003e9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e96:	887a      	ldrh	r2, [r7, #2]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003eb2:	4b08      	ldr	r3, [pc, #32]	; (8003ed4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003eb4:	695a      	ldr	r2, [r3, #20]
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d006      	beq.n	8003ecc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ebe:	4a05      	ldr	r2, [pc, #20]	; (8003ed4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ec0:	88fb      	ldrh	r3, [r7, #6]
 8003ec2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ec4:	88fb      	ldrh	r3, [r7, #6]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 f806 	bl	8003ed8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40010400 	.word	0x40010400

08003ed8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b082      	sub	sp, #8
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e08d      	b.n	800401c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d106      	bne.n	8003f1a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7fe febd 	bl	8002c94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2224      	movs	r2, #36	; 0x24
 8003f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0201 	bic.w	r2, r2, #1
 8003f30:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f3e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f4e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d107      	bne.n	8003f68 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f64:	609a      	str	r2, [r3, #8]
 8003f66:	e006      	b.n	8003f76 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003f74:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d108      	bne.n	8003f90 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f8c:	605a      	str	r2, [r3, #4]
 8003f8e:	e007      	b.n	8003fa0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f9e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6812      	ldr	r2, [r2, #0]
 8003faa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fb2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fc2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69d9      	ldr	r1, [r3, #28]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1a      	ldr	r2, [r3, #32]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f042 0201 	orr.w	r2, r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e021      	b.n	800407a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2224      	movs	r2, #36	; 0x24
 800403a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0201 	bic.w	r2, r2, #1
 800404c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fe fe7e 	bl	8002d50 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af02      	add	r7, sp, #8
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	4608      	mov	r0, r1
 800408e:	4611      	mov	r1, r2
 8004090:	461a      	mov	r2, r3
 8004092:	4603      	mov	r3, r0
 8004094:	817b      	strh	r3, [r7, #10]
 8004096:	460b      	mov	r3, r1
 8004098:	813b      	strh	r3, [r7, #8]
 800409a:	4613      	mov	r3, r2
 800409c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b20      	cmp	r3, #32
 80040a8:	f040 80f9 	bne.w	800429e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <HAL_I2C_Mem_Write+0x34>
 80040b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d105      	bne.n	80040c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e0ed      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_I2C_Mem_Write+0x4e>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e0e6      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040da:	f7ff f9e1 	bl	80034a0 <HAL_GetTick>
 80040de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	2319      	movs	r3, #25
 80040e6:	2201      	movs	r2, #1
 80040e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 fac3 	bl	8004678 <I2C_WaitOnFlagUntilTimeout>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0d1      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2221      	movs	r2, #33	; 0x21
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2240      	movs	r2, #64	; 0x40
 8004108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a3a      	ldr	r2, [r7, #32]
 8004116:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800411c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004124:	88f8      	ldrh	r0, [r7, #6]
 8004126:	893a      	ldrh	r2, [r7, #8]
 8004128:	8979      	ldrh	r1, [r7, #10]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	9301      	str	r3, [sp, #4]
 800412e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	4603      	mov	r3, r0
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 f9d3 	bl	80044e0 <I2C_RequestMemoryWrite>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0a9      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004150:	b29b      	uxth	r3, r3
 8004152:	2bff      	cmp	r3, #255	; 0xff
 8004154:	d90e      	bls.n	8004174 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	22ff      	movs	r2, #255	; 0xff
 800415a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004160:	b2da      	uxtb	r2, r3
 8004162:	8979      	ldrh	r1, [r7, #10]
 8004164:	2300      	movs	r3, #0
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 fc47 	bl	8004a00 <I2C_TransferConfig>
 8004172:	e00f      	b.n	8004194 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004182:	b2da      	uxtb	r2, r3
 8004184:	8979      	ldrh	r1, [r7, #10]
 8004186:	2300      	movs	r3, #0
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 fc36 	bl	8004a00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 fac6 	bl	800472a <I2C_WaitOnTXISFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e07b      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	781a      	ldrb	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d034      	beq.n	800424c <HAL_I2C_Mem_Write+0x1c8>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d130      	bne.n	800424c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f0:	2200      	movs	r2, #0
 80041f2:	2180      	movs	r1, #128	; 0x80
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 fa3f 	bl	8004678 <I2C_WaitOnFlagUntilTimeout>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e04d      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004208:	b29b      	uxth	r3, r3
 800420a:	2bff      	cmp	r3, #255	; 0xff
 800420c:	d90e      	bls.n	800422c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	22ff      	movs	r2, #255	; 0xff
 8004212:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004218:	b2da      	uxtb	r2, r3
 800421a:	8979      	ldrh	r1, [r7, #10]
 800421c:	2300      	movs	r3, #0
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 fbeb 	bl	8004a00 <I2C_TransferConfig>
 800422a:	e00f      	b.n	800424c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423a:	b2da      	uxtb	r2, r3
 800423c:	8979      	ldrh	r1, [r7, #10]
 800423e:	2300      	movs	r3, #0
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 fbda 	bl	8004a00 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d19e      	bne.n	8004194 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 faac 	bl	80047b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e01a      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2220      	movs	r2, #32
 8004270:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6859      	ldr	r1, [r3, #4]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	4b0a      	ldr	r3, [pc, #40]	; (80042a8 <HAL_I2C_Mem_Write+0x224>)
 800427e:	400b      	ands	r3, r1
 8004280:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	e000      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800429e:	2302      	movs	r3, #2
  }
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	fe00e800 	.word	0xfe00e800

080042ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af02      	add	r7, sp, #8
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	4608      	mov	r0, r1
 80042b6:	4611      	mov	r1, r2
 80042b8:	461a      	mov	r2, r3
 80042ba:	4603      	mov	r3, r0
 80042bc:	817b      	strh	r3, [r7, #10]
 80042be:	460b      	mov	r3, r1
 80042c0:	813b      	strh	r3, [r7, #8]
 80042c2:	4613      	mov	r3, r2
 80042c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b20      	cmp	r3, #32
 80042d0:	f040 80fd 	bne.w	80044ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <HAL_I2C_Mem_Read+0x34>
 80042da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d105      	bne.n	80042ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0f1      	b.n	80044d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_I2C_Mem_Read+0x4e>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e0ea      	b.n	80044d0 <HAL_I2C_Mem_Read+0x224>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004302:	f7ff f8cd 	bl	80034a0 <HAL_GetTick>
 8004306:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	2319      	movs	r3, #25
 800430e:	2201      	movs	r2, #1
 8004310:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f9af 	bl	8004678 <I2C_WaitOnFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e0d5      	b.n	80044d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2222      	movs	r2, #34	; 0x22
 8004328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2240      	movs	r2, #64	; 0x40
 8004330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a3a      	ldr	r2, [r7, #32]
 800433e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004344:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800434c:	88f8      	ldrh	r0, [r7, #6]
 800434e:	893a      	ldrh	r2, [r7, #8]
 8004350:	8979      	ldrh	r1, [r7, #10]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	9301      	str	r3, [sp, #4]
 8004356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	4603      	mov	r3, r0
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 f913 	bl	8004588 <I2C_RequestMemoryRead>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e0ad      	b.n	80044d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	2bff      	cmp	r3, #255	; 0xff
 800437c:	d90e      	bls.n	800439c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2201      	movs	r2, #1
 8004382:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004388:	b2da      	uxtb	r2, r3
 800438a:	8979      	ldrh	r1, [r7, #10]
 800438c:	4b52      	ldr	r3, [pc, #328]	; (80044d8 <HAL_I2C_Mem_Read+0x22c>)
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 fb33 	bl	8004a00 <I2C_TransferConfig>
 800439a:	e00f      	b.n	80043bc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	8979      	ldrh	r1, [r7, #10]
 80043ae:	4b4a      	ldr	r3, [pc, #296]	; (80044d8 <HAL_I2C_Mem_Read+0x22c>)
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fb22 	bl	8004a00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c2:	2200      	movs	r2, #0
 80043c4:	2104      	movs	r1, #4
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f956 	bl	8004678 <I2C_WaitOnFlagUntilTimeout>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e07c      	b.n	80044d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fe:	b29b      	uxth	r3, r3
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d034      	beq.n	800447c <HAL_I2C_Mem_Read+0x1d0>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004416:	2b00      	cmp	r3, #0
 8004418:	d130      	bne.n	800447c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	2200      	movs	r2, #0
 8004422:	2180      	movs	r1, #128	; 0x80
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 f927 	bl	8004678 <I2C_WaitOnFlagUntilTimeout>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e04d      	b.n	80044d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004438:	b29b      	uxth	r3, r3
 800443a:	2bff      	cmp	r3, #255	; 0xff
 800443c:	d90e      	bls.n	800445c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2201      	movs	r2, #1
 8004442:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004448:	b2da      	uxtb	r2, r3
 800444a:	8979      	ldrh	r1, [r7, #10]
 800444c:	2300      	movs	r3, #0
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 fad3 	bl	8004a00 <I2C_TransferConfig>
 800445a:	e00f      	b.n	800447c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800446a:	b2da      	uxtb	r2, r3
 800446c:	8979      	ldrh	r1, [r7, #10]
 800446e:	2300      	movs	r3, #0
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 fac2 	bl	8004a00 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d19a      	bne.n	80043bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 f994 	bl	80047b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e01a      	b.n	80044d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2220      	movs	r2, #32
 80044a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6859      	ldr	r1, [r3, #4]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <HAL_I2C_Mem_Read+0x230>)
 80044ae:	400b      	ands	r3, r1
 80044b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	e000      	b.n	80044d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80044ce:	2302      	movs	r3, #2
  }
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	80002400 	.word	0x80002400
 80044dc:	fe00e800 	.word	0xfe00e800

080044e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af02      	add	r7, sp, #8
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	4608      	mov	r0, r1
 80044ea:	4611      	mov	r1, r2
 80044ec:	461a      	mov	r2, r3
 80044ee:	4603      	mov	r3, r0
 80044f0:	817b      	strh	r3, [r7, #10]
 80044f2:	460b      	mov	r3, r1
 80044f4:	813b      	strh	r3, [r7, #8]
 80044f6:	4613      	mov	r3, r2
 80044f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80044fa:	88fb      	ldrh	r3, [r7, #6]
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	8979      	ldrh	r1, [r7, #10]
 8004500:	4b20      	ldr	r3, [pc, #128]	; (8004584 <I2C_RequestMemoryWrite+0xa4>)
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 fa79 	bl	8004a00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800450e:	69fa      	ldr	r2, [r7, #28]
 8004510:	69b9      	ldr	r1, [r7, #24]
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 f909 	bl	800472a <I2C_WaitOnTXISFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e02c      	b.n	800457c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004522:	88fb      	ldrh	r3, [r7, #6]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d105      	bne.n	8004534 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004528:	893b      	ldrh	r3, [r7, #8]
 800452a:	b2da      	uxtb	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	629a      	str	r2, [r3, #40]	; 0x28
 8004532:	e015      	b.n	8004560 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004534:	893b      	ldrh	r3, [r7, #8]
 8004536:	0a1b      	lsrs	r3, r3, #8
 8004538:	b29b      	uxth	r3, r3
 800453a:	b2da      	uxtb	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004542:	69fa      	ldr	r2, [r7, #28]
 8004544:	69b9      	ldr	r1, [r7, #24]
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 f8ef 	bl	800472a <I2C_WaitOnTXISFlagUntilTimeout>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e012      	b.n	800457c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004556:	893b      	ldrh	r3, [r7, #8]
 8004558:	b2da      	uxtb	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	2200      	movs	r2, #0
 8004568:	2180      	movs	r1, #128	; 0x80
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 f884 	bl	8004678 <I2C_WaitOnFlagUntilTimeout>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	80002000 	.word	0x80002000

08004588 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af02      	add	r7, sp, #8
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	4608      	mov	r0, r1
 8004592:	4611      	mov	r1, r2
 8004594:	461a      	mov	r2, r3
 8004596:	4603      	mov	r3, r0
 8004598:	817b      	strh	r3, [r7, #10]
 800459a:	460b      	mov	r3, r1
 800459c:	813b      	strh	r3, [r7, #8]
 800459e:	4613      	mov	r3, r2
 80045a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80045a2:	88fb      	ldrh	r3, [r7, #6]
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	8979      	ldrh	r1, [r7, #10]
 80045a8:	4b20      	ldr	r3, [pc, #128]	; (800462c <I2C_RequestMemoryRead+0xa4>)
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	2300      	movs	r3, #0
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 fa26 	bl	8004a00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045b4:	69fa      	ldr	r2, [r7, #28]
 80045b6:	69b9      	ldr	r1, [r7, #24]
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 f8b6 	bl	800472a <I2C_WaitOnTXISFlagUntilTimeout>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e02c      	b.n	8004622 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045c8:	88fb      	ldrh	r3, [r7, #6]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d105      	bne.n	80045da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045ce:	893b      	ldrh	r3, [r7, #8]
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	629a      	str	r2, [r3, #40]	; 0x28
 80045d8:	e015      	b.n	8004606 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80045da:	893b      	ldrh	r3, [r7, #8]
 80045dc:	0a1b      	lsrs	r3, r3, #8
 80045de:	b29b      	uxth	r3, r3
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	69b9      	ldr	r1, [r7, #24]
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 f89c 	bl	800472a <I2C_WaitOnTXISFlagUntilTimeout>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e012      	b.n	8004622 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045fc:	893b      	ldrh	r3, [r7, #8]
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	2200      	movs	r2, #0
 800460e:	2140      	movs	r1, #64	; 0x40
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 f831 	bl	8004678 <I2C_WaitOnFlagUntilTimeout>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e000      	b.n	8004622 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	80002000 	.word	0x80002000

08004630 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b02      	cmp	r3, #2
 8004644:	d103      	bne.n	800464e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2200      	movs	r2, #0
 800464c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b01      	cmp	r3, #1
 800465a:	d007      	beq.n	800466c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699a      	ldr	r2, [r3, #24]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0201 	orr.w	r2, r2, #1
 800466a:	619a      	str	r2, [r3, #24]
  }
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	603b      	str	r3, [r7, #0]
 8004684:	4613      	mov	r3, r2
 8004686:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004688:	e03b      	b.n	8004702 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	6839      	ldr	r1, [r7, #0]
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 f8d6 	bl	8004840 <I2C_IsErrorOccurred>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e041      	b.n	8004722 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a4:	d02d      	beq.n	8004702 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a6:	f7fe fefb 	bl	80034a0 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d302      	bcc.n	80046bc <I2C_WaitOnFlagUntilTimeout+0x44>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d122      	bne.n	8004702 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	699a      	ldr	r2, [r3, #24]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	4013      	ands	r3, r2
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	bf0c      	ite	eq
 80046cc:	2301      	moveq	r3, #1
 80046ce:	2300      	movne	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	461a      	mov	r2, r3
 80046d4:	79fb      	ldrb	r3, [r7, #7]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d113      	bne.n	8004702 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046de:	f043 0220 	orr.w	r2, r3, #32
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e00f      	b.n	8004722 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	699a      	ldr	r2, [r3, #24]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4013      	ands	r3, r2
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	429a      	cmp	r2, r3
 8004710:	bf0c      	ite	eq
 8004712:	2301      	moveq	r3, #1
 8004714:	2300      	movne	r3, #0
 8004716:	b2db      	uxtb	r3, r3
 8004718:	461a      	mov	r2, r3
 800471a:	79fb      	ldrb	r3, [r7, #7]
 800471c:	429a      	cmp	r2, r3
 800471e:	d0b4      	beq.n	800468a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004736:	e033      	b.n	80047a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	68b9      	ldr	r1, [r7, #8]
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 f87f 	bl	8004840 <I2C_IsErrorOccurred>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e031      	b.n	80047b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004752:	d025      	beq.n	80047a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004754:	f7fe fea4 	bl	80034a0 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	429a      	cmp	r2, r3
 8004762:	d302      	bcc.n	800476a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d11a      	bne.n	80047a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b02      	cmp	r3, #2
 8004776:	d013      	beq.n	80047a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477c:	f043 0220 	orr.w	r2, r3, #32
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e007      	b.n	80047b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d1c4      	bne.n	8004738 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047c4:	e02f      	b.n	8004826 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 f838 	bl	8004840 <I2C_IsErrorOccurred>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e02d      	b.n	8004836 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047da:	f7fe fe61 	bl	80034a0 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d302      	bcc.n	80047f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d11a      	bne.n	8004826 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	f003 0320 	and.w	r3, r3, #32
 80047fa:	2b20      	cmp	r3, #32
 80047fc:	d013      	beq.n	8004826 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	f043 0220 	orr.w	r2, r3, #32
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e007      	b.n	8004836 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	f003 0320 	and.w	r3, r3, #32
 8004830:	2b20      	cmp	r3, #32
 8004832:	d1c8      	bne.n	80047c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
	...

08004840 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08a      	sub	sp, #40	; 0x28
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800484c:	2300      	movs	r3, #0
 800484e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800485a:	2300      	movs	r3, #0
 800485c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	f003 0310 	and.w	r3, r3, #16
 8004868:	2b00      	cmp	r3, #0
 800486a:	d068      	beq.n	800493e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2210      	movs	r2, #16
 8004872:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004874:	e049      	b.n	800490a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487c:	d045      	beq.n	800490a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800487e:	f7fe fe0f 	bl	80034a0 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	429a      	cmp	r2, r3
 800488c:	d302      	bcc.n	8004894 <I2C_IsErrorOccurred+0x54>
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d13a      	bne.n	800490a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800489e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b6:	d121      	bne.n	80048fc <I2C_IsErrorOccurred+0xbc>
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048be:	d01d      	beq.n	80048fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80048c0:	7cfb      	ldrb	r3, [r7, #19]
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	d01a      	beq.n	80048fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80048d6:	f7fe fde3 	bl	80034a0 <HAL_GetTick>
 80048da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048dc:	e00e      	b.n	80048fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80048de:	f7fe fddf 	bl	80034a0 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b19      	cmp	r3, #25
 80048ea:	d907      	bls.n	80048fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	f043 0320 	orr.w	r3, r3, #32
 80048f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80048fa:	e006      	b.n	800490a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	f003 0320 	and.w	r3, r3, #32
 8004906:	2b20      	cmp	r3, #32
 8004908:	d1e9      	bne.n	80048de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	f003 0320 	and.w	r3, r3, #32
 8004914:	2b20      	cmp	r3, #32
 8004916:	d003      	beq.n	8004920 <I2C_IsErrorOccurred+0xe0>
 8004918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0aa      	beq.n	8004876 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004920:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004924:	2b00      	cmp	r3, #0
 8004926:	d103      	bne.n	8004930 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2220      	movs	r2, #32
 800492e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	f043 0304 	orr.w	r3, r3, #4
 8004936:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00b      	beq.n	8004968 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004960:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00b      	beq.n	800498a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	f043 0308 	orr.w	r3, r3, #8
 8004978:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004982:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00b      	beq.n	80049ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	f043 0302 	orr.w	r3, r3, #2
 800499a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80049ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01c      	beq.n	80049ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f7ff fe3b 	bl	8004630 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6859      	ldr	r1, [r3, #4]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	4b0d      	ldr	r3, [pc, #52]	; (80049fc <I2C_IsErrorOccurred+0x1bc>)
 80049c6:	400b      	ands	r3, r1
 80049c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	431a      	orrs	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2220      	movs	r2, #32
 80049da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80049ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3728      	adds	r7, #40	; 0x28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	fe00e800 	.word	0xfe00e800

08004a00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	607b      	str	r3, [r7, #4]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	817b      	strh	r3, [r7, #10]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a12:	897b      	ldrh	r3, [r7, #10]
 8004a14:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a18:	7a7b      	ldrb	r3, [r7, #9]
 8004a1a:	041b      	lsls	r3, r3, #16
 8004a1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a20:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a2e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	6a3b      	ldr	r3, [r7, #32]
 8004a38:	0d5b      	lsrs	r3, r3, #21
 8004a3a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004a3e:	4b08      	ldr	r3, [pc, #32]	; (8004a60 <I2C_TransferConfig+0x60>)
 8004a40:	430b      	orrs	r3, r1
 8004a42:	43db      	mvns	r3, r3
 8004a44:	ea02 0103 	and.w	r1, r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a52:	bf00      	nop
 8004a54:	371c      	adds	r7, #28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	03ff63ff 	.word	0x03ff63ff

08004a64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b20      	cmp	r3, #32
 8004a78:	d138      	bne.n	8004aec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e032      	b.n	8004aee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2224      	movs	r2, #36	; 0x24
 8004a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0201 	bic.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ab6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6819      	ldr	r1, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0201 	orr.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	e000      	b.n	8004aee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004aec:	2302      	movs	r3, #2
  }
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b085      	sub	sp, #20
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	d139      	bne.n	8004b84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	e033      	b.n	8004b86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2224      	movs	r2, #36	; 0x24
 8004b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0201 	bic.w	r2, r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	021b      	lsls	r3, r3, #8
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0201 	orr.w	r2, r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b80:	2300      	movs	r3, #0
 8004b82:	e000      	b.n	8004b86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b84:	2302      	movs	r3, #2
  }
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b086      	sub	sp, #24
 8004b96:	af02      	add	r7, sp, #8
 8004b98:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e101      	b.n	8004da8 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d106      	bne.n	8004bbe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7fe fa19 	bl	8002ff0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2203      	movs	r2, #3
 8004bc2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f002 fc61 	bl	8007498 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6818      	ldr	r0, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	7c1a      	ldrb	r2, [r3, #16]
 8004bde:	f88d 2000 	strb.w	r2, [sp]
 8004be2:	3304      	adds	r3, #4
 8004be4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004be6:	f002 fc2a 	bl	800743e <USB_CoreInit>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e0d5      	b.n	8004da8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2100      	movs	r1, #0
 8004c02:	4618      	mov	r0, r3
 8004c04:	f002 fc59 	bl	80074ba <USB_SetCurrentMode>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2202      	movs	r2, #2
 8004c12:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e0c6      	b.n	8004da8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	73fb      	strb	r3, [r7, #15]
 8004c1e:	e04a      	b.n	8004cb6 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c20:	7bfa      	ldrb	r2, [r7, #15]
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	4613      	mov	r3, r2
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	4413      	add	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	3315      	adds	r3, #21
 8004c30:	2201      	movs	r2, #1
 8004c32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c34:	7bfa      	ldrb	r2, [r7, #15]
 8004c36:	6879      	ldr	r1, [r7, #4]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	4413      	add	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	3314      	adds	r3, #20
 8004c44:	7bfa      	ldrb	r2, [r7, #15]
 8004c46:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c48:	7bfa      	ldrb	r2, [r7, #15]
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
 8004c4c:	b298      	uxth	r0, r3
 8004c4e:	6879      	ldr	r1, [r7, #4]
 8004c50:	4613      	mov	r3, r2
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	4413      	add	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	440b      	add	r3, r1
 8004c5a:	332e      	adds	r3, #46	; 0x2e
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c60:	7bfa      	ldrb	r2, [r7, #15]
 8004c62:	6879      	ldr	r1, [r7, #4]
 8004c64:	4613      	mov	r3, r2
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	4413      	add	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	3318      	adds	r3, #24
 8004c70:	2200      	movs	r2, #0
 8004c72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c74:	7bfa      	ldrb	r2, [r7, #15]
 8004c76:	6879      	ldr	r1, [r7, #4]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	331c      	adds	r3, #28
 8004c84:	2200      	movs	r2, #0
 8004c86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c88:	7bfa      	ldrb	r2, [r7, #15]
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	4413      	add	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	440b      	add	r3, r1
 8004c96:	3320      	adds	r3, #32
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c9c:	7bfa      	ldrb	r2, [r7, #15]
 8004c9e:	6879      	ldr	r1, [r7, #4]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	4413      	add	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	440b      	add	r3, r1
 8004caa:	3324      	adds	r3, #36	; 0x24
 8004cac:	2200      	movs	r2, #0
 8004cae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	73fb      	strb	r3, [r7, #15]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	791b      	ldrb	r3, [r3, #4]
 8004cba:	7bfa      	ldrb	r2, [r7, #15]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d3af      	bcc.n	8004c20 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	73fb      	strb	r3, [r7, #15]
 8004cc4:	e044      	b.n	8004d50 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004cc6:	7bfa      	ldrb	r2, [r7, #15]
 8004cc8:	6879      	ldr	r1, [r7, #4]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	440b      	add	r3, r1
 8004cd4:	f203 2355 	addw	r3, r3, #597	; 0x255
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004cdc:	7bfa      	ldrb	r2, [r7, #15]
 8004cde:	6879      	ldr	r1, [r7, #4]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	4413      	add	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	440b      	add	r3, r1
 8004cea:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8004cee:	7bfa      	ldrb	r2, [r7, #15]
 8004cf0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004cf2:	7bfa      	ldrb	r2, [r7, #15]
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	440b      	add	r3, r1
 8004d00:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004d04:	2200      	movs	r2, #0
 8004d06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d08:	7bfa      	ldrb	r2, [r7, #15]
 8004d0a:	6879      	ldr	r1, [r7, #4]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	4413      	add	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d1e:	7bfa      	ldrb	r2, [r7, #15]
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	4413      	add	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8004d30:	2200      	movs	r2, #0
 8004d32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d34:	7bfa      	ldrb	r2, [r7, #15]
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	4413      	add	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	73fb      	strb	r3, [r7, #15]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	791b      	ldrb	r3, [r3, #4]
 8004d54:	7bfa      	ldrb	r2, [r7, #15]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d3b5      	bcc.n	8004cc6 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6818      	ldr	r0, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	7c1a      	ldrb	r2, [r3, #16]
 8004d62:	f88d 2000 	strb.w	r2, [sp]
 8004d66:	3304      	adds	r3, #4
 8004d68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d6a:	f002 fbf3 	bl	8007554 <USB_DevInit>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e013      	b.n	8004da8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	7b1b      	ldrb	r3, [r3, #12]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d102      	bne.n	8004d9c <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f80a 	bl	8004db0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f002 fd98 	bl	80078d6 <USB_DevDisconnect>

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de2:	f043 0303 	orr.w	r3, r3, #3
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dfc:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a04      	ldr	r2, [pc, #16]	; (8004e14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e06:	6013      	str	r3, [r2, #0]
}
 8004e08:	bf00      	nop
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40007000 	.word	0x40007000

08004e18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004e1c:	4b04      	ldr	r3, [pc, #16]	; (8004e30 <HAL_PWREx_GetVoltageRange+0x18>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40007000 	.word	0x40007000

08004e34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e42:	d130      	bne.n	8004ea6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e44:	4b23      	ldr	r3, [pc, #140]	; (8004ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e50:	d038      	beq.n	8004ec4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e52:	4b20      	ldr	r3, [pc, #128]	; (8004ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e5a:	4a1e      	ldr	r2, [pc, #120]	; (8004ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e60:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e62:	4b1d      	ldr	r3, [pc, #116]	; (8004ed8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2232      	movs	r2, #50	; 0x32
 8004e68:	fb02 f303 	mul.w	r3, r2, r3
 8004e6c:	4a1b      	ldr	r2, [pc, #108]	; (8004edc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e72:	0c9b      	lsrs	r3, r3, #18
 8004e74:	3301      	adds	r3, #1
 8004e76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e78:	e002      	b.n	8004e80 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e80:	4b14      	ldr	r3, [pc, #80]	; (8004ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e8c:	d102      	bne.n	8004e94 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1f2      	bne.n	8004e7a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e94:	4b0f      	ldr	r3, [pc, #60]	; (8004ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea0:	d110      	bne.n	8004ec4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e00f      	b.n	8004ec6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	; (8004ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb2:	d007      	beq.n	8004ec4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004eb4:	4b07      	ldr	r3, [pc, #28]	; (8004ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ebc:	4a05      	ldr	r2, [pc, #20]	; (8004ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ec2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	40007000 	.word	0x40007000
 8004ed8:	200000c4 	.word	0x200000c4
 8004edc:	431bde83 	.word	0x431bde83

08004ee0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004ee4:	4b05      	ldr	r3, [pc, #20]	; (8004efc <HAL_PWREx_EnableVddUSB+0x1c>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	4a04      	ldr	r2, [pc, #16]	; (8004efc <HAL_PWREx_EnableVddUSB+0x1c>)
 8004eea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004eee:	6053      	str	r3, [r2, #4]
}
 8004ef0:	bf00      	nop
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	40007000 	.word	0x40007000

08004f00 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004f08:	f7fe faca 	bl	80034a0 <HAL_GetTick>
 8004f0c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e063      	b.n	8004fe0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10b      	bne.n	8004f3c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7fd ff33 	bl	8002d98 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004f32:	f241 3188 	movw	r1, #5000	; 0x1388
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f858 	bl	8004fec <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	021a      	lsls	r2, r3, #8
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	2120      	movs	r1, #32
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f850 	bl	8005008 <QSPI_WaitFlagStateUntilTimeout>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004f6c:	7afb      	ldrb	r3, [r7, #11]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d131      	bne.n	8004fd6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f7c:	f023 0310 	bic.w	r3, r3, #16
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6852      	ldr	r2, [r2, #4]
 8004f84:	0611      	lsls	r1, r2, #24
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	68d2      	ldr	r2, [r2, #12]
 8004f8a:	4311      	orrs	r1, r2
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	6812      	ldr	r2, [r2, #0]
 8004f90:	430b      	orrs	r3, r1
 8004f92:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	4b13      	ldr	r3, [pc, #76]	; (8004fe8 <HAL_QSPI_Init+0xe8>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	6912      	ldr	r2, [r2, #16]
 8004fa2:	0411      	lsls	r1, r2, #16
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6952      	ldr	r2, [r2, #20]
 8004fa8:	4311      	orrs	r1, r2
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6992      	ldr	r2, [r2, #24]
 8004fae:	4311      	orrs	r1, r2
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6812      	ldr	r2, [r2, #0]
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0201 	orr.w	r2, r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004fde:	7afb      	ldrb	r3, [r7, #11]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	ffe0f8fe 	.word	0xffe0f8fe

08004fec <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	603b      	str	r3, [r7, #0]
 8005014:	4613      	mov	r3, r2
 8005016:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005018:	e01a      	b.n	8005050 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005020:	d016      	beq.n	8005050 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005022:	f7fe fa3d 	bl	80034a0 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	429a      	cmp	r2, r3
 8005030:	d302      	bcc.n	8005038 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10b      	bne.n	8005050 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2204      	movs	r2, #4
 800503c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005044:	f043 0201 	orr.w	r2, r3, #1
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e00e      	b.n	800506e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689a      	ldr	r2, [r3, #8]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	4013      	ands	r3, r2
 800505a:	2b00      	cmp	r3, #0
 800505c:	bf14      	ite	ne
 800505e:	2301      	movne	r3, #1
 8005060:	2300      	moveq	r3, #0
 8005062:	b2db      	uxtb	r3, r3
 8005064:	461a      	mov	r2, r3
 8005066:	79fb      	ldrb	r3, [r7, #7]
 8005068:	429a      	cmp	r2, r3
 800506a:	d1d6      	bne.n	800501a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b088      	sub	sp, #32
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e3ca      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800508a:	4b97      	ldr	r3, [pc, #604]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 030c 	and.w	r3, r3, #12
 8005092:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005094:	4b94      	ldr	r3, [pc, #592]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f003 0303 	and.w	r3, r3, #3
 800509c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0310 	and.w	r3, r3, #16
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 80e4 	beq.w	8005274 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d007      	beq.n	80050c2 <HAL_RCC_OscConfig+0x4a>
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	2b0c      	cmp	r3, #12
 80050b6:	f040 808b 	bne.w	80051d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	f040 8087 	bne.w	80051d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050c2:	4b89      	ldr	r3, [pc, #548]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d005      	beq.n	80050da <HAL_RCC_OscConfig+0x62>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e3a2      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1a      	ldr	r2, [r3, #32]
 80050de:	4b82      	ldr	r3, [pc, #520]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0308 	and.w	r3, r3, #8
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d004      	beq.n	80050f4 <HAL_RCC_OscConfig+0x7c>
 80050ea:	4b7f      	ldr	r3, [pc, #508]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050f2:	e005      	b.n	8005100 <HAL_RCC_OscConfig+0x88>
 80050f4:	4b7c      	ldr	r3, [pc, #496]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 80050f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050fa:	091b      	lsrs	r3, r3, #4
 80050fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005100:	4293      	cmp	r3, r2
 8005102:	d223      	bcs.n	800514c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a1b      	ldr	r3, [r3, #32]
 8005108:	4618      	mov	r0, r3
 800510a:	f000 fd55 	bl	8005bb8 <RCC_SetFlashLatencyFromMSIRange>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e383      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005118:	4b73      	ldr	r3, [pc, #460]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a72      	ldr	r2, [pc, #456]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 800511e:	f043 0308 	orr.w	r3, r3, #8
 8005122:	6013      	str	r3, [r2, #0]
 8005124:	4b70      	ldr	r3, [pc, #448]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	496d      	ldr	r1, [pc, #436]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005132:	4313      	orrs	r3, r2
 8005134:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005136:	4b6c      	ldr	r3, [pc, #432]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	4968      	ldr	r1, [pc, #416]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005146:	4313      	orrs	r3, r2
 8005148:	604b      	str	r3, [r1, #4]
 800514a:	e025      	b.n	8005198 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800514c:	4b66      	ldr	r3, [pc, #408]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a65      	ldr	r2, [pc, #404]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005152:	f043 0308 	orr.w	r3, r3, #8
 8005156:	6013      	str	r3, [r2, #0]
 8005158:	4b63      	ldr	r3, [pc, #396]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	4960      	ldr	r1, [pc, #384]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005166:	4313      	orrs	r3, r2
 8005168:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800516a:	4b5f      	ldr	r3, [pc, #380]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	021b      	lsls	r3, r3, #8
 8005178:	495b      	ldr	r1, [pc, #364]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 800517a:	4313      	orrs	r3, r2
 800517c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d109      	bne.n	8005198 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	4618      	mov	r0, r3
 800518a:	f000 fd15 	bl	8005bb8 <RCC_SetFlashLatencyFromMSIRange>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e343      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005198:	f000 fc4a 	bl	8005a30 <HAL_RCC_GetSysClockFreq>
 800519c:	4602      	mov	r2, r0
 800519e:	4b52      	ldr	r3, [pc, #328]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	091b      	lsrs	r3, r3, #4
 80051a4:	f003 030f 	and.w	r3, r3, #15
 80051a8:	4950      	ldr	r1, [pc, #320]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 80051aa:	5ccb      	ldrb	r3, [r1, r3]
 80051ac:	f003 031f 	and.w	r3, r3, #31
 80051b0:	fa22 f303 	lsr.w	r3, r2, r3
 80051b4:	4a4e      	ldr	r2, [pc, #312]	; (80052f0 <HAL_RCC_OscConfig+0x278>)
 80051b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80051b8:	4b4e      	ldr	r3, [pc, #312]	; (80052f4 <HAL_RCC_OscConfig+0x27c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fe f91f 	bl	8003400 <HAL_InitTick>
 80051c2:	4603      	mov	r3, r0
 80051c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d052      	beq.n	8005272 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
 80051ce:	e327      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d032      	beq.n	800523e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80051d8:	4b43      	ldr	r3, [pc, #268]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a42      	ldr	r2, [pc, #264]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 80051de:	f043 0301 	orr.w	r3, r3, #1
 80051e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051e4:	f7fe f95c 	bl	80034a0 <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051ec:	f7fe f958 	bl	80034a0 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e310      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051fe:	4b3a      	ldr	r3, [pc, #232]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d0f0      	beq.n	80051ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800520a:	4b37      	ldr	r3, [pc, #220]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a36      	ldr	r2, [pc, #216]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005210:	f043 0308 	orr.w	r3, r3, #8
 8005214:	6013      	str	r3, [r2, #0]
 8005216:	4b34      	ldr	r3, [pc, #208]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	4931      	ldr	r1, [pc, #196]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005224:	4313      	orrs	r3, r2
 8005226:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005228:	4b2f      	ldr	r3, [pc, #188]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	021b      	lsls	r3, r3, #8
 8005236:	492c      	ldr	r1, [pc, #176]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005238:	4313      	orrs	r3, r2
 800523a:	604b      	str	r3, [r1, #4]
 800523c:	e01a      	b.n	8005274 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800523e:	4b2a      	ldr	r3, [pc, #168]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a29      	ldr	r2, [pc, #164]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005244:	f023 0301 	bic.w	r3, r3, #1
 8005248:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800524a:	f7fe f929 	bl	80034a0 <HAL_GetTick>
 800524e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005250:	e008      	b.n	8005264 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005252:	f7fe f925 	bl	80034a0 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d901      	bls.n	8005264 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e2dd      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005264:	4b20      	ldr	r3, [pc, #128]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1f0      	bne.n	8005252 <HAL_RCC_OscConfig+0x1da>
 8005270:	e000      	b.n	8005274 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005272:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d074      	beq.n	800536a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	2b08      	cmp	r3, #8
 8005284:	d005      	beq.n	8005292 <HAL_RCC_OscConfig+0x21a>
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	2b0c      	cmp	r3, #12
 800528a:	d10e      	bne.n	80052aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	2b03      	cmp	r3, #3
 8005290:	d10b      	bne.n	80052aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005292:	4b15      	ldr	r3, [pc, #84]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d064      	beq.n	8005368 <HAL_RCC_OscConfig+0x2f0>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d160      	bne.n	8005368 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e2ba      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b2:	d106      	bne.n	80052c2 <HAL_RCC_OscConfig+0x24a>
 80052b4:	4b0c      	ldr	r3, [pc, #48]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a0b      	ldr	r2, [pc, #44]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 80052ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	e026      	b.n	8005310 <HAL_RCC_OscConfig+0x298>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052ca:	d115      	bne.n	80052f8 <HAL_RCC_OscConfig+0x280>
 80052cc:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a05      	ldr	r2, [pc, #20]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 80052d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052d6:	6013      	str	r3, [r2, #0]
 80052d8:	4b03      	ldr	r3, [pc, #12]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a02      	ldr	r2, [pc, #8]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 80052de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e2:	6013      	str	r3, [r2, #0]
 80052e4:	e014      	b.n	8005310 <HAL_RCC_OscConfig+0x298>
 80052e6:	bf00      	nop
 80052e8:	40021000 	.word	0x40021000
 80052ec:	0800a5f0 	.word	0x0800a5f0
 80052f0:	200000c4 	.word	0x200000c4
 80052f4:	200000c8 	.word	0x200000c8
 80052f8:	4ba0      	ldr	r3, [pc, #640]	; (800557c <HAL_RCC_OscConfig+0x504>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a9f      	ldr	r2, [pc, #636]	; (800557c <HAL_RCC_OscConfig+0x504>)
 80052fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005302:	6013      	str	r3, [r2, #0]
 8005304:	4b9d      	ldr	r3, [pc, #628]	; (800557c <HAL_RCC_OscConfig+0x504>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a9c      	ldr	r2, [pc, #624]	; (800557c <HAL_RCC_OscConfig+0x504>)
 800530a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800530e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d013      	beq.n	8005340 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005318:	f7fe f8c2 	bl	80034a0 <HAL_GetTick>
 800531c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005320:	f7fe f8be 	bl	80034a0 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b64      	cmp	r3, #100	; 0x64
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e276      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005332:	4b92      	ldr	r3, [pc, #584]	; (800557c <HAL_RCC_OscConfig+0x504>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0f0      	beq.n	8005320 <HAL_RCC_OscConfig+0x2a8>
 800533e:	e014      	b.n	800536a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005340:	f7fe f8ae 	bl	80034a0 <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005348:	f7fe f8aa 	bl	80034a0 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b64      	cmp	r3, #100	; 0x64
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e262      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800535a:	4b88      	ldr	r3, [pc, #544]	; (800557c <HAL_RCC_OscConfig+0x504>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1f0      	bne.n	8005348 <HAL_RCC_OscConfig+0x2d0>
 8005366:	e000      	b.n	800536a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d060      	beq.n	8005438 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	2b04      	cmp	r3, #4
 800537a:	d005      	beq.n	8005388 <HAL_RCC_OscConfig+0x310>
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	2b0c      	cmp	r3, #12
 8005380:	d119      	bne.n	80053b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	2b02      	cmp	r3, #2
 8005386:	d116      	bne.n	80053b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005388:	4b7c      	ldr	r3, [pc, #496]	; (800557c <HAL_RCC_OscConfig+0x504>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005390:	2b00      	cmp	r3, #0
 8005392:	d005      	beq.n	80053a0 <HAL_RCC_OscConfig+0x328>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e23f      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a0:	4b76      	ldr	r3, [pc, #472]	; (800557c <HAL_RCC_OscConfig+0x504>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	061b      	lsls	r3, r3, #24
 80053ae:	4973      	ldr	r1, [pc, #460]	; (800557c <HAL_RCC_OscConfig+0x504>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053b4:	e040      	b.n	8005438 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d023      	beq.n	8005406 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053be:	4b6f      	ldr	r3, [pc, #444]	; (800557c <HAL_RCC_OscConfig+0x504>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a6e      	ldr	r2, [pc, #440]	; (800557c <HAL_RCC_OscConfig+0x504>)
 80053c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ca:	f7fe f869 	bl	80034a0 <HAL_GetTick>
 80053ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053d0:	e008      	b.n	80053e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053d2:	f7fe f865 	bl	80034a0 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e21d      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053e4:	4b65      	ldr	r3, [pc, #404]	; (800557c <HAL_RCC_OscConfig+0x504>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0f0      	beq.n	80053d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f0:	4b62      	ldr	r3, [pc, #392]	; (800557c <HAL_RCC_OscConfig+0x504>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	061b      	lsls	r3, r3, #24
 80053fe:	495f      	ldr	r1, [pc, #380]	; (800557c <HAL_RCC_OscConfig+0x504>)
 8005400:	4313      	orrs	r3, r2
 8005402:	604b      	str	r3, [r1, #4]
 8005404:	e018      	b.n	8005438 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005406:	4b5d      	ldr	r3, [pc, #372]	; (800557c <HAL_RCC_OscConfig+0x504>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a5c      	ldr	r2, [pc, #368]	; (800557c <HAL_RCC_OscConfig+0x504>)
 800540c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005412:	f7fe f845 	bl	80034a0 <HAL_GetTick>
 8005416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005418:	e008      	b.n	800542c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800541a:	f7fe f841 	bl	80034a0 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d901      	bls.n	800542c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e1f9      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800542c:	4b53      	ldr	r3, [pc, #332]	; (800557c <HAL_RCC_OscConfig+0x504>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1f0      	bne.n	800541a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0308 	and.w	r3, r3, #8
 8005440:	2b00      	cmp	r3, #0
 8005442:	d03c      	beq.n	80054be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d01c      	beq.n	8005486 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800544c:	4b4b      	ldr	r3, [pc, #300]	; (800557c <HAL_RCC_OscConfig+0x504>)
 800544e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005452:	4a4a      	ldr	r2, [pc, #296]	; (800557c <HAL_RCC_OscConfig+0x504>)
 8005454:	f043 0301 	orr.w	r3, r3, #1
 8005458:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800545c:	f7fe f820 	bl	80034a0 <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005464:	f7fe f81c 	bl	80034a0 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e1d4      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005476:	4b41      	ldr	r3, [pc, #260]	; (800557c <HAL_RCC_OscConfig+0x504>)
 8005478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0ef      	beq.n	8005464 <HAL_RCC_OscConfig+0x3ec>
 8005484:	e01b      	b.n	80054be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005486:	4b3d      	ldr	r3, [pc, #244]	; (800557c <HAL_RCC_OscConfig+0x504>)
 8005488:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800548c:	4a3b      	ldr	r2, [pc, #236]	; (800557c <HAL_RCC_OscConfig+0x504>)
 800548e:	f023 0301 	bic.w	r3, r3, #1
 8005492:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005496:	f7fe f803 	bl	80034a0 <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800549c:	e008      	b.n	80054b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800549e:	f7fd ffff 	bl	80034a0 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d901      	bls.n	80054b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e1b7      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054b0:	4b32      	ldr	r3, [pc, #200]	; (800557c <HAL_RCC_OscConfig+0x504>)
 80054b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1ef      	bne.n	800549e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0304 	and.w	r3, r3, #4
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f000 80a6 	beq.w	8005618 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054cc:	2300      	movs	r3, #0
 80054ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80054d0:	4b2a      	ldr	r3, [pc, #168]	; (800557c <HAL_RCC_OscConfig+0x504>)
 80054d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10d      	bne.n	80054f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054dc:	4b27      	ldr	r3, [pc, #156]	; (800557c <HAL_RCC_OscConfig+0x504>)
 80054de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e0:	4a26      	ldr	r2, [pc, #152]	; (800557c <HAL_RCC_OscConfig+0x504>)
 80054e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054e6:	6593      	str	r3, [r2, #88]	; 0x58
 80054e8:	4b24      	ldr	r3, [pc, #144]	; (800557c <HAL_RCC_OscConfig+0x504>)
 80054ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f0:	60bb      	str	r3, [r7, #8]
 80054f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054f4:	2301      	movs	r3, #1
 80054f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054f8:	4b21      	ldr	r3, [pc, #132]	; (8005580 <HAL_RCC_OscConfig+0x508>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005500:	2b00      	cmp	r3, #0
 8005502:	d118      	bne.n	8005536 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005504:	4b1e      	ldr	r3, [pc, #120]	; (8005580 <HAL_RCC_OscConfig+0x508>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a1d      	ldr	r2, [pc, #116]	; (8005580 <HAL_RCC_OscConfig+0x508>)
 800550a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800550e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005510:	f7fd ffc6 	bl	80034a0 <HAL_GetTick>
 8005514:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005518:	f7fd ffc2 	bl	80034a0 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e17a      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800552a:	4b15      	ldr	r3, [pc, #84]	; (8005580 <HAL_RCC_OscConfig+0x508>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005532:	2b00      	cmp	r3, #0
 8005534:	d0f0      	beq.n	8005518 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d108      	bne.n	8005550 <HAL_RCC_OscConfig+0x4d8>
 800553e:	4b0f      	ldr	r3, [pc, #60]	; (800557c <HAL_RCC_OscConfig+0x504>)
 8005540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005544:	4a0d      	ldr	r2, [pc, #52]	; (800557c <HAL_RCC_OscConfig+0x504>)
 8005546:	f043 0301 	orr.w	r3, r3, #1
 800554a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800554e:	e029      	b.n	80055a4 <HAL_RCC_OscConfig+0x52c>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	2b05      	cmp	r3, #5
 8005556:	d115      	bne.n	8005584 <HAL_RCC_OscConfig+0x50c>
 8005558:	4b08      	ldr	r3, [pc, #32]	; (800557c <HAL_RCC_OscConfig+0x504>)
 800555a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555e:	4a07      	ldr	r2, [pc, #28]	; (800557c <HAL_RCC_OscConfig+0x504>)
 8005560:	f043 0304 	orr.w	r3, r3, #4
 8005564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005568:	4b04      	ldr	r3, [pc, #16]	; (800557c <HAL_RCC_OscConfig+0x504>)
 800556a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800556e:	4a03      	ldr	r2, [pc, #12]	; (800557c <HAL_RCC_OscConfig+0x504>)
 8005570:	f043 0301 	orr.w	r3, r3, #1
 8005574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005578:	e014      	b.n	80055a4 <HAL_RCC_OscConfig+0x52c>
 800557a:	bf00      	nop
 800557c:	40021000 	.word	0x40021000
 8005580:	40007000 	.word	0x40007000
 8005584:	4b9c      	ldr	r3, [pc, #624]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 8005586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558a:	4a9b      	ldr	r2, [pc, #620]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 800558c:	f023 0301 	bic.w	r3, r3, #1
 8005590:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005594:	4b98      	ldr	r3, [pc, #608]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 8005596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559a:	4a97      	ldr	r2, [pc, #604]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 800559c:	f023 0304 	bic.w	r3, r3, #4
 80055a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d016      	beq.n	80055da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ac:	f7fd ff78 	bl	80034a0 <HAL_GetTick>
 80055b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055b2:	e00a      	b.n	80055ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055b4:	f7fd ff74 	bl	80034a0 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e12a      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055ca:	4b8b      	ldr	r3, [pc, #556]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 80055cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0ed      	beq.n	80055b4 <HAL_RCC_OscConfig+0x53c>
 80055d8:	e015      	b.n	8005606 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055da:	f7fd ff61 	bl	80034a0 <HAL_GetTick>
 80055de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055e0:	e00a      	b.n	80055f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055e2:	f7fd ff5d 	bl	80034a0 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d901      	bls.n	80055f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e113      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055f8:	4b7f      	ldr	r3, [pc, #508]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 80055fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1ed      	bne.n	80055e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005606:	7ffb      	ldrb	r3, [r7, #31]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d105      	bne.n	8005618 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800560c:	4b7a      	ldr	r3, [pc, #488]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 800560e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005610:	4a79      	ldr	r2, [pc, #484]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 8005612:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005616:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 80fe 	beq.w	800581e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005626:	2b02      	cmp	r3, #2
 8005628:	f040 80d0 	bne.w	80057cc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800562c:	4b72      	ldr	r3, [pc, #456]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f003 0203 	and.w	r2, r3, #3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563c:	429a      	cmp	r2, r3
 800563e:	d130      	bne.n	80056a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564a:	3b01      	subs	r3, #1
 800564c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800564e:	429a      	cmp	r2, r3
 8005650:	d127      	bne.n	80056a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800565e:	429a      	cmp	r2, r3
 8005660:	d11f      	bne.n	80056a2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800566c:	2a07      	cmp	r2, #7
 800566e:	bf14      	ite	ne
 8005670:	2201      	movne	r2, #1
 8005672:	2200      	moveq	r2, #0
 8005674:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005676:	4293      	cmp	r3, r2
 8005678:	d113      	bne.n	80056a2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005684:	085b      	lsrs	r3, r3, #1
 8005686:	3b01      	subs	r3, #1
 8005688:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800568a:	429a      	cmp	r2, r3
 800568c:	d109      	bne.n	80056a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005698:	085b      	lsrs	r3, r3, #1
 800569a:	3b01      	subs	r3, #1
 800569c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800569e:	429a      	cmp	r2, r3
 80056a0:	d06e      	beq.n	8005780 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	2b0c      	cmp	r3, #12
 80056a6:	d069      	beq.n	800577c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80056a8:	4b53      	ldr	r3, [pc, #332]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d105      	bne.n	80056c0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80056b4:	4b50      	ldr	r3, [pc, #320]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e0ad      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80056c4:	4b4c      	ldr	r3, [pc, #304]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a4b      	ldr	r2, [pc, #300]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 80056ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80056d0:	f7fd fee6 	bl	80034a0 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056d8:	f7fd fee2 	bl	80034a0 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e09a      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056ea:	4b43      	ldr	r3, [pc, #268]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1f0      	bne.n	80056d8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056f6:	4b40      	ldr	r3, [pc, #256]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	4b40      	ldr	r3, [pc, #256]	; (80057fc <HAL_RCC_OscConfig+0x784>)
 80056fc:	4013      	ands	r3, r2
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005706:	3a01      	subs	r2, #1
 8005708:	0112      	lsls	r2, r2, #4
 800570a:	4311      	orrs	r1, r2
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005710:	0212      	lsls	r2, r2, #8
 8005712:	4311      	orrs	r1, r2
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005718:	0852      	lsrs	r2, r2, #1
 800571a:	3a01      	subs	r2, #1
 800571c:	0552      	lsls	r2, r2, #21
 800571e:	4311      	orrs	r1, r2
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005724:	0852      	lsrs	r2, r2, #1
 8005726:	3a01      	subs	r2, #1
 8005728:	0652      	lsls	r2, r2, #25
 800572a:	4311      	orrs	r1, r2
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005730:	0912      	lsrs	r2, r2, #4
 8005732:	0452      	lsls	r2, r2, #17
 8005734:	430a      	orrs	r2, r1
 8005736:	4930      	ldr	r1, [pc, #192]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 8005738:	4313      	orrs	r3, r2
 800573a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800573c:	4b2e      	ldr	r3, [pc, #184]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a2d      	ldr	r2, [pc, #180]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 8005742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005746:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005748:	4b2b      	ldr	r3, [pc, #172]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	4a2a      	ldr	r2, [pc, #168]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 800574e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005752:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005754:	f7fd fea4 	bl	80034a0 <HAL_GetTick>
 8005758:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800575c:	f7fd fea0 	bl	80034a0 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e058      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800576e:	4b22      	ldr	r3, [pc, #136]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d0f0      	beq.n	800575c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800577a:	e050      	b.n	800581e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e04f      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005780:	4b1d      	ldr	r3, [pc, #116]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d148      	bne.n	800581e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800578c:	4b1a      	ldr	r3, [pc, #104]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a19      	ldr	r2, [pc, #100]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 8005792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005796:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005798:	4b17      	ldr	r3, [pc, #92]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	4a16      	ldr	r2, [pc, #88]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 800579e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80057a4:	f7fd fe7c 	bl	80034a0 <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ac:	f7fd fe78 	bl	80034a0 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e030      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057be:	4b0e      	ldr	r3, [pc, #56]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0f0      	beq.n	80057ac <HAL_RCC_OscConfig+0x734>
 80057ca:	e028      	b.n	800581e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	2b0c      	cmp	r3, #12
 80057d0:	d023      	beq.n	800581a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057d2:	4b09      	ldr	r3, [pc, #36]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a08      	ldr	r2, [pc, #32]	; (80057f8 <HAL_RCC_OscConfig+0x780>)
 80057d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057de:	f7fd fe5f 	bl	80034a0 <HAL_GetTick>
 80057e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057e4:	e00c      	b.n	8005800 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057e6:	f7fd fe5b 	bl	80034a0 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d905      	bls.n	8005800 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e013      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
 80057f8:	40021000 	.word	0x40021000
 80057fc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005800:	4b09      	ldr	r3, [pc, #36]	; (8005828 <HAL_RCC_OscConfig+0x7b0>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1ec      	bne.n	80057e6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800580c:	4b06      	ldr	r3, [pc, #24]	; (8005828 <HAL_RCC_OscConfig+0x7b0>)
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	4905      	ldr	r1, [pc, #20]	; (8005828 <HAL_RCC_OscConfig+0x7b0>)
 8005812:	4b06      	ldr	r3, [pc, #24]	; (800582c <HAL_RCC_OscConfig+0x7b4>)
 8005814:	4013      	ands	r3, r2
 8005816:	60cb      	str	r3, [r1, #12]
 8005818:	e001      	b.n	800581e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e000      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3720      	adds	r7, #32
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	40021000 	.word	0x40021000
 800582c:	feeefffc 	.word	0xfeeefffc

08005830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e0e7      	b.n	8005a14 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005844:	4b75      	ldr	r3, [pc, #468]	; (8005a1c <HAL_RCC_ClockConfig+0x1ec>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	429a      	cmp	r2, r3
 8005850:	d910      	bls.n	8005874 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005852:	4b72      	ldr	r3, [pc, #456]	; (8005a1c <HAL_RCC_ClockConfig+0x1ec>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f023 0207 	bic.w	r2, r3, #7
 800585a:	4970      	ldr	r1, [pc, #448]	; (8005a1c <HAL_RCC_ClockConfig+0x1ec>)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	4313      	orrs	r3, r2
 8005860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005862:	4b6e      	ldr	r3, [pc, #440]	; (8005a1c <HAL_RCC_ClockConfig+0x1ec>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0307 	and.w	r3, r3, #7
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	429a      	cmp	r2, r3
 800586e:	d001      	beq.n	8005874 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e0cf      	b.n	8005a14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d010      	beq.n	80058a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	4b66      	ldr	r3, [pc, #408]	; (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800588c:	429a      	cmp	r2, r3
 800588e:	d908      	bls.n	80058a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005890:	4b63      	ldr	r3, [pc, #396]	; (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	4960      	ldr	r1, [pc, #384]	; (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d04c      	beq.n	8005948 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d107      	bne.n	80058c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058b6:	4b5a      	ldr	r3, [pc, #360]	; (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d121      	bne.n	8005906 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e0a6      	b.n	8005a14 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d107      	bne.n	80058de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058ce:	4b54      	ldr	r3, [pc, #336]	; (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d115      	bne.n	8005906 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e09a      	b.n	8005a14 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d107      	bne.n	80058f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058e6:	4b4e      	ldr	r3, [pc, #312]	; (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d109      	bne.n	8005906 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e08e      	b.n	8005a14 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058f6:	4b4a      	ldr	r3, [pc, #296]	; (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e086      	b.n	8005a14 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005906:	4b46      	ldr	r3, [pc, #280]	; (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f023 0203 	bic.w	r2, r3, #3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	4943      	ldr	r1, [pc, #268]	; (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 8005914:	4313      	orrs	r3, r2
 8005916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005918:	f7fd fdc2 	bl	80034a0 <HAL_GetTick>
 800591c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800591e:	e00a      	b.n	8005936 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005920:	f7fd fdbe 	bl	80034a0 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	f241 3288 	movw	r2, #5000	; 0x1388
 800592e:	4293      	cmp	r3, r2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e06e      	b.n	8005a14 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005936:	4b3a      	ldr	r3, [pc, #232]	; (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 020c 	and.w	r2, r3, #12
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	429a      	cmp	r2, r3
 8005946:	d1eb      	bne.n	8005920 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d010      	beq.n	8005976 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	4b31      	ldr	r3, [pc, #196]	; (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005960:	429a      	cmp	r2, r3
 8005962:	d208      	bcs.n	8005976 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005964:	4b2e      	ldr	r3, [pc, #184]	; (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	492b      	ldr	r1, [pc, #172]	; (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 8005972:	4313      	orrs	r3, r2
 8005974:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005976:	4b29      	ldr	r3, [pc, #164]	; (8005a1c <HAL_RCC_ClockConfig+0x1ec>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0307 	and.w	r3, r3, #7
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	429a      	cmp	r2, r3
 8005982:	d210      	bcs.n	80059a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005984:	4b25      	ldr	r3, [pc, #148]	; (8005a1c <HAL_RCC_ClockConfig+0x1ec>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f023 0207 	bic.w	r2, r3, #7
 800598c:	4923      	ldr	r1, [pc, #140]	; (8005a1c <HAL_RCC_ClockConfig+0x1ec>)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	4313      	orrs	r3, r2
 8005992:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005994:	4b21      	ldr	r3, [pc, #132]	; (8005a1c <HAL_RCC_ClockConfig+0x1ec>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d001      	beq.n	80059a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e036      	b.n	8005a14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d008      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059b2:	4b1b      	ldr	r3, [pc, #108]	; (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	4918      	ldr	r1, [pc, #96]	; (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0308 	and.w	r3, r3, #8
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d009      	beq.n	80059e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059d0:	4b13      	ldr	r3, [pc, #76]	; (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	4910      	ldr	r1, [pc, #64]	; (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059e4:	f000 f824 	bl	8005a30 <HAL_RCC_GetSysClockFreq>
 80059e8:	4602      	mov	r2, r0
 80059ea:	4b0d      	ldr	r3, [pc, #52]	; (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	091b      	lsrs	r3, r3, #4
 80059f0:	f003 030f 	and.w	r3, r3, #15
 80059f4:	490b      	ldr	r1, [pc, #44]	; (8005a24 <HAL_RCC_ClockConfig+0x1f4>)
 80059f6:	5ccb      	ldrb	r3, [r1, r3]
 80059f8:	f003 031f 	and.w	r3, r3, #31
 80059fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005a00:	4a09      	ldr	r2, [pc, #36]	; (8005a28 <HAL_RCC_ClockConfig+0x1f8>)
 8005a02:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a04:	4b09      	ldr	r3, [pc, #36]	; (8005a2c <HAL_RCC_ClockConfig+0x1fc>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7fd fcf9 	bl	8003400 <HAL_InitTick>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	72fb      	strb	r3, [r7, #11]

  return status;
 8005a12:	7afb      	ldrb	r3, [r7, #11]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40022000 	.word	0x40022000
 8005a20:	40021000 	.word	0x40021000
 8005a24:	0800a5f0 	.word	0x0800a5f0
 8005a28:	200000c4 	.word	0x200000c4
 8005a2c:	200000c8 	.word	0x200000c8

08005a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b089      	sub	sp, #36	; 0x24
 8005a34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	61fb      	str	r3, [r7, #28]
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a3e:	4b3e      	ldr	r3, [pc, #248]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f003 030c 	and.w	r3, r3, #12
 8005a46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a48:	4b3b      	ldr	r3, [pc, #236]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f003 0303 	and.w	r3, r3, #3
 8005a50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d005      	beq.n	8005a64 <HAL_RCC_GetSysClockFreq+0x34>
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	2b0c      	cmp	r3, #12
 8005a5c:	d121      	bne.n	8005aa2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d11e      	bne.n	8005aa2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005a64:	4b34      	ldr	r3, [pc, #208]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0308 	and.w	r3, r3, #8
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d107      	bne.n	8005a80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005a70:	4b31      	ldr	r3, [pc, #196]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a76:	0a1b      	lsrs	r3, r3, #8
 8005a78:	f003 030f 	and.w	r3, r3, #15
 8005a7c:	61fb      	str	r3, [r7, #28]
 8005a7e:	e005      	b.n	8005a8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005a80:	4b2d      	ldr	r3, [pc, #180]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	091b      	lsrs	r3, r3, #4
 8005a86:	f003 030f 	and.w	r3, r3, #15
 8005a8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005a8c:	4a2b      	ldr	r2, [pc, #172]	; (8005b3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10d      	bne.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005aa0:	e00a      	b.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d102      	bne.n	8005aae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005aa8:	4b25      	ldr	r3, [pc, #148]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x110>)
 8005aaa:	61bb      	str	r3, [r7, #24]
 8005aac:	e004      	b.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d101      	bne.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ab4:	4b23      	ldr	r3, [pc, #140]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x114>)
 8005ab6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	2b0c      	cmp	r3, #12
 8005abc:	d134      	bne.n	8005b28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005abe:	4b1e      	ldr	r3, [pc, #120]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d003      	beq.n	8005ad6 <HAL_RCC_GetSysClockFreq+0xa6>
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d003      	beq.n	8005adc <HAL_RCC_GetSysClockFreq+0xac>
 8005ad4:	e005      	b.n	8005ae2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005ad6:	4b1a      	ldr	r3, [pc, #104]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ad8:	617b      	str	r3, [r7, #20]
      break;
 8005ada:	e005      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005adc:	4b19      	ldr	r3, [pc, #100]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x114>)
 8005ade:	617b      	str	r3, [r7, #20]
      break;
 8005ae0:	e002      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	617b      	str	r3, [r7, #20]
      break;
 8005ae6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ae8:	4b13      	ldr	r3, [pc, #76]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	091b      	lsrs	r3, r3, #4
 8005aee:	f003 0307 	and.w	r3, r3, #7
 8005af2:	3301      	adds	r3, #1
 8005af4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005af6:	4b10      	ldr	r3, [pc, #64]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	0a1b      	lsrs	r3, r3, #8
 8005afc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	fb03 f202 	mul.w	r2, r3, r2
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b0e:	4b0a      	ldr	r3, [pc, #40]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	0e5b      	lsrs	r3, r3, #25
 8005b14:	f003 0303 	and.w	r3, r3, #3
 8005b18:	3301      	adds	r3, #1
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005b28:	69bb      	ldr	r3, [r7, #24]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3724      	adds	r7, #36	; 0x24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	40021000 	.word	0x40021000
 8005b3c:	0800a608 	.word	0x0800a608
 8005b40:	00f42400 	.word	0x00f42400
 8005b44:	007a1200 	.word	0x007a1200

08005b48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b4c:	4b03      	ldr	r3, [pc, #12]	; (8005b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	200000c4 	.word	0x200000c4

08005b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b64:	f7ff fff0 	bl	8005b48 <HAL_RCC_GetHCLKFreq>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	4b06      	ldr	r3, [pc, #24]	; (8005b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	0a1b      	lsrs	r3, r3, #8
 8005b70:	f003 0307 	and.w	r3, r3, #7
 8005b74:	4904      	ldr	r1, [pc, #16]	; (8005b88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b76:	5ccb      	ldrb	r3, [r1, r3]
 8005b78:	f003 031f 	and.w	r3, r3, #31
 8005b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	40021000 	.word	0x40021000
 8005b88:	0800a600 	.word	0x0800a600

08005b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b90:	f7ff ffda 	bl	8005b48 <HAL_RCC_GetHCLKFreq>
 8005b94:	4602      	mov	r2, r0
 8005b96:	4b06      	ldr	r3, [pc, #24]	; (8005bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	0adb      	lsrs	r3, r3, #11
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	4904      	ldr	r1, [pc, #16]	; (8005bb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ba2:	5ccb      	ldrb	r3, [r1, r3]
 8005ba4:	f003 031f 	and.w	r3, r3, #31
 8005ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40021000 	.word	0x40021000
 8005bb4:	0800a600 	.word	0x0800a600

08005bb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005bc4:	4b2a      	ldr	r3, [pc, #168]	; (8005c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005bd0:	f7ff f922 	bl	8004e18 <HAL_PWREx_GetVoltageRange>
 8005bd4:	6178      	str	r0, [r7, #20]
 8005bd6:	e014      	b.n	8005c02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bd8:	4b25      	ldr	r3, [pc, #148]	; (8005c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bdc:	4a24      	ldr	r2, [pc, #144]	; (8005c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005be2:	6593      	str	r3, [r2, #88]	; 0x58
 8005be4:	4b22      	ldr	r3, [pc, #136]	; (8005c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005bf0:	f7ff f912 	bl	8004e18 <HAL_PWREx_GetVoltageRange>
 8005bf4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005bf6:	4b1e      	ldr	r3, [pc, #120]	; (8005c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfa:	4a1d      	ldr	r2, [pc, #116]	; (8005c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c08:	d10b      	bne.n	8005c22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b80      	cmp	r3, #128	; 0x80
 8005c0e:	d919      	bls.n	8005c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2ba0      	cmp	r3, #160	; 0xa0
 8005c14:	d902      	bls.n	8005c1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c16:	2302      	movs	r3, #2
 8005c18:	613b      	str	r3, [r7, #16]
 8005c1a:	e013      	b.n	8005c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	613b      	str	r3, [r7, #16]
 8005c20:	e010      	b.n	8005c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b80      	cmp	r3, #128	; 0x80
 8005c26:	d902      	bls.n	8005c2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005c28:	2303      	movs	r3, #3
 8005c2a:	613b      	str	r3, [r7, #16]
 8005c2c:	e00a      	b.n	8005c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b80      	cmp	r3, #128	; 0x80
 8005c32:	d102      	bne.n	8005c3a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c34:	2302      	movs	r3, #2
 8005c36:	613b      	str	r3, [r7, #16]
 8005c38:	e004      	b.n	8005c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b70      	cmp	r3, #112	; 0x70
 8005c3e:	d101      	bne.n	8005c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c40:	2301      	movs	r3, #1
 8005c42:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c44:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f023 0207 	bic.w	r2, r3, #7
 8005c4c:	4909      	ldr	r1, [pc, #36]	; (8005c74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c54:	4b07      	ldr	r3, [pc, #28]	; (8005c74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0307 	and.w	r3, r3, #7
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d001      	beq.n	8005c66 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e000      	b.n	8005c68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	40021000 	.word	0x40021000
 8005c74:	40022000 	.word	0x40022000

08005c78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c80:	2300      	movs	r3, #0
 8005c82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c84:	2300      	movs	r3, #0
 8005c86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d041      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c9c:	d02a      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005c9e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ca2:	d824      	bhi.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ca4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ca8:	d008      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005caa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cae:	d81e      	bhi.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00a      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005cb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cb8:	d010      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005cba:	e018      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005cbc:	4b86      	ldr	r3, [pc, #536]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	4a85      	ldr	r2, [pc, #532]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cc6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cc8:	e015      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	2100      	movs	r1, #0
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f000 facb 	bl	800626c <RCCEx_PLLSAI1_Config>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cda:	e00c      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	3320      	adds	r3, #32
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fbb6 	bl	8006454 <RCCEx_PLLSAI2_Config>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cec:	e003      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	74fb      	strb	r3, [r7, #19]
      break;
 8005cf2:	e000      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005cf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cf6:	7cfb      	ldrb	r3, [r7, #19]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10b      	bne.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cfc:	4b76      	ldr	r3, [pc, #472]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d0a:	4973      	ldr	r1, [pc, #460]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005d12:	e001      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d14:	7cfb      	ldrb	r3, [r7, #19]
 8005d16:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d041      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d2c:	d02a      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005d2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d32:	d824      	bhi.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005d34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d38:	d008      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005d3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d3e:	d81e      	bhi.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00a      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d48:	d010      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005d4a:	e018      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d4c:	4b62      	ldr	r3, [pc, #392]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	4a61      	ldr	r2, [pc, #388]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d56:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d58:	e015      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	2100      	movs	r1, #0
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 fa83 	bl	800626c <RCCEx_PLLSAI1_Config>
 8005d66:	4603      	mov	r3, r0
 8005d68:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d6a:	e00c      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3320      	adds	r3, #32
 8005d70:	2100      	movs	r1, #0
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 fb6e 	bl	8006454 <RCCEx_PLLSAI2_Config>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d7c:	e003      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	74fb      	strb	r3, [r7, #19]
      break;
 8005d82:	e000      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005d84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d86:	7cfb      	ldrb	r3, [r7, #19]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10b      	bne.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d8c:	4b52      	ldr	r3, [pc, #328]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d92:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d9a:	494f      	ldr	r1, [pc, #316]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005da2:	e001      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da4:	7cfb      	ldrb	r3, [r7, #19]
 8005da6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 80a0 	beq.w	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005db6:	2300      	movs	r3, #0
 8005db8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005dba:	4b47      	ldr	r3, [pc, #284]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e000      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00d      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dd0:	4b41      	ldr	r3, [pc, #260]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd4:	4a40      	ldr	r2, [pc, #256]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dda:	6593      	str	r3, [r2, #88]	; 0x58
 8005ddc:	4b3e      	ldr	r3, [pc, #248]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005de4:	60bb      	str	r3, [r7, #8]
 8005de6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005de8:	2301      	movs	r3, #1
 8005dea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dec:	4b3b      	ldr	r3, [pc, #236]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a3a      	ldr	r2, [pc, #232]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005df6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005df8:	f7fd fb52 	bl	80034a0 <HAL_GetTick>
 8005dfc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005dfe:	e009      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e00:	f7fd fb4e 	bl	80034a0 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d902      	bls.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	74fb      	strb	r3, [r7, #19]
        break;
 8005e12:	e005      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e14:	4b31      	ldr	r3, [pc, #196]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0ef      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005e20:	7cfb      	ldrb	r3, [r7, #19]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d15c      	bne.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e26:	4b2c      	ldr	r3, [pc, #176]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e30:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d01f      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d019      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e44:	4b24      	ldr	r3, [pc, #144]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e50:	4b21      	ldr	r3, [pc, #132]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e56:	4a20      	ldr	r2, [pc, #128]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e60:	4b1d      	ldr	r3, [pc, #116]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e66:	4a1c      	ldr	r2, [pc, #112]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e70:	4a19      	ldr	r2, [pc, #100]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d016      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e82:	f7fd fb0d 	bl	80034a0 <HAL_GetTick>
 8005e86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e88:	e00b      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e8a:	f7fd fb09 	bl	80034a0 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d902      	bls.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	74fb      	strb	r3, [r7, #19]
            break;
 8005ea0:	e006      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ea2:	4b0d      	ldr	r3, [pc, #52]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0ec      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005eb0:	7cfb      	ldrb	r3, [r7, #19]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10c      	bne.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eb6:	4b08      	ldr	r3, [pc, #32]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ec6:	4904      	ldr	r1, [pc, #16]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005ece:	e009      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ed0:	7cfb      	ldrb	r3, [r7, #19]
 8005ed2:	74bb      	strb	r3, [r7, #18]
 8005ed4:	e006      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005ed6:	bf00      	nop
 8005ed8:	40021000 	.word	0x40021000
 8005edc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee0:	7cfb      	ldrb	r3, [r7, #19]
 8005ee2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ee4:	7c7b      	ldrb	r3, [r7, #17]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d105      	bne.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eea:	4b9e      	ldr	r3, [pc, #632]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eee:	4a9d      	ldr	r2, [pc, #628]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ef4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00a      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f02:	4b98      	ldr	r3, [pc, #608]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f08:	f023 0203 	bic.w	r2, r3, #3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f10:	4994      	ldr	r1, [pc, #592]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00a      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f24:	4b8f      	ldr	r3, [pc, #572]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f2a:	f023 020c 	bic.w	r2, r3, #12
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f32:	498c      	ldr	r1, [pc, #560]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0304 	and.w	r3, r3, #4
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f46:	4b87      	ldr	r3, [pc, #540]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f54:	4983      	ldr	r1, [pc, #524]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0308 	and.w	r3, r3, #8
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00a      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f68:	4b7e      	ldr	r3, [pc, #504]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f76:	497b      	ldr	r1, [pc, #492]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0310 	and.w	r3, r3, #16
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f8a:	4b76      	ldr	r3, [pc, #472]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f98:	4972      	ldr	r1, [pc, #456]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0320 	and.w	r3, r3, #32
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00a      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fac:	4b6d      	ldr	r3, [pc, #436]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fba:	496a      	ldr	r1, [pc, #424]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fce:	4b65      	ldr	r3, [pc, #404]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fdc:	4961      	ldr	r1, [pc, #388]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00a      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ff0:	4b5c      	ldr	r3, [pc, #368]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ffe:	4959      	ldr	r1, [pc, #356]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006000:	4313      	orrs	r3, r2
 8006002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006012:	4b54      	ldr	r3, [pc, #336]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006018:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006020:	4950      	ldr	r1, [pc, #320]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006022:	4313      	orrs	r3, r2
 8006024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00a      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006034:	4b4b      	ldr	r3, [pc, #300]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006042:	4948      	ldr	r1, [pc, #288]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006044:	4313      	orrs	r3, r2
 8006046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00a      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006056:	4b43      	ldr	r3, [pc, #268]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006064:	493f      	ldr	r1, [pc, #252]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006066:	4313      	orrs	r3, r2
 8006068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d028      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006078:	4b3a      	ldr	r3, [pc, #232]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800607a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800607e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006086:	4937      	ldr	r1, [pc, #220]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006088:	4313      	orrs	r3, r2
 800608a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006092:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006096:	d106      	bne.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006098:	4b32      	ldr	r3, [pc, #200]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	4a31      	ldr	r2, [pc, #196]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800609e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060a2:	60d3      	str	r3, [r2, #12]
 80060a4:	e011      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060ae:	d10c      	bne.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3304      	adds	r3, #4
 80060b4:	2101      	movs	r1, #1
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 f8d8 	bl	800626c <RCCEx_PLLSAI1_Config>
 80060bc:	4603      	mov	r3, r0
 80060be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80060c0:	7cfb      	ldrb	r3, [r7, #19]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80060c6:	7cfb      	ldrb	r3, [r7, #19]
 80060c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d028      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80060d6:	4b23      	ldr	r3, [pc, #140]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e4:	491f      	ldr	r1, [pc, #124]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060f4:	d106      	bne.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060f6:	4b1b      	ldr	r3, [pc, #108]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	4a1a      	ldr	r2, [pc, #104]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006100:	60d3      	str	r3, [r2, #12]
 8006102:	e011      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006108:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800610c:	d10c      	bne.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3304      	adds	r3, #4
 8006112:	2101      	movs	r1, #1
 8006114:	4618      	mov	r0, r3
 8006116:	f000 f8a9 	bl	800626c <RCCEx_PLLSAI1_Config>
 800611a:	4603      	mov	r3, r0
 800611c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800611e:	7cfb      	ldrb	r3, [r7, #19]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d001      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006124:	7cfb      	ldrb	r3, [r7, #19]
 8006126:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d02b      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006134:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800613a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006142:	4908      	ldr	r1, [pc, #32]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006144:	4313      	orrs	r3, r2
 8006146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800614e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006152:	d109      	bne.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006154:	4b03      	ldr	r3, [pc, #12]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	4a02      	ldr	r2, [pc, #8]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800615a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800615e:	60d3      	str	r3, [r2, #12]
 8006160:	e014      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006162:	bf00      	nop
 8006164:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800616c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006170:	d10c      	bne.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	3304      	adds	r3, #4
 8006176:	2101      	movs	r1, #1
 8006178:	4618      	mov	r0, r3
 800617a:	f000 f877 	bl	800626c <RCCEx_PLLSAI1_Config>
 800617e:	4603      	mov	r3, r0
 8006180:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006182:	7cfb      	ldrb	r3, [r7, #19]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006188:	7cfb      	ldrb	r3, [r7, #19]
 800618a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d02f      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006198:	4b2b      	ldr	r3, [pc, #172]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800619a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800619e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061a6:	4928      	ldr	r1, [pc, #160]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061b6:	d10d      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	3304      	adds	r3, #4
 80061bc:	2102      	movs	r1, #2
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 f854 	bl	800626c <RCCEx_PLLSAI1_Config>
 80061c4:	4603      	mov	r3, r0
 80061c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061c8:	7cfb      	ldrb	r3, [r7, #19]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d014      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80061ce:	7cfb      	ldrb	r3, [r7, #19]
 80061d0:	74bb      	strb	r3, [r7, #18]
 80061d2:	e011      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061dc:	d10c      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	3320      	adds	r3, #32
 80061e2:	2102      	movs	r1, #2
 80061e4:	4618      	mov	r0, r3
 80061e6:	f000 f935 	bl	8006454 <RCCEx_PLLSAI2_Config>
 80061ea:	4603      	mov	r3, r0
 80061ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061ee:	7cfb      	ldrb	r3, [r7, #19]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d001      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80061f4:	7cfb      	ldrb	r3, [r7, #19]
 80061f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00a      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006204:	4b10      	ldr	r3, [pc, #64]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800620a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006212:	490d      	ldr	r1, [pc, #52]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006214:	4313      	orrs	r3, r2
 8006216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00b      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006226:	4b08      	ldr	r3, [pc, #32]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800622c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006236:	4904      	ldr	r1, [pc, #16]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006238:	4313      	orrs	r3, r2
 800623a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800623e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3718      	adds	r7, #24
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	40021000 	.word	0x40021000

0800624c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006250:	4b05      	ldr	r3, [pc, #20]	; (8006268 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a04      	ldr	r2, [pc, #16]	; (8006268 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006256:	f043 0304 	orr.w	r3, r3, #4
 800625a:	6013      	str	r3, [r2, #0]
}
 800625c:	bf00      	nop
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	40021000 	.word	0x40021000

0800626c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800627a:	4b75      	ldr	r3, [pc, #468]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f003 0303 	and.w	r3, r3, #3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d018      	beq.n	80062b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006286:	4b72      	ldr	r3, [pc, #456]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f003 0203 	and.w	r2, r3, #3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	429a      	cmp	r2, r3
 8006294:	d10d      	bne.n	80062b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
       ||
 800629a:	2b00      	cmp	r3, #0
 800629c:	d009      	beq.n	80062b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800629e:	4b6c      	ldr	r3, [pc, #432]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	091b      	lsrs	r3, r3, #4
 80062a4:	f003 0307 	and.w	r3, r3, #7
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
       ||
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d047      	beq.n	8006342 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	73fb      	strb	r3, [r7, #15]
 80062b6:	e044      	b.n	8006342 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b03      	cmp	r3, #3
 80062be:	d018      	beq.n	80062f2 <RCCEx_PLLSAI1_Config+0x86>
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	d825      	bhi.n	8006310 <RCCEx_PLLSAI1_Config+0xa4>
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d002      	beq.n	80062ce <RCCEx_PLLSAI1_Config+0x62>
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d009      	beq.n	80062e0 <RCCEx_PLLSAI1_Config+0x74>
 80062cc:	e020      	b.n	8006310 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80062ce:	4b60      	ldr	r3, [pc, #384]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d11d      	bne.n	8006316 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062de:	e01a      	b.n	8006316 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062e0:	4b5b      	ldr	r3, [pc, #364]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d116      	bne.n	800631a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062f0:	e013      	b.n	800631a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062f2:	4b57      	ldr	r3, [pc, #348]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10f      	bne.n	800631e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062fe:	4b54      	ldr	r3, [pc, #336]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d109      	bne.n	800631e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800630e:	e006      	b.n	800631e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	73fb      	strb	r3, [r7, #15]
      break;
 8006314:	e004      	b.n	8006320 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006316:	bf00      	nop
 8006318:	e002      	b.n	8006320 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800631a:	bf00      	nop
 800631c:	e000      	b.n	8006320 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800631e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006320:	7bfb      	ldrb	r3, [r7, #15]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10d      	bne.n	8006342 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006326:	4b4a      	ldr	r3, [pc, #296]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6819      	ldr	r1, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	3b01      	subs	r3, #1
 8006338:	011b      	lsls	r3, r3, #4
 800633a:	430b      	orrs	r3, r1
 800633c:	4944      	ldr	r1, [pc, #272]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 800633e:	4313      	orrs	r3, r2
 8006340:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006342:	7bfb      	ldrb	r3, [r7, #15]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d17d      	bne.n	8006444 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006348:	4b41      	ldr	r3, [pc, #260]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a40      	ldr	r2, [pc, #256]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 800634e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006352:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006354:	f7fd f8a4 	bl	80034a0 <HAL_GetTick>
 8006358:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800635a:	e009      	b.n	8006370 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800635c:	f7fd f8a0 	bl	80034a0 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b02      	cmp	r3, #2
 8006368:	d902      	bls.n	8006370 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	73fb      	strb	r3, [r7, #15]
        break;
 800636e:	e005      	b.n	800637c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006370:	4b37      	ldr	r3, [pc, #220]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1ef      	bne.n	800635c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800637c:	7bfb      	ldrb	r3, [r7, #15]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d160      	bne.n	8006444 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d111      	bne.n	80063ac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006388:	4b31      	ldr	r3, [pc, #196]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	6892      	ldr	r2, [r2, #8]
 8006398:	0211      	lsls	r1, r2, #8
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	68d2      	ldr	r2, [r2, #12]
 800639e:	0912      	lsrs	r2, r2, #4
 80063a0:	0452      	lsls	r2, r2, #17
 80063a2:	430a      	orrs	r2, r1
 80063a4:	492a      	ldr	r1, [pc, #168]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	610b      	str	r3, [r1, #16]
 80063aa:	e027      	b.n	80063fc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d112      	bne.n	80063d8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063b2:	4b27      	ldr	r3, [pc, #156]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80063ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	6892      	ldr	r2, [r2, #8]
 80063c2:	0211      	lsls	r1, r2, #8
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	6912      	ldr	r2, [r2, #16]
 80063c8:	0852      	lsrs	r2, r2, #1
 80063ca:	3a01      	subs	r2, #1
 80063cc:	0552      	lsls	r2, r2, #21
 80063ce:	430a      	orrs	r2, r1
 80063d0:	491f      	ldr	r1, [pc, #124]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	610b      	str	r3, [r1, #16]
 80063d6:	e011      	b.n	80063fc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063d8:	4b1d      	ldr	r3, [pc, #116]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80063e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	6892      	ldr	r2, [r2, #8]
 80063e8:	0211      	lsls	r1, r2, #8
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	6952      	ldr	r2, [r2, #20]
 80063ee:	0852      	lsrs	r2, r2, #1
 80063f0:	3a01      	subs	r2, #1
 80063f2:	0652      	lsls	r2, r2, #25
 80063f4:	430a      	orrs	r2, r1
 80063f6:	4916      	ldr	r1, [pc, #88]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80063fc:	4b14      	ldr	r3, [pc, #80]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a13      	ldr	r2, [pc, #76]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006402:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006406:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006408:	f7fd f84a 	bl	80034a0 <HAL_GetTick>
 800640c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800640e:	e009      	b.n	8006424 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006410:	f7fd f846 	bl	80034a0 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b02      	cmp	r3, #2
 800641c:	d902      	bls.n	8006424 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	73fb      	strb	r3, [r7, #15]
          break;
 8006422:	e005      	b.n	8006430 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006424:	4b0a      	ldr	r3, [pc, #40]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d0ef      	beq.n	8006410 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d106      	bne.n	8006444 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006436:	4b06      	ldr	r3, [pc, #24]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006438:	691a      	ldr	r2, [r3, #16]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	4904      	ldr	r1, [pc, #16]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006440:	4313      	orrs	r3, r2
 8006442:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006444:	7bfb      	ldrb	r3, [r7, #15]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	40021000 	.word	0x40021000

08006454 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800645e:	2300      	movs	r3, #0
 8006460:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006462:	4b6a      	ldr	r3, [pc, #424]	; (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f003 0303 	and.w	r3, r3, #3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d018      	beq.n	80064a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800646e:	4b67      	ldr	r3, [pc, #412]	; (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	f003 0203 	and.w	r2, r3, #3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	429a      	cmp	r2, r3
 800647c:	d10d      	bne.n	800649a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
       ||
 8006482:	2b00      	cmp	r3, #0
 8006484:	d009      	beq.n	800649a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006486:	4b61      	ldr	r3, [pc, #388]	; (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	091b      	lsrs	r3, r3, #4
 800648c:	f003 0307 	and.w	r3, r3, #7
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
       ||
 8006496:	429a      	cmp	r2, r3
 8006498:	d047      	beq.n	800652a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	73fb      	strb	r3, [r7, #15]
 800649e:	e044      	b.n	800652a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	d018      	beq.n	80064da <RCCEx_PLLSAI2_Config+0x86>
 80064a8:	2b03      	cmp	r3, #3
 80064aa:	d825      	bhi.n	80064f8 <RCCEx_PLLSAI2_Config+0xa4>
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d002      	beq.n	80064b6 <RCCEx_PLLSAI2_Config+0x62>
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d009      	beq.n	80064c8 <RCCEx_PLLSAI2_Config+0x74>
 80064b4:	e020      	b.n	80064f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80064b6:	4b55      	ldr	r3, [pc, #340]	; (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d11d      	bne.n	80064fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064c6:	e01a      	b.n	80064fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80064c8:	4b50      	ldr	r3, [pc, #320]	; (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d116      	bne.n	8006502 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064d8:	e013      	b.n	8006502 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80064da:	4b4c      	ldr	r3, [pc, #304]	; (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10f      	bne.n	8006506 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80064e6:	4b49      	ldr	r3, [pc, #292]	; (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d109      	bne.n	8006506 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80064f6:	e006      	b.n	8006506 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	73fb      	strb	r3, [r7, #15]
      break;
 80064fc:	e004      	b.n	8006508 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80064fe:	bf00      	nop
 8006500:	e002      	b.n	8006508 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006502:	bf00      	nop
 8006504:	e000      	b.n	8006508 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006506:	bf00      	nop
    }

    if(status == HAL_OK)
 8006508:	7bfb      	ldrb	r3, [r7, #15]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10d      	bne.n	800652a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800650e:	4b3f      	ldr	r3, [pc, #252]	; (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6819      	ldr	r1, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	3b01      	subs	r3, #1
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	430b      	orrs	r3, r1
 8006524:	4939      	ldr	r1, [pc, #228]	; (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006526:	4313      	orrs	r3, r2
 8006528:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800652a:	7bfb      	ldrb	r3, [r7, #15]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d167      	bne.n	8006600 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006530:	4b36      	ldr	r3, [pc, #216]	; (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a35      	ldr	r2, [pc, #212]	; (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800653a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800653c:	f7fc ffb0 	bl	80034a0 <HAL_GetTick>
 8006540:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006542:	e009      	b.n	8006558 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006544:	f7fc ffac 	bl	80034a0 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	2b02      	cmp	r3, #2
 8006550:	d902      	bls.n	8006558 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	73fb      	strb	r3, [r7, #15]
        break;
 8006556:	e005      	b.n	8006564 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006558:	4b2c      	ldr	r3, [pc, #176]	; (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1ef      	bne.n	8006544 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006564:	7bfb      	ldrb	r3, [r7, #15]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d14a      	bne.n	8006600 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d111      	bne.n	8006594 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006570:	4b26      	ldr	r3, [pc, #152]	; (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	6892      	ldr	r2, [r2, #8]
 8006580:	0211      	lsls	r1, r2, #8
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	68d2      	ldr	r2, [r2, #12]
 8006586:	0912      	lsrs	r2, r2, #4
 8006588:	0452      	lsls	r2, r2, #17
 800658a:	430a      	orrs	r2, r1
 800658c:	491f      	ldr	r1, [pc, #124]	; (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 800658e:	4313      	orrs	r3, r2
 8006590:	614b      	str	r3, [r1, #20]
 8006592:	e011      	b.n	80065b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006594:	4b1d      	ldr	r3, [pc, #116]	; (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800659c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	6892      	ldr	r2, [r2, #8]
 80065a4:	0211      	lsls	r1, r2, #8
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	6912      	ldr	r2, [r2, #16]
 80065aa:	0852      	lsrs	r2, r2, #1
 80065ac:	3a01      	subs	r2, #1
 80065ae:	0652      	lsls	r2, r2, #25
 80065b0:	430a      	orrs	r2, r1
 80065b2:	4916      	ldr	r1, [pc, #88]	; (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80065b8:	4b14      	ldr	r3, [pc, #80]	; (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a13      	ldr	r2, [pc, #76]	; (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065c4:	f7fc ff6c 	bl	80034a0 <HAL_GetTick>
 80065c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80065ca:	e009      	b.n	80065e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80065cc:	f7fc ff68 	bl	80034a0 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d902      	bls.n	80065e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	73fb      	strb	r3, [r7, #15]
          break;
 80065de:	e005      	b.n	80065ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80065e0:	4b0a      	ldr	r3, [pc, #40]	; (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d0ef      	beq.n	80065cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d106      	bne.n	8006600 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80065f2:	4b06      	ldr	r3, [pc, #24]	; (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065f4:	695a      	ldr	r2, [r3, #20]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	4904      	ldr	r1, [pc, #16]	; (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006600:	7bfb      	ldrb	r3, [r7, #15]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	40021000 	.word	0x40021000

08006610 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e095      	b.n	800674e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006626:	2b00      	cmp	r3, #0
 8006628:	d108      	bne.n	800663c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006632:	d009      	beq.n	8006648 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	61da      	str	r2, [r3, #28]
 800663a:	e005      	b.n	8006648 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d106      	bne.n	8006668 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f7fc fbdc 	bl	8002e20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2202      	movs	r2, #2
 800666c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800667e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006688:	d902      	bls.n	8006690 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800668a:	2300      	movs	r3, #0
 800668c:	60fb      	str	r3, [r7, #12]
 800668e:	e002      	b.n	8006696 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006694:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800669e:	d007      	beq.n	80066b0 <HAL_SPI_Init+0xa0>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066a8:	d002      	beq.n	80066b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80066c0:	431a      	orrs	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	431a      	orrs	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	431a      	orrs	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066de:	431a      	orrs	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	69db      	ldr	r3, [r3, #28]
 80066e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066e8:	431a      	orrs	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f2:	ea42 0103 	orr.w	r1, r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	0c1b      	lsrs	r3, r3, #16
 800670c:	f003 0204 	and.w	r2, r3, #4
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006714:	f003 0310 	and.w	r3, r3, #16
 8006718:	431a      	orrs	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800671e:	f003 0308 	and.w	r3, r3, #8
 8006722:	431a      	orrs	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800672c:	ea42 0103 	orr.w	r1, r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	430a      	orrs	r2, r1
 800673c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b082      	sub	sp, #8
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e040      	b.n	80067ea <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800676c:	2b00      	cmp	r3, #0
 800676e:	d106      	bne.n	800677e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f7fc fb95 	bl	8002ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2224      	movs	r2, #36	; 0x24
 8006782:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f022 0201 	bic.w	r2, r2, #1
 8006792:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fc33 	bl	8007008 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f978 	bl	8006a98 <UART_SetConfig>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d101      	bne.n	80067b2 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e01b      	b.n	80067ea <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	685a      	ldr	r2, [r3, #4]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689a      	ldr	r2, [r3, #8]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f042 0201 	orr.w	r2, r2, #1
 80067e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fcb2 	bl	800714c <UART_CheckIdleState>
 80067e8:	4603      	mov	r3, r0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b08a      	sub	sp, #40	; 0x28
 80067f6:	af02      	add	r7, sp, #8
 80067f8:	60f8      	str	r0, [r7, #12]
 80067fa:	60b9      	str	r1, [r7, #8]
 80067fc:	603b      	str	r3, [r7, #0]
 80067fe:	4613      	mov	r3, r2
 8006800:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006806:	2b20      	cmp	r3, #32
 8006808:	d178      	bne.n	80068fc <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <HAL_UART_Transmit+0x24>
 8006810:	88fb      	ldrh	r3, [r7, #6]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e071      	b.n	80068fe <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2221      	movs	r2, #33	; 0x21
 8006826:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006828:	f7fc fe3a 	bl	80034a0 <HAL_GetTick>
 800682c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	88fa      	ldrh	r2, [r7, #6]
 8006832:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	88fa      	ldrh	r2, [r7, #6]
 800683a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006846:	d108      	bne.n	800685a <HAL_UART_Transmit+0x68>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d104      	bne.n	800685a <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006850:	2300      	movs	r3, #0
 8006852:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	61bb      	str	r3, [r7, #24]
 8006858:	e003      	b.n	8006862 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800685e:	2300      	movs	r3, #0
 8006860:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006862:	e030      	b.n	80068c6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	2200      	movs	r2, #0
 800686c:	2180      	movs	r1, #128	; 0x80
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f000 fd14 	bl	800729c <UART_WaitOnFlagUntilTimeout>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d004      	beq.n	8006884 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2220      	movs	r2, #32
 800687e:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e03c      	b.n	80068fe <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10b      	bne.n	80068a2 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	881a      	ldrh	r2, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006896:	b292      	uxth	r2, r2
 8006898:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	3302      	adds	r3, #2
 800689e:	61bb      	str	r3, [r7, #24]
 80068a0:	e008      	b.n	80068b4 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	781a      	ldrb	r2, [r3, #0]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	b292      	uxth	r2, r2
 80068ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	3301      	adds	r3, #1
 80068b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	3b01      	subs	r3, #1
 80068be:	b29a      	uxth	r2, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1c8      	bne.n	8006864 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	2200      	movs	r2, #0
 80068da:	2140      	movs	r1, #64	; 0x40
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f000 fcdd 	bl	800729c <UART_WaitOnFlagUntilTimeout>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d004      	beq.n	80068f2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2220      	movs	r2, #32
 80068ec:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e005      	b.n	80068fe <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2220      	movs	r2, #32
 80068f6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80068f8:	2300      	movs	r3, #0
 80068fa:	e000      	b.n	80068fe <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80068fc:	2302      	movs	r3, #2
  }
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3720      	adds	r7, #32
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b08a      	sub	sp, #40	; 0x28
 800690a:	af02      	add	r7, sp, #8
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	603b      	str	r3, [r7, #0]
 8006912:	4613      	mov	r3, r2
 8006914:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800691c:	2b20      	cmp	r3, #32
 800691e:	f040 80b6 	bne.w	8006a8e <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <HAL_UART_Receive+0x28>
 8006928:	88fb      	ldrh	r3, [r7, #6]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e0ae      	b.n	8006a90 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2222      	movs	r2, #34	; 0x22
 800693e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006948:	f7fc fdaa 	bl	80034a0 <HAL_GetTick>
 800694c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	88fa      	ldrh	r2, [r7, #6]
 8006952:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	88fa      	ldrh	r2, [r7, #6]
 800695a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006966:	d10e      	bne.n	8006986 <HAL_UART_Receive+0x80>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d105      	bne.n	800697c <HAL_UART_Receive+0x76>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006976:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800697a:	e02d      	b.n	80069d8 <HAL_UART_Receive+0xd2>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	22ff      	movs	r2, #255	; 0xff
 8006980:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006984:	e028      	b.n	80069d8 <HAL_UART_Receive+0xd2>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10d      	bne.n	80069aa <HAL_UART_Receive+0xa4>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d104      	bne.n	80069a0 <HAL_UART_Receive+0x9a>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	22ff      	movs	r2, #255	; 0xff
 800699a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800699e:	e01b      	b.n	80069d8 <HAL_UART_Receive+0xd2>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	227f      	movs	r2, #127	; 0x7f
 80069a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069a8:	e016      	b.n	80069d8 <HAL_UART_Receive+0xd2>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069b2:	d10d      	bne.n	80069d0 <HAL_UART_Receive+0xca>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d104      	bne.n	80069c6 <HAL_UART_Receive+0xc0>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	227f      	movs	r2, #127	; 0x7f
 80069c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069c4:	e008      	b.n	80069d8 <HAL_UART_Receive+0xd2>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	223f      	movs	r2, #63	; 0x3f
 80069ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069ce:	e003      	b.n	80069d8 <HAL_UART_Receive+0xd2>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80069de:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069e8:	d108      	bne.n	80069fc <HAL_UART_Receive+0xf6>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d104      	bne.n	80069fc <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80069f2:	2300      	movs	r3, #0
 80069f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	61bb      	str	r3, [r7, #24]
 80069fa:	e003      	b.n	8006a04 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a00:	2300      	movs	r3, #0
 8006a02:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006a04:	e037      	b.n	8006a76 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	2120      	movs	r1, #32
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f000 fc43 	bl	800729c <UART_WaitOnFlagUntilTimeout>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d005      	beq.n	8006a28 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e033      	b.n	8006a90 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10c      	bne.n	8006a48 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	8a7b      	ldrh	r3, [r7, #18]
 8006a38:	4013      	ands	r3, r2
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	3302      	adds	r3, #2
 8006a44:	61bb      	str	r3, [r7, #24]
 8006a46:	e00d      	b.n	8006a64 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	8a7b      	ldrh	r3, [r7, #18]
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	4013      	ands	r3, r2
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	3301      	adds	r3, #1
 8006a62:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1c1      	bne.n	8006a06 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2220      	movs	r2, #32
 8006a86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	e000      	b.n	8006a90 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006a8e:	2302      	movs	r3, #2
  }
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3720      	adds	r7, #32
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a9c:	b08a      	sub	sp, #40	; 0x28
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	431a      	orrs	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	4ba4      	ldr	r3, [pc, #656]	; (8006d58 <UART_SetConfig+0x2c0>)
 8006ac8:	4013      	ands	r3, r2
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	6812      	ldr	r2, [r2, #0]
 8006ace:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ad0:	430b      	orrs	r3, r1
 8006ad2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	68da      	ldr	r2, [r3, #12]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a99      	ldr	r2, [pc, #612]	; (8006d5c <UART_SetConfig+0x2c4>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d004      	beq.n	8006b04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b00:	4313      	orrs	r3, r2
 8006b02:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b14:	430a      	orrs	r2, r1
 8006b16:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a90      	ldr	r2, [pc, #576]	; (8006d60 <UART_SetConfig+0x2c8>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d126      	bne.n	8006b70 <UART_SetConfig+0xd8>
 8006b22:	4b90      	ldr	r3, [pc, #576]	; (8006d64 <UART_SetConfig+0x2cc>)
 8006b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b28:	f003 0303 	and.w	r3, r3, #3
 8006b2c:	2b03      	cmp	r3, #3
 8006b2e:	d81b      	bhi.n	8006b68 <UART_SetConfig+0xd0>
 8006b30:	a201      	add	r2, pc, #4	; (adr r2, 8006b38 <UART_SetConfig+0xa0>)
 8006b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b36:	bf00      	nop
 8006b38:	08006b49 	.word	0x08006b49
 8006b3c:	08006b59 	.word	0x08006b59
 8006b40:	08006b51 	.word	0x08006b51
 8006b44:	08006b61 	.word	0x08006b61
 8006b48:	2301      	movs	r3, #1
 8006b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b4e:	e116      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006b50:	2302      	movs	r3, #2
 8006b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b56:	e112      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006b58:	2304      	movs	r3, #4
 8006b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b5e:	e10e      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006b60:	2308      	movs	r3, #8
 8006b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b66:	e10a      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006b68:	2310      	movs	r3, #16
 8006b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b6e:	e106      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a7c      	ldr	r2, [pc, #496]	; (8006d68 <UART_SetConfig+0x2d0>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d138      	bne.n	8006bec <UART_SetConfig+0x154>
 8006b7a:	4b7a      	ldr	r3, [pc, #488]	; (8006d64 <UART_SetConfig+0x2cc>)
 8006b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b80:	f003 030c 	and.w	r3, r3, #12
 8006b84:	2b0c      	cmp	r3, #12
 8006b86:	d82d      	bhi.n	8006be4 <UART_SetConfig+0x14c>
 8006b88:	a201      	add	r2, pc, #4	; (adr r2, 8006b90 <UART_SetConfig+0xf8>)
 8006b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b8e:	bf00      	nop
 8006b90:	08006bc5 	.word	0x08006bc5
 8006b94:	08006be5 	.word	0x08006be5
 8006b98:	08006be5 	.word	0x08006be5
 8006b9c:	08006be5 	.word	0x08006be5
 8006ba0:	08006bd5 	.word	0x08006bd5
 8006ba4:	08006be5 	.word	0x08006be5
 8006ba8:	08006be5 	.word	0x08006be5
 8006bac:	08006be5 	.word	0x08006be5
 8006bb0:	08006bcd 	.word	0x08006bcd
 8006bb4:	08006be5 	.word	0x08006be5
 8006bb8:	08006be5 	.word	0x08006be5
 8006bbc:	08006be5 	.word	0x08006be5
 8006bc0:	08006bdd 	.word	0x08006bdd
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bca:	e0d8      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bd2:	e0d4      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006bd4:	2304      	movs	r3, #4
 8006bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bda:	e0d0      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006bdc:	2308      	movs	r3, #8
 8006bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006be2:	e0cc      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006be4:	2310      	movs	r3, #16
 8006be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bea:	e0c8      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a5e      	ldr	r2, [pc, #376]	; (8006d6c <UART_SetConfig+0x2d4>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d125      	bne.n	8006c42 <UART_SetConfig+0x1aa>
 8006bf6:	4b5b      	ldr	r3, [pc, #364]	; (8006d64 <UART_SetConfig+0x2cc>)
 8006bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bfc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c00:	2b30      	cmp	r3, #48	; 0x30
 8006c02:	d016      	beq.n	8006c32 <UART_SetConfig+0x19a>
 8006c04:	2b30      	cmp	r3, #48	; 0x30
 8006c06:	d818      	bhi.n	8006c3a <UART_SetConfig+0x1a2>
 8006c08:	2b20      	cmp	r3, #32
 8006c0a:	d00a      	beq.n	8006c22 <UART_SetConfig+0x18a>
 8006c0c:	2b20      	cmp	r3, #32
 8006c0e:	d814      	bhi.n	8006c3a <UART_SetConfig+0x1a2>
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d002      	beq.n	8006c1a <UART_SetConfig+0x182>
 8006c14:	2b10      	cmp	r3, #16
 8006c16:	d008      	beq.n	8006c2a <UART_SetConfig+0x192>
 8006c18:	e00f      	b.n	8006c3a <UART_SetConfig+0x1a2>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c20:	e0ad      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006c22:	2302      	movs	r3, #2
 8006c24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c28:	e0a9      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006c2a:	2304      	movs	r3, #4
 8006c2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c30:	e0a5      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006c32:	2308      	movs	r3, #8
 8006c34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c38:	e0a1      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006c3a:	2310      	movs	r3, #16
 8006c3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c40:	e09d      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a4a      	ldr	r2, [pc, #296]	; (8006d70 <UART_SetConfig+0x2d8>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d125      	bne.n	8006c98 <UART_SetConfig+0x200>
 8006c4c:	4b45      	ldr	r3, [pc, #276]	; (8006d64 <UART_SetConfig+0x2cc>)
 8006c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c56:	2bc0      	cmp	r3, #192	; 0xc0
 8006c58:	d016      	beq.n	8006c88 <UART_SetConfig+0x1f0>
 8006c5a:	2bc0      	cmp	r3, #192	; 0xc0
 8006c5c:	d818      	bhi.n	8006c90 <UART_SetConfig+0x1f8>
 8006c5e:	2b80      	cmp	r3, #128	; 0x80
 8006c60:	d00a      	beq.n	8006c78 <UART_SetConfig+0x1e0>
 8006c62:	2b80      	cmp	r3, #128	; 0x80
 8006c64:	d814      	bhi.n	8006c90 <UART_SetConfig+0x1f8>
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d002      	beq.n	8006c70 <UART_SetConfig+0x1d8>
 8006c6a:	2b40      	cmp	r3, #64	; 0x40
 8006c6c:	d008      	beq.n	8006c80 <UART_SetConfig+0x1e8>
 8006c6e:	e00f      	b.n	8006c90 <UART_SetConfig+0x1f8>
 8006c70:	2300      	movs	r3, #0
 8006c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c76:	e082      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c7e:	e07e      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006c80:	2304      	movs	r3, #4
 8006c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c86:	e07a      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006c88:	2308      	movs	r3, #8
 8006c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c8e:	e076      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006c90:	2310      	movs	r3, #16
 8006c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c96:	e072      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a35      	ldr	r2, [pc, #212]	; (8006d74 <UART_SetConfig+0x2dc>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d12a      	bne.n	8006cf8 <UART_SetConfig+0x260>
 8006ca2:	4b30      	ldr	r3, [pc, #192]	; (8006d64 <UART_SetConfig+0x2cc>)
 8006ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ca8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cb0:	d01a      	beq.n	8006ce8 <UART_SetConfig+0x250>
 8006cb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cb6:	d81b      	bhi.n	8006cf0 <UART_SetConfig+0x258>
 8006cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cbc:	d00c      	beq.n	8006cd8 <UART_SetConfig+0x240>
 8006cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cc2:	d815      	bhi.n	8006cf0 <UART_SetConfig+0x258>
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d003      	beq.n	8006cd0 <UART_SetConfig+0x238>
 8006cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ccc:	d008      	beq.n	8006ce0 <UART_SetConfig+0x248>
 8006cce:	e00f      	b.n	8006cf0 <UART_SetConfig+0x258>
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cd6:	e052      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cde:	e04e      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006ce0:	2304      	movs	r3, #4
 8006ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ce6:	e04a      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006ce8:	2308      	movs	r3, #8
 8006cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cee:	e046      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006cf0:	2310      	movs	r3, #16
 8006cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cf6:	e042      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a17      	ldr	r2, [pc, #92]	; (8006d5c <UART_SetConfig+0x2c4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d13a      	bne.n	8006d78 <UART_SetConfig+0x2e0>
 8006d02:	4b18      	ldr	r3, [pc, #96]	; (8006d64 <UART_SetConfig+0x2cc>)
 8006d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d10:	d01a      	beq.n	8006d48 <UART_SetConfig+0x2b0>
 8006d12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d16:	d81b      	bhi.n	8006d50 <UART_SetConfig+0x2b8>
 8006d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d1c:	d00c      	beq.n	8006d38 <UART_SetConfig+0x2a0>
 8006d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d22:	d815      	bhi.n	8006d50 <UART_SetConfig+0x2b8>
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d003      	beq.n	8006d30 <UART_SetConfig+0x298>
 8006d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d2c:	d008      	beq.n	8006d40 <UART_SetConfig+0x2a8>
 8006d2e:	e00f      	b.n	8006d50 <UART_SetConfig+0x2b8>
 8006d30:	2300      	movs	r3, #0
 8006d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d36:	e022      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006d38:	2302      	movs	r3, #2
 8006d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d3e:	e01e      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006d40:	2304      	movs	r3, #4
 8006d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d46:	e01a      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006d48:	2308      	movs	r3, #8
 8006d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d4e:	e016      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006d50:	2310      	movs	r3, #16
 8006d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d56:	e012      	b.n	8006d7e <UART_SetConfig+0x2e6>
 8006d58:	efff69f3 	.word	0xefff69f3
 8006d5c:	40008000 	.word	0x40008000
 8006d60:	40013800 	.word	0x40013800
 8006d64:	40021000 	.word	0x40021000
 8006d68:	40004400 	.word	0x40004400
 8006d6c:	40004800 	.word	0x40004800
 8006d70:	40004c00 	.word	0x40004c00
 8006d74:	40005000 	.word	0x40005000
 8006d78:	2310      	movs	r3, #16
 8006d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a9f      	ldr	r2, [pc, #636]	; (8007000 <UART_SetConfig+0x568>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d17a      	bne.n	8006e7e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d8c:	2b08      	cmp	r3, #8
 8006d8e:	d824      	bhi.n	8006dda <UART_SetConfig+0x342>
 8006d90:	a201      	add	r2, pc, #4	; (adr r2, 8006d98 <UART_SetConfig+0x300>)
 8006d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d96:	bf00      	nop
 8006d98:	08006dbd 	.word	0x08006dbd
 8006d9c:	08006ddb 	.word	0x08006ddb
 8006da0:	08006dc5 	.word	0x08006dc5
 8006da4:	08006ddb 	.word	0x08006ddb
 8006da8:	08006dcb 	.word	0x08006dcb
 8006dac:	08006ddb 	.word	0x08006ddb
 8006db0:	08006ddb 	.word	0x08006ddb
 8006db4:	08006ddb 	.word	0x08006ddb
 8006db8:	08006dd3 	.word	0x08006dd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dbc:	f7fe fed0 	bl	8005b60 <HAL_RCC_GetPCLK1Freq>
 8006dc0:	61f8      	str	r0, [r7, #28]
        break;
 8006dc2:	e010      	b.n	8006de6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dc4:	4b8f      	ldr	r3, [pc, #572]	; (8007004 <UART_SetConfig+0x56c>)
 8006dc6:	61fb      	str	r3, [r7, #28]
        break;
 8006dc8:	e00d      	b.n	8006de6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dca:	f7fe fe31 	bl	8005a30 <HAL_RCC_GetSysClockFreq>
 8006dce:	61f8      	str	r0, [r7, #28]
        break;
 8006dd0:	e009      	b.n	8006de6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dd6:	61fb      	str	r3, [r7, #28]
        break;
 8006dd8:	e005      	b.n	8006de6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006de4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 80fb 	beq.w	8006fe4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	685a      	ldr	r2, [r3, #4]
 8006df2:	4613      	mov	r3, r2
 8006df4:	005b      	lsls	r3, r3, #1
 8006df6:	4413      	add	r3, r2
 8006df8:	69fa      	ldr	r2, [r7, #28]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d305      	bcc.n	8006e0a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006e04:	69fa      	ldr	r2, [r7, #28]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d903      	bls.n	8006e12 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e10:	e0e8      	b.n	8006fe4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	2200      	movs	r2, #0
 8006e16:	461c      	mov	r4, r3
 8006e18:	4615      	mov	r5, r2
 8006e1a:	f04f 0200 	mov.w	r2, #0
 8006e1e:	f04f 0300 	mov.w	r3, #0
 8006e22:	022b      	lsls	r3, r5, #8
 8006e24:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006e28:	0222      	lsls	r2, r4, #8
 8006e2a:	68f9      	ldr	r1, [r7, #12]
 8006e2c:	6849      	ldr	r1, [r1, #4]
 8006e2e:	0849      	lsrs	r1, r1, #1
 8006e30:	2000      	movs	r0, #0
 8006e32:	4688      	mov	r8, r1
 8006e34:	4681      	mov	r9, r0
 8006e36:	eb12 0a08 	adds.w	sl, r2, r8
 8006e3a:	eb43 0b09 	adc.w	fp, r3, r9
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	603b      	str	r3, [r7, #0]
 8006e46:	607a      	str	r2, [r7, #4]
 8006e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e4c:	4650      	mov	r0, sl
 8006e4e:	4659      	mov	r1, fp
 8006e50:	f7f9 feaa 	bl	8000ba8 <__aeabi_uldivmod>
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	4613      	mov	r3, r2
 8006e5a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e62:	d308      	bcc.n	8006e76 <UART_SetConfig+0x3de>
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e6a:	d204      	bcs.n	8006e76 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	60da      	str	r2, [r3, #12]
 8006e74:	e0b6      	b.n	8006fe4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e7c:	e0b2      	b.n	8006fe4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e86:	d15e      	bne.n	8006f46 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006e88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e8c:	2b08      	cmp	r3, #8
 8006e8e:	d828      	bhi.n	8006ee2 <UART_SetConfig+0x44a>
 8006e90:	a201      	add	r2, pc, #4	; (adr r2, 8006e98 <UART_SetConfig+0x400>)
 8006e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e96:	bf00      	nop
 8006e98:	08006ebd 	.word	0x08006ebd
 8006e9c:	08006ec5 	.word	0x08006ec5
 8006ea0:	08006ecd 	.word	0x08006ecd
 8006ea4:	08006ee3 	.word	0x08006ee3
 8006ea8:	08006ed3 	.word	0x08006ed3
 8006eac:	08006ee3 	.word	0x08006ee3
 8006eb0:	08006ee3 	.word	0x08006ee3
 8006eb4:	08006ee3 	.word	0x08006ee3
 8006eb8:	08006edb 	.word	0x08006edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ebc:	f7fe fe50 	bl	8005b60 <HAL_RCC_GetPCLK1Freq>
 8006ec0:	61f8      	str	r0, [r7, #28]
        break;
 8006ec2:	e014      	b.n	8006eee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ec4:	f7fe fe62 	bl	8005b8c <HAL_RCC_GetPCLK2Freq>
 8006ec8:	61f8      	str	r0, [r7, #28]
        break;
 8006eca:	e010      	b.n	8006eee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ecc:	4b4d      	ldr	r3, [pc, #308]	; (8007004 <UART_SetConfig+0x56c>)
 8006ece:	61fb      	str	r3, [r7, #28]
        break;
 8006ed0:	e00d      	b.n	8006eee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ed2:	f7fe fdad 	bl	8005a30 <HAL_RCC_GetSysClockFreq>
 8006ed6:	61f8      	str	r0, [r7, #28]
        break;
 8006ed8:	e009      	b.n	8006eee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ede:	61fb      	str	r3, [r7, #28]
        break;
 8006ee0:	e005      	b.n	8006eee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006eec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d077      	beq.n	8006fe4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	005a      	lsls	r2, r3, #1
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	085b      	lsrs	r3, r3, #1
 8006efe:	441a      	add	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f08:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	2b0f      	cmp	r3, #15
 8006f0e:	d916      	bls.n	8006f3e <UART_SetConfig+0x4a6>
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f16:	d212      	bcs.n	8006f3e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	f023 030f 	bic.w	r3, r3, #15
 8006f20:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	085b      	lsrs	r3, r3, #1
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	f003 0307 	and.w	r3, r3, #7
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	8afb      	ldrh	r3, [r7, #22]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	8afa      	ldrh	r2, [r7, #22]
 8006f3a:	60da      	str	r2, [r3, #12]
 8006f3c:	e052      	b.n	8006fe4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f44:	e04e      	b.n	8006fe4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f4a:	2b08      	cmp	r3, #8
 8006f4c:	d827      	bhi.n	8006f9e <UART_SetConfig+0x506>
 8006f4e:	a201      	add	r2, pc, #4	; (adr r2, 8006f54 <UART_SetConfig+0x4bc>)
 8006f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f54:	08006f79 	.word	0x08006f79
 8006f58:	08006f81 	.word	0x08006f81
 8006f5c:	08006f89 	.word	0x08006f89
 8006f60:	08006f9f 	.word	0x08006f9f
 8006f64:	08006f8f 	.word	0x08006f8f
 8006f68:	08006f9f 	.word	0x08006f9f
 8006f6c:	08006f9f 	.word	0x08006f9f
 8006f70:	08006f9f 	.word	0x08006f9f
 8006f74:	08006f97 	.word	0x08006f97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f78:	f7fe fdf2 	bl	8005b60 <HAL_RCC_GetPCLK1Freq>
 8006f7c:	61f8      	str	r0, [r7, #28]
        break;
 8006f7e:	e014      	b.n	8006faa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f80:	f7fe fe04 	bl	8005b8c <HAL_RCC_GetPCLK2Freq>
 8006f84:	61f8      	str	r0, [r7, #28]
        break;
 8006f86:	e010      	b.n	8006faa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f88:	4b1e      	ldr	r3, [pc, #120]	; (8007004 <UART_SetConfig+0x56c>)
 8006f8a:	61fb      	str	r3, [r7, #28]
        break;
 8006f8c:	e00d      	b.n	8006faa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f8e:	f7fe fd4f 	bl	8005a30 <HAL_RCC_GetSysClockFreq>
 8006f92:	61f8      	str	r0, [r7, #28]
        break;
 8006f94:	e009      	b.n	8006faa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f9a:	61fb      	str	r3, [r7, #28]
        break;
 8006f9c:	e005      	b.n	8006faa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006fa8:	bf00      	nop
    }

    if (pclk != 0U)
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d019      	beq.n	8006fe4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	085a      	lsrs	r2, r3, #1
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	441a      	add	r2, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	2b0f      	cmp	r3, #15
 8006fc8:	d909      	bls.n	8006fde <UART_SetConfig+0x546>
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fd0:	d205      	bcs.n	8006fde <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	60da      	str	r2, [r3, #12]
 8006fdc:	e002      	b.n	8006fe4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006ff0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3728      	adds	r7, #40	; 0x28
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ffe:	bf00      	nop
 8007000:	40008000 	.word	0x40008000
 8007004:	00f42400 	.word	0x00f42400

08007008 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007014:	f003 0308 	and.w	r3, r3, #8
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00a      	beq.n	8007032 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	430a      	orrs	r2, r1
 8007030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007036:	f003 0301 	and.w	r3, r3, #1
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00a      	beq.n	8007054 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	430a      	orrs	r2, r1
 8007052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00a      	beq.n	8007076 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	430a      	orrs	r2, r1
 8007074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	f003 0304 	and.w	r3, r3, #4
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00a      	beq.n	8007098 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	430a      	orrs	r2, r1
 8007096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709c:	f003 0310 	and.w	r3, r3, #16
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00a      	beq.n	80070ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	430a      	orrs	r2, r1
 80070b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070be:	f003 0320 	and.w	r3, r3, #32
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00a      	beq.n	80070dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	430a      	orrs	r2, r1
 80070da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d01a      	beq.n	800711e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	430a      	orrs	r2, r1
 80070fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007102:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007106:	d10a      	bne.n	800711e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	430a      	orrs	r2, r1
 800711c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	605a      	str	r2, [r3, #4]
  }
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b098      	sub	sp, #96	; 0x60
 8007150:	af02      	add	r7, sp, #8
 8007152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800715c:	f7fc f9a0 	bl	80034a0 <HAL_GetTick>
 8007160:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0308 	and.w	r3, r3, #8
 800716c:	2b08      	cmp	r3, #8
 800716e:	d12e      	bne.n	80071ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007170:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007178:	2200      	movs	r2, #0
 800717a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f88c 	bl	800729c <UART_WaitOnFlagUntilTimeout>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d021      	beq.n	80071ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007192:	e853 3f00 	ldrex	r3, [r3]
 8007196:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800719e:	653b      	str	r3, [r7, #80]	; 0x50
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	461a      	mov	r2, r3
 80071a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071a8:	647b      	str	r3, [r7, #68]	; 0x44
 80071aa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071b0:	e841 2300 	strex	r3, r2, [r1]
 80071b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1e6      	bne.n	800718a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2220      	movs	r2, #32
 80071c0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e062      	b.n	8007294 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0304 	and.w	r3, r3, #4
 80071d8:	2b04      	cmp	r3, #4
 80071da:	d149      	bne.n	8007270 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071e4:	2200      	movs	r2, #0
 80071e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f856 	bl	800729c <UART_WaitOnFlagUntilTimeout>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d03c      	beq.n	8007270 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	e853 3f00 	ldrex	r3, [r3]
 8007202:	623b      	str	r3, [r7, #32]
   return(result);
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800720a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	461a      	mov	r2, r3
 8007212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007214:	633b      	str	r3, [r7, #48]	; 0x30
 8007216:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007218:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800721a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800721c:	e841 2300 	strex	r3, r2, [r1]
 8007220:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1e6      	bne.n	80071f6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	3308      	adds	r3, #8
 800722e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	e853 3f00 	ldrex	r3, [r3]
 8007236:	60fb      	str	r3, [r7, #12]
   return(result);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f023 0301 	bic.w	r3, r3, #1
 800723e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	3308      	adds	r3, #8
 8007246:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007248:	61fa      	str	r2, [r7, #28]
 800724a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724c:	69b9      	ldr	r1, [r7, #24]
 800724e:	69fa      	ldr	r2, [r7, #28]
 8007250:	e841 2300 	strex	r3, r2, [r1]
 8007254:	617b      	str	r3, [r7, #20]
   return(result);
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1e5      	bne.n	8007228 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2220      	movs	r2, #32
 8007260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	e011      	b.n	8007294 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2220      	movs	r2, #32
 8007274:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2220      	movs	r2, #32
 800727a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3758      	adds	r7, #88	; 0x58
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	603b      	str	r3, [r7, #0]
 80072a8:	4613      	mov	r3, r2
 80072aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072ac:	e04f      	b.n	800734e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b4:	d04b      	beq.n	800734e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072b6:	f7fc f8f3 	bl	80034a0 <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	69ba      	ldr	r2, [r7, #24]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d302      	bcc.n	80072cc <UART_WaitOnFlagUntilTimeout+0x30>
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e04e      	b.n	800736e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0304 	and.w	r3, r3, #4
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d037      	beq.n	800734e <UART_WaitOnFlagUntilTimeout+0xb2>
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	2b80      	cmp	r3, #128	; 0x80
 80072e2:	d034      	beq.n	800734e <UART_WaitOnFlagUntilTimeout+0xb2>
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	2b40      	cmp	r3, #64	; 0x40
 80072e8:	d031      	beq.n	800734e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	69db      	ldr	r3, [r3, #28]
 80072f0:	f003 0308 	and.w	r3, r3, #8
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	d110      	bne.n	800731a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2208      	movs	r2, #8
 80072fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 f838 	bl	8007376 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2208      	movs	r2, #8
 800730a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e029      	b.n	800736e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	69db      	ldr	r3, [r3, #28]
 8007320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007328:	d111      	bne.n	800734e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007332:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f000 f81e 	bl	8007376 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2220      	movs	r2, #32
 800733e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e00f      	b.n	800736e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	69da      	ldr	r2, [r3, #28]
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	4013      	ands	r3, r2
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	429a      	cmp	r2, r3
 800735c:	bf0c      	ite	eq
 800735e:	2301      	moveq	r3, #1
 8007360:	2300      	movne	r3, #0
 8007362:	b2db      	uxtb	r3, r3
 8007364:	461a      	mov	r2, r3
 8007366:	79fb      	ldrb	r3, [r7, #7]
 8007368:	429a      	cmp	r2, r3
 800736a:	d0a0      	beq.n	80072ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007376:	b480      	push	{r7}
 8007378:	b095      	sub	sp, #84	; 0x54
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007386:	e853 3f00 	ldrex	r3, [r3]
 800738a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007392:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	461a      	mov	r2, r3
 800739a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800739c:	643b      	str	r3, [r7, #64]	; 0x40
 800739e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073a4:	e841 2300 	strex	r3, r2, [r1]
 80073a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1e6      	bne.n	800737e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	3308      	adds	r3, #8
 80073b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b8:	6a3b      	ldr	r3, [r7, #32]
 80073ba:	e853 3f00 	ldrex	r3, [r3]
 80073be:	61fb      	str	r3, [r7, #28]
   return(result);
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	f023 0301 	bic.w	r3, r3, #1
 80073c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3308      	adds	r3, #8
 80073ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073d8:	e841 2300 	strex	r3, r2, [r1]
 80073dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1e5      	bne.n	80073b0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d118      	bne.n	800741e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	e853 3f00 	ldrex	r3, [r3]
 80073f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	f023 0310 	bic.w	r3, r3, #16
 8007400:	647b      	str	r3, [r7, #68]	; 0x44
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800740a:	61bb      	str	r3, [r7, #24]
 800740c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740e:	6979      	ldr	r1, [r7, #20]
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	e841 2300 	strex	r3, r2, [r1]
 8007416:	613b      	str	r3, [r7, #16]
   return(result);
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1e6      	bne.n	80073ec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2220      	movs	r2, #32
 8007422:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007432:	bf00      	nop
 8007434:	3754      	adds	r7, #84	; 0x54
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800743e:	b084      	sub	sp, #16
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	f107 001c 	add.w	r0, r7, #28
 800744c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fa69 	bl	8007934 <USB_CoreReset>
 8007462:	4603      	mov	r3, r0
 8007464:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007466:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800746a:	2b00      	cmp	r3, #0
 800746c:	d106      	bne.n	800747c <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007472:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	639a      	str	r2, [r3, #56]	; 0x38
 800747a:	e005      	b.n	8007488 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007480:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007488:	7bfb      	ldrb	r3, [r7, #15]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007494:	b004      	add	sp, #16
 8007496:	4770      	bx	lr

08007498 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f023 0201 	bic.w	r2, r3, #1
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b084      	sub	sp, #16
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	460b      	mov	r3, r1
 80074c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80074d6:	78fb      	ldrb	r3, [r7, #3]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d115      	bne.n	8007508 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80074e8:	200a      	movs	r0, #10
 80074ea:	f7fb ffe5 	bl	80034b8 <HAL_Delay>
      ms += 10U;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	330a      	adds	r3, #10
 80074f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fa0f 	bl	8007918 <USB_GetMode>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d01e      	beq.n	800753e <USB_SetCurrentMode+0x84>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2bc7      	cmp	r3, #199	; 0xc7
 8007504:	d9f0      	bls.n	80074e8 <USB_SetCurrentMode+0x2e>
 8007506:	e01a      	b.n	800753e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007508:	78fb      	ldrb	r3, [r7, #3]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d115      	bne.n	800753a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800751a:	200a      	movs	r0, #10
 800751c:	f7fb ffcc 	bl	80034b8 <HAL_Delay>
      ms += 10U;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	330a      	adds	r3, #10
 8007524:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f9f6 	bl	8007918 <USB_GetMode>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d005      	beq.n	800753e <USB_SetCurrentMode+0x84>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2bc7      	cmp	r3, #199	; 0xc7
 8007536:	d9f0      	bls.n	800751a <USB_SetCurrentMode+0x60>
 8007538:	e001      	b.n	800753e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e005      	b.n	800754a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2bc8      	cmp	r3, #200	; 0xc8
 8007542:	d101      	bne.n	8007548 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e000      	b.n	800754a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
	...

08007554 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007554:	b084      	sub	sp, #16
 8007556:	b580      	push	{r7, lr}
 8007558:	b086      	sub	sp, #24
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007562:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800756e:	2300      	movs	r3, #0
 8007570:	613b      	str	r3, [r7, #16]
 8007572:	e009      	b.n	8007588 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	3340      	adds	r3, #64	; 0x40
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4413      	add	r3, r2
 800757e:	2200      	movs	r2, #0
 8007580:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	3301      	adds	r3, #1
 8007586:	613b      	str	r3, [r7, #16]
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	2b0e      	cmp	r3, #14
 800758c:	d9f2      	bls.n	8007574 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800758e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007592:	2b00      	cmp	r3, #0
 8007594:	d11c      	bne.n	80075d0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075a4:	f043 0302 	orr.w	r3, r3, #2
 80075a8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	e005      	b.n	80075dc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075e2:	461a      	mov	r2, r3
 80075e4:	2300      	movs	r3, #0
 80075e6:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80075e8:	2103      	movs	r1, #3
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f95a 	bl	80078a4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075f0:	2110      	movs	r1, #16
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f8f6 	bl	80077e4 <USB_FlushTxFifo>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d001      	beq.n	8007602 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f920 	bl	8007848 <USB_FlushRxFifo>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d001      	beq.n	8007612 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007618:	461a      	mov	r2, r3
 800761a:	2300      	movs	r3, #0
 800761c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007624:	461a      	mov	r2, r3
 8007626:	2300      	movs	r3, #0
 8007628:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007630:	461a      	mov	r2, r3
 8007632:	2300      	movs	r3, #0
 8007634:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007636:	2300      	movs	r3, #0
 8007638:	613b      	str	r3, [r7, #16]
 800763a:	e043      	b.n	80076c4 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	015a      	lsls	r2, r3, #5
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4413      	add	r3, r2
 8007644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800764e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007652:	d118      	bne.n	8007686 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10a      	bne.n	8007670 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	015a      	lsls	r2, r3, #5
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	4413      	add	r3, r2
 8007662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007666:	461a      	mov	r2, r3
 8007668:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800766c:	6013      	str	r3, [r2, #0]
 800766e:	e013      	b.n	8007698 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	015a      	lsls	r2, r3, #5
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	4413      	add	r3, r2
 8007678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800767c:	461a      	mov	r2, r3
 800767e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007682:	6013      	str	r3, [r2, #0]
 8007684:	e008      	b.n	8007698 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	015a      	lsls	r2, r3, #5
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	4413      	add	r3, r2
 800768e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007692:	461a      	mov	r2, r3
 8007694:	2300      	movs	r3, #0
 8007696:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	015a      	lsls	r2, r3, #5
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4413      	add	r3, r2
 80076a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a4:	461a      	mov	r2, r3
 80076a6:	2300      	movs	r3, #0
 80076a8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	015a      	lsls	r2, r3, #5
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	4413      	add	r3, r2
 80076b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b6:	461a      	mov	r2, r3
 80076b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80076bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	3301      	adds	r3, #1
 80076c2:	613b      	str	r3, [r7, #16]
 80076c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80076c8:	461a      	mov	r2, r3
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d3b5      	bcc.n	800763c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076d0:	2300      	movs	r3, #0
 80076d2:	613b      	str	r3, [r7, #16]
 80076d4:	e043      	b.n	800775e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	015a      	lsls	r2, r3, #5
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	4413      	add	r3, r2
 80076de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076ec:	d118      	bne.n	8007720 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10a      	bne.n	800770a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007700:	461a      	mov	r2, r3
 8007702:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007706:	6013      	str	r3, [r2, #0]
 8007708:	e013      	b.n	8007732 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	015a      	lsls	r2, r3, #5
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	4413      	add	r3, r2
 8007712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007716:	461a      	mov	r2, r3
 8007718:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800771c:	6013      	str	r3, [r2, #0]
 800771e:	e008      	b.n	8007732 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	015a      	lsls	r2, r3, #5
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	4413      	add	r3, r2
 8007728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772c:	461a      	mov	r2, r3
 800772e:	2300      	movs	r3, #0
 8007730:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	015a      	lsls	r2, r3, #5
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	4413      	add	r3, r2
 800773a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773e:	461a      	mov	r2, r3
 8007740:	2300      	movs	r3, #0
 8007742:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	015a      	lsls	r2, r3, #5
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	4413      	add	r3, r2
 800774c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007750:	461a      	mov	r2, r3
 8007752:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007756:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	3301      	adds	r3, #1
 800775c:	613b      	str	r3, [r7, #16]
 800775e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007762:	461a      	mov	r2, r3
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	4293      	cmp	r3, r2
 8007768:	d3b5      	bcc.n	80076d6 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800777c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800778a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	f043 0210 	orr.w	r2, r3, #16
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	699a      	ldr	r2, [r3, #24]
 800779c:	4b10      	ldr	r3, [pc, #64]	; (80077e0 <USB_DevInit+0x28c>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80077a4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d005      	beq.n	80077b8 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	f043 0208 	orr.w	r2, r3, #8
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80077b8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d107      	bne.n	80077d0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077c8:	f043 0304 	orr.w	r3, r3, #4
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80077d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3718      	adds	r7, #24
 80077d6:	46bd      	mov	sp, r7
 80077d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077dc:	b004      	add	sp, #16
 80077de:	4770      	bx	lr
 80077e0:	803c3800 	.word	0x803c3800

080077e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3301      	adds	r3, #1
 80077f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80077fe:	d901      	bls.n	8007804 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e01b      	b.n	800783c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	2b00      	cmp	r3, #0
 800780a:	daf2      	bge.n	80077f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800780c:	2300      	movs	r3, #0
 800780e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	019b      	lsls	r3, r3, #6
 8007814:	f043 0220 	orr.w	r2, r3, #32
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	3301      	adds	r3, #1
 8007820:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007828:	d901      	bls.n	800782e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e006      	b.n	800783c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	f003 0320 	and.w	r3, r3, #32
 8007836:	2b20      	cmp	r3, #32
 8007838:	d0f0      	beq.n	800781c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3714      	adds	r7, #20
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007850:	2300      	movs	r3, #0
 8007852:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	3301      	adds	r3, #1
 8007858:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007860:	d901      	bls.n	8007866 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e018      	b.n	8007898 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	2b00      	cmp	r3, #0
 800786c:	daf2      	bge.n	8007854 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800786e:	2300      	movs	r3, #0
 8007870:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2210      	movs	r2, #16
 8007876:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	3301      	adds	r3, #1
 800787c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007884:	d901      	bls.n	800788a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007886:	2303      	movs	r3, #3
 8007888:	e006      	b.n	8007898 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	f003 0310 	and.w	r3, r3, #16
 8007892:	2b10      	cmp	r3, #16
 8007894:	d0f0      	beq.n	8007878 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3714      	adds	r7, #20
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	460b      	mov	r3, r1
 80078ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	78fb      	ldrb	r3, [r7, #3]
 80078be:	68f9      	ldr	r1, [r7, #12]
 80078c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078c4:	4313      	orrs	r3, r2
 80078c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3714      	adds	r7, #20
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b085      	sub	sp, #20
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078f0:	f023 0303 	bic.w	r3, r3, #3
 80078f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007904:	f043 0302 	orr.w	r3, r3, #2
 8007908:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3714      	adds	r7, #20
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	695b      	ldr	r3, [r3, #20]
 8007924:	f003 0301 	and.w	r3, r3, #1
}
 8007928:	4618      	mov	r0, r3
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800793c:	2300      	movs	r3, #0
 800793e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	3301      	adds	r3, #1
 8007944:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800794c:	d901      	bls.n	8007952 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e01b      	b.n	800798a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	2b00      	cmp	r3, #0
 8007958:	daf2      	bge.n	8007940 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800795a:	2300      	movs	r3, #0
 800795c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	f043 0201 	orr.w	r2, r3, #1
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	3301      	adds	r3, #1
 800796e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007976:	d901      	bls.n	800797c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e006      	b.n	800798a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	f003 0301 	and.w	r3, r3, #1
 8007984:	2b01      	cmp	r3, #1
 8007986:	d0f0      	beq.n	800796a <USB_CoreReset+0x36>

  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <__cvt>:
 8007996:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800799a:	ec55 4b10 	vmov	r4, r5, d0
 800799e:	2d00      	cmp	r5, #0
 80079a0:	460e      	mov	r6, r1
 80079a2:	4619      	mov	r1, r3
 80079a4:	462b      	mov	r3, r5
 80079a6:	bfbb      	ittet	lt
 80079a8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80079ac:	461d      	movlt	r5, r3
 80079ae:	2300      	movge	r3, #0
 80079b0:	232d      	movlt	r3, #45	; 0x2d
 80079b2:	700b      	strb	r3, [r1, #0]
 80079b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079b6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80079ba:	4691      	mov	r9, r2
 80079bc:	f023 0820 	bic.w	r8, r3, #32
 80079c0:	bfbc      	itt	lt
 80079c2:	4622      	movlt	r2, r4
 80079c4:	4614      	movlt	r4, r2
 80079c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80079ca:	d005      	beq.n	80079d8 <__cvt+0x42>
 80079cc:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80079d0:	d100      	bne.n	80079d4 <__cvt+0x3e>
 80079d2:	3601      	adds	r6, #1
 80079d4:	2102      	movs	r1, #2
 80079d6:	e000      	b.n	80079da <__cvt+0x44>
 80079d8:	2103      	movs	r1, #3
 80079da:	ab03      	add	r3, sp, #12
 80079dc:	9301      	str	r3, [sp, #4]
 80079de:	ab02      	add	r3, sp, #8
 80079e0:	9300      	str	r3, [sp, #0]
 80079e2:	ec45 4b10 	vmov	d0, r4, r5
 80079e6:	4653      	mov	r3, sl
 80079e8:	4632      	mov	r2, r6
 80079ea:	f000 ff59 	bl	80088a0 <_dtoa_r>
 80079ee:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80079f2:	4607      	mov	r7, r0
 80079f4:	d102      	bne.n	80079fc <__cvt+0x66>
 80079f6:	f019 0f01 	tst.w	r9, #1
 80079fa:	d022      	beq.n	8007a42 <__cvt+0xac>
 80079fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a00:	eb07 0906 	add.w	r9, r7, r6
 8007a04:	d110      	bne.n	8007a28 <__cvt+0x92>
 8007a06:	783b      	ldrb	r3, [r7, #0]
 8007a08:	2b30      	cmp	r3, #48	; 0x30
 8007a0a:	d10a      	bne.n	8007a22 <__cvt+0x8c>
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	2300      	movs	r3, #0
 8007a10:	4620      	mov	r0, r4
 8007a12:	4629      	mov	r1, r5
 8007a14:	f7f9 f858 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a18:	b918      	cbnz	r0, 8007a22 <__cvt+0x8c>
 8007a1a:	f1c6 0601 	rsb	r6, r6, #1
 8007a1e:	f8ca 6000 	str.w	r6, [sl]
 8007a22:	f8da 3000 	ldr.w	r3, [sl]
 8007a26:	4499      	add	r9, r3
 8007a28:	2200      	movs	r2, #0
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	4629      	mov	r1, r5
 8007a30:	f7f9 f84a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a34:	b108      	cbz	r0, 8007a3a <__cvt+0xa4>
 8007a36:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a3a:	2230      	movs	r2, #48	; 0x30
 8007a3c:	9b03      	ldr	r3, [sp, #12]
 8007a3e:	454b      	cmp	r3, r9
 8007a40:	d307      	bcc.n	8007a52 <__cvt+0xbc>
 8007a42:	9b03      	ldr	r3, [sp, #12]
 8007a44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a46:	1bdb      	subs	r3, r3, r7
 8007a48:	4638      	mov	r0, r7
 8007a4a:	6013      	str	r3, [r2, #0]
 8007a4c:	b004      	add	sp, #16
 8007a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a52:	1c59      	adds	r1, r3, #1
 8007a54:	9103      	str	r1, [sp, #12]
 8007a56:	701a      	strb	r2, [r3, #0]
 8007a58:	e7f0      	b.n	8007a3c <__cvt+0xa6>

08007a5a <__exponent>:
 8007a5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2900      	cmp	r1, #0
 8007a60:	bfb8      	it	lt
 8007a62:	4249      	neglt	r1, r1
 8007a64:	f803 2b02 	strb.w	r2, [r3], #2
 8007a68:	bfb4      	ite	lt
 8007a6a:	222d      	movlt	r2, #45	; 0x2d
 8007a6c:	222b      	movge	r2, #43	; 0x2b
 8007a6e:	2909      	cmp	r1, #9
 8007a70:	7042      	strb	r2, [r0, #1]
 8007a72:	dd2a      	ble.n	8007aca <__exponent+0x70>
 8007a74:	f10d 0207 	add.w	r2, sp, #7
 8007a78:	4617      	mov	r7, r2
 8007a7a:	260a      	movs	r6, #10
 8007a7c:	4694      	mov	ip, r2
 8007a7e:	fb91 f5f6 	sdiv	r5, r1, r6
 8007a82:	fb06 1415 	mls	r4, r6, r5, r1
 8007a86:	3430      	adds	r4, #48	; 0x30
 8007a88:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007a8c:	460c      	mov	r4, r1
 8007a8e:	2c63      	cmp	r4, #99	; 0x63
 8007a90:	f102 32ff 	add.w	r2, r2, #4294967295
 8007a94:	4629      	mov	r1, r5
 8007a96:	dcf1      	bgt.n	8007a7c <__exponent+0x22>
 8007a98:	3130      	adds	r1, #48	; 0x30
 8007a9a:	f1ac 0402 	sub.w	r4, ip, #2
 8007a9e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007aa2:	1c41      	adds	r1, r0, #1
 8007aa4:	4622      	mov	r2, r4
 8007aa6:	42ba      	cmp	r2, r7
 8007aa8:	d30a      	bcc.n	8007ac0 <__exponent+0x66>
 8007aaa:	f10d 0209 	add.w	r2, sp, #9
 8007aae:	eba2 020c 	sub.w	r2, r2, ip
 8007ab2:	42bc      	cmp	r4, r7
 8007ab4:	bf88      	it	hi
 8007ab6:	2200      	movhi	r2, #0
 8007ab8:	4413      	add	r3, r2
 8007aba:	1a18      	subs	r0, r3, r0
 8007abc:	b003      	add	sp, #12
 8007abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ac0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007ac4:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007ac8:	e7ed      	b.n	8007aa6 <__exponent+0x4c>
 8007aca:	2330      	movs	r3, #48	; 0x30
 8007acc:	3130      	adds	r1, #48	; 0x30
 8007ace:	7083      	strb	r3, [r0, #2]
 8007ad0:	70c1      	strb	r1, [r0, #3]
 8007ad2:	1d03      	adds	r3, r0, #4
 8007ad4:	e7f1      	b.n	8007aba <__exponent+0x60>
	...

08007ad8 <_printf_float>:
 8007ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007adc:	ed2d 8b02 	vpush	{d8}
 8007ae0:	b08d      	sub	sp, #52	; 0x34
 8007ae2:	460c      	mov	r4, r1
 8007ae4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007ae8:	4616      	mov	r6, r2
 8007aea:	461f      	mov	r7, r3
 8007aec:	4605      	mov	r5, r0
 8007aee:	f000 fdc9 	bl	8008684 <_localeconv_r>
 8007af2:	f8d0 a000 	ldr.w	sl, [r0]
 8007af6:	4650      	mov	r0, sl
 8007af8:	f7f8 fbba 	bl	8000270 <strlen>
 8007afc:	2300      	movs	r3, #0
 8007afe:	930a      	str	r3, [sp, #40]	; 0x28
 8007b00:	6823      	ldr	r3, [r4, #0]
 8007b02:	9305      	str	r3, [sp, #20]
 8007b04:	f8d8 3000 	ldr.w	r3, [r8]
 8007b08:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007b0c:	3307      	adds	r3, #7
 8007b0e:	f023 0307 	bic.w	r3, r3, #7
 8007b12:	f103 0208 	add.w	r2, r3, #8
 8007b16:	f8c8 2000 	str.w	r2, [r8]
 8007b1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b22:	9307      	str	r3, [sp, #28]
 8007b24:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b28:	ee08 0a10 	vmov	s16, r0
 8007b2c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007b30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b34:	4b9e      	ldr	r3, [pc, #632]	; (8007db0 <_printf_float+0x2d8>)
 8007b36:	f04f 32ff 	mov.w	r2, #4294967295
 8007b3a:	f7f8 fff7 	bl	8000b2c <__aeabi_dcmpun>
 8007b3e:	bb88      	cbnz	r0, 8007ba4 <_printf_float+0xcc>
 8007b40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b44:	4b9a      	ldr	r3, [pc, #616]	; (8007db0 <_printf_float+0x2d8>)
 8007b46:	f04f 32ff 	mov.w	r2, #4294967295
 8007b4a:	f7f8 ffd1 	bl	8000af0 <__aeabi_dcmple>
 8007b4e:	bb48      	cbnz	r0, 8007ba4 <_printf_float+0xcc>
 8007b50:	2200      	movs	r2, #0
 8007b52:	2300      	movs	r3, #0
 8007b54:	4640      	mov	r0, r8
 8007b56:	4649      	mov	r1, r9
 8007b58:	f7f8 ffc0 	bl	8000adc <__aeabi_dcmplt>
 8007b5c:	b110      	cbz	r0, 8007b64 <_printf_float+0x8c>
 8007b5e:	232d      	movs	r3, #45	; 0x2d
 8007b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b64:	4a93      	ldr	r2, [pc, #588]	; (8007db4 <_printf_float+0x2dc>)
 8007b66:	4b94      	ldr	r3, [pc, #592]	; (8007db8 <_printf_float+0x2e0>)
 8007b68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007b6c:	bf94      	ite	ls
 8007b6e:	4690      	movls	r8, r2
 8007b70:	4698      	movhi	r8, r3
 8007b72:	2303      	movs	r3, #3
 8007b74:	6123      	str	r3, [r4, #16]
 8007b76:	9b05      	ldr	r3, [sp, #20]
 8007b78:	f023 0304 	bic.w	r3, r3, #4
 8007b7c:	6023      	str	r3, [r4, #0]
 8007b7e:	f04f 0900 	mov.w	r9, #0
 8007b82:	9700      	str	r7, [sp, #0]
 8007b84:	4633      	mov	r3, r6
 8007b86:	aa0b      	add	r2, sp, #44	; 0x2c
 8007b88:	4621      	mov	r1, r4
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	f000 f9da 	bl	8007f44 <_printf_common>
 8007b90:	3001      	adds	r0, #1
 8007b92:	f040 8090 	bne.w	8007cb6 <_printf_float+0x1de>
 8007b96:	f04f 30ff 	mov.w	r0, #4294967295
 8007b9a:	b00d      	add	sp, #52	; 0x34
 8007b9c:	ecbd 8b02 	vpop	{d8}
 8007ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba4:	4642      	mov	r2, r8
 8007ba6:	464b      	mov	r3, r9
 8007ba8:	4640      	mov	r0, r8
 8007baa:	4649      	mov	r1, r9
 8007bac:	f7f8 ffbe 	bl	8000b2c <__aeabi_dcmpun>
 8007bb0:	b140      	cbz	r0, 8007bc4 <_printf_float+0xec>
 8007bb2:	464b      	mov	r3, r9
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	bfbc      	itt	lt
 8007bb8:	232d      	movlt	r3, #45	; 0x2d
 8007bba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007bbe:	4a7f      	ldr	r2, [pc, #508]	; (8007dbc <_printf_float+0x2e4>)
 8007bc0:	4b7f      	ldr	r3, [pc, #508]	; (8007dc0 <_printf_float+0x2e8>)
 8007bc2:	e7d1      	b.n	8007b68 <_printf_float+0x90>
 8007bc4:	6863      	ldr	r3, [r4, #4]
 8007bc6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007bca:	9206      	str	r2, [sp, #24]
 8007bcc:	1c5a      	adds	r2, r3, #1
 8007bce:	d13f      	bne.n	8007c50 <_printf_float+0x178>
 8007bd0:	2306      	movs	r3, #6
 8007bd2:	6063      	str	r3, [r4, #4]
 8007bd4:	9b05      	ldr	r3, [sp, #20]
 8007bd6:	6861      	ldr	r1, [r4, #4]
 8007bd8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007bdc:	2300      	movs	r3, #0
 8007bde:	9303      	str	r3, [sp, #12]
 8007be0:	ab0a      	add	r3, sp, #40	; 0x28
 8007be2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007be6:	ab09      	add	r3, sp, #36	; 0x24
 8007be8:	ec49 8b10 	vmov	d0, r8, r9
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	6022      	str	r2, [r4, #0]
 8007bf0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	f7ff fece 	bl	8007996 <__cvt>
 8007bfa:	9b06      	ldr	r3, [sp, #24]
 8007bfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bfe:	2b47      	cmp	r3, #71	; 0x47
 8007c00:	4680      	mov	r8, r0
 8007c02:	d108      	bne.n	8007c16 <_printf_float+0x13e>
 8007c04:	1cc8      	adds	r0, r1, #3
 8007c06:	db02      	blt.n	8007c0e <_printf_float+0x136>
 8007c08:	6863      	ldr	r3, [r4, #4]
 8007c0a:	4299      	cmp	r1, r3
 8007c0c:	dd41      	ble.n	8007c92 <_printf_float+0x1ba>
 8007c0e:	f1ab 0302 	sub.w	r3, fp, #2
 8007c12:	fa5f fb83 	uxtb.w	fp, r3
 8007c16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c1a:	d820      	bhi.n	8007c5e <_printf_float+0x186>
 8007c1c:	3901      	subs	r1, #1
 8007c1e:	465a      	mov	r2, fp
 8007c20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007c24:	9109      	str	r1, [sp, #36]	; 0x24
 8007c26:	f7ff ff18 	bl	8007a5a <__exponent>
 8007c2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c2c:	1813      	adds	r3, r2, r0
 8007c2e:	2a01      	cmp	r2, #1
 8007c30:	4681      	mov	r9, r0
 8007c32:	6123      	str	r3, [r4, #16]
 8007c34:	dc02      	bgt.n	8007c3c <_printf_float+0x164>
 8007c36:	6822      	ldr	r2, [r4, #0]
 8007c38:	07d2      	lsls	r2, r2, #31
 8007c3a:	d501      	bpl.n	8007c40 <_printf_float+0x168>
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	6123      	str	r3, [r4, #16]
 8007c40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d09c      	beq.n	8007b82 <_printf_float+0xaa>
 8007c48:	232d      	movs	r3, #45	; 0x2d
 8007c4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c4e:	e798      	b.n	8007b82 <_printf_float+0xaa>
 8007c50:	9a06      	ldr	r2, [sp, #24]
 8007c52:	2a47      	cmp	r2, #71	; 0x47
 8007c54:	d1be      	bne.n	8007bd4 <_printf_float+0xfc>
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1bc      	bne.n	8007bd4 <_printf_float+0xfc>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e7b9      	b.n	8007bd2 <_printf_float+0xfa>
 8007c5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007c62:	d118      	bne.n	8007c96 <_printf_float+0x1be>
 8007c64:	2900      	cmp	r1, #0
 8007c66:	6863      	ldr	r3, [r4, #4]
 8007c68:	dd0b      	ble.n	8007c82 <_printf_float+0x1aa>
 8007c6a:	6121      	str	r1, [r4, #16]
 8007c6c:	b913      	cbnz	r3, 8007c74 <_printf_float+0x19c>
 8007c6e:	6822      	ldr	r2, [r4, #0]
 8007c70:	07d0      	lsls	r0, r2, #31
 8007c72:	d502      	bpl.n	8007c7a <_printf_float+0x1a2>
 8007c74:	3301      	adds	r3, #1
 8007c76:	440b      	add	r3, r1
 8007c78:	6123      	str	r3, [r4, #16]
 8007c7a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007c7c:	f04f 0900 	mov.w	r9, #0
 8007c80:	e7de      	b.n	8007c40 <_printf_float+0x168>
 8007c82:	b913      	cbnz	r3, 8007c8a <_printf_float+0x1b2>
 8007c84:	6822      	ldr	r2, [r4, #0]
 8007c86:	07d2      	lsls	r2, r2, #31
 8007c88:	d501      	bpl.n	8007c8e <_printf_float+0x1b6>
 8007c8a:	3302      	adds	r3, #2
 8007c8c:	e7f4      	b.n	8007c78 <_printf_float+0x1a0>
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e7f2      	b.n	8007c78 <_printf_float+0x1a0>
 8007c92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c98:	4299      	cmp	r1, r3
 8007c9a:	db05      	blt.n	8007ca8 <_printf_float+0x1d0>
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	6121      	str	r1, [r4, #16]
 8007ca0:	07d8      	lsls	r0, r3, #31
 8007ca2:	d5ea      	bpl.n	8007c7a <_printf_float+0x1a2>
 8007ca4:	1c4b      	adds	r3, r1, #1
 8007ca6:	e7e7      	b.n	8007c78 <_printf_float+0x1a0>
 8007ca8:	2900      	cmp	r1, #0
 8007caa:	bfd4      	ite	le
 8007cac:	f1c1 0202 	rsble	r2, r1, #2
 8007cb0:	2201      	movgt	r2, #1
 8007cb2:	4413      	add	r3, r2
 8007cb4:	e7e0      	b.n	8007c78 <_printf_float+0x1a0>
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	055a      	lsls	r2, r3, #21
 8007cba:	d407      	bmi.n	8007ccc <_printf_float+0x1f4>
 8007cbc:	6923      	ldr	r3, [r4, #16]
 8007cbe:	4642      	mov	r2, r8
 8007cc0:	4631      	mov	r1, r6
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	47b8      	blx	r7
 8007cc6:	3001      	adds	r0, #1
 8007cc8:	d12c      	bne.n	8007d24 <_printf_float+0x24c>
 8007cca:	e764      	b.n	8007b96 <_printf_float+0xbe>
 8007ccc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007cd0:	f240 80e0 	bls.w	8007e94 <_printf_float+0x3bc>
 8007cd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cd8:	2200      	movs	r2, #0
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f7f8 fef4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	d034      	beq.n	8007d4e <_printf_float+0x276>
 8007ce4:	4a37      	ldr	r2, [pc, #220]	; (8007dc4 <_printf_float+0x2ec>)
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	4631      	mov	r1, r6
 8007cea:	4628      	mov	r0, r5
 8007cec:	47b8      	blx	r7
 8007cee:	3001      	adds	r0, #1
 8007cf0:	f43f af51 	beq.w	8007b96 <_printf_float+0xbe>
 8007cf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	db02      	blt.n	8007d02 <_printf_float+0x22a>
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	07d8      	lsls	r0, r3, #31
 8007d00:	d510      	bpl.n	8007d24 <_printf_float+0x24c>
 8007d02:	ee18 3a10 	vmov	r3, s16
 8007d06:	4652      	mov	r2, sl
 8007d08:	4631      	mov	r1, r6
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	47b8      	blx	r7
 8007d0e:	3001      	adds	r0, #1
 8007d10:	f43f af41 	beq.w	8007b96 <_printf_float+0xbe>
 8007d14:	f04f 0800 	mov.w	r8, #0
 8007d18:	f104 091a 	add.w	r9, r4, #26
 8007d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	4543      	cmp	r3, r8
 8007d22:	dc09      	bgt.n	8007d38 <_printf_float+0x260>
 8007d24:	6823      	ldr	r3, [r4, #0]
 8007d26:	079b      	lsls	r3, r3, #30
 8007d28:	f100 8107 	bmi.w	8007f3a <_printf_float+0x462>
 8007d2c:	68e0      	ldr	r0, [r4, #12]
 8007d2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d30:	4298      	cmp	r0, r3
 8007d32:	bfb8      	it	lt
 8007d34:	4618      	movlt	r0, r3
 8007d36:	e730      	b.n	8007b9a <_printf_float+0xc2>
 8007d38:	2301      	movs	r3, #1
 8007d3a:	464a      	mov	r2, r9
 8007d3c:	4631      	mov	r1, r6
 8007d3e:	4628      	mov	r0, r5
 8007d40:	47b8      	blx	r7
 8007d42:	3001      	adds	r0, #1
 8007d44:	f43f af27 	beq.w	8007b96 <_printf_float+0xbe>
 8007d48:	f108 0801 	add.w	r8, r8, #1
 8007d4c:	e7e6      	b.n	8007d1c <_printf_float+0x244>
 8007d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	dc39      	bgt.n	8007dc8 <_printf_float+0x2f0>
 8007d54:	4a1b      	ldr	r2, [pc, #108]	; (8007dc4 <_printf_float+0x2ec>)
 8007d56:	2301      	movs	r3, #1
 8007d58:	4631      	mov	r1, r6
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	47b8      	blx	r7
 8007d5e:	3001      	adds	r0, #1
 8007d60:	f43f af19 	beq.w	8007b96 <_printf_float+0xbe>
 8007d64:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	d102      	bne.n	8007d72 <_printf_float+0x29a>
 8007d6c:	6823      	ldr	r3, [r4, #0]
 8007d6e:	07d9      	lsls	r1, r3, #31
 8007d70:	d5d8      	bpl.n	8007d24 <_printf_float+0x24c>
 8007d72:	ee18 3a10 	vmov	r3, s16
 8007d76:	4652      	mov	r2, sl
 8007d78:	4631      	mov	r1, r6
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	47b8      	blx	r7
 8007d7e:	3001      	adds	r0, #1
 8007d80:	f43f af09 	beq.w	8007b96 <_printf_float+0xbe>
 8007d84:	f04f 0900 	mov.w	r9, #0
 8007d88:	f104 0a1a 	add.w	sl, r4, #26
 8007d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d8e:	425b      	negs	r3, r3
 8007d90:	454b      	cmp	r3, r9
 8007d92:	dc01      	bgt.n	8007d98 <_printf_float+0x2c0>
 8007d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d96:	e792      	b.n	8007cbe <_printf_float+0x1e6>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	4652      	mov	r2, sl
 8007d9c:	4631      	mov	r1, r6
 8007d9e:	4628      	mov	r0, r5
 8007da0:	47b8      	blx	r7
 8007da2:	3001      	adds	r0, #1
 8007da4:	f43f aef7 	beq.w	8007b96 <_printf_float+0xbe>
 8007da8:	f109 0901 	add.w	r9, r9, #1
 8007dac:	e7ee      	b.n	8007d8c <_printf_float+0x2b4>
 8007dae:	bf00      	nop
 8007db0:	7fefffff 	.word	0x7fefffff
 8007db4:	0800a638 	.word	0x0800a638
 8007db8:	0800a63c 	.word	0x0800a63c
 8007dbc:	0800a640 	.word	0x0800a640
 8007dc0:	0800a644 	.word	0x0800a644
 8007dc4:	0800a648 	.word	0x0800a648
 8007dc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	bfa8      	it	ge
 8007dd0:	461a      	movge	r2, r3
 8007dd2:	2a00      	cmp	r2, #0
 8007dd4:	4691      	mov	r9, r2
 8007dd6:	dc37      	bgt.n	8007e48 <_printf_float+0x370>
 8007dd8:	f04f 0b00 	mov.w	fp, #0
 8007ddc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007de0:	f104 021a 	add.w	r2, r4, #26
 8007de4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007de6:	9305      	str	r3, [sp, #20]
 8007de8:	eba3 0309 	sub.w	r3, r3, r9
 8007dec:	455b      	cmp	r3, fp
 8007dee:	dc33      	bgt.n	8007e58 <_printf_float+0x380>
 8007df0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007df4:	429a      	cmp	r2, r3
 8007df6:	db3b      	blt.n	8007e70 <_printf_float+0x398>
 8007df8:	6823      	ldr	r3, [r4, #0]
 8007dfa:	07da      	lsls	r2, r3, #31
 8007dfc:	d438      	bmi.n	8007e70 <_printf_float+0x398>
 8007dfe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007e02:	eba2 0903 	sub.w	r9, r2, r3
 8007e06:	9b05      	ldr	r3, [sp, #20]
 8007e08:	1ad2      	subs	r2, r2, r3
 8007e0a:	4591      	cmp	r9, r2
 8007e0c:	bfa8      	it	ge
 8007e0e:	4691      	movge	r9, r2
 8007e10:	f1b9 0f00 	cmp.w	r9, #0
 8007e14:	dc35      	bgt.n	8007e82 <_printf_float+0x3aa>
 8007e16:	f04f 0800 	mov.w	r8, #0
 8007e1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e1e:	f104 0a1a 	add.w	sl, r4, #26
 8007e22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e26:	1a9b      	subs	r3, r3, r2
 8007e28:	eba3 0309 	sub.w	r3, r3, r9
 8007e2c:	4543      	cmp	r3, r8
 8007e2e:	f77f af79 	ble.w	8007d24 <_printf_float+0x24c>
 8007e32:	2301      	movs	r3, #1
 8007e34:	4652      	mov	r2, sl
 8007e36:	4631      	mov	r1, r6
 8007e38:	4628      	mov	r0, r5
 8007e3a:	47b8      	blx	r7
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	f43f aeaa 	beq.w	8007b96 <_printf_float+0xbe>
 8007e42:	f108 0801 	add.w	r8, r8, #1
 8007e46:	e7ec      	b.n	8007e22 <_printf_float+0x34a>
 8007e48:	4613      	mov	r3, r2
 8007e4a:	4631      	mov	r1, r6
 8007e4c:	4642      	mov	r2, r8
 8007e4e:	4628      	mov	r0, r5
 8007e50:	47b8      	blx	r7
 8007e52:	3001      	adds	r0, #1
 8007e54:	d1c0      	bne.n	8007dd8 <_printf_float+0x300>
 8007e56:	e69e      	b.n	8007b96 <_printf_float+0xbe>
 8007e58:	2301      	movs	r3, #1
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	9205      	str	r2, [sp, #20]
 8007e60:	47b8      	blx	r7
 8007e62:	3001      	adds	r0, #1
 8007e64:	f43f ae97 	beq.w	8007b96 <_printf_float+0xbe>
 8007e68:	9a05      	ldr	r2, [sp, #20]
 8007e6a:	f10b 0b01 	add.w	fp, fp, #1
 8007e6e:	e7b9      	b.n	8007de4 <_printf_float+0x30c>
 8007e70:	ee18 3a10 	vmov	r3, s16
 8007e74:	4652      	mov	r2, sl
 8007e76:	4631      	mov	r1, r6
 8007e78:	4628      	mov	r0, r5
 8007e7a:	47b8      	blx	r7
 8007e7c:	3001      	adds	r0, #1
 8007e7e:	d1be      	bne.n	8007dfe <_printf_float+0x326>
 8007e80:	e689      	b.n	8007b96 <_printf_float+0xbe>
 8007e82:	9a05      	ldr	r2, [sp, #20]
 8007e84:	464b      	mov	r3, r9
 8007e86:	4442      	add	r2, r8
 8007e88:	4631      	mov	r1, r6
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	47b8      	blx	r7
 8007e8e:	3001      	adds	r0, #1
 8007e90:	d1c1      	bne.n	8007e16 <_printf_float+0x33e>
 8007e92:	e680      	b.n	8007b96 <_printf_float+0xbe>
 8007e94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e96:	2a01      	cmp	r2, #1
 8007e98:	dc01      	bgt.n	8007e9e <_printf_float+0x3c6>
 8007e9a:	07db      	lsls	r3, r3, #31
 8007e9c:	d53a      	bpl.n	8007f14 <_printf_float+0x43c>
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	4642      	mov	r2, r8
 8007ea2:	4631      	mov	r1, r6
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	47b8      	blx	r7
 8007ea8:	3001      	adds	r0, #1
 8007eaa:	f43f ae74 	beq.w	8007b96 <_printf_float+0xbe>
 8007eae:	ee18 3a10 	vmov	r3, s16
 8007eb2:	4652      	mov	r2, sl
 8007eb4:	4631      	mov	r1, r6
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	47b8      	blx	r7
 8007eba:	3001      	adds	r0, #1
 8007ebc:	f43f ae6b 	beq.w	8007b96 <_printf_float+0xbe>
 8007ec0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007ecc:	f7f8 fdfc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ed0:	b9d8      	cbnz	r0, 8007f0a <_printf_float+0x432>
 8007ed2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007ed6:	f108 0201 	add.w	r2, r8, #1
 8007eda:	4631      	mov	r1, r6
 8007edc:	4628      	mov	r0, r5
 8007ede:	47b8      	blx	r7
 8007ee0:	3001      	adds	r0, #1
 8007ee2:	d10e      	bne.n	8007f02 <_printf_float+0x42a>
 8007ee4:	e657      	b.n	8007b96 <_printf_float+0xbe>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	4652      	mov	r2, sl
 8007eea:	4631      	mov	r1, r6
 8007eec:	4628      	mov	r0, r5
 8007eee:	47b8      	blx	r7
 8007ef0:	3001      	adds	r0, #1
 8007ef2:	f43f ae50 	beq.w	8007b96 <_printf_float+0xbe>
 8007ef6:	f108 0801 	add.w	r8, r8, #1
 8007efa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007efc:	3b01      	subs	r3, #1
 8007efe:	4543      	cmp	r3, r8
 8007f00:	dcf1      	bgt.n	8007ee6 <_printf_float+0x40e>
 8007f02:	464b      	mov	r3, r9
 8007f04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007f08:	e6da      	b.n	8007cc0 <_printf_float+0x1e8>
 8007f0a:	f04f 0800 	mov.w	r8, #0
 8007f0e:	f104 0a1a 	add.w	sl, r4, #26
 8007f12:	e7f2      	b.n	8007efa <_printf_float+0x422>
 8007f14:	2301      	movs	r3, #1
 8007f16:	4642      	mov	r2, r8
 8007f18:	e7df      	b.n	8007eda <_printf_float+0x402>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	464a      	mov	r2, r9
 8007f1e:	4631      	mov	r1, r6
 8007f20:	4628      	mov	r0, r5
 8007f22:	47b8      	blx	r7
 8007f24:	3001      	adds	r0, #1
 8007f26:	f43f ae36 	beq.w	8007b96 <_printf_float+0xbe>
 8007f2a:	f108 0801 	add.w	r8, r8, #1
 8007f2e:	68e3      	ldr	r3, [r4, #12]
 8007f30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f32:	1a5b      	subs	r3, r3, r1
 8007f34:	4543      	cmp	r3, r8
 8007f36:	dcf0      	bgt.n	8007f1a <_printf_float+0x442>
 8007f38:	e6f8      	b.n	8007d2c <_printf_float+0x254>
 8007f3a:	f04f 0800 	mov.w	r8, #0
 8007f3e:	f104 0919 	add.w	r9, r4, #25
 8007f42:	e7f4      	b.n	8007f2e <_printf_float+0x456>

08007f44 <_printf_common>:
 8007f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f48:	4616      	mov	r6, r2
 8007f4a:	4699      	mov	r9, r3
 8007f4c:	688a      	ldr	r2, [r1, #8]
 8007f4e:	690b      	ldr	r3, [r1, #16]
 8007f50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f54:	4293      	cmp	r3, r2
 8007f56:	bfb8      	it	lt
 8007f58:	4613      	movlt	r3, r2
 8007f5a:	6033      	str	r3, [r6, #0]
 8007f5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f60:	4607      	mov	r7, r0
 8007f62:	460c      	mov	r4, r1
 8007f64:	b10a      	cbz	r2, 8007f6a <_printf_common+0x26>
 8007f66:	3301      	adds	r3, #1
 8007f68:	6033      	str	r3, [r6, #0]
 8007f6a:	6823      	ldr	r3, [r4, #0]
 8007f6c:	0699      	lsls	r1, r3, #26
 8007f6e:	bf42      	ittt	mi
 8007f70:	6833      	ldrmi	r3, [r6, #0]
 8007f72:	3302      	addmi	r3, #2
 8007f74:	6033      	strmi	r3, [r6, #0]
 8007f76:	6825      	ldr	r5, [r4, #0]
 8007f78:	f015 0506 	ands.w	r5, r5, #6
 8007f7c:	d106      	bne.n	8007f8c <_printf_common+0x48>
 8007f7e:	f104 0a19 	add.w	sl, r4, #25
 8007f82:	68e3      	ldr	r3, [r4, #12]
 8007f84:	6832      	ldr	r2, [r6, #0]
 8007f86:	1a9b      	subs	r3, r3, r2
 8007f88:	42ab      	cmp	r3, r5
 8007f8a:	dc26      	bgt.n	8007fda <_printf_common+0x96>
 8007f8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f90:	1e13      	subs	r3, r2, #0
 8007f92:	6822      	ldr	r2, [r4, #0]
 8007f94:	bf18      	it	ne
 8007f96:	2301      	movne	r3, #1
 8007f98:	0692      	lsls	r2, r2, #26
 8007f9a:	d42b      	bmi.n	8007ff4 <_printf_common+0xb0>
 8007f9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fa0:	4649      	mov	r1, r9
 8007fa2:	4638      	mov	r0, r7
 8007fa4:	47c0      	blx	r8
 8007fa6:	3001      	adds	r0, #1
 8007fa8:	d01e      	beq.n	8007fe8 <_printf_common+0xa4>
 8007faa:	6823      	ldr	r3, [r4, #0]
 8007fac:	6922      	ldr	r2, [r4, #16]
 8007fae:	f003 0306 	and.w	r3, r3, #6
 8007fb2:	2b04      	cmp	r3, #4
 8007fb4:	bf02      	ittt	eq
 8007fb6:	68e5      	ldreq	r5, [r4, #12]
 8007fb8:	6833      	ldreq	r3, [r6, #0]
 8007fba:	1aed      	subeq	r5, r5, r3
 8007fbc:	68a3      	ldr	r3, [r4, #8]
 8007fbe:	bf0c      	ite	eq
 8007fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fc4:	2500      	movne	r5, #0
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	bfc4      	itt	gt
 8007fca:	1a9b      	subgt	r3, r3, r2
 8007fcc:	18ed      	addgt	r5, r5, r3
 8007fce:	2600      	movs	r6, #0
 8007fd0:	341a      	adds	r4, #26
 8007fd2:	42b5      	cmp	r5, r6
 8007fd4:	d11a      	bne.n	800800c <_printf_common+0xc8>
 8007fd6:	2000      	movs	r0, #0
 8007fd8:	e008      	b.n	8007fec <_printf_common+0xa8>
 8007fda:	2301      	movs	r3, #1
 8007fdc:	4652      	mov	r2, sl
 8007fde:	4649      	mov	r1, r9
 8007fe0:	4638      	mov	r0, r7
 8007fe2:	47c0      	blx	r8
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	d103      	bne.n	8007ff0 <_printf_common+0xac>
 8007fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff0:	3501      	adds	r5, #1
 8007ff2:	e7c6      	b.n	8007f82 <_printf_common+0x3e>
 8007ff4:	18e1      	adds	r1, r4, r3
 8007ff6:	1c5a      	adds	r2, r3, #1
 8007ff8:	2030      	movs	r0, #48	; 0x30
 8007ffa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ffe:	4422      	add	r2, r4
 8008000:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008004:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008008:	3302      	adds	r3, #2
 800800a:	e7c7      	b.n	8007f9c <_printf_common+0x58>
 800800c:	2301      	movs	r3, #1
 800800e:	4622      	mov	r2, r4
 8008010:	4649      	mov	r1, r9
 8008012:	4638      	mov	r0, r7
 8008014:	47c0      	blx	r8
 8008016:	3001      	adds	r0, #1
 8008018:	d0e6      	beq.n	8007fe8 <_printf_common+0xa4>
 800801a:	3601      	adds	r6, #1
 800801c:	e7d9      	b.n	8007fd2 <_printf_common+0x8e>
	...

08008020 <_printf_i>:
 8008020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008024:	7e0f      	ldrb	r7, [r1, #24]
 8008026:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008028:	2f78      	cmp	r7, #120	; 0x78
 800802a:	4691      	mov	r9, r2
 800802c:	4680      	mov	r8, r0
 800802e:	460c      	mov	r4, r1
 8008030:	469a      	mov	sl, r3
 8008032:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008036:	d807      	bhi.n	8008048 <_printf_i+0x28>
 8008038:	2f62      	cmp	r7, #98	; 0x62
 800803a:	d80a      	bhi.n	8008052 <_printf_i+0x32>
 800803c:	2f00      	cmp	r7, #0
 800803e:	f000 80d4 	beq.w	80081ea <_printf_i+0x1ca>
 8008042:	2f58      	cmp	r7, #88	; 0x58
 8008044:	f000 80c0 	beq.w	80081c8 <_printf_i+0x1a8>
 8008048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800804c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008050:	e03a      	b.n	80080c8 <_printf_i+0xa8>
 8008052:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008056:	2b15      	cmp	r3, #21
 8008058:	d8f6      	bhi.n	8008048 <_printf_i+0x28>
 800805a:	a101      	add	r1, pc, #4	; (adr r1, 8008060 <_printf_i+0x40>)
 800805c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008060:	080080b9 	.word	0x080080b9
 8008064:	080080cd 	.word	0x080080cd
 8008068:	08008049 	.word	0x08008049
 800806c:	08008049 	.word	0x08008049
 8008070:	08008049 	.word	0x08008049
 8008074:	08008049 	.word	0x08008049
 8008078:	080080cd 	.word	0x080080cd
 800807c:	08008049 	.word	0x08008049
 8008080:	08008049 	.word	0x08008049
 8008084:	08008049 	.word	0x08008049
 8008088:	08008049 	.word	0x08008049
 800808c:	080081d1 	.word	0x080081d1
 8008090:	080080f9 	.word	0x080080f9
 8008094:	0800818b 	.word	0x0800818b
 8008098:	08008049 	.word	0x08008049
 800809c:	08008049 	.word	0x08008049
 80080a0:	080081f3 	.word	0x080081f3
 80080a4:	08008049 	.word	0x08008049
 80080a8:	080080f9 	.word	0x080080f9
 80080ac:	08008049 	.word	0x08008049
 80080b0:	08008049 	.word	0x08008049
 80080b4:	08008193 	.word	0x08008193
 80080b8:	682b      	ldr	r3, [r5, #0]
 80080ba:	1d1a      	adds	r2, r3, #4
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	602a      	str	r2, [r5, #0]
 80080c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080c8:	2301      	movs	r3, #1
 80080ca:	e09f      	b.n	800820c <_printf_i+0x1ec>
 80080cc:	6820      	ldr	r0, [r4, #0]
 80080ce:	682b      	ldr	r3, [r5, #0]
 80080d0:	0607      	lsls	r7, r0, #24
 80080d2:	f103 0104 	add.w	r1, r3, #4
 80080d6:	6029      	str	r1, [r5, #0]
 80080d8:	d501      	bpl.n	80080de <_printf_i+0xbe>
 80080da:	681e      	ldr	r6, [r3, #0]
 80080dc:	e003      	b.n	80080e6 <_printf_i+0xc6>
 80080de:	0646      	lsls	r6, r0, #25
 80080e0:	d5fb      	bpl.n	80080da <_printf_i+0xba>
 80080e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80080e6:	2e00      	cmp	r6, #0
 80080e8:	da03      	bge.n	80080f2 <_printf_i+0xd2>
 80080ea:	232d      	movs	r3, #45	; 0x2d
 80080ec:	4276      	negs	r6, r6
 80080ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080f2:	485a      	ldr	r0, [pc, #360]	; (800825c <_printf_i+0x23c>)
 80080f4:	230a      	movs	r3, #10
 80080f6:	e012      	b.n	800811e <_printf_i+0xfe>
 80080f8:	682b      	ldr	r3, [r5, #0]
 80080fa:	6820      	ldr	r0, [r4, #0]
 80080fc:	1d19      	adds	r1, r3, #4
 80080fe:	6029      	str	r1, [r5, #0]
 8008100:	0605      	lsls	r5, r0, #24
 8008102:	d501      	bpl.n	8008108 <_printf_i+0xe8>
 8008104:	681e      	ldr	r6, [r3, #0]
 8008106:	e002      	b.n	800810e <_printf_i+0xee>
 8008108:	0641      	lsls	r1, r0, #25
 800810a:	d5fb      	bpl.n	8008104 <_printf_i+0xe4>
 800810c:	881e      	ldrh	r6, [r3, #0]
 800810e:	4853      	ldr	r0, [pc, #332]	; (800825c <_printf_i+0x23c>)
 8008110:	2f6f      	cmp	r7, #111	; 0x6f
 8008112:	bf0c      	ite	eq
 8008114:	2308      	moveq	r3, #8
 8008116:	230a      	movne	r3, #10
 8008118:	2100      	movs	r1, #0
 800811a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800811e:	6865      	ldr	r5, [r4, #4]
 8008120:	60a5      	str	r5, [r4, #8]
 8008122:	2d00      	cmp	r5, #0
 8008124:	bfa2      	ittt	ge
 8008126:	6821      	ldrge	r1, [r4, #0]
 8008128:	f021 0104 	bicge.w	r1, r1, #4
 800812c:	6021      	strge	r1, [r4, #0]
 800812e:	b90e      	cbnz	r6, 8008134 <_printf_i+0x114>
 8008130:	2d00      	cmp	r5, #0
 8008132:	d04b      	beq.n	80081cc <_printf_i+0x1ac>
 8008134:	4615      	mov	r5, r2
 8008136:	fbb6 f1f3 	udiv	r1, r6, r3
 800813a:	fb03 6711 	mls	r7, r3, r1, r6
 800813e:	5dc7      	ldrb	r7, [r0, r7]
 8008140:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008144:	4637      	mov	r7, r6
 8008146:	42bb      	cmp	r3, r7
 8008148:	460e      	mov	r6, r1
 800814a:	d9f4      	bls.n	8008136 <_printf_i+0x116>
 800814c:	2b08      	cmp	r3, #8
 800814e:	d10b      	bne.n	8008168 <_printf_i+0x148>
 8008150:	6823      	ldr	r3, [r4, #0]
 8008152:	07de      	lsls	r6, r3, #31
 8008154:	d508      	bpl.n	8008168 <_printf_i+0x148>
 8008156:	6923      	ldr	r3, [r4, #16]
 8008158:	6861      	ldr	r1, [r4, #4]
 800815a:	4299      	cmp	r1, r3
 800815c:	bfde      	ittt	le
 800815e:	2330      	movle	r3, #48	; 0x30
 8008160:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008164:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008168:	1b52      	subs	r2, r2, r5
 800816a:	6122      	str	r2, [r4, #16]
 800816c:	f8cd a000 	str.w	sl, [sp]
 8008170:	464b      	mov	r3, r9
 8008172:	aa03      	add	r2, sp, #12
 8008174:	4621      	mov	r1, r4
 8008176:	4640      	mov	r0, r8
 8008178:	f7ff fee4 	bl	8007f44 <_printf_common>
 800817c:	3001      	adds	r0, #1
 800817e:	d14a      	bne.n	8008216 <_printf_i+0x1f6>
 8008180:	f04f 30ff 	mov.w	r0, #4294967295
 8008184:	b004      	add	sp, #16
 8008186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800818a:	6823      	ldr	r3, [r4, #0]
 800818c:	f043 0320 	orr.w	r3, r3, #32
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	4833      	ldr	r0, [pc, #204]	; (8008260 <_printf_i+0x240>)
 8008194:	2778      	movs	r7, #120	; 0x78
 8008196:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	6829      	ldr	r1, [r5, #0]
 800819e:	061f      	lsls	r7, r3, #24
 80081a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80081a4:	d402      	bmi.n	80081ac <_printf_i+0x18c>
 80081a6:	065f      	lsls	r7, r3, #25
 80081a8:	bf48      	it	mi
 80081aa:	b2b6      	uxthmi	r6, r6
 80081ac:	07df      	lsls	r7, r3, #31
 80081ae:	bf48      	it	mi
 80081b0:	f043 0320 	orrmi.w	r3, r3, #32
 80081b4:	6029      	str	r1, [r5, #0]
 80081b6:	bf48      	it	mi
 80081b8:	6023      	strmi	r3, [r4, #0]
 80081ba:	b91e      	cbnz	r6, 80081c4 <_printf_i+0x1a4>
 80081bc:	6823      	ldr	r3, [r4, #0]
 80081be:	f023 0320 	bic.w	r3, r3, #32
 80081c2:	6023      	str	r3, [r4, #0]
 80081c4:	2310      	movs	r3, #16
 80081c6:	e7a7      	b.n	8008118 <_printf_i+0xf8>
 80081c8:	4824      	ldr	r0, [pc, #144]	; (800825c <_printf_i+0x23c>)
 80081ca:	e7e4      	b.n	8008196 <_printf_i+0x176>
 80081cc:	4615      	mov	r5, r2
 80081ce:	e7bd      	b.n	800814c <_printf_i+0x12c>
 80081d0:	682b      	ldr	r3, [r5, #0]
 80081d2:	6826      	ldr	r6, [r4, #0]
 80081d4:	6961      	ldr	r1, [r4, #20]
 80081d6:	1d18      	adds	r0, r3, #4
 80081d8:	6028      	str	r0, [r5, #0]
 80081da:	0635      	lsls	r5, r6, #24
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	d501      	bpl.n	80081e4 <_printf_i+0x1c4>
 80081e0:	6019      	str	r1, [r3, #0]
 80081e2:	e002      	b.n	80081ea <_printf_i+0x1ca>
 80081e4:	0670      	lsls	r0, r6, #25
 80081e6:	d5fb      	bpl.n	80081e0 <_printf_i+0x1c0>
 80081e8:	8019      	strh	r1, [r3, #0]
 80081ea:	2300      	movs	r3, #0
 80081ec:	6123      	str	r3, [r4, #16]
 80081ee:	4615      	mov	r5, r2
 80081f0:	e7bc      	b.n	800816c <_printf_i+0x14c>
 80081f2:	682b      	ldr	r3, [r5, #0]
 80081f4:	1d1a      	adds	r2, r3, #4
 80081f6:	602a      	str	r2, [r5, #0]
 80081f8:	681d      	ldr	r5, [r3, #0]
 80081fa:	6862      	ldr	r2, [r4, #4]
 80081fc:	2100      	movs	r1, #0
 80081fe:	4628      	mov	r0, r5
 8008200:	f7f7 ffe6 	bl	80001d0 <memchr>
 8008204:	b108      	cbz	r0, 800820a <_printf_i+0x1ea>
 8008206:	1b40      	subs	r0, r0, r5
 8008208:	6060      	str	r0, [r4, #4]
 800820a:	6863      	ldr	r3, [r4, #4]
 800820c:	6123      	str	r3, [r4, #16]
 800820e:	2300      	movs	r3, #0
 8008210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008214:	e7aa      	b.n	800816c <_printf_i+0x14c>
 8008216:	6923      	ldr	r3, [r4, #16]
 8008218:	462a      	mov	r2, r5
 800821a:	4649      	mov	r1, r9
 800821c:	4640      	mov	r0, r8
 800821e:	47d0      	blx	sl
 8008220:	3001      	adds	r0, #1
 8008222:	d0ad      	beq.n	8008180 <_printf_i+0x160>
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	079b      	lsls	r3, r3, #30
 8008228:	d413      	bmi.n	8008252 <_printf_i+0x232>
 800822a:	68e0      	ldr	r0, [r4, #12]
 800822c:	9b03      	ldr	r3, [sp, #12]
 800822e:	4298      	cmp	r0, r3
 8008230:	bfb8      	it	lt
 8008232:	4618      	movlt	r0, r3
 8008234:	e7a6      	b.n	8008184 <_printf_i+0x164>
 8008236:	2301      	movs	r3, #1
 8008238:	4632      	mov	r2, r6
 800823a:	4649      	mov	r1, r9
 800823c:	4640      	mov	r0, r8
 800823e:	47d0      	blx	sl
 8008240:	3001      	adds	r0, #1
 8008242:	d09d      	beq.n	8008180 <_printf_i+0x160>
 8008244:	3501      	adds	r5, #1
 8008246:	68e3      	ldr	r3, [r4, #12]
 8008248:	9903      	ldr	r1, [sp, #12]
 800824a:	1a5b      	subs	r3, r3, r1
 800824c:	42ab      	cmp	r3, r5
 800824e:	dcf2      	bgt.n	8008236 <_printf_i+0x216>
 8008250:	e7eb      	b.n	800822a <_printf_i+0x20a>
 8008252:	2500      	movs	r5, #0
 8008254:	f104 0619 	add.w	r6, r4, #25
 8008258:	e7f5      	b.n	8008246 <_printf_i+0x226>
 800825a:	bf00      	nop
 800825c:	0800a64a 	.word	0x0800a64a
 8008260:	0800a65b 	.word	0x0800a65b

08008264 <std>:
 8008264:	2300      	movs	r3, #0
 8008266:	b510      	push	{r4, lr}
 8008268:	4604      	mov	r4, r0
 800826a:	e9c0 3300 	strd	r3, r3, [r0]
 800826e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008272:	6083      	str	r3, [r0, #8]
 8008274:	8181      	strh	r1, [r0, #12]
 8008276:	6643      	str	r3, [r0, #100]	; 0x64
 8008278:	81c2      	strh	r2, [r0, #14]
 800827a:	6183      	str	r3, [r0, #24]
 800827c:	4619      	mov	r1, r3
 800827e:	2208      	movs	r2, #8
 8008280:	305c      	adds	r0, #92	; 0x5c
 8008282:	f000 f9f7 	bl	8008674 <memset>
 8008286:	4b0d      	ldr	r3, [pc, #52]	; (80082bc <std+0x58>)
 8008288:	6263      	str	r3, [r4, #36]	; 0x24
 800828a:	4b0d      	ldr	r3, [pc, #52]	; (80082c0 <std+0x5c>)
 800828c:	62a3      	str	r3, [r4, #40]	; 0x28
 800828e:	4b0d      	ldr	r3, [pc, #52]	; (80082c4 <std+0x60>)
 8008290:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008292:	4b0d      	ldr	r3, [pc, #52]	; (80082c8 <std+0x64>)
 8008294:	6323      	str	r3, [r4, #48]	; 0x30
 8008296:	4b0d      	ldr	r3, [pc, #52]	; (80082cc <std+0x68>)
 8008298:	6224      	str	r4, [r4, #32]
 800829a:	429c      	cmp	r4, r3
 800829c:	d006      	beq.n	80082ac <std+0x48>
 800829e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80082a2:	4294      	cmp	r4, r2
 80082a4:	d002      	beq.n	80082ac <std+0x48>
 80082a6:	33d0      	adds	r3, #208	; 0xd0
 80082a8:	429c      	cmp	r4, r3
 80082aa:	d105      	bne.n	80082b8 <std+0x54>
 80082ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80082b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082b4:	f000 ba5a 	b.w	800876c <__retarget_lock_init_recursive>
 80082b8:	bd10      	pop	{r4, pc}
 80082ba:	bf00      	nop
 80082bc:	080084c5 	.word	0x080084c5
 80082c0:	080084e7 	.word	0x080084e7
 80082c4:	0800851f 	.word	0x0800851f
 80082c8:	08008543 	.word	0x08008543
 80082cc:	20000a78 	.word	0x20000a78

080082d0 <stdio_exit_handler>:
 80082d0:	4a02      	ldr	r2, [pc, #8]	; (80082dc <stdio_exit_handler+0xc>)
 80082d2:	4903      	ldr	r1, [pc, #12]	; (80082e0 <stdio_exit_handler+0x10>)
 80082d4:	4803      	ldr	r0, [pc, #12]	; (80082e4 <stdio_exit_handler+0x14>)
 80082d6:	f000 b869 	b.w	80083ac <_fwalk_sglue>
 80082da:	bf00      	nop
 80082dc:	200000d0 	.word	0x200000d0
 80082e0:	0800a111 	.word	0x0800a111
 80082e4:	200000dc 	.word	0x200000dc

080082e8 <cleanup_stdio>:
 80082e8:	6841      	ldr	r1, [r0, #4]
 80082ea:	4b0c      	ldr	r3, [pc, #48]	; (800831c <cleanup_stdio+0x34>)
 80082ec:	4299      	cmp	r1, r3
 80082ee:	b510      	push	{r4, lr}
 80082f0:	4604      	mov	r4, r0
 80082f2:	d001      	beq.n	80082f8 <cleanup_stdio+0x10>
 80082f4:	f001 ff0c 	bl	800a110 <_fflush_r>
 80082f8:	68a1      	ldr	r1, [r4, #8]
 80082fa:	4b09      	ldr	r3, [pc, #36]	; (8008320 <cleanup_stdio+0x38>)
 80082fc:	4299      	cmp	r1, r3
 80082fe:	d002      	beq.n	8008306 <cleanup_stdio+0x1e>
 8008300:	4620      	mov	r0, r4
 8008302:	f001 ff05 	bl	800a110 <_fflush_r>
 8008306:	68e1      	ldr	r1, [r4, #12]
 8008308:	4b06      	ldr	r3, [pc, #24]	; (8008324 <cleanup_stdio+0x3c>)
 800830a:	4299      	cmp	r1, r3
 800830c:	d004      	beq.n	8008318 <cleanup_stdio+0x30>
 800830e:	4620      	mov	r0, r4
 8008310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008314:	f001 befc 	b.w	800a110 <_fflush_r>
 8008318:	bd10      	pop	{r4, pc}
 800831a:	bf00      	nop
 800831c:	20000a78 	.word	0x20000a78
 8008320:	20000ae0 	.word	0x20000ae0
 8008324:	20000b48 	.word	0x20000b48

08008328 <global_stdio_init.part.0>:
 8008328:	b510      	push	{r4, lr}
 800832a:	4b0b      	ldr	r3, [pc, #44]	; (8008358 <global_stdio_init.part.0+0x30>)
 800832c:	4c0b      	ldr	r4, [pc, #44]	; (800835c <global_stdio_init.part.0+0x34>)
 800832e:	4a0c      	ldr	r2, [pc, #48]	; (8008360 <global_stdio_init.part.0+0x38>)
 8008330:	601a      	str	r2, [r3, #0]
 8008332:	4620      	mov	r0, r4
 8008334:	2200      	movs	r2, #0
 8008336:	2104      	movs	r1, #4
 8008338:	f7ff ff94 	bl	8008264 <std>
 800833c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008340:	2201      	movs	r2, #1
 8008342:	2109      	movs	r1, #9
 8008344:	f7ff ff8e 	bl	8008264 <std>
 8008348:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800834c:	2202      	movs	r2, #2
 800834e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008352:	2112      	movs	r1, #18
 8008354:	f7ff bf86 	b.w	8008264 <std>
 8008358:	20000bb0 	.word	0x20000bb0
 800835c:	20000a78 	.word	0x20000a78
 8008360:	080082d1 	.word	0x080082d1

08008364 <__sfp_lock_acquire>:
 8008364:	4801      	ldr	r0, [pc, #4]	; (800836c <__sfp_lock_acquire+0x8>)
 8008366:	f000 ba02 	b.w	800876e <__retarget_lock_acquire_recursive>
 800836a:	bf00      	nop
 800836c:	20000bb9 	.word	0x20000bb9

08008370 <__sfp_lock_release>:
 8008370:	4801      	ldr	r0, [pc, #4]	; (8008378 <__sfp_lock_release+0x8>)
 8008372:	f000 b9fd 	b.w	8008770 <__retarget_lock_release_recursive>
 8008376:	bf00      	nop
 8008378:	20000bb9 	.word	0x20000bb9

0800837c <__sinit>:
 800837c:	b510      	push	{r4, lr}
 800837e:	4604      	mov	r4, r0
 8008380:	f7ff fff0 	bl	8008364 <__sfp_lock_acquire>
 8008384:	6a23      	ldr	r3, [r4, #32]
 8008386:	b11b      	cbz	r3, 8008390 <__sinit+0x14>
 8008388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800838c:	f7ff bff0 	b.w	8008370 <__sfp_lock_release>
 8008390:	4b04      	ldr	r3, [pc, #16]	; (80083a4 <__sinit+0x28>)
 8008392:	6223      	str	r3, [r4, #32]
 8008394:	4b04      	ldr	r3, [pc, #16]	; (80083a8 <__sinit+0x2c>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1f5      	bne.n	8008388 <__sinit+0xc>
 800839c:	f7ff ffc4 	bl	8008328 <global_stdio_init.part.0>
 80083a0:	e7f2      	b.n	8008388 <__sinit+0xc>
 80083a2:	bf00      	nop
 80083a4:	080082e9 	.word	0x080082e9
 80083a8:	20000bb0 	.word	0x20000bb0

080083ac <_fwalk_sglue>:
 80083ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083b0:	4607      	mov	r7, r0
 80083b2:	4688      	mov	r8, r1
 80083b4:	4614      	mov	r4, r2
 80083b6:	2600      	movs	r6, #0
 80083b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083bc:	f1b9 0901 	subs.w	r9, r9, #1
 80083c0:	d505      	bpl.n	80083ce <_fwalk_sglue+0x22>
 80083c2:	6824      	ldr	r4, [r4, #0]
 80083c4:	2c00      	cmp	r4, #0
 80083c6:	d1f7      	bne.n	80083b8 <_fwalk_sglue+0xc>
 80083c8:	4630      	mov	r0, r6
 80083ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ce:	89ab      	ldrh	r3, [r5, #12]
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d907      	bls.n	80083e4 <_fwalk_sglue+0x38>
 80083d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083d8:	3301      	adds	r3, #1
 80083da:	d003      	beq.n	80083e4 <_fwalk_sglue+0x38>
 80083dc:	4629      	mov	r1, r5
 80083de:	4638      	mov	r0, r7
 80083e0:	47c0      	blx	r8
 80083e2:	4306      	orrs	r6, r0
 80083e4:	3568      	adds	r5, #104	; 0x68
 80083e6:	e7e9      	b.n	80083bc <_fwalk_sglue+0x10>

080083e8 <iprintf>:
 80083e8:	b40f      	push	{r0, r1, r2, r3}
 80083ea:	b507      	push	{r0, r1, r2, lr}
 80083ec:	4906      	ldr	r1, [pc, #24]	; (8008408 <iprintf+0x20>)
 80083ee:	ab04      	add	r3, sp, #16
 80083f0:	6808      	ldr	r0, [r1, #0]
 80083f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80083f6:	6881      	ldr	r1, [r0, #8]
 80083f8:	9301      	str	r3, [sp, #4]
 80083fa:	f001 fce9 	bl	8009dd0 <_vfiprintf_r>
 80083fe:	b003      	add	sp, #12
 8008400:	f85d eb04 	ldr.w	lr, [sp], #4
 8008404:	b004      	add	sp, #16
 8008406:	4770      	bx	lr
 8008408:	20000128 	.word	0x20000128

0800840c <_puts_r>:
 800840c:	6a03      	ldr	r3, [r0, #32]
 800840e:	b570      	push	{r4, r5, r6, lr}
 8008410:	6884      	ldr	r4, [r0, #8]
 8008412:	4605      	mov	r5, r0
 8008414:	460e      	mov	r6, r1
 8008416:	b90b      	cbnz	r3, 800841c <_puts_r+0x10>
 8008418:	f7ff ffb0 	bl	800837c <__sinit>
 800841c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800841e:	07db      	lsls	r3, r3, #31
 8008420:	d405      	bmi.n	800842e <_puts_r+0x22>
 8008422:	89a3      	ldrh	r3, [r4, #12]
 8008424:	0598      	lsls	r0, r3, #22
 8008426:	d402      	bmi.n	800842e <_puts_r+0x22>
 8008428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800842a:	f000 f9a0 	bl	800876e <__retarget_lock_acquire_recursive>
 800842e:	89a3      	ldrh	r3, [r4, #12]
 8008430:	0719      	lsls	r1, r3, #28
 8008432:	d513      	bpl.n	800845c <_puts_r+0x50>
 8008434:	6923      	ldr	r3, [r4, #16]
 8008436:	b18b      	cbz	r3, 800845c <_puts_r+0x50>
 8008438:	3e01      	subs	r6, #1
 800843a:	68a3      	ldr	r3, [r4, #8]
 800843c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008440:	3b01      	subs	r3, #1
 8008442:	60a3      	str	r3, [r4, #8]
 8008444:	b9e9      	cbnz	r1, 8008482 <_puts_r+0x76>
 8008446:	2b00      	cmp	r3, #0
 8008448:	da2e      	bge.n	80084a8 <_puts_r+0x9c>
 800844a:	4622      	mov	r2, r4
 800844c:	210a      	movs	r1, #10
 800844e:	4628      	mov	r0, r5
 8008450:	f000 f87b 	bl	800854a <__swbuf_r>
 8008454:	3001      	adds	r0, #1
 8008456:	d007      	beq.n	8008468 <_puts_r+0x5c>
 8008458:	250a      	movs	r5, #10
 800845a:	e007      	b.n	800846c <_puts_r+0x60>
 800845c:	4621      	mov	r1, r4
 800845e:	4628      	mov	r0, r5
 8008460:	f000 f8b0 	bl	80085c4 <__swsetup_r>
 8008464:	2800      	cmp	r0, #0
 8008466:	d0e7      	beq.n	8008438 <_puts_r+0x2c>
 8008468:	f04f 35ff 	mov.w	r5, #4294967295
 800846c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800846e:	07da      	lsls	r2, r3, #31
 8008470:	d405      	bmi.n	800847e <_puts_r+0x72>
 8008472:	89a3      	ldrh	r3, [r4, #12]
 8008474:	059b      	lsls	r3, r3, #22
 8008476:	d402      	bmi.n	800847e <_puts_r+0x72>
 8008478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800847a:	f000 f979 	bl	8008770 <__retarget_lock_release_recursive>
 800847e:	4628      	mov	r0, r5
 8008480:	bd70      	pop	{r4, r5, r6, pc}
 8008482:	2b00      	cmp	r3, #0
 8008484:	da04      	bge.n	8008490 <_puts_r+0x84>
 8008486:	69a2      	ldr	r2, [r4, #24]
 8008488:	429a      	cmp	r2, r3
 800848a:	dc06      	bgt.n	800849a <_puts_r+0x8e>
 800848c:	290a      	cmp	r1, #10
 800848e:	d004      	beq.n	800849a <_puts_r+0x8e>
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	1c5a      	adds	r2, r3, #1
 8008494:	6022      	str	r2, [r4, #0]
 8008496:	7019      	strb	r1, [r3, #0]
 8008498:	e7cf      	b.n	800843a <_puts_r+0x2e>
 800849a:	4622      	mov	r2, r4
 800849c:	4628      	mov	r0, r5
 800849e:	f000 f854 	bl	800854a <__swbuf_r>
 80084a2:	3001      	adds	r0, #1
 80084a4:	d1c9      	bne.n	800843a <_puts_r+0x2e>
 80084a6:	e7df      	b.n	8008468 <_puts_r+0x5c>
 80084a8:	6823      	ldr	r3, [r4, #0]
 80084aa:	250a      	movs	r5, #10
 80084ac:	1c5a      	adds	r2, r3, #1
 80084ae:	6022      	str	r2, [r4, #0]
 80084b0:	701d      	strb	r5, [r3, #0]
 80084b2:	e7db      	b.n	800846c <_puts_r+0x60>

080084b4 <puts>:
 80084b4:	4b02      	ldr	r3, [pc, #8]	; (80084c0 <puts+0xc>)
 80084b6:	4601      	mov	r1, r0
 80084b8:	6818      	ldr	r0, [r3, #0]
 80084ba:	f7ff bfa7 	b.w	800840c <_puts_r>
 80084be:	bf00      	nop
 80084c0:	20000128 	.word	0x20000128

080084c4 <__sread>:
 80084c4:	b510      	push	{r4, lr}
 80084c6:	460c      	mov	r4, r1
 80084c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084cc:	f000 f900 	bl	80086d0 <_read_r>
 80084d0:	2800      	cmp	r0, #0
 80084d2:	bfab      	itete	ge
 80084d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084d6:	89a3      	ldrhlt	r3, [r4, #12]
 80084d8:	181b      	addge	r3, r3, r0
 80084da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80084de:	bfac      	ite	ge
 80084e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80084e2:	81a3      	strhlt	r3, [r4, #12]
 80084e4:	bd10      	pop	{r4, pc}

080084e6 <__swrite>:
 80084e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084ea:	461f      	mov	r7, r3
 80084ec:	898b      	ldrh	r3, [r1, #12]
 80084ee:	05db      	lsls	r3, r3, #23
 80084f0:	4605      	mov	r5, r0
 80084f2:	460c      	mov	r4, r1
 80084f4:	4616      	mov	r6, r2
 80084f6:	d505      	bpl.n	8008504 <__swrite+0x1e>
 80084f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084fc:	2302      	movs	r3, #2
 80084fe:	2200      	movs	r2, #0
 8008500:	f000 f8d4 	bl	80086ac <_lseek_r>
 8008504:	89a3      	ldrh	r3, [r4, #12]
 8008506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800850a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800850e:	81a3      	strh	r3, [r4, #12]
 8008510:	4632      	mov	r2, r6
 8008512:	463b      	mov	r3, r7
 8008514:	4628      	mov	r0, r5
 8008516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800851a:	f000 b8eb 	b.w	80086f4 <_write_r>

0800851e <__sseek>:
 800851e:	b510      	push	{r4, lr}
 8008520:	460c      	mov	r4, r1
 8008522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008526:	f000 f8c1 	bl	80086ac <_lseek_r>
 800852a:	1c43      	adds	r3, r0, #1
 800852c:	89a3      	ldrh	r3, [r4, #12]
 800852e:	bf15      	itete	ne
 8008530:	6560      	strne	r0, [r4, #84]	; 0x54
 8008532:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008536:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800853a:	81a3      	strheq	r3, [r4, #12]
 800853c:	bf18      	it	ne
 800853e:	81a3      	strhne	r3, [r4, #12]
 8008540:	bd10      	pop	{r4, pc}

08008542 <__sclose>:
 8008542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008546:	f000 b8a1 	b.w	800868c <_close_r>

0800854a <__swbuf_r>:
 800854a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854c:	460e      	mov	r6, r1
 800854e:	4614      	mov	r4, r2
 8008550:	4605      	mov	r5, r0
 8008552:	b118      	cbz	r0, 800855c <__swbuf_r+0x12>
 8008554:	6a03      	ldr	r3, [r0, #32]
 8008556:	b90b      	cbnz	r3, 800855c <__swbuf_r+0x12>
 8008558:	f7ff ff10 	bl	800837c <__sinit>
 800855c:	69a3      	ldr	r3, [r4, #24]
 800855e:	60a3      	str	r3, [r4, #8]
 8008560:	89a3      	ldrh	r3, [r4, #12]
 8008562:	071a      	lsls	r2, r3, #28
 8008564:	d525      	bpl.n	80085b2 <__swbuf_r+0x68>
 8008566:	6923      	ldr	r3, [r4, #16]
 8008568:	b31b      	cbz	r3, 80085b2 <__swbuf_r+0x68>
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	6922      	ldr	r2, [r4, #16]
 800856e:	1a98      	subs	r0, r3, r2
 8008570:	6963      	ldr	r3, [r4, #20]
 8008572:	b2f6      	uxtb	r6, r6
 8008574:	4283      	cmp	r3, r0
 8008576:	4637      	mov	r7, r6
 8008578:	dc04      	bgt.n	8008584 <__swbuf_r+0x3a>
 800857a:	4621      	mov	r1, r4
 800857c:	4628      	mov	r0, r5
 800857e:	f001 fdc7 	bl	800a110 <_fflush_r>
 8008582:	b9e0      	cbnz	r0, 80085be <__swbuf_r+0x74>
 8008584:	68a3      	ldr	r3, [r4, #8]
 8008586:	3b01      	subs	r3, #1
 8008588:	60a3      	str	r3, [r4, #8]
 800858a:	6823      	ldr	r3, [r4, #0]
 800858c:	1c5a      	adds	r2, r3, #1
 800858e:	6022      	str	r2, [r4, #0]
 8008590:	701e      	strb	r6, [r3, #0]
 8008592:	6962      	ldr	r2, [r4, #20]
 8008594:	1c43      	adds	r3, r0, #1
 8008596:	429a      	cmp	r2, r3
 8008598:	d004      	beq.n	80085a4 <__swbuf_r+0x5a>
 800859a:	89a3      	ldrh	r3, [r4, #12]
 800859c:	07db      	lsls	r3, r3, #31
 800859e:	d506      	bpl.n	80085ae <__swbuf_r+0x64>
 80085a0:	2e0a      	cmp	r6, #10
 80085a2:	d104      	bne.n	80085ae <__swbuf_r+0x64>
 80085a4:	4621      	mov	r1, r4
 80085a6:	4628      	mov	r0, r5
 80085a8:	f001 fdb2 	bl	800a110 <_fflush_r>
 80085ac:	b938      	cbnz	r0, 80085be <__swbuf_r+0x74>
 80085ae:	4638      	mov	r0, r7
 80085b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085b2:	4621      	mov	r1, r4
 80085b4:	4628      	mov	r0, r5
 80085b6:	f000 f805 	bl	80085c4 <__swsetup_r>
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d0d5      	beq.n	800856a <__swbuf_r+0x20>
 80085be:	f04f 37ff 	mov.w	r7, #4294967295
 80085c2:	e7f4      	b.n	80085ae <__swbuf_r+0x64>

080085c4 <__swsetup_r>:
 80085c4:	b538      	push	{r3, r4, r5, lr}
 80085c6:	4b2a      	ldr	r3, [pc, #168]	; (8008670 <__swsetup_r+0xac>)
 80085c8:	4605      	mov	r5, r0
 80085ca:	6818      	ldr	r0, [r3, #0]
 80085cc:	460c      	mov	r4, r1
 80085ce:	b118      	cbz	r0, 80085d8 <__swsetup_r+0x14>
 80085d0:	6a03      	ldr	r3, [r0, #32]
 80085d2:	b90b      	cbnz	r3, 80085d8 <__swsetup_r+0x14>
 80085d4:	f7ff fed2 	bl	800837c <__sinit>
 80085d8:	89a3      	ldrh	r3, [r4, #12]
 80085da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085de:	0718      	lsls	r0, r3, #28
 80085e0:	d422      	bmi.n	8008628 <__swsetup_r+0x64>
 80085e2:	06d9      	lsls	r1, r3, #27
 80085e4:	d407      	bmi.n	80085f6 <__swsetup_r+0x32>
 80085e6:	2309      	movs	r3, #9
 80085e8:	602b      	str	r3, [r5, #0]
 80085ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80085ee:	81a3      	strh	r3, [r4, #12]
 80085f0:	f04f 30ff 	mov.w	r0, #4294967295
 80085f4:	e034      	b.n	8008660 <__swsetup_r+0x9c>
 80085f6:	0758      	lsls	r0, r3, #29
 80085f8:	d512      	bpl.n	8008620 <__swsetup_r+0x5c>
 80085fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085fc:	b141      	cbz	r1, 8008610 <__swsetup_r+0x4c>
 80085fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008602:	4299      	cmp	r1, r3
 8008604:	d002      	beq.n	800860c <__swsetup_r+0x48>
 8008606:	4628      	mov	r0, r5
 8008608:	f000 ff3c 	bl	8009484 <_free_r>
 800860c:	2300      	movs	r3, #0
 800860e:	6363      	str	r3, [r4, #52]	; 0x34
 8008610:	89a3      	ldrh	r3, [r4, #12]
 8008612:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008616:	81a3      	strh	r3, [r4, #12]
 8008618:	2300      	movs	r3, #0
 800861a:	6063      	str	r3, [r4, #4]
 800861c:	6923      	ldr	r3, [r4, #16]
 800861e:	6023      	str	r3, [r4, #0]
 8008620:	89a3      	ldrh	r3, [r4, #12]
 8008622:	f043 0308 	orr.w	r3, r3, #8
 8008626:	81a3      	strh	r3, [r4, #12]
 8008628:	6923      	ldr	r3, [r4, #16]
 800862a:	b94b      	cbnz	r3, 8008640 <__swsetup_r+0x7c>
 800862c:	89a3      	ldrh	r3, [r4, #12]
 800862e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008636:	d003      	beq.n	8008640 <__swsetup_r+0x7c>
 8008638:	4621      	mov	r1, r4
 800863a:	4628      	mov	r0, r5
 800863c:	f001 fdb6 	bl	800a1ac <__smakebuf_r>
 8008640:	89a0      	ldrh	r0, [r4, #12]
 8008642:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008646:	f010 0301 	ands.w	r3, r0, #1
 800864a:	d00a      	beq.n	8008662 <__swsetup_r+0x9e>
 800864c:	2300      	movs	r3, #0
 800864e:	60a3      	str	r3, [r4, #8]
 8008650:	6963      	ldr	r3, [r4, #20]
 8008652:	425b      	negs	r3, r3
 8008654:	61a3      	str	r3, [r4, #24]
 8008656:	6923      	ldr	r3, [r4, #16]
 8008658:	b943      	cbnz	r3, 800866c <__swsetup_r+0xa8>
 800865a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800865e:	d1c4      	bne.n	80085ea <__swsetup_r+0x26>
 8008660:	bd38      	pop	{r3, r4, r5, pc}
 8008662:	0781      	lsls	r1, r0, #30
 8008664:	bf58      	it	pl
 8008666:	6963      	ldrpl	r3, [r4, #20]
 8008668:	60a3      	str	r3, [r4, #8]
 800866a:	e7f4      	b.n	8008656 <__swsetup_r+0x92>
 800866c:	2000      	movs	r0, #0
 800866e:	e7f7      	b.n	8008660 <__swsetup_r+0x9c>
 8008670:	20000128 	.word	0x20000128

08008674 <memset>:
 8008674:	4402      	add	r2, r0
 8008676:	4603      	mov	r3, r0
 8008678:	4293      	cmp	r3, r2
 800867a:	d100      	bne.n	800867e <memset+0xa>
 800867c:	4770      	bx	lr
 800867e:	f803 1b01 	strb.w	r1, [r3], #1
 8008682:	e7f9      	b.n	8008678 <memset+0x4>

08008684 <_localeconv_r>:
 8008684:	4800      	ldr	r0, [pc, #0]	; (8008688 <_localeconv_r+0x4>)
 8008686:	4770      	bx	lr
 8008688:	2000021c 	.word	0x2000021c

0800868c <_close_r>:
 800868c:	b538      	push	{r3, r4, r5, lr}
 800868e:	4d06      	ldr	r5, [pc, #24]	; (80086a8 <_close_r+0x1c>)
 8008690:	2300      	movs	r3, #0
 8008692:	4604      	mov	r4, r0
 8008694:	4608      	mov	r0, r1
 8008696:	602b      	str	r3, [r5, #0]
 8008698:	f7fa fdf4 	bl	8003284 <_close>
 800869c:	1c43      	adds	r3, r0, #1
 800869e:	d102      	bne.n	80086a6 <_close_r+0x1a>
 80086a0:	682b      	ldr	r3, [r5, #0]
 80086a2:	b103      	cbz	r3, 80086a6 <_close_r+0x1a>
 80086a4:	6023      	str	r3, [r4, #0]
 80086a6:	bd38      	pop	{r3, r4, r5, pc}
 80086a8:	20000bb4 	.word	0x20000bb4

080086ac <_lseek_r>:
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	4d07      	ldr	r5, [pc, #28]	; (80086cc <_lseek_r+0x20>)
 80086b0:	4604      	mov	r4, r0
 80086b2:	4608      	mov	r0, r1
 80086b4:	4611      	mov	r1, r2
 80086b6:	2200      	movs	r2, #0
 80086b8:	602a      	str	r2, [r5, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	f7fa fe09 	bl	80032d2 <_lseek>
 80086c0:	1c43      	adds	r3, r0, #1
 80086c2:	d102      	bne.n	80086ca <_lseek_r+0x1e>
 80086c4:	682b      	ldr	r3, [r5, #0]
 80086c6:	b103      	cbz	r3, 80086ca <_lseek_r+0x1e>
 80086c8:	6023      	str	r3, [r4, #0]
 80086ca:	bd38      	pop	{r3, r4, r5, pc}
 80086cc:	20000bb4 	.word	0x20000bb4

080086d0 <_read_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	4d07      	ldr	r5, [pc, #28]	; (80086f0 <_read_r+0x20>)
 80086d4:	4604      	mov	r4, r0
 80086d6:	4608      	mov	r0, r1
 80086d8:	4611      	mov	r1, r2
 80086da:	2200      	movs	r2, #0
 80086dc:	602a      	str	r2, [r5, #0]
 80086de:	461a      	mov	r2, r3
 80086e0:	f7fa fd97 	bl	8003212 <_read>
 80086e4:	1c43      	adds	r3, r0, #1
 80086e6:	d102      	bne.n	80086ee <_read_r+0x1e>
 80086e8:	682b      	ldr	r3, [r5, #0]
 80086ea:	b103      	cbz	r3, 80086ee <_read_r+0x1e>
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	bd38      	pop	{r3, r4, r5, pc}
 80086f0:	20000bb4 	.word	0x20000bb4

080086f4 <_write_r>:
 80086f4:	b538      	push	{r3, r4, r5, lr}
 80086f6:	4d07      	ldr	r5, [pc, #28]	; (8008714 <_write_r+0x20>)
 80086f8:	4604      	mov	r4, r0
 80086fa:	4608      	mov	r0, r1
 80086fc:	4611      	mov	r1, r2
 80086fe:	2200      	movs	r2, #0
 8008700:	602a      	str	r2, [r5, #0]
 8008702:	461a      	mov	r2, r3
 8008704:	f7fa fda2 	bl	800324c <_write>
 8008708:	1c43      	adds	r3, r0, #1
 800870a:	d102      	bne.n	8008712 <_write_r+0x1e>
 800870c:	682b      	ldr	r3, [r5, #0]
 800870e:	b103      	cbz	r3, 8008712 <_write_r+0x1e>
 8008710:	6023      	str	r3, [r4, #0]
 8008712:	bd38      	pop	{r3, r4, r5, pc}
 8008714:	20000bb4 	.word	0x20000bb4

08008718 <__errno>:
 8008718:	4b01      	ldr	r3, [pc, #4]	; (8008720 <__errno+0x8>)
 800871a:	6818      	ldr	r0, [r3, #0]
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	20000128 	.word	0x20000128

08008724 <__libc_init_array>:
 8008724:	b570      	push	{r4, r5, r6, lr}
 8008726:	4d0d      	ldr	r5, [pc, #52]	; (800875c <__libc_init_array+0x38>)
 8008728:	4c0d      	ldr	r4, [pc, #52]	; (8008760 <__libc_init_array+0x3c>)
 800872a:	1b64      	subs	r4, r4, r5
 800872c:	10a4      	asrs	r4, r4, #2
 800872e:	2600      	movs	r6, #0
 8008730:	42a6      	cmp	r6, r4
 8008732:	d109      	bne.n	8008748 <__libc_init_array+0x24>
 8008734:	4d0b      	ldr	r5, [pc, #44]	; (8008764 <__libc_init_array+0x40>)
 8008736:	4c0c      	ldr	r4, [pc, #48]	; (8008768 <__libc_init_array+0x44>)
 8008738:	f001 fe58 	bl	800a3ec <_init>
 800873c:	1b64      	subs	r4, r4, r5
 800873e:	10a4      	asrs	r4, r4, #2
 8008740:	2600      	movs	r6, #0
 8008742:	42a6      	cmp	r6, r4
 8008744:	d105      	bne.n	8008752 <__libc_init_array+0x2e>
 8008746:	bd70      	pop	{r4, r5, r6, pc}
 8008748:	f855 3b04 	ldr.w	r3, [r5], #4
 800874c:	4798      	blx	r3
 800874e:	3601      	adds	r6, #1
 8008750:	e7ee      	b.n	8008730 <__libc_init_array+0xc>
 8008752:	f855 3b04 	ldr.w	r3, [r5], #4
 8008756:	4798      	blx	r3
 8008758:	3601      	adds	r6, #1
 800875a:	e7f2      	b.n	8008742 <__libc_init_array+0x1e>
 800875c:	0800a9b4 	.word	0x0800a9b4
 8008760:	0800a9b4 	.word	0x0800a9b4
 8008764:	0800a9b4 	.word	0x0800a9b4
 8008768:	0800a9b8 	.word	0x0800a9b8

0800876c <__retarget_lock_init_recursive>:
 800876c:	4770      	bx	lr

0800876e <__retarget_lock_acquire_recursive>:
 800876e:	4770      	bx	lr

08008770 <__retarget_lock_release_recursive>:
 8008770:	4770      	bx	lr

08008772 <memcpy>:
 8008772:	440a      	add	r2, r1
 8008774:	4291      	cmp	r1, r2
 8008776:	f100 33ff 	add.w	r3, r0, #4294967295
 800877a:	d100      	bne.n	800877e <memcpy+0xc>
 800877c:	4770      	bx	lr
 800877e:	b510      	push	{r4, lr}
 8008780:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008784:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008788:	4291      	cmp	r1, r2
 800878a:	d1f9      	bne.n	8008780 <memcpy+0xe>
 800878c:	bd10      	pop	{r4, pc}

0800878e <quorem>:
 800878e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008792:	6903      	ldr	r3, [r0, #16]
 8008794:	690c      	ldr	r4, [r1, #16]
 8008796:	42a3      	cmp	r3, r4
 8008798:	4607      	mov	r7, r0
 800879a:	db7e      	blt.n	800889a <quorem+0x10c>
 800879c:	3c01      	subs	r4, #1
 800879e:	f101 0814 	add.w	r8, r1, #20
 80087a2:	f100 0514 	add.w	r5, r0, #20
 80087a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087aa:	9301      	str	r3, [sp, #4]
 80087ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80087b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087b4:	3301      	adds	r3, #1
 80087b6:	429a      	cmp	r2, r3
 80087b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80087bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80087c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80087c4:	d331      	bcc.n	800882a <quorem+0x9c>
 80087c6:	f04f 0e00 	mov.w	lr, #0
 80087ca:	4640      	mov	r0, r8
 80087cc:	46ac      	mov	ip, r5
 80087ce:	46f2      	mov	sl, lr
 80087d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80087d4:	b293      	uxth	r3, r2
 80087d6:	fb06 e303 	mla	r3, r6, r3, lr
 80087da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80087de:	0c1a      	lsrs	r2, r3, #16
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	ebaa 0303 	sub.w	r3, sl, r3
 80087e6:	f8dc a000 	ldr.w	sl, [ip]
 80087ea:	fa13 f38a 	uxtah	r3, r3, sl
 80087ee:	fb06 220e 	mla	r2, r6, lr, r2
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	9b00      	ldr	r3, [sp, #0]
 80087f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80087fa:	b292      	uxth	r2, r2
 80087fc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008800:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008804:	f8bd 3000 	ldrh.w	r3, [sp]
 8008808:	4581      	cmp	r9, r0
 800880a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800880e:	f84c 3b04 	str.w	r3, [ip], #4
 8008812:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008816:	d2db      	bcs.n	80087d0 <quorem+0x42>
 8008818:	f855 300b 	ldr.w	r3, [r5, fp]
 800881c:	b92b      	cbnz	r3, 800882a <quorem+0x9c>
 800881e:	9b01      	ldr	r3, [sp, #4]
 8008820:	3b04      	subs	r3, #4
 8008822:	429d      	cmp	r5, r3
 8008824:	461a      	mov	r2, r3
 8008826:	d32c      	bcc.n	8008882 <quorem+0xf4>
 8008828:	613c      	str	r4, [r7, #16]
 800882a:	4638      	mov	r0, r7
 800882c:	f001 f9a6 	bl	8009b7c <__mcmp>
 8008830:	2800      	cmp	r0, #0
 8008832:	db22      	blt.n	800887a <quorem+0xec>
 8008834:	3601      	adds	r6, #1
 8008836:	4629      	mov	r1, r5
 8008838:	2000      	movs	r0, #0
 800883a:	f858 2b04 	ldr.w	r2, [r8], #4
 800883e:	f8d1 c000 	ldr.w	ip, [r1]
 8008842:	b293      	uxth	r3, r2
 8008844:	1ac3      	subs	r3, r0, r3
 8008846:	0c12      	lsrs	r2, r2, #16
 8008848:	fa13 f38c 	uxtah	r3, r3, ip
 800884c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008850:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008854:	b29b      	uxth	r3, r3
 8008856:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800885a:	45c1      	cmp	r9, r8
 800885c:	f841 3b04 	str.w	r3, [r1], #4
 8008860:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008864:	d2e9      	bcs.n	800883a <quorem+0xac>
 8008866:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800886a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800886e:	b922      	cbnz	r2, 800887a <quorem+0xec>
 8008870:	3b04      	subs	r3, #4
 8008872:	429d      	cmp	r5, r3
 8008874:	461a      	mov	r2, r3
 8008876:	d30a      	bcc.n	800888e <quorem+0x100>
 8008878:	613c      	str	r4, [r7, #16]
 800887a:	4630      	mov	r0, r6
 800887c:	b003      	add	sp, #12
 800887e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008882:	6812      	ldr	r2, [r2, #0]
 8008884:	3b04      	subs	r3, #4
 8008886:	2a00      	cmp	r2, #0
 8008888:	d1ce      	bne.n	8008828 <quorem+0x9a>
 800888a:	3c01      	subs	r4, #1
 800888c:	e7c9      	b.n	8008822 <quorem+0x94>
 800888e:	6812      	ldr	r2, [r2, #0]
 8008890:	3b04      	subs	r3, #4
 8008892:	2a00      	cmp	r2, #0
 8008894:	d1f0      	bne.n	8008878 <quorem+0xea>
 8008896:	3c01      	subs	r4, #1
 8008898:	e7eb      	b.n	8008872 <quorem+0xe4>
 800889a:	2000      	movs	r0, #0
 800889c:	e7ee      	b.n	800887c <quorem+0xee>
	...

080088a0 <_dtoa_r>:
 80088a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a4:	ed2d 8b04 	vpush	{d8-d9}
 80088a8:	69c5      	ldr	r5, [r0, #28]
 80088aa:	b093      	sub	sp, #76	; 0x4c
 80088ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 80088b0:	ec57 6b10 	vmov	r6, r7, d0
 80088b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80088b8:	9107      	str	r1, [sp, #28]
 80088ba:	4604      	mov	r4, r0
 80088bc:	920a      	str	r2, [sp, #40]	; 0x28
 80088be:	930d      	str	r3, [sp, #52]	; 0x34
 80088c0:	b975      	cbnz	r5, 80088e0 <_dtoa_r+0x40>
 80088c2:	2010      	movs	r0, #16
 80088c4:	f000 fe2a 	bl	800951c <malloc>
 80088c8:	4602      	mov	r2, r0
 80088ca:	61e0      	str	r0, [r4, #28]
 80088cc:	b920      	cbnz	r0, 80088d8 <_dtoa_r+0x38>
 80088ce:	4bae      	ldr	r3, [pc, #696]	; (8008b88 <_dtoa_r+0x2e8>)
 80088d0:	21ef      	movs	r1, #239	; 0xef
 80088d2:	48ae      	ldr	r0, [pc, #696]	; (8008b8c <_dtoa_r+0x2ec>)
 80088d4:	f001 fcd8 	bl	800a288 <__assert_func>
 80088d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80088dc:	6005      	str	r5, [r0, #0]
 80088de:	60c5      	str	r5, [r0, #12]
 80088e0:	69e3      	ldr	r3, [r4, #28]
 80088e2:	6819      	ldr	r1, [r3, #0]
 80088e4:	b151      	cbz	r1, 80088fc <_dtoa_r+0x5c>
 80088e6:	685a      	ldr	r2, [r3, #4]
 80088e8:	604a      	str	r2, [r1, #4]
 80088ea:	2301      	movs	r3, #1
 80088ec:	4093      	lsls	r3, r2
 80088ee:	608b      	str	r3, [r1, #8]
 80088f0:	4620      	mov	r0, r4
 80088f2:	f000 ff07 	bl	8009704 <_Bfree>
 80088f6:	69e3      	ldr	r3, [r4, #28]
 80088f8:	2200      	movs	r2, #0
 80088fa:	601a      	str	r2, [r3, #0]
 80088fc:	1e3b      	subs	r3, r7, #0
 80088fe:	bfbb      	ittet	lt
 8008900:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008904:	9303      	strlt	r3, [sp, #12]
 8008906:	2300      	movge	r3, #0
 8008908:	2201      	movlt	r2, #1
 800890a:	bfac      	ite	ge
 800890c:	f8c8 3000 	strge.w	r3, [r8]
 8008910:	f8c8 2000 	strlt.w	r2, [r8]
 8008914:	4b9e      	ldr	r3, [pc, #632]	; (8008b90 <_dtoa_r+0x2f0>)
 8008916:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800891a:	ea33 0308 	bics.w	r3, r3, r8
 800891e:	d11b      	bne.n	8008958 <_dtoa_r+0xb8>
 8008920:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008922:	f242 730f 	movw	r3, #9999	; 0x270f
 8008926:	6013      	str	r3, [r2, #0]
 8008928:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800892c:	4333      	orrs	r3, r6
 800892e:	f000 8593 	beq.w	8009458 <_dtoa_r+0xbb8>
 8008932:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008934:	b963      	cbnz	r3, 8008950 <_dtoa_r+0xb0>
 8008936:	4b97      	ldr	r3, [pc, #604]	; (8008b94 <_dtoa_r+0x2f4>)
 8008938:	e027      	b.n	800898a <_dtoa_r+0xea>
 800893a:	4b97      	ldr	r3, [pc, #604]	; (8008b98 <_dtoa_r+0x2f8>)
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	3308      	adds	r3, #8
 8008940:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008942:	6013      	str	r3, [r2, #0]
 8008944:	9800      	ldr	r0, [sp, #0]
 8008946:	b013      	add	sp, #76	; 0x4c
 8008948:	ecbd 8b04 	vpop	{d8-d9}
 800894c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008950:	4b90      	ldr	r3, [pc, #576]	; (8008b94 <_dtoa_r+0x2f4>)
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	3303      	adds	r3, #3
 8008956:	e7f3      	b.n	8008940 <_dtoa_r+0xa0>
 8008958:	ed9d 7b02 	vldr	d7, [sp, #8]
 800895c:	2200      	movs	r2, #0
 800895e:	ec51 0b17 	vmov	r0, r1, d7
 8008962:	eeb0 8a47 	vmov.f32	s16, s14
 8008966:	eef0 8a67 	vmov.f32	s17, s15
 800896a:	2300      	movs	r3, #0
 800896c:	f7f8 f8ac 	bl	8000ac8 <__aeabi_dcmpeq>
 8008970:	4681      	mov	r9, r0
 8008972:	b160      	cbz	r0, 800898e <_dtoa_r+0xee>
 8008974:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008976:	2301      	movs	r3, #1
 8008978:	6013      	str	r3, [r2, #0]
 800897a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 8568 	beq.w	8009452 <_dtoa_r+0xbb2>
 8008982:	4b86      	ldr	r3, [pc, #536]	; (8008b9c <_dtoa_r+0x2fc>)
 8008984:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008986:	6013      	str	r3, [r2, #0]
 8008988:	3b01      	subs	r3, #1
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	e7da      	b.n	8008944 <_dtoa_r+0xa4>
 800898e:	aa10      	add	r2, sp, #64	; 0x40
 8008990:	a911      	add	r1, sp, #68	; 0x44
 8008992:	4620      	mov	r0, r4
 8008994:	eeb0 0a48 	vmov.f32	s0, s16
 8008998:	eef0 0a68 	vmov.f32	s1, s17
 800899c:	f001 f994 	bl	8009cc8 <__d2b>
 80089a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80089a4:	4682      	mov	sl, r0
 80089a6:	2d00      	cmp	r5, #0
 80089a8:	d07f      	beq.n	8008aaa <_dtoa_r+0x20a>
 80089aa:	ee18 3a90 	vmov	r3, s17
 80089ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80089b6:	ec51 0b18 	vmov	r0, r1, d8
 80089ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80089be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80089c2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80089c6:	4619      	mov	r1, r3
 80089c8:	2200      	movs	r2, #0
 80089ca:	4b75      	ldr	r3, [pc, #468]	; (8008ba0 <_dtoa_r+0x300>)
 80089cc:	f7f7 fc5c 	bl	8000288 <__aeabi_dsub>
 80089d0:	a367      	add	r3, pc, #412	; (adr r3, 8008b70 <_dtoa_r+0x2d0>)
 80089d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d6:	f7f7 fe0f 	bl	80005f8 <__aeabi_dmul>
 80089da:	a367      	add	r3, pc, #412	; (adr r3, 8008b78 <_dtoa_r+0x2d8>)
 80089dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e0:	f7f7 fc54 	bl	800028c <__adddf3>
 80089e4:	4606      	mov	r6, r0
 80089e6:	4628      	mov	r0, r5
 80089e8:	460f      	mov	r7, r1
 80089ea:	f7f7 fd9b 	bl	8000524 <__aeabi_i2d>
 80089ee:	a364      	add	r3, pc, #400	; (adr r3, 8008b80 <_dtoa_r+0x2e0>)
 80089f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f4:	f7f7 fe00 	bl	80005f8 <__aeabi_dmul>
 80089f8:	4602      	mov	r2, r0
 80089fa:	460b      	mov	r3, r1
 80089fc:	4630      	mov	r0, r6
 80089fe:	4639      	mov	r1, r7
 8008a00:	f7f7 fc44 	bl	800028c <__adddf3>
 8008a04:	4606      	mov	r6, r0
 8008a06:	460f      	mov	r7, r1
 8008a08:	f7f8 f8a6 	bl	8000b58 <__aeabi_d2iz>
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	4683      	mov	fp, r0
 8008a10:	2300      	movs	r3, #0
 8008a12:	4630      	mov	r0, r6
 8008a14:	4639      	mov	r1, r7
 8008a16:	f7f8 f861 	bl	8000adc <__aeabi_dcmplt>
 8008a1a:	b148      	cbz	r0, 8008a30 <_dtoa_r+0x190>
 8008a1c:	4658      	mov	r0, fp
 8008a1e:	f7f7 fd81 	bl	8000524 <__aeabi_i2d>
 8008a22:	4632      	mov	r2, r6
 8008a24:	463b      	mov	r3, r7
 8008a26:	f7f8 f84f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a2a:	b908      	cbnz	r0, 8008a30 <_dtoa_r+0x190>
 8008a2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a30:	f1bb 0f16 	cmp.w	fp, #22
 8008a34:	d857      	bhi.n	8008ae6 <_dtoa_r+0x246>
 8008a36:	4b5b      	ldr	r3, [pc, #364]	; (8008ba4 <_dtoa_r+0x304>)
 8008a38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a40:	ec51 0b18 	vmov	r0, r1, d8
 8008a44:	f7f8 f84a 	bl	8000adc <__aeabi_dcmplt>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	d04e      	beq.n	8008aea <_dtoa_r+0x24a>
 8008a4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a50:	2300      	movs	r3, #0
 8008a52:	930c      	str	r3, [sp, #48]	; 0x30
 8008a54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a56:	1b5b      	subs	r3, r3, r5
 8008a58:	1e5a      	subs	r2, r3, #1
 8008a5a:	bf45      	ittet	mi
 8008a5c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008a60:	9305      	strmi	r3, [sp, #20]
 8008a62:	2300      	movpl	r3, #0
 8008a64:	2300      	movmi	r3, #0
 8008a66:	9206      	str	r2, [sp, #24]
 8008a68:	bf54      	ite	pl
 8008a6a:	9305      	strpl	r3, [sp, #20]
 8008a6c:	9306      	strmi	r3, [sp, #24]
 8008a6e:	f1bb 0f00 	cmp.w	fp, #0
 8008a72:	db3c      	blt.n	8008aee <_dtoa_r+0x24e>
 8008a74:	9b06      	ldr	r3, [sp, #24]
 8008a76:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008a7a:	445b      	add	r3, fp
 8008a7c:	9306      	str	r3, [sp, #24]
 8008a7e:	2300      	movs	r3, #0
 8008a80:	9308      	str	r3, [sp, #32]
 8008a82:	9b07      	ldr	r3, [sp, #28]
 8008a84:	2b09      	cmp	r3, #9
 8008a86:	d868      	bhi.n	8008b5a <_dtoa_r+0x2ba>
 8008a88:	2b05      	cmp	r3, #5
 8008a8a:	bfc4      	itt	gt
 8008a8c:	3b04      	subgt	r3, #4
 8008a8e:	9307      	strgt	r3, [sp, #28]
 8008a90:	9b07      	ldr	r3, [sp, #28]
 8008a92:	f1a3 0302 	sub.w	r3, r3, #2
 8008a96:	bfcc      	ite	gt
 8008a98:	2500      	movgt	r5, #0
 8008a9a:	2501      	movle	r5, #1
 8008a9c:	2b03      	cmp	r3, #3
 8008a9e:	f200 8085 	bhi.w	8008bac <_dtoa_r+0x30c>
 8008aa2:	e8df f003 	tbb	[pc, r3]
 8008aa6:	3b2e      	.short	0x3b2e
 8008aa8:	5839      	.short	0x5839
 8008aaa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008aae:	441d      	add	r5, r3
 8008ab0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008ab4:	2b20      	cmp	r3, #32
 8008ab6:	bfc1      	itttt	gt
 8008ab8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008abc:	fa08 f803 	lslgt.w	r8, r8, r3
 8008ac0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008ac4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008ac8:	bfd6      	itet	le
 8008aca:	f1c3 0320 	rsble	r3, r3, #32
 8008ace:	ea48 0003 	orrgt.w	r0, r8, r3
 8008ad2:	fa06 f003 	lslle.w	r0, r6, r3
 8008ad6:	f7f7 fd15 	bl	8000504 <__aeabi_ui2d>
 8008ada:	2201      	movs	r2, #1
 8008adc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008ae0:	3d01      	subs	r5, #1
 8008ae2:	920e      	str	r2, [sp, #56]	; 0x38
 8008ae4:	e76f      	b.n	80089c6 <_dtoa_r+0x126>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e7b3      	b.n	8008a52 <_dtoa_r+0x1b2>
 8008aea:	900c      	str	r0, [sp, #48]	; 0x30
 8008aec:	e7b2      	b.n	8008a54 <_dtoa_r+0x1b4>
 8008aee:	9b05      	ldr	r3, [sp, #20]
 8008af0:	eba3 030b 	sub.w	r3, r3, fp
 8008af4:	9305      	str	r3, [sp, #20]
 8008af6:	f1cb 0300 	rsb	r3, fp, #0
 8008afa:	9308      	str	r3, [sp, #32]
 8008afc:	2300      	movs	r3, #0
 8008afe:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b00:	e7bf      	b.n	8008a82 <_dtoa_r+0x1e2>
 8008b02:	2300      	movs	r3, #0
 8008b04:	9309      	str	r3, [sp, #36]	; 0x24
 8008b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	dc52      	bgt.n	8008bb2 <_dtoa_r+0x312>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	9301      	str	r3, [sp, #4]
 8008b10:	9304      	str	r3, [sp, #16]
 8008b12:	461a      	mov	r2, r3
 8008b14:	920a      	str	r2, [sp, #40]	; 0x28
 8008b16:	e00b      	b.n	8008b30 <_dtoa_r+0x290>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e7f3      	b.n	8008b04 <_dtoa_r+0x264>
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b22:	445b      	add	r3, fp
 8008b24:	9301      	str	r3, [sp, #4]
 8008b26:	3301      	adds	r3, #1
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	9304      	str	r3, [sp, #16]
 8008b2c:	bfb8      	it	lt
 8008b2e:	2301      	movlt	r3, #1
 8008b30:	69e0      	ldr	r0, [r4, #28]
 8008b32:	2100      	movs	r1, #0
 8008b34:	2204      	movs	r2, #4
 8008b36:	f102 0614 	add.w	r6, r2, #20
 8008b3a:	429e      	cmp	r6, r3
 8008b3c:	d93d      	bls.n	8008bba <_dtoa_r+0x31a>
 8008b3e:	6041      	str	r1, [r0, #4]
 8008b40:	4620      	mov	r0, r4
 8008b42:	f000 fd9f 	bl	8009684 <_Balloc>
 8008b46:	9000      	str	r0, [sp, #0]
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	d139      	bne.n	8008bc0 <_dtoa_r+0x320>
 8008b4c:	4b16      	ldr	r3, [pc, #88]	; (8008ba8 <_dtoa_r+0x308>)
 8008b4e:	4602      	mov	r2, r0
 8008b50:	f240 11af 	movw	r1, #431	; 0x1af
 8008b54:	e6bd      	b.n	80088d2 <_dtoa_r+0x32>
 8008b56:	2301      	movs	r3, #1
 8008b58:	e7e1      	b.n	8008b1e <_dtoa_r+0x27e>
 8008b5a:	2501      	movs	r5, #1
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	9307      	str	r3, [sp, #28]
 8008b60:	9509      	str	r5, [sp, #36]	; 0x24
 8008b62:	f04f 33ff 	mov.w	r3, #4294967295
 8008b66:	9301      	str	r3, [sp, #4]
 8008b68:	9304      	str	r3, [sp, #16]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	2312      	movs	r3, #18
 8008b6e:	e7d1      	b.n	8008b14 <_dtoa_r+0x274>
 8008b70:	636f4361 	.word	0x636f4361
 8008b74:	3fd287a7 	.word	0x3fd287a7
 8008b78:	8b60c8b3 	.word	0x8b60c8b3
 8008b7c:	3fc68a28 	.word	0x3fc68a28
 8008b80:	509f79fb 	.word	0x509f79fb
 8008b84:	3fd34413 	.word	0x3fd34413
 8008b88:	0800a679 	.word	0x0800a679
 8008b8c:	0800a690 	.word	0x0800a690
 8008b90:	7ff00000 	.word	0x7ff00000
 8008b94:	0800a675 	.word	0x0800a675
 8008b98:	0800a66c 	.word	0x0800a66c
 8008b9c:	0800a649 	.word	0x0800a649
 8008ba0:	3ff80000 	.word	0x3ff80000
 8008ba4:	0800a780 	.word	0x0800a780
 8008ba8:	0800a6e8 	.word	0x0800a6e8
 8008bac:	2301      	movs	r3, #1
 8008bae:	9309      	str	r3, [sp, #36]	; 0x24
 8008bb0:	e7d7      	b.n	8008b62 <_dtoa_r+0x2c2>
 8008bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bb4:	9301      	str	r3, [sp, #4]
 8008bb6:	9304      	str	r3, [sp, #16]
 8008bb8:	e7ba      	b.n	8008b30 <_dtoa_r+0x290>
 8008bba:	3101      	adds	r1, #1
 8008bbc:	0052      	lsls	r2, r2, #1
 8008bbe:	e7ba      	b.n	8008b36 <_dtoa_r+0x296>
 8008bc0:	69e3      	ldr	r3, [r4, #28]
 8008bc2:	9a00      	ldr	r2, [sp, #0]
 8008bc4:	601a      	str	r2, [r3, #0]
 8008bc6:	9b04      	ldr	r3, [sp, #16]
 8008bc8:	2b0e      	cmp	r3, #14
 8008bca:	f200 80a8 	bhi.w	8008d1e <_dtoa_r+0x47e>
 8008bce:	2d00      	cmp	r5, #0
 8008bd0:	f000 80a5 	beq.w	8008d1e <_dtoa_r+0x47e>
 8008bd4:	f1bb 0f00 	cmp.w	fp, #0
 8008bd8:	dd38      	ble.n	8008c4c <_dtoa_r+0x3ac>
 8008bda:	4bc0      	ldr	r3, [pc, #768]	; (8008edc <_dtoa_r+0x63c>)
 8008bdc:	f00b 020f 	and.w	r2, fp, #15
 8008be0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008be4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008be8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008bec:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008bf0:	d019      	beq.n	8008c26 <_dtoa_r+0x386>
 8008bf2:	4bbb      	ldr	r3, [pc, #748]	; (8008ee0 <_dtoa_r+0x640>)
 8008bf4:	ec51 0b18 	vmov	r0, r1, d8
 8008bf8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008bfc:	f7f7 fe26 	bl	800084c <__aeabi_ddiv>
 8008c00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c04:	f008 080f 	and.w	r8, r8, #15
 8008c08:	2503      	movs	r5, #3
 8008c0a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008ee0 <_dtoa_r+0x640>
 8008c0e:	f1b8 0f00 	cmp.w	r8, #0
 8008c12:	d10a      	bne.n	8008c2a <_dtoa_r+0x38a>
 8008c14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c18:	4632      	mov	r2, r6
 8008c1a:	463b      	mov	r3, r7
 8008c1c:	f7f7 fe16 	bl	800084c <__aeabi_ddiv>
 8008c20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c24:	e02b      	b.n	8008c7e <_dtoa_r+0x3de>
 8008c26:	2502      	movs	r5, #2
 8008c28:	e7ef      	b.n	8008c0a <_dtoa_r+0x36a>
 8008c2a:	f018 0f01 	tst.w	r8, #1
 8008c2e:	d008      	beq.n	8008c42 <_dtoa_r+0x3a2>
 8008c30:	4630      	mov	r0, r6
 8008c32:	4639      	mov	r1, r7
 8008c34:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008c38:	f7f7 fcde 	bl	80005f8 <__aeabi_dmul>
 8008c3c:	3501      	adds	r5, #1
 8008c3e:	4606      	mov	r6, r0
 8008c40:	460f      	mov	r7, r1
 8008c42:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008c46:	f109 0908 	add.w	r9, r9, #8
 8008c4a:	e7e0      	b.n	8008c0e <_dtoa_r+0x36e>
 8008c4c:	f000 809f 	beq.w	8008d8e <_dtoa_r+0x4ee>
 8008c50:	f1cb 0600 	rsb	r6, fp, #0
 8008c54:	4ba1      	ldr	r3, [pc, #644]	; (8008edc <_dtoa_r+0x63c>)
 8008c56:	4fa2      	ldr	r7, [pc, #648]	; (8008ee0 <_dtoa_r+0x640>)
 8008c58:	f006 020f 	and.w	r2, r6, #15
 8008c5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c64:	ec51 0b18 	vmov	r0, r1, d8
 8008c68:	f7f7 fcc6 	bl	80005f8 <__aeabi_dmul>
 8008c6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c70:	1136      	asrs	r6, r6, #4
 8008c72:	2300      	movs	r3, #0
 8008c74:	2502      	movs	r5, #2
 8008c76:	2e00      	cmp	r6, #0
 8008c78:	d17e      	bne.n	8008d78 <_dtoa_r+0x4d8>
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1d0      	bne.n	8008c20 <_dtoa_r+0x380>
 8008c7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c80:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f000 8084 	beq.w	8008d92 <_dtoa_r+0x4f2>
 8008c8a:	4b96      	ldr	r3, [pc, #600]	; (8008ee4 <_dtoa_r+0x644>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	4640      	mov	r0, r8
 8008c90:	4649      	mov	r1, r9
 8008c92:	f7f7 ff23 	bl	8000adc <__aeabi_dcmplt>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d07b      	beq.n	8008d92 <_dtoa_r+0x4f2>
 8008c9a:	9b04      	ldr	r3, [sp, #16]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d078      	beq.n	8008d92 <_dtoa_r+0x4f2>
 8008ca0:	9b01      	ldr	r3, [sp, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	dd39      	ble.n	8008d1a <_dtoa_r+0x47a>
 8008ca6:	4b90      	ldr	r3, [pc, #576]	; (8008ee8 <_dtoa_r+0x648>)
 8008ca8:	2200      	movs	r2, #0
 8008caa:	4640      	mov	r0, r8
 8008cac:	4649      	mov	r1, r9
 8008cae:	f7f7 fca3 	bl	80005f8 <__aeabi_dmul>
 8008cb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cb6:	9e01      	ldr	r6, [sp, #4]
 8008cb8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008cbc:	3501      	adds	r5, #1
 8008cbe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	f7f7 fc2e 	bl	8000524 <__aeabi_i2d>
 8008cc8:	4642      	mov	r2, r8
 8008cca:	464b      	mov	r3, r9
 8008ccc:	f7f7 fc94 	bl	80005f8 <__aeabi_dmul>
 8008cd0:	4b86      	ldr	r3, [pc, #536]	; (8008eec <_dtoa_r+0x64c>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f7f7 fada 	bl	800028c <__adddf3>
 8008cd8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008cdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ce0:	9303      	str	r3, [sp, #12]
 8008ce2:	2e00      	cmp	r6, #0
 8008ce4:	d158      	bne.n	8008d98 <_dtoa_r+0x4f8>
 8008ce6:	4b82      	ldr	r3, [pc, #520]	; (8008ef0 <_dtoa_r+0x650>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	4640      	mov	r0, r8
 8008cec:	4649      	mov	r1, r9
 8008cee:	f7f7 facb 	bl	8000288 <__aeabi_dsub>
 8008cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cf6:	4680      	mov	r8, r0
 8008cf8:	4689      	mov	r9, r1
 8008cfa:	f7f7 ff0d 	bl	8000b18 <__aeabi_dcmpgt>
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	f040 8296 	bne.w	8009230 <_dtoa_r+0x990>
 8008d04:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008d08:	4640      	mov	r0, r8
 8008d0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d0e:	4649      	mov	r1, r9
 8008d10:	f7f7 fee4 	bl	8000adc <__aeabi_dcmplt>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	f040 8289 	bne.w	800922c <_dtoa_r+0x98c>
 8008d1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008d1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f2c0 814e 	blt.w	8008fc2 <_dtoa_r+0x722>
 8008d26:	f1bb 0f0e 	cmp.w	fp, #14
 8008d2a:	f300 814a 	bgt.w	8008fc2 <_dtoa_r+0x722>
 8008d2e:	4b6b      	ldr	r3, [pc, #428]	; (8008edc <_dtoa_r+0x63c>)
 8008d30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008d34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	f280 80dc 	bge.w	8008ef8 <_dtoa_r+0x658>
 8008d40:	9b04      	ldr	r3, [sp, #16]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f300 80d8 	bgt.w	8008ef8 <_dtoa_r+0x658>
 8008d48:	f040 826f 	bne.w	800922a <_dtoa_r+0x98a>
 8008d4c:	4b68      	ldr	r3, [pc, #416]	; (8008ef0 <_dtoa_r+0x650>)
 8008d4e:	2200      	movs	r2, #0
 8008d50:	4640      	mov	r0, r8
 8008d52:	4649      	mov	r1, r9
 8008d54:	f7f7 fc50 	bl	80005f8 <__aeabi_dmul>
 8008d58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d5c:	f7f7 fed2 	bl	8000b04 <__aeabi_dcmpge>
 8008d60:	9e04      	ldr	r6, [sp, #16]
 8008d62:	4637      	mov	r7, r6
 8008d64:	2800      	cmp	r0, #0
 8008d66:	f040 8245 	bne.w	80091f4 <_dtoa_r+0x954>
 8008d6a:	9d00      	ldr	r5, [sp, #0]
 8008d6c:	2331      	movs	r3, #49	; 0x31
 8008d6e:	f805 3b01 	strb.w	r3, [r5], #1
 8008d72:	f10b 0b01 	add.w	fp, fp, #1
 8008d76:	e241      	b.n	80091fc <_dtoa_r+0x95c>
 8008d78:	07f2      	lsls	r2, r6, #31
 8008d7a:	d505      	bpl.n	8008d88 <_dtoa_r+0x4e8>
 8008d7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d80:	f7f7 fc3a 	bl	80005f8 <__aeabi_dmul>
 8008d84:	3501      	adds	r5, #1
 8008d86:	2301      	movs	r3, #1
 8008d88:	1076      	asrs	r6, r6, #1
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	e773      	b.n	8008c76 <_dtoa_r+0x3d6>
 8008d8e:	2502      	movs	r5, #2
 8008d90:	e775      	b.n	8008c7e <_dtoa_r+0x3de>
 8008d92:	9e04      	ldr	r6, [sp, #16]
 8008d94:	465f      	mov	r7, fp
 8008d96:	e792      	b.n	8008cbe <_dtoa_r+0x41e>
 8008d98:	9900      	ldr	r1, [sp, #0]
 8008d9a:	4b50      	ldr	r3, [pc, #320]	; (8008edc <_dtoa_r+0x63c>)
 8008d9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008da0:	4431      	add	r1, r6
 8008da2:	9102      	str	r1, [sp, #8]
 8008da4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008da6:	eeb0 9a47 	vmov.f32	s18, s14
 8008daa:	eef0 9a67 	vmov.f32	s19, s15
 8008dae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008db2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008db6:	2900      	cmp	r1, #0
 8008db8:	d044      	beq.n	8008e44 <_dtoa_r+0x5a4>
 8008dba:	494e      	ldr	r1, [pc, #312]	; (8008ef4 <_dtoa_r+0x654>)
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	f7f7 fd45 	bl	800084c <__aeabi_ddiv>
 8008dc2:	ec53 2b19 	vmov	r2, r3, d9
 8008dc6:	f7f7 fa5f 	bl	8000288 <__aeabi_dsub>
 8008dca:	9d00      	ldr	r5, [sp, #0]
 8008dcc:	ec41 0b19 	vmov	d9, r0, r1
 8008dd0:	4649      	mov	r1, r9
 8008dd2:	4640      	mov	r0, r8
 8008dd4:	f7f7 fec0 	bl	8000b58 <__aeabi_d2iz>
 8008dd8:	4606      	mov	r6, r0
 8008dda:	f7f7 fba3 	bl	8000524 <__aeabi_i2d>
 8008dde:	4602      	mov	r2, r0
 8008de0:	460b      	mov	r3, r1
 8008de2:	4640      	mov	r0, r8
 8008de4:	4649      	mov	r1, r9
 8008de6:	f7f7 fa4f 	bl	8000288 <__aeabi_dsub>
 8008dea:	3630      	adds	r6, #48	; 0x30
 8008dec:	f805 6b01 	strb.w	r6, [r5], #1
 8008df0:	ec53 2b19 	vmov	r2, r3, d9
 8008df4:	4680      	mov	r8, r0
 8008df6:	4689      	mov	r9, r1
 8008df8:	f7f7 fe70 	bl	8000adc <__aeabi_dcmplt>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	d164      	bne.n	8008eca <_dtoa_r+0x62a>
 8008e00:	4642      	mov	r2, r8
 8008e02:	464b      	mov	r3, r9
 8008e04:	4937      	ldr	r1, [pc, #220]	; (8008ee4 <_dtoa_r+0x644>)
 8008e06:	2000      	movs	r0, #0
 8008e08:	f7f7 fa3e 	bl	8000288 <__aeabi_dsub>
 8008e0c:	ec53 2b19 	vmov	r2, r3, d9
 8008e10:	f7f7 fe64 	bl	8000adc <__aeabi_dcmplt>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	f040 80b6 	bne.w	8008f86 <_dtoa_r+0x6e6>
 8008e1a:	9b02      	ldr	r3, [sp, #8]
 8008e1c:	429d      	cmp	r5, r3
 8008e1e:	f43f af7c 	beq.w	8008d1a <_dtoa_r+0x47a>
 8008e22:	4b31      	ldr	r3, [pc, #196]	; (8008ee8 <_dtoa_r+0x648>)
 8008e24:	ec51 0b19 	vmov	r0, r1, d9
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f7f7 fbe5 	bl	80005f8 <__aeabi_dmul>
 8008e2e:	4b2e      	ldr	r3, [pc, #184]	; (8008ee8 <_dtoa_r+0x648>)
 8008e30:	ec41 0b19 	vmov	d9, r0, r1
 8008e34:	2200      	movs	r2, #0
 8008e36:	4640      	mov	r0, r8
 8008e38:	4649      	mov	r1, r9
 8008e3a:	f7f7 fbdd 	bl	80005f8 <__aeabi_dmul>
 8008e3e:	4680      	mov	r8, r0
 8008e40:	4689      	mov	r9, r1
 8008e42:	e7c5      	b.n	8008dd0 <_dtoa_r+0x530>
 8008e44:	ec51 0b17 	vmov	r0, r1, d7
 8008e48:	f7f7 fbd6 	bl	80005f8 <__aeabi_dmul>
 8008e4c:	9b02      	ldr	r3, [sp, #8]
 8008e4e:	9d00      	ldr	r5, [sp, #0]
 8008e50:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e52:	ec41 0b19 	vmov	d9, r0, r1
 8008e56:	4649      	mov	r1, r9
 8008e58:	4640      	mov	r0, r8
 8008e5a:	f7f7 fe7d 	bl	8000b58 <__aeabi_d2iz>
 8008e5e:	4606      	mov	r6, r0
 8008e60:	f7f7 fb60 	bl	8000524 <__aeabi_i2d>
 8008e64:	3630      	adds	r6, #48	; 0x30
 8008e66:	4602      	mov	r2, r0
 8008e68:	460b      	mov	r3, r1
 8008e6a:	4640      	mov	r0, r8
 8008e6c:	4649      	mov	r1, r9
 8008e6e:	f7f7 fa0b 	bl	8000288 <__aeabi_dsub>
 8008e72:	f805 6b01 	strb.w	r6, [r5], #1
 8008e76:	9b02      	ldr	r3, [sp, #8]
 8008e78:	429d      	cmp	r5, r3
 8008e7a:	4680      	mov	r8, r0
 8008e7c:	4689      	mov	r9, r1
 8008e7e:	f04f 0200 	mov.w	r2, #0
 8008e82:	d124      	bne.n	8008ece <_dtoa_r+0x62e>
 8008e84:	4b1b      	ldr	r3, [pc, #108]	; (8008ef4 <_dtoa_r+0x654>)
 8008e86:	ec51 0b19 	vmov	r0, r1, d9
 8008e8a:	f7f7 f9ff 	bl	800028c <__adddf3>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	460b      	mov	r3, r1
 8008e92:	4640      	mov	r0, r8
 8008e94:	4649      	mov	r1, r9
 8008e96:	f7f7 fe3f 	bl	8000b18 <__aeabi_dcmpgt>
 8008e9a:	2800      	cmp	r0, #0
 8008e9c:	d173      	bne.n	8008f86 <_dtoa_r+0x6e6>
 8008e9e:	ec53 2b19 	vmov	r2, r3, d9
 8008ea2:	4914      	ldr	r1, [pc, #80]	; (8008ef4 <_dtoa_r+0x654>)
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	f7f7 f9ef 	bl	8000288 <__aeabi_dsub>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	460b      	mov	r3, r1
 8008eae:	4640      	mov	r0, r8
 8008eb0:	4649      	mov	r1, r9
 8008eb2:	f7f7 fe13 	bl	8000adc <__aeabi_dcmplt>
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	f43f af2f 	beq.w	8008d1a <_dtoa_r+0x47a>
 8008ebc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008ebe:	1e6b      	subs	r3, r5, #1
 8008ec0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ec2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008ec6:	2b30      	cmp	r3, #48	; 0x30
 8008ec8:	d0f8      	beq.n	8008ebc <_dtoa_r+0x61c>
 8008eca:	46bb      	mov	fp, r7
 8008ecc:	e04a      	b.n	8008f64 <_dtoa_r+0x6c4>
 8008ece:	4b06      	ldr	r3, [pc, #24]	; (8008ee8 <_dtoa_r+0x648>)
 8008ed0:	f7f7 fb92 	bl	80005f8 <__aeabi_dmul>
 8008ed4:	4680      	mov	r8, r0
 8008ed6:	4689      	mov	r9, r1
 8008ed8:	e7bd      	b.n	8008e56 <_dtoa_r+0x5b6>
 8008eda:	bf00      	nop
 8008edc:	0800a780 	.word	0x0800a780
 8008ee0:	0800a758 	.word	0x0800a758
 8008ee4:	3ff00000 	.word	0x3ff00000
 8008ee8:	40240000 	.word	0x40240000
 8008eec:	401c0000 	.word	0x401c0000
 8008ef0:	40140000 	.word	0x40140000
 8008ef4:	3fe00000 	.word	0x3fe00000
 8008ef8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008efc:	9d00      	ldr	r5, [sp, #0]
 8008efe:	4642      	mov	r2, r8
 8008f00:	464b      	mov	r3, r9
 8008f02:	4630      	mov	r0, r6
 8008f04:	4639      	mov	r1, r7
 8008f06:	f7f7 fca1 	bl	800084c <__aeabi_ddiv>
 8008f0a:	f7f7 fe25 	bl	8000b58 <__aeabi_d2iz>
 8008f0e:	9001      	str	r0, [sp, #4]
 8008f10:	f7f7 fb08 	bl	8000524 <__aeabi_i2d>
 8008f14:	4642      	mov	r2, r8
 8008f16:	464b      	mov	r3, r9
 8008f18:	f7f7 fb6e 	bl	80005f8 <__aeabi_dmul>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	460b      	mov	r3, r1
 8008f20:	4630      	mov	r0, r6
 8008f22:	4639      	mov	r1, r7
 8008f24:	f7f7 f9b0 	bl	8000288 <__aeabi_dsub>
 8008f28:	9e01      	ldr	r6, [sp, #4]
 8008f2a:	9f04      	ldr	r7, [sp, #16]
 8008f2c:	3630      	adds	r6, #48	; 0x30
 8008f2e:	f805 6b01 	strb.w	r6, [r5], #1
 8008f32:	9e00      	ldr	r6, [sp, #0]
 8008f34:	1bae      	subs	r6, r5, r6
 8008f36:	42b7      	cmp	r7, r6
 8008f38:	4602      	mov	r2, r0
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	d134      	bne.n	8008fa8 <_dtoa_r+0x708>
 8008f3e:	f7f7 f9a5 	bl	800028c <__adddf3>
 8008f42:	4642      	mov	r2, r8
 8008f44:	464b      	mov	r3, r9
 8008f46:	4606      	mov	r6, r0
 8008f48:	460f      	mov	r7, r1
 8008f4a:	f7f7 fde5 	bl	8000b18 <__aeabi_dcmpgt>
 8008f4e:	b9c8      	cbnz	r0, 8008f84 <_dtoa_r+0x6e4>
 8008f50:	4642      	mov	r2, r8
 8008f52:	464b      	mov	r3, r9
 8008f54:	4630      	mov	r0, r6
 8008f56:	4639      	mov	r1, r7
 8008f58:	f7f7 fdb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f5c:	b110      	cbz	r0, 8008f64 <_dtoa_r+0x6c4>
 8008f5e:	9b01      	ldr	r3, [sp, #4]
 8008f60:	07db      	lsls	r3, r3, #31
 8008f62:	d40f      	bmi.n	8008f84 <_dtoa_r+0x6e4>
 8008f64:	4651      	mov	r1, sl
 8008f66:	4620      	mov	r0, r4
 8008f68:	f000 fbcc 	bl	8009704 <_Bfree>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f70:	702b      	strb	r3, [r5, #0]
 8008f72:	f10b 0301 	add.w	r3, fp, #1
 8008f76:	6013      	str	r3, [r2, #0]
 8008f78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f43f ace2 	beq.w	8008944 <_dtoa_r+0xa4>
 8008f80:	601d      	str	r5, [r3, #0]
 8008f82:	e4df      	b.n	8008944 <_dtoa_r+0xa4>
 8008f84:	465f      	mov	r7, fp
 8008f86:	462b      	mov	r3, r5
 8008f88:	461d      	mov	r5, r3
 8008f8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f8e:	2a39      	cmp	r2, #57	; 0x39
 8008f90:	d106      	bne.n	8008fa0 <_dtoa_r+0x700>
 8008f92:	9a00      	ldr	r2, [sp, #0]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d1f7      	bne.n	8008f88 <_dtoa_r+0x6e8>
 8008f98:	9900      	ldr	r1, [sp, #0]
 8008f9a:	2230      	movs	r2, #48	; 0x30
 8008f9c:	3701      	adds	r7, #1
 8008f9e:	700a      	strb	r2, [r1, #0]
 8008fa0:	781a      	ldrb	r2, [r3, #0]
 8008fa2:	3201      	adds	r2, #1
 8008fa4:	701a      	strb	r2, [r3, #0]
 8008fa6:	e790      	b.n	8008eca <_dtoa_r+0x62a>
 8008fa8:	4ba3      	ldr	r3, [pc, #652]	; (8009238 <_dtoa_r+0x998>)
 8008faa:	2200      	movs	r2, #0
 8008fac:	f7f7 fb24 	bl	80005f8 <__aeabi_dmul>
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	4606      	mov	r6, r0
 8008fb6:	460f      	mov	r7, r1
 8008fb8:	f7f7 fd86 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	d09e      	beq.n	8008efe <_dtoa_r+0x65e>
 8008fc0:	e7d0      	b.n	8008f64 <_dtoa_r+0x6c4>
 8008fc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fc4:	2a00      	cmp	r2, #0
 8008fc6:	f000 80ca 	beq.w	800915e <_dtoa_r+0x8be>
 8008fca:	9a07      	ldr	r2, [sp, #28]
 8008fcc:	2a01      	cmp	r2, #1
 8008fce:	f300 80ad 	bgt.w	800912c <_dtoa_r+0x88c>
 8008fd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fd4:	2a00      	cmp	r2, #0
 8008fd6:	f000 80a5 	beq.w	8009124 <_dtoa_r+0x884>
 8008fda:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008fde:	9e08      	ldr	r6, [sp, #32]
 8008fe0:	9d05      	ldr	r5, [sp, #20]
 8008fe2:	9a05      	ldr	r2, [sp, #20]
 8008fe4:	441a      	add	r2, r3
 8008fe6:	9205      	str	r2, [sp, #20]
 8008fe8:	9a06      	ldr	r2, [sp, #24]
 8008fea:	2101      	movs	r1, #1
 8008fec:	441a      	add	r2, r3
 8008fee:	4620      	mov	r0, r4
 8008ff0:	9206      	str	r2, [sp, #24]
 8008ff2:	f000 fc3d 	bl	8009870 <__i2b>
 8008ff6:	4607      	mov	r7, r0
 8008ff8:	b165      	cbz	r5, 8009014 <_dtoa_r+0x774>
 8008ffa:	9b06      	ldr	r3, [sp, #24]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	dd09      	ble.n	8009014 <_dtoa_r+0x774>
 8009000:	42ab      	cmp	r3, r5
 8009002:	9a05      	ldr	r2, [sp, #20]
 8009004:	bfa8      	it	ge
 8009006:	462b      	movge	r3, r5
 8009008:	1ad2      	subs	r2, r2, r3
 800900a:	9205      	str	r2, [sp, #20]
 800900c:	9a06      	ldr	r2, [sp, #24]
 800900e:	1aed      	subs	r5, r5, r3
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	9306      	str	r3, [sp, #24]
 8009014:	9b08      	ldr	r3, [sp, #32]
 8009016:	b1f3      	cbz	r3, 8009056 <_dtoa_r+0x7b6>
 8009018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 80a3 	beq.w	8009166 <_dtoa_r+0x8c6>
 8009020:	2e00      	cmp	r6, #0
 8009022:	dd10      	ble.n	8009046 <_dtoa_r+0x7a6>
 8009024:	4639      	mov	r1, r7
 8009026:	4632      	mov	r2, r6
 8009028:	4620      	mov	r0, r4
 800902a:	f000 fce1 	bl	80099f0 <__pow5mult>
 800902e:	4652      	mov	r2, sl
 8009030:	4601      	mov	r1, r0
 8009032:	4607      	mov	r7, r0
 8009034:	4620      	mov	r0, r4
 8009036:	f000 fc31 	bl	800989c <__multiply>
 800903a:	4651      	mov	r1, sl
 800903c:	4680      	mov	r8, r0
 800903e:	4620      	mov	r0, r4
 8009040:	f000 fb60 	bl	8009704 <_Bfree>
 8009044:	46c2      	mov	sl, r8
 8009046:	9b08      	ldr	r3, [sp, #32]
 8009048:	1b9a      	subs	r2, r3, r6
 800904a:	d004      	beq.n	8009056 <_dtoa_r+0x7b6>
 800904c:	4651      	mov	r1, sl
 800904e:	4620      	mov	r0, r4
 8009050:	f000 fcce 	bl	80099f0 <__pow5mult>
 8009054:	4682      	mov	sl, r0
 8009056:	2101      	movs	r1, #1
 8009058:	4620      	mov	r0, r4
 800905a:	f000 fc09 	bl	8009870 <__i2b>
 800905e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009060:	2b00      	cmp	r3, #0
 8009062:	4606      	mov	r6, r0
 8009064:	f340 8081 	ble.w	800916a <_dtoa_r+0x8ca>
 8009068:	461a      	mov	r2, r3
 800906a:	4601      	mov	r1, r0
 800906c:	4620      	mov	r0, r4
 800906e:	f000 fcbf 	bl	80099f0 <__pow5mult>
 8009072:	9b07      	ldr	r3, [sp, #28]
 8009074:	2b01      	cmp	r3, #1
 8009076:	4606      	mov	r6, r0
 8009078:	dd7a      	ble.n	8009170 <_dtoa_r+0x8d0>
 800907a:	f04f 0800 	mov.w	r8, #0
 800907e:	6933      	ldr	r3, [r6, #16]
 8009080:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009084:	6918      	ldr	r0, [r3, #16]
 8009086:	f000 fba5 	bl	80097d4 <__hi0bits>
 800908a:	f1c0 0020 	rsb	r0, r0, #32
 800908e:	9b06      	ldr	r3, [sp, #24]
 8009090:	4418      	add	r0, r3
 8009092:	f010 001f 	ands.w	r0, r0, #31
 8009096:	f000 8094 	beq.w	80091c2 <_dtoa_r+0x922>
 800909a:	f1c0 0320 	rsb	r3, r0, #32
 800909e:	2b04      	cmp	r3, #4
 80090a0:	f340 8085 	ble.w	80091ae <_dtoa_r+0x90e>
 80090a4:	9b05      	ldr	r3, [sp, #20]
 80090a6:	f1c0 001c 	rsb	r0, r0, #28
 80090aa:	4403      	add	r3, r0
 80090ac:	9305      	str	r3, [sp, #20]
 80090ae:	9b06      	ldr	r3, [sp, #24]
 80090b0:	4403      	add	r3, r0
 80090b2:	4405      	add	r5, r0
 80090b4:	9306      	str	r3, [sp, #24]
 80090b6:	9b05      	ldr	r3, [sp, #20]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	dd05      	ble.n	80090c8 <_dtoa_r+0x828>
 80090bc:	4651      	mov	r1, sl
 80090be:	461a      	mov	r2, r3
 80090c0:	4620      	mov	r0, r4
 80090c2:	f000 fcef 	bl	8009aa4 <__lshift>
 80090c6:	4682      	mov	sl, r0
 80090c8:	9b06      	ldr	r3, [sp, #24]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	dd05      	ble.n	80090da <_dtoa_r+0x83a>
 80090ce:	4631      	mov	r1, r6
 80090d0:	461a      	mov	r2, r3
 80090d2:	4620      	mov	r0, r4
 80090d4:	f000 fce6 	bl	8009aa4 <__lshift>
 80090d8:	4606      	mov	r6, r0
 80090da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d072      	beq.n	80091c6 <_dtoa_r+0x926>
 80090e0:	4631      	mov	r1, r6
 80090e2:	4650      	mov	r0, sl
 80090e4:	f000 fd4a 	bl	8009b7c <__mcmp>
 80090e8:	2800      	cmp	r0, #0
 80090ea:	da6c      	bge.n	80091c6 <_dtoa_r+0x926>
 80090ec:	2300      	movs	r3, #0
 80090ee:	4651      	mov	r1, sl
 80090f0:	220a      	movs	r2, #10
 80090f2:	4620      	mov	r0, r4
 80090f4:	f000 fb28 	bl	8009748 <__multadd>
 80090f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80090fe:	4682      	mov	sl, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	f000 81b0 	beq.w	8009466 <_dtoa_r+0xbc6>
 8009106:	2300      	movs	r3, #0
 8009108:	4639      	mov	r1, r7
 800910a:	220a      	movs	r2, #10
 800910c:	4620      	mov	r0, r4
 800910e:	f000 fb1b 	bl	8009748 <__multadd>
 8009112:	9b01      	ldr	r3, [sp, #4]
 8009114:	2b00      	cmp	r3, #0
 8009116:	4607      	mov	r7, r0
 8009118:	f300 8096 	bgt.w	8009248 <_dtoa_r+0x9a8>
 800911c:	9b07      	ldr	r3, [sp, #28]
 800911e:	2b02      	cmp	r3, #2
 8009120:	dc59      	bgt.n	80091d6 <_dtoa_r+0x936>
 8009122:	e091      	b.n	8009248 <_dtoa_r+0x9a8>
 8009124:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009126:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800912a:	e758      	b.n	8008fde <_dtoa_r+0x73e>
 800912c:	9b04      	ldr	r3, [sp, #16]
 800912e:	1e5e      	subs	r6, r3, #1
 8009130:	9b08      	ldr	r3, [sp, #32]
 8009132:	42b3      	cmp	r3, r6
 8009134:	bfbf      	itttt	lt
 8009136:	9b08      	ldrlt	r3, [sp, #32]
 8009138:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800913a:	9608      	strlt	r6, [sp, #32]
 800913c:	1af3      	sublt	r3, r6, r3
 800913e:	bfb4      	ite	lt
 8009140:	18d2      	addlt	r2, r2, r3
 8009142:	1b9e      	subge	r6, r3, r6
 8009144:	9b04      	ldr	r3, [sp, #16]
 8009146:	bfbc      	itt	lt
 8009148:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800914a:	2600      	movlt	r6, #0
 800914c:	2b00      	cmp	r3, #0
 800914e:	bfb7      	itett	lt
 8009150:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009154:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009158:	1a9d      	sublt	r5, r3, r2
 800915a:	2300      	movlt	r3, #0
 800915c:	e741      	b.n	8008fe2 <_dtoa_r+0x742>
 800915e:	9e08      	ldr	r6, [sp, #32]
 8009160:	9d05      	ldr	r5, [sp, #20]
 8009162:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009164:	e748      	b.n	8008ff8 <_dtoa_r+0x758>
 8009166:	9a08      	ldr	r2, [sp, #32]
 8009168:	e770      	b.n	800904c <_dtoa_r+0x7ac>
 800916a:	9b07      	ldr	r3, [sp, #28]
 800916c:	2b01      	cmp	r3, #1
 800916e:	dc19      	bgt.n	80091a4 <_dtoa_r+0x904>
 8009170:	9b02      	ldr	r3, [sp, #8]
 8009172:	b9bb      	cbnz	r3, 80091a4 <_dtoa_r+0x904>
 8009174:	9b03      	ldr	r3, [sp, #12]
 8009176:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800917a:	b99b      	cbnz	r3, 80091a4 <_dtoa_r+0x904>
 800917c:	9b03      	ldr	r3, [sp, #12]
 800917e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009182:	0d1b      	lsrs	r3, r3, #20
 8009184:	051b      	lsls	r3, r3, #20
 8009186:	b183      	cbz	r3, 80091aa <_dtoa_r+0x90a>
 8009188:	9b05      	ldr	r3, [sp, #20]
 800918a:	3301      	adds	r3, #1
 800918c:	9305      	str	r3, [sp, #20]
 800918e:	9b06      	ldr	r3, [sp, #24]
 8009190:	3301      	adds	r3, #1
 8009192:	9306      	str	r3, [sp, #24]
 8009194:	f04f 0801 	mov.w	r8, #1
 8009198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800919a:	2b00      	cmp	r3, #0
 800919c:	f47f af6f 	bne.w	800907e <_dtoa_r+0x7de>
 80091a0:	2001      	movs	r0, #1
 80091a2:	e774      	b.n	800908e <_dtoa_r+0x7ee>
 80091a4:	f04f 0800 	mov.w	r8, #0
 80091a8:	e7f6      	b.n	8009198 <_dtoa_r+0x8f8>
 80091aa:	4698      	mov	r8, r3
 80091ac:	e7f4      	b.n	8009198 <_dtoa_r+0x8f8>
 80091ae:	d082      	beq.n	80090b6 <_dtoa_r+0x816>
 80091b0:	9a05      	ldr	r2, [sp, #20]
 80091b2:	331c      	adds	r3, #28
 80091b4:	441a      	add	r2, r3
 80091b6:	9205      	str	r2, [sp, #20]
 80091b8:	9a06      	ldr	r2, [sp, #24]
 80091ba:	441a      	add	r2, r3
 80091bc:	441d      	add	r5, r3
 80091be:	9206      	str	r2, [sp, #24]
 80091c0:	e779      	b.n	80090b6 <_dtoa_r+0x816>
 80091c2:	4603      	mov	r3, r0
 80091c4:	e7f4      	b.n	80091b0 <_dtoa_r+0x910>
 80091c6:	9b04      	ldr	r3, [sp, #16]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	dc37      	bgt.n	800923c <_dtoa_r+0x99c>
 80091cc:	9b07      	ldr	r3, [sp, #28]
 80091ce:	2b02      	cmp	r3, #2
 80091d0:	dd34      	ble.n	800923c <_dtoa_r+0x99c>
 80091d2:	9b04      	ldr	r3, [sp, #16]
 80091d4:	9301      	str	r3, [sp, #4]
 80091d6:	9b01      	ldr	r3, [sp, #4]
 80091d8:	b963      	cbnz	r3, 80091f4 <_dtoa_r+0x954>
 80091da:	4631      	mov	r1, r6
 80091dc:	2205      	movs	r2, #5
 80091de:	4620      	mov	r0, r4
 80091e0:	f000 fab2 	bl	8009748 <__multadd>
 80091e4:	4601      	mov	r1, r0
 80091e6:	4606      	mov	r6, r0
 80091e8:	4650      	mov	r0, sl
 80091ea:	f000 fcc7 	bl	8009b7c <__mcmp>
 80091ee:	2800      	cmp	r0, #0
 80091f0:	f73f adbb 	bgt.w	8008d6a <_dtoa_r+0x4ca>
 80091f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091f6:	9d00      	ldr	r5, [sp, #0]
 80091f8:	ea6f 0b03 	mvn.w	fp, r3
 80091fc:	f04f 0800 	mov.w	r8, #0
 8009200:	4631      	mov	r1, r6
 8009202:	4620      	mov	r0, r4
 8009204:	f000 fa7e 	bl	8009704 <_Bfree>
 8009208:	2f00      	cmp	r7, #0
 800920a:	f43f aeab 	beq.w	8008f64 <_dtoa_r+0x6c4>
 800920e:	f1b8 0f00 	cmp.w	r8, #0
 8009212:	d005      	beq.n	8009220 <_dtoa_r+0x980>
 8009214:	45b8      	cmp	r8, r7
 8009216:	d003      	beq.n	8009220 <_dtoa_r+0x980>
 8009218:	4641      	mov	r1, r8
 800921a:	4620      	mov	r0, r4
 800921c:	f000 fa72 	bl	8009704 <_Bfree>
 8009220:	4639      	mov	r1, r7
 8009222:	4620      	mov	r0, r4
 8009224:	f000 fa6e 	bl	8009704 <_Bfree>
 8009228:	e69c      	b.n	8008f64 <_dtoa_r+0x6c4>
 800922a:	2600      	movs	r6, #0
 800922c:	4637      	mov	r7, r6
 800922e:	e7e1      	b.n	80091f4 <_dtoa_r+0x954>
 8009230:	46bb      	mov	fp, r7
 8009232:	4637      	mov	r7, r6
 8009234:	e599      	b.n	8008d6a <_dtoa_r+0x4ca>
 8009236:	bf00      	nop
 8009238:	40240000 	.word	0x40240000
 800923c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800923e:	2b00      	cmp	r3, #0
 8009240:	f000 80c8 	beq.w	80093d4 <_dtoa_r+0xb34>
 8009244:	9b04      	ldr	r3, [sp, #16]
 8009246:	9301      	str	r3, [sp, #4]
 8009248:	2d00      	cmp	r5, #0
 800924a:	dd05      	ble.n	8009258 <_dtoa_r+0x9b8>
 800924c:	4639      	mov	r1, r7
 800924e:	462a      	mov	r2, r5
 8009250:	4620      	mov	r0, r4
 8009252:	f000 fc27 	bl	8009aa4 <__lshift>
 8009256:	4607      	mov	r7, r0
 8009258:	f1b8 0f00 	cmp.w	r8, #0
 800925c:	d05b      	beq.n	8009316 <_dtoa_r+0xa76>
 800925e:	6879      	ldr	r1, [r7, #4]
 8009260:	4620      	mov	r0, r4
 8009262:	f000 fa0f 	bl	8009684 <_Balloc>
 8009266:	4605      	mov	r5, r0
 8009268:	b928      	cbnz	r0, 8009276 <_dtoa_r+0x9d6>
 800926a:	4b83      	ldr	r3, [pc, #524]	; (8009478 <_dtoa_r+0xbd8>)
 800926c:	4602      	mov	r2, r0
 800926e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009272:	f7ff bb2e 	b.w	80088d2 <_dtoa_r+0x32>
 8009276:	693a      	ldr	r2, [r7, #16]
 8009278:	3202      	adds	r2, #2
 800927a:	0092      	lsls	r2, r2, #2
 800927c:	f107 010c 	add.w	r1, r7, #12
 8009280:	300c      	adds	r0, #12
 8009282:	f7ff fa76 	bl	8008772 <memcpy>
 8009286:	2201      	movs	r2, #1
 8009288:	4629      	mov	r1, r5
 800928a:	4620      	mov	r0, r4
 800928c:	f000 fc0a 	bl	8009aa4 <__lshift>
 8009290:	9b00      	ldr	r3, [sp, #0]
 8009292:	3301      	adds	r3, #1
 8009294:	9304      	str	r3, [sp, #16]
 8009296:	e9dd 2300 	ldrd	r2, r3, [sp]
 800929a:	4413      	add	r3, r2
 800929c:	9308      	str	r3, [sp, #32]
 800929e:	9b02      	ldr	r3, [sp, #8]
 80092a0:	f003 0301 	and.w	r3, r3, #1
 80092a4:	46b8      	mov	r8, r7
 80092a6:	9306      	str	r3, [sp, #24]
 80092a8:	4607      	mov	r7, r0
 80092aa:	9b04      	ldr	r3, [sp, #16]
 80092ac:	4631      	mov	r1, r6
 80092ae:	3b01      	subs	r3, #1
 80092b0:	4650      	mov	r0, sl
 80092b2:	9301      	str	r3, [sp, #4]
 80092b4:	f7ff fa6b 	bl	800878e <quorem>
 80092b8:	4641      	mov	r1, r8
 80092ba:	9002      	str	r0, [sp, #8]
 80092bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80092c0:	4650      	mov	r0, sl
 80092c2:	f000 fc5b 	bl	8009b7c <__mcmp>
 80092c6:	463a      	mov	r2, r7
 80092c8:	9005      	str	r0, [sp, #20]
 80092ca:	4631      	mov	r1, r6
 80092cc:	4620      	mov	r0, r4
 80092ce:	f000 fc71 	bl	8009bb4 <__mdiff>
 80092d2:	68c2      	ldr	r2, [r0, #12]
 80092d4:	4605      	mov	r5, r0
 80092d6:	bb02      	cbnz	r2, 800931a <_dtoa_r+0xa7a>
 80092d8:	4601      	mov	r1, r0
 80092da:	4650      	mov	r0, sl
 80092dc:	f000 fc4e 	bl	8009b7c <__mcmp>
 80092e0:	4602      	mov	r2, r0
 80092e2:	4629      	mov	r1, r5
 80092e4:	4620      	mov	r0, r4
 80092e6:	9209      	str	r2, [sp, #36]	; 0x24
 80092e8:	f000 fa0c 	bl	8009704 <_Bfree>
 80092ec:	9b07      	ldr	r3, [sp, #28]
 80092ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092f0:	9d04      	ldr	r5, [sp, #16]
 80092f2:	ea43 0102 	orr.w	r1, r3, r2
 80092f6:	9b06      	ldr	r3, [sp, #24]
 80092f8:	4319      	orrs	r1, r3
 80092fa:	d110      	bne.n	800931e <_dtoa_r+0xa7e>
 80092fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009300:	d029      	beq.n	8009356 <_dtoa_r+0xab6>
 8009302:	9b05      	ldr	r3, [sp, #20]
 8009304:	2b00      	cmp	r3, #0
 8009306:	dd02      	ble.n	800930e <_dtoa_r+0xa6e>
 8009308:	9b02      	ldr	r3, [sp, #8]
 800930a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800930e:	9b01      	ldr	r3, [sp, #4]
 8009310:	f883 9000 	strb.w	r9, [r3]
 8009314:	e774      	b.n	8009200 <_dtoa_r+0x960>
 8009316:	4638      	mov	r0, r7
 8009318:	e7ba      	b.n	8009290 <_dtoa_r+0x9f0>
 800931a:	2201      	movs	r2, #1
 800931c:	e7e1      	b.n	80092e2 <_dtoa_r+0xa42>
 800931e:	9b05      	ldr	r3, [sp, #20]
 8009320:	2b00      	cmp	r3, #0
 8009322:	db04      	blt.n	800932e <_dtoa_r+0xa8e>
 8009324:	9907      	ldr	r1, [sp, #28]
 8009326:	430b      	orrs	r3, r1
 8009328:	9906      	ldr	r1, [sp, #24]
 800932a:	430b      	orrs	r3, r1
 800932c:	d120      	bne.n	8009370 <_dtoa_r+0xad0>
 800932e:	2a00      	cmp	r2, #0
 8009330:	dded      	ble.n	800930e <_dtoa_r+0xa6e>
 8009332:	4651      	mov	r1, sl
 8009334:	2201      	movs	r2, #1
 8009336:	4620      	mov	r0, r4
 8009338:	f000 fbb4 	bl	8009aa4 <__lshift>
 800933c:	4631      	mov	r1, r6
 800933e:	4682      	mov	sl, r0
 8009340:	f000 fc1c 	bl	8009b7c <__mcmp>
 8009344:	2800      	cmp	r0, #0
 8009346:	dc03      	bgt.n	8009350 <_dtoa_r+0xab0>
 8009348:	d1e1      	bne.n	800930e <_dtoa_r+0xa6e>
 800934a:	f019 0f01 	tst.w	r9, #1
 800934e:	d0de      	beq.n	800930e <_dtoa_r+0xa6e>
 8009350:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009354:	d1d8      	bne.n	8009308 <_dtoa_r+0xa68>
 8009356:	9a01      	ldr	r2, [sp, #4]
 8009358:	2339      	movs	r3, #57	; 0x39
 800935a:	7013      	strb	r3, [r2, #0]
 800935c:	462b      	mov	r3, r5
 800935e:	461d      	mov	r5, r3
 8009360:	3b01      	subs	r3, #1
 8009362:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009366:	2a39      	cmp	r2, #57	; 0x39
 8009368:	d06c      	beq.n	8009444 <_dtoa_r+0xba4>
 800936a:	3201      	adds	r2, #1
 800936c:	701a      	strb	r2, [r3, #0]
 800936e:	e747      	b.n	8009200 <_dtoa_r+0x960>
 8009370:	2a00      	cmp	r2, #0
 8009372:	dd07      	ble.n	8009384 <_dtoa_r+0xae4>
 8009374:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009378:	d0ed      	beq.n	8009356 <_dtoa_r+0xab6>
 800937a:	9a01      	ldr	r2, [sp, #4]
 800937c:	f109 0301 	add.w	r3, r9, #1
 8009380:	7013      	strb	r3, [r2, #0]
 8009382:	e73d      	b.n	8009200 <_dtoa_r+0x960>
 8009384:	9b04      	ldr	r3, [sp, #16]
 8009386:	9a08      	ldr	r2, [sp, #32]
 8009388:	f803 9c01 	strb.w	r9, [r3, #-1]
 800938c:	4293      	cmp	r3, r2
 800938e:	d043      	beq.n	8009418 <_dtoa_r+0xb78>
 8009390:	4651      	mov	r1, sl
 8009392:	2300      	movs	r3, #0
 8009394:	220a      	movs	r2, #10
 8009396:	4620      	mov	r0, r4
 8009398:	f000 f9d6 	bl	8009748 <__multadd>
 800939c:	45b8      	cmp	r8, r7
 800939e:	4682      	mov	sl, r0
 80093a0:	f04f 0300 	mov.w	r3, #0
 80093a4:	f04f 020a 	mov.w	r2, #10
 80093a8:	4641      	mov	r1, r8
 80093aa:	4620      	mov	r0, r4
 80093ac:	d107      	bne.n	80093be <_dtoa_r+0xb1e>
 80093ae:	f000 f9cb 	bl	8009748 <__multadd>
 80093b2:	4680      	mov	r8, r0
 80093b4:	4607      	mov	r7, r0
 80093b6:	9b04      	ldr	r3, [sp, #16]
 80093b8:	3301      	adds	r3, #1
 80093ba:	9304      	str	r3, [sp, #16]
 80093bc:	e775      	b.n	80092aa <_dtoa_r+0xa0a>
 80093be:	f000 f9c3 	bl	8009748 <__multadd>
 80093c2:	4639      	mov	r1, r7
 80093c4:	4680      	mov	r8, r0
 80093c6:	2300      	movs	r3, #0
 80093c8:	220a      	movs	r2, #10
 80093ca:	4620      	mov	r0, r4
 80093cc:	f000 f9bc 	bl	8009748 <__multadd>
 80093d0:	4607      	mov	r7, r0
 80093d2:	e7f0      	b.n	80093b6 <_dtoa_r+0xb16>
 80093d4:	9b04      	ldr	r3, [sp, #16]
 80093d6:	9301      	str	r3, [sp, #4]
 80093d8:	9d00      	ldr	r5, [sp, #0]
 80093da:	4631      	mov	r1, r6
 80093dc:	4650      	mov	r0, sl
 80093de:	f7ff f9d6 	bl	800878e <quorem>
 80093e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80093e6:	9b00      	ldr	r3, [sp, #0]
 80093e8:	f805 9b01 	strb.w	r9, [r5], #1
 80093ec:	1aea      	subs	r2, r5, r3
 80093ee:	9b01      	ldr	r3, [sp, #4]
 80093f0:	4293      	cmp	r3, r2
 80093f2:	dd07      	ble.n	8009404 <_dtoa_r+0xb64>
 80093f4:	4651      	mov	r1, sl
 80093f6:	2300      	movs	r3, #0
 80093f8:	220a      	movs	r2, #10
 80093fa:	4620      	mov	r0, r4
 80093fc:	f000 f9a4 	bl	8009748 <__multadd>
 8009400:	4682      	mov	sl, r0
 8009402:	e7ea      	b.n	80093da <_dtoa_r+0xb3a>
 8009404:	9b01      	ldr	r3, [sp, #4]
 8009406:	2b00      	cmp	r3, #0
 8009408:	bfc8      	it	gt
 800940a:	461d      	movgt	r5, r3
 800940c:	9b00      	ldr	r3, [sp, #0]
 800940e:	bfd8      	it	le
 8009410:	2501      	movle	r5, #1
 8009412:	441d      	add	r5, r3
 8009414:	f04f 0800 	mov.w	r8, #0
 8009418:	4651      	mov	r1, sl
 800941a:	2201      	movs	r2, #1
 800941c:	4620      	mov	r0, r4
 800941e:	f000 fb41 	bl	8009aa4 <__lshift>
 8009422:	4631      	mov	r1, r6
 8009424:	4682      	mov	sl, r0
 8009426:	f000 fba9 	bl	8009b7c <__mcmp>
 800942a:	2800      	cmp	r0, #0
 800942c:	dc96      	bgt.n	800935c <_dtoa_r+0xabc>
 800942e:	d102      	bne.n	8009436 <_dtoa_r+0xb96>
 8009430:	f019 0f01 	tst.w	r9, #1
 8009434:	d192      	bne.n	800935c <_dtoa_r+0xabc>
 8009436:	462b      	mov	r3, r5
 8009438:	461d      	mov	r5, r3
 800943a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800943e:	2a30      	cmp	r2, #48	; 0x30
 8009440:	d0fa      	beq.n	8009438 <_dtoa_r+0xb98>
 8009442:	e6dd      	b.n	8009200 <_dtoa_r+0x960>
 8009444:	9a00      	ldr	r2, [sp, #0]
 8009446:	429a      	cmp	r2, r3
 8009448:	d189      	bne.n	800935e <_dtoa_r+0xabe>
 800944a:	f10b 0b01 	add.w	fp, fp, #1
 800944e:	2331      	movs	r3, #49	; 0x31
 8009450:	e796      	b.n	8009380 <_dtoa_r+0xae0>
 8009452:	4b0a      	ldr	r3, [pc, #40]	; (800947c <_dtoa_r+0xbdc>)
 8009454:	f7ff ba99 	b.w	800898a <_dtoa_r+0xea>
 8009458:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800945a:	2b00      	cmp	r3, #0
 800945c:	f47f aa6d 	bne.w	800893a <_dtoa_r+0x9a>
 8009460:	4b07      	ldr	r3, [pc, #28]	; (8009480 <_dtoa_r+0xbe0>)
 8009462:	f7ff ba92 	b.w	800898a <_dtoa_r+0xea>
 8009466:	9b01      	ldr	r3, [sp, #4]
 8009468:	2b00      	cmp	r3, #0
 800946a:	dcb5      	bgt.n	80093d8 <_dtoa_r+0xb38>
 800946c:	9b07      	ldr	r3, [sp, #28]
 800946e:	2b02      	cmp	r3, #2
 8009470:	f73f aeb1 	bgt.w	80091d6 <_dtoa_r+0x936>
 8009474:	e7b0      	b.n	80093d8 <_dtoa_r+0xb38>
 8009476:	bf00      	nop
 8009478:	0800a6e8 	.word	0x0800a6e8
 800947c:	0800a648 	.word	0x0800a648
 8009480:	0800a66c 	.word	0x0800a66c

08009484 <_free_r>:
 8009484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009486:	2900      	cmp	r1, #0
 8009488:	d044      	beq.n	8009514 <_free_r+0x90>
 800948a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800948e:	9001      	str	r0, [sp, #4]
 8009490:	2b00      	cmp	r3, #0
 8009492:	f1a1 0404 	sub.w	r4, r1, #4
 8009496:	bfb8      	it	lt
 8009498:	18e4      	addlt	r4, r4, r3
 800949a:	f000 f8e7 	bl	800966c <__malloc_lock>
 800949e:	4a1e      	ldr	r2, [pc, #120]	; (8009518 <_free_r+0x94>)
 80094a0:	9801      	ldr	r0, [sp, #4]
 80094a2:	6813      	ldr	r3, [r2, #0]
 80094a4:	b933      	cbnz	r3, 80094b4 <_free_r+0x30>
 80094a6:	6063      	str	r3, [r4, #4]
 80094a8:	6014      	str	r4, [r2, #0]
 80094aa:	b003      	add	sp, #12
 80094ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094b0:	f000 b8e2 	b.w	8009678 <__malloc_unlock>
 80094b4:	42a3      	cmp	r3, r4
 80094b6:	d908      	bls.n	80094ca <_free_r+0x46>
 80094b8:	6825      	ldr	r5, [r4, #0]
 80094ba:	1961      	adds	r1, r4, r5
 80094bc:	428b      	cmp	r3, r1
 80094be:	bf01      	itttt	eq
 80094c0:	6819      	ldreq	r1, [r3, #0]
 80094c2:	685b      	ldreq	r3, [r3, #4]
 80094c4:	1949      	addeq	r1, r1, r5
 80094c6:	6021      	streq	r1, [r4, #0]
 80094c8:	e7ed      	b.n	80094a6 <_free_r+0x22>
 80094ca:	461a      	mov	r2, r3
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	b10b      	cbz	r3, 80094d4 <_free_r+0x50>
 80094d0:	42a3      	cmp	r3, r4
 80094d2:	d9fa      	bls.n	80094ca <_free_r+0x46>
 80094d4:	6811      	ldr	r1, [r2, #0]
 80094d6:	1855      	adds	r5, r2, r1
 80094d8:	42a5      	cmp	r5, r4
 80094da:	d10b      	bne.n	80094f4 <_free_r+0x70>
 80094dc:	6824      	ldr	r4, [r4, #0]
 80094de:	4421      	add	r1, r4
 80094e0:	1854      	adds	r4, r2, r1
 80094e2:	42a3      	cmp	r3, r4
 80094e4:	6011      	str	r1, [r2, #0]
 80094e6:	d1e0      	bne.n	80094aa <_free_r+0x26>
 80094e8:	681c      	ldr	r4, [r3, #0]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	6053      	str	r3, [r2, #4]
 80094ee:	440c      	add	r4, r1
 80094f0:	6014      	str	r4, [r2, #0]
 80094f2:	e7da      	b.n	80094aa <_free_r+0x26>
 80094f4:	d902      	bls.n	80094fc <_free_r+0x78>
 80094f6:	230c      	movs	r3, #12
 80094f8:	6003      	str	r3, [r0, #0]
 80094fa:	e7d6      	b.n	80094aa <_free_r+0x26>
 80094fc:	6825      	ldr	r5, [r4, #0]
 80094fe:	1961      	adds	r1, r4, r5
 8009500:	428b      	cmp	r3, r1
 8009502:	bf04      	itt	eq
 8009504:	6819      	ldreq	r1, [r3, #0]
 8009506:	685b      	ldreq	r3, [r3, #4]
 8009508:	6063      	str	r3, [r4, #4]
 800950a:	bf04      	itt	eq
 800950c:	1949      	addeq	r1, r1, r5
 800950e:	6021      	streq	r1, [r4, #0]
 8009510:	6054      	str	r4, [r2, #4]
 8009512:	e7ca      	b.n	80094aa <_free_r+0x26>
 8009514:	b003      	add	sp, #12
 8009516:	bd30      	pop	{r4, r5, pc}
 8009518:	20000bbc 	.word	0x20000bbc

0800951c <malloc>:
 800951c:	4b02      	ldr	r3, [pc, #8]	; (8009528 <malloc+0xc>)
 800951e:	4601      	mov	r1, r0
 8009520:	6818      	ldr	r0, [r3, #0]
 8009522:	f000 b823 	b.w	800956c <_malloc_r>
 8009526:	bf00      	nop
 8009528:	20000128 	.word	0x20000128

0800952c <sbrk_aligned>:
 800952c:	b570      	push	{r4, r5, r6, lr}
 800952e:	4e0e      	ldr	r6, [pc, #56]	; (8009568 <sbrk_aligned+0x3c>)
 8009530:	460c      	mov	r4, r1
 8009532:	6831      	ldr	r1, [r6, #0]
 8009534:	4605      	mov	r5, r0
 8009536:	b911      	cbnz	r1, 800953e <sbrk_aligned+0x12>
 8009538:	f000 fe96 	bl	800a268 <_sbrk_r>
 800953c:	6030      	str	r0, [r6, #0]
 800953e:	4621      	mov	r1, r4
 8009540:	4628      	mov	r0, r5
 8009542:	f000 fe91 	bl	800a268 <_sbrk_r>
 8009546:	1c43      	adds	r3, r0, #1
 8009548:	d00a      	beq.n	8009560 <sbrk_aligned+0x34>
 800954a:	1cc4      	adds	r4, r0, #3
 800954c:	f024 0403 	bic.w	r4, r4, #3
 8009550:	42a0      	cmp	r0, r4
 8009552:	d007      	beq.n	8009564 <sbrk_aligned+0x38>
 8009554:	1a21      	subs	r1, r4, r0
 8009556:	4628      	mov	r0, r5
 8009558:	f000 fe86 	bl	800a268 <_sbrk_r>
 800955c:	3001      	adds	r0, #1
 800955e:	d101      	bne.n	8009564 <sbrk_aligned+0x38>
 8009560:	f04f 34ff 	mov.w	r4, #4294967295
 8009564:	4620      	mov	r0, r4
 8009566:	bd70      	pop	{r4, r5, r6, pc}
 8009568:	20000bc0 	.word	0x20000bc0

0800956c <_malloc_r>:
 800956c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009570:	1ccd      	adds	r5, r1, #3
 8009572:	f025 0503 	bic.w	r5, r5, #3
 8009576:	3508      	adds	r5, #8
 8009578:	2d0c      	cmp	r5, #12
 800957a:	bf38      	it	cc
 800957c:	250c      	movcc	r5, #12
 800957e:	2d00      	cmp	r5, #0
 8009580:	4607      	mov	r7, r0
 8009582:	db01      	blt.n	8009588 <_malloc_r+0x1c>
 8009584:	42a9      	cmp	r1, r5
 8009586:	d905      	bls.n	8009594 <_malloc_r+0x28>
 8009588:	230c      	movs	r3, #12
 800958a:	603b      	str	r3, [r7, #0]
 800958c:	2600      	movs	r6, #0
 800958e:	4630      	mov	r0, r6
 8009590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009594:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009668 <_malloc_r+0xfc>
 8009598:	f000 f868 	bl	800966c <__malloc_lock>
 800959c:	f8d8 3000 	ldr.w	r3, [r8]
 80095a0:	461c      	mov	r4, r3
 80095a2:	bb5c      	cbnz	r4, 80095fc <_malloc_r+0x90>
 80095a4:	4629      	mov	r1, r5
 80095a6:	4638      	mov	r0, r7
 80095a8:	f7ff ffc0 	bl	800952c <sbrk_aligned>
 80095ac:	1c43      	adds	r3, r0, #1
 80095ae:	4604      	mov	r4, r0
 80095b0:	d155      	bne.n	800965e <_malloc_r+0xf2>
 80095b2:	f8d8 4000 	ldr.w	r4, [r8]
 80095b6:	4626      	mov	r6, r4
 80095b8:	2e00      	cmp	r6, #0
 80095ba:	d145      	bne.n	8009648 <_malloc_r+0xdc>
 80095bc:	2c00      	cmp	r4, #0
 80095be:	d048      	beq.n	8009652 <_malloc_r+0xe6>
 80095c0:	6823      	ldr	r3, [r4, #0]
 80095c2:	4631      	mov	r1, r6
 80095c4:	4638      	mov	r0, r7
 80095c6:	eb04 0903 	add.w	r9, r4, r3
 80095ca:	f000 fe4d 	bl	800a268 <_sbrk_r>
 80095ce:	4581      	cmp	r9, r0
 80095d0:	d13f      	bne.n	8009652 <_malloc_r+0xe6>
 80095d2:	6821      	ldr	r1, [r4, #0]
 80095d4:	1a6d      	subs	r5, r5, r1
 80095d6:	4629      	mov	r1, r5
 80095d8:	4638      	mov	r0, r7
 80095da:	f7ff ffa7 	bl	800952c <sbrk_aligned>
 80095de:	3001      	adds	r0, #1
 80095e0:	d037      	beq.n	8009652 <_malloc_r+0xe6>
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	442b      	add	r3, r5
 80095e6:	6023      	str	r3, [r4, #0]
 80095e8:	f8d8 3000 	ldr.w	r3, [r8]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d038      	beq.n	8009662 <_malloc_r+0xf6>
 80095f0:	685a      	ldr	r2, [r3, #4]
 80095f2:	42a2      	cmp	r2, r4
 80095f4:	d12b      	bne.n	800964e <_malloc_r+0xe2>
 80095f6:	2200      	movs	r2, #0
 80095f8:	605a      	str	r2, [r3, #4]
 80095fa:	e00f      	b.n	800961c <_malloc_r+0xb0>
 80095fc:	6822      	ldr	r2, [r4, #0]
 80095fe:	1b52      	subs	r2, r2, r5
 8009600:	d41f      	bmi.n	8009642 <_malloc_r+0xd6>
 8009602:	2a0b      	cmp	r2, #11
 8009604:	d917      	bls.n	8009636 <_malloc_r+0xca>
 8009606:	1961      	adds	r1, r4, r5
 8009608:	42a3      	cmp	r3, r4
 800960a:	6025      	str	r5, [r4, #0]
 800960c:	bf18      	it	ne
 800960e:	6059      	strne	r1, [r3, #4]
 8009610:	6863      	ldr	r3, [r4, #4]
 8009612:	bf08      	it	eq
 8009614:	f8c8 1000 	streq.w	r1, [r8]
 8009618:	5162      	str	r2, [r4, r5]
 800961a:	604b      	str	r3, [r1, #4]
 800961c:	4638      	mov	r0, r7
 800961e:	f104 060b 	add.w	r6, r4, #11
 8009622:	f000 f829 	bl	8009678 <__malloc_unlock>
 8009626:	f026 0607 	bic.w	r6, r6, #7
 800962a:	1d23      	adds	r3, r4, #4
 800962c:	1af2      	subs	r2, r6, r3
 800962e:	d0ae      	beq.n	800958e <_malloc_r+0x22>
 8009630:	1b9b      	subs	r3, r3, r6
 8009632:	50a3      	str	r3, [r4, r2]
 8009634:	e7ab      	b.n	800958e <_malloc_r+0x22>
 8009636:	42a3      	cmp	r3, r4
 8009638:	6862      	ldr	r2, [r4, #4]
 800963a:	d1dd      	bne.n	80095f8 <_malloc_r+0x8c>
 800963c:	f8c8 2000 	str.w	r2, [r8]
 8009640:	e7ec      	b.n	800961c <_malloc_r+0xb0>
 8009642:	4623      	mov	r3, r4
 8009644:	6864      	ldr	r4, [r4, #4]
 8009646:	e7ac      	b.n	80095a2 <_malloc_r+0x36>
 8009648:	4634      	mov	r4, r6
 800964a:	6876      	ldr	r6, [r6, #4]
 800964c:	e7b4      	b.n	80095b8 <_malloc_r+0x4c>
 800964e:	4613      	mov	r3, r2
 8009650:	e7cc      	b.n	80095ec <_malloc_r+0x80>
 8009652:	230c      	movs	r3, #12
 8009654:	603b      	str	r3, [r7, #0]
 8009656:	4638      	mov	r0, r7
 8009658:	f000 f80e 	bl	8009678 <__malloc_unlock>
 800965c:	e797      	b.n	800958e <_malloc_r+0x22>
 800965e:	6025      	str	r5, [r4, #0]
 8009660:	e7dc      	b.n	800961c <_malloc_r+0xb0>
 8009662:	605b      	str	r3, [r3, #4]
 8009664:	deff      	udf	#255	; 0xff
 8009666:	bf00      	nop
 8009668:	20000bbc 	.word	0x20000bbc

0800966c <__malloc_lock>:
 800966c:	4801      	ldr	r0, [pc, #4]	; (8009674 <__malloc_lock+0x8>)
 800966e:	f7ff b87e 	b.w	800876e <__retarget_lock_acquire_recursive>
 8009672:	bf00      	nop
 8009674:	20000bb8 	.word	0x20000bb8

08009678 <__malloc_unlock>:
 8009678:	4801      	ldr	r0, [pc, #4]	; (8009680 <__malloc_unlock+0x8>)
 800967a:	f7ff b879 	b.w	8008770 <__retarget_lock_release_recursive>
 800967e:	bf00      	nop
 8009680:	20000bb8 	.word	0x20000bb8

08009684 <_Balloc>:
 8009684:	b570      	push	{r4, r5, r6, lr}
 8009686:	69c6      	ldr	r6, [r0, #28]
 8009688:	4604      	mov	r4, r0
 800968a:	460d      	mov	r5, r1
 800968c:	b976      	cbnz	r6, 80096ac <_Balloc+0x28>
 800968e:	2010      	movs	r0, #16
 8009690:	f7ff ff44 	bl	800951c <malloc>
 8009694:	4602      	mov	r2, r0
 8009696:	61e0      	str	r0, [r4, #28]
 8009698:	b920      	cbnz	r0, 80096a4 <_Balloc+0x20>
 800969a:	4b18      	ldr	r3, [pc, #96]	; (80096fc <_Balloc+0x78>)
 800969c:	4818      	ldr	r0, [pc, #96]	; (8009700 <_Balloc+0x7c>)
 800969e:	216b      	movs	r1, #107	; 0x6b
 80096a0:	f000 fdf2 	bl	800a288 <__assert_func>
 80096a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096a8:	6006      	str	r6, [r0, #0]
 80096aa:	60c6      	str	r6, [r0, #12]
 80096ac:	69e6      	ldr	r6, [r4, #28]
 80096ae:	68f3      	ldr	r3, [r6, #12]
 80096b0:	b183      	cbz	r3, 80096d4 <_Balloc+0x50>
 80096b2:	69e3      	ldr	r3, [r4, #28]
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80096ba:	b9b8      	cbnz	r0, 80096ec <_Balloc+0x68>
 80096bc:	2101      	movs	r1, #1
 80096be:	fa01 f605 	lsl.w	r6, r1, r5
 80096c2:	1d72      	adds	r2, r6, #5
 80096c4:	0092      	lsls	r2, r2, #2
 80096c6:	4620      	mov	r0, r4
 80096c8:	f000 fdfc 	bl	800a2c4 <_calloc_r>
 80096cc:	b160      	cbz	r0, 80096e8 <_Balloc+0x64>
 80096ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80096d2:	e00e      	b.n	80096f2 <_Balloc+0x6e>
 80096d4:	2221      	movs	r2, #33	; 0x21
 80096d6:	2104      	movs	r1, #4
 80096d8:	4620      	mov	r0, r4
 80096da:	f000 fdf3 	bl	800a2c4 <_calloc_r>
 80096de:	69e3      	ldr	r3, [r4, #28]
 80096e0:	60f0      	str	r0, [r6, #12]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1e4      	bne.n	80096b2 <_Balloc+0x2e>
 80096e8:	2000      	movs	r0, #0
 80096ea:	bd70      	pop	{r4, r5, r6, pc}
 80096ec:	6802      	ldr	r2, [r0, #0]
 80096ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80096f2:	2300      	movs	r3, #0
 80096f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096f8:	e7f7      	b.n	80096ea <_Balloc+0x66>
 80096fa:	bf00      	nop
 80096fc:	0800a679 	.word	0x0800a679
 8009700:	0800a6f9 	.word	0x0800a6f9

08009704 <_Bfree>:
 8009704:	b570      	push	{r4, r5, r6, lr}
 8009706:	69c6      	ldr	r6, [r0, #28]
 8009708:	4605      	mov	r5, r0
 800970a:	460c      	mov	r4, r1
 800970c:	b976      	cbnz	r6, 800972c <_Bfree+0x28>
 800970e:	2010      	movs	r0, #16
 8009710:	f7ff ff04 	bl	800951c <malloc>
 8009714:	4602      	mov	r2, r0
 8009716:	61e8      	str	r0, [r5, #28]
 8009718:	b920      	cbnz	r0, 8009724 <_Bfree+0x20>
 800971a:	4b09      	ldr	r3, [pc, #36]	; (8009740 <_Bfree+0x3c>)
 800971c:	4809      	ldr	r0, [pc, #36]	; (8009744 <_Bfree+0x40>)
 800971e:	218f      	movs	r1, #143	; 0x8f
 8009720:	f000 fdb2 	bl	800a288 <__assert_func>
 8009724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009728:	6006      	str	r6, [r0, #0]
 800972a:	60c6      	str	r6, [r0, #12]
 800972c:	b13c      	cbz	r4, 800973e <_Bfree+0x3a>
 800972e:	69eb      	ldr	r3, [r5, #28]
 8009730:	6862      	ldr	r2, [r4, #4]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009738:	6021      	str	r1, [r4, #0]
 800973a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800973e:	bd70      	pop	{r4, r5, r6, pc}
 8009740:	0800a679 	.word	0x0800a679
 8009744:	0800a6f9 	.word	0x0800a6f9

08009748 <__multadd>:
 8009748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800974c:	690d      	ldr	r5, [r1, #16]
 800974e:	4607      	mov	r7, r0
 8009750:	460c      	mov	r4, r1
 8009752:	461e      	mov	r6, r3
 8009754:	f101 0c14 	add.w	ip, r1, #20
 8009758:	2000      	movs	r0, #0
 800975a:	f8dc 3000 	ldr.w	r3, [ip]
 800975e:	b299      	uxth	r1, r3
 8009760:	fb02 6101 	mla	r1, r2, r1, r6
 8009764:	0c1e      	lsrs	r6, r3, #16
 8009766:	0c0b      	lsrs	r3, r1, #16
 8009768:	fb02 3306 	mla	r3, r2, r6, r3
 800976c:	b289      	uxth	r1, r1
 800976e:	3001      	adds	r0, #1
 8009770:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009774:	4285      	cmp	r5, r0
 8009776:	f84c 1b04 	str.w	r1, [ip], #4
 800977a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800977e:	dcec      	bgt.n	800975a <__multadd+0x12>
 8009780:	b30e      	cbz	r6, 80097c6 <__multadd+0x7e>
 8009782:	68a3      	ldr	r3, [r4, #8]
 8009784:	42ab      	cmp	r3, r5
 8009786:	dc19      	bgt.n	80097bc <__multadd+0x74>
 8009788:	6861      	ldr	r1, [r4, #4]
 800978a:	4638      	mov	r0, r7
 800978c:	3101      	adds	r1, #1
 800978e:	f7ff ff79 	bl	8009684 <_Balloc>
 8009792:	4680      	mov	r8, r0
 8009794:	b928      	cbnz	r0, 80097a2 <__multadd+0x5a>
 8009796:	4602      	mov	r2, r0
 8009798:	4b0c      	ldr	r3, [pc, #48]	; (80097cc <__multadd+0x84>)
 800979a:	480d      	ldr	r0, [pc, #52]	; (80097d0 <__multadd+0x88>)
 800979c:	21ba      	movs	r1, #186	; 0xba
 800979e:	f000 fd73 	bl	800a288 <__assert_func>
 80097a2:	6922      	ldr	r2, [r4, #16]
 80097a4:	3202      	adds	r2, #2
 80097a6:	f104 010c 	add.w	r1, r4, #12
 80097aa:	0092      	lsls	r2, r2, #2
 80097ac:	300c      	adds	r0, #12
 80097ae:	f7fe ffe0 	bl	8008772 <memcpy>
 80097b2:	4621      	mov	r1, r4
 80097b4:	4638      	mov	r0, r7
 80097b6:	f7ff ffa5 	bl	8009704 <_Bfree>
 80097ba:	4644      	mov	r4, r8
 80097bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80097c0:	3501      	adds	r5, #1
 80097c2:	615e      	str	r6, [r3, #20]
 80097c4:	6125      	str	r5, [r4, #16]
 80097c6:	4620      	mov	r0, r4
 80097c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097cc:	0800a6e8 	.word	0x0800a6e8
 80097d0:	0800a6f9 	.word	0x0800a6f9

080097d4 <__hi0bits>:
 80097d4:	0c03      	lsrs	r3, r0, #16
 80097d6:	041b      	lsls	r3, r3, #16
 80097d8:	b9d3      	cbnz	r3, 8009810 <__hi0bits+0x3c>
 80097da:	0400      	lsls	r0, r0, #16
 80097dc:	2310      	movs	r3, #16
 80097de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80097e2:	bf04      	itt	eq
 80097e4:	0200      	lsleq	r0, r0, #8
 80097e6:	3308      	addeq	r3, #8
 80097e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80097ec:	bf04      	itt	eq
 80097ee:	0100      	lsleq	r0, r0, #4
 80097f0:	3304      	addeq	r3, #4
 80097f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80097f6:	bf04      	itt	eq
 80097f8:	0080      	lsleq	r0, r0, #2
 80097fa:	3302      	addeq	r3, #2
 80097fc:	2800      	cmp	r0, #0
 80097fe:	db05      	blt.n	800980c <__hi0bits+0x38>
 8009800:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009804:	f103 0301 	add.w	r3, r3, #1
 8009808:	bf08      	it	eq
 800980a:	2320      	moveq	r3, #32
 800980c:	4618      	mov	r0, r3
 800980e:	4770      	bx	lr
 8009810:	2300      	movs	r3, #0
 8009812:	e7e4      	b.n	80097de <__hi0bits+0xa>

08009814 <__lo0bits>:
 8009814:	6803      	ldr	r3, [r0, #0]
 8009816:	f013 0207 	ands.w	r2, r3, #7
 800981a:	d00c      	beq.n	8009836 <__lo0bits+0x22>
 800981c:	07d9      	lsls	r1, r3, #31
 800981e:	d422      	bmi.n	8009866 <__lo0bits+0x52>
 8009820:	079a      	lsls	r2, r3, #30
 8009822:	bf49      	itett	mi
 8009824:	085b      	lsrmi	r3, r3, #1
 8009826:	089b      	lsrpl	r3, r3, #2
 8009828:	6003      	strmi	r3, [r0, #0]
 800982a:	2201      	movmi	r2, #1
 800982c:	bf5c      	itt	pl
 800982e:	6003      	strpl	r3, [r0, #0]
 8009830:	2202      	movpl	r2, #2
 8009832:	4610      	mov	r0, r2
 8009834:	4770      	bx	lr
 8009836:	b299      	uxth	r1, r3
 8009838:	b909      	cbnz	r1, 800983e <__lo0bits+0x2a>
 800983a:	0c1b      	lsrs	r3, r3, #16
 800983c:	2210      	movs	r2, #16
 800983e:	b2d9      	uxtb	r1, r3
 8009840:	b909      	cbnz	r1, 8009846 <__lo0bits+0x32>
 8009842:	3208      	adds	r2, #8
 8009844:	0a1b      	lsrs	r3, r3, #8
 8009846:	0719      	lsls	r1, r3, #28
 8009848:	bf04      	itt	eq
 800984a:	091b      	lsreq	r3, r3, #4
 800984c:	3204      	addeq	r2, #4
 800984e:	0799      	lsls	r1, r3, #30
 8009850:	bf04      	itt	eq
 8009852:	089b      	lsreq	r3, r3, #2
 8009854:	3202      	addeq	r2, #2
 8009856:	07d9      	lsls	r1, r3, #31
 8009858:	d403      	bmi.n	8009862 <__lo0bits+0x4e>
 800985a:	085b      	lsrs	r3, r3, #1
 800985c:	f102 0201 	add.w	r2, r2, #1
 8009860:	d003      	beq.n	800986a <__lo0bits+0x56>
 8009862:	6003      	str	r3, [r0, #0]
 8009864:	e7e5      	b.n	8009832 <__lo0bits+0x1e>
 8009866:	2200      	movs	r2, #0
 8009868:	e7e3      	b.n	8009832 <__lo0bits+0x1e>
 800986a:	2220      	movs	r2, #32
 800986c:	e7e1      	b.n	8009832 <__lo0bits+0x1e>
	...

08009870 <__i2b>:
 8009870:	b510      	push	{r4, lr}
 8009872:	460c      	mov	r4, r1
 8009874:	2101      	movs	r1, #1
 8009876:	f7ff ff05 	bl	8009684 <_Balloc>
 800987a:	4602      	mov	r2, r0
 800987c:	b928      	cbnz	r0, 800988a <__i2b+0x1a>
 800987e:	4b05      	ldr	r3, [pc, #20]	; (8009894 <__i2b+0x24>)
 8009880:	4805      	ldr	r0, [pc, #20]	; (8009898 <__i2b+0x28>)
 8009882:	f240 1145 	movw	r1, #325	; 0x145
 8009886:	f000 fcff 	bl	800a288 <__assert_func>
 800988a:	2301      	movs	r3, #1
 800988c:	6144      	str	r4, [r0, #20]
 800988e:	6103      	str	r3, [r0, #16]
 8009890:	bd10      	pop	{r4, pc}
 8009892:	bf00      	nop
 8009894:	0800a6e8 	.word	0x0800a6e8
 8009898:	0800a6f9 	.word	0x0800a6f9

0800989c <__multiply>:
 800989c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a0:	4691      	mov	r9, r2
 80098a2:	690a      	ldr	r2, [r1, #16]
 80098a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	bfb8      	it	lt
 80098ac:	460b      	movlt	r3, r1
 80098ae:	460c      	mov	r4, r1
 80098b0:	bfbc      	itt	lt
 80098b2:	464c      	movlt	r4, r9
 80098b4:	4699      	movlt	r9, r3
 80098b6:	6927      	ldr	r7, [r4, #16]
 80098b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80098bc:	68a3      	ldr	r3, [r4, #8]
 80098be:	6861      	ldr	r1, [r4, #4]
 80098c0:	eb07 060a 	add.w	r6, r7, sl
 80098c4:	42b3      	cmp	r3, r6
 80098c6:	b085      	sub	sp, #20
 80098c8:	bfb8      	it	lt
 80098ca:	3101      	addlt	r1, #1
 80098cc:	f7ff feda 	bl	8009684 <_Balloc>
 80098d0:	b930      	cbnz	r0, 80098e0 <__multiply+0x44>
 80098d2:	4602      	mov	r2, r0
 80098d4:	4b44      	ldr	r3, [pc, #272]	; (80099e8 <__multiply+0x14c>)
 80098d6:	4845      	ldr	r0, [pc, #276]	; (80099ec <__multiply+0x150>)
 80098d8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80098dc:	f000 fcd4 	bl	800a288 <__assert_func>
 80098e0:	f100 0514 	add.w	r5, r0, #20
 80098e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80098e8:	462b      	mov	r3, r5
 80098ea:	2200      	movs	r2, #0
 80098ec:	4543      	cmp	r3, r8
 80098ee:	d321      	bcc.n	8009934 <__multiply+0x98>
 80098f0:	f104 0314 	add.w	r3, r4, #20
 80098f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80098f8:	f109 0314 	add.w	r3, r9, #20
 80098fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009900:	9202      	str	r2, [sp, #8]
 8009902:	1b3a      	subs	r2, r7, r4
 8009904:	3a15      	subs	r2, #21
 8009906:	f022 0203 	bic.w	r2, r2, #3
 800990a:	3204      	adds	r2, #4
 800990c:	f104 0115 	add.w	r1, r4, #21
 8009910:	428f      	cmp	r7, r1
 8009912:	bf38      	it	cc
 8009914:	2204      	movcc	r2, #4
 8009916:	9201      	str	r2, [sp, #4]
 8009918:	9a02      	ldr	r2, [sp, #8]
 800991a:	9303      	str	r3, [sp, #12]
 800991c:	429a      	cmp	r2, r3
 800991e:	d80c      	bhi.n	800993a <__multiply+0x9e>
 8009920:	2e00      	cmp	r6, #0
 8009922:	dd03      	ble.n	800992c <__multiply+0x90>
 8009924:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009928:	2b00      	cmp	r3, #0
 800992a:	d05b      	beq.n	80099e4 <__multiply+0x148>
 800992c:	6106      	str	r6, [r0, #16]
 800992e:	b005      	add	sp, #20
 8009930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009934:	f843 2b04 	str.w	r2, [r3], #4
 8009938:	e7d8      	b.n	80098ec <__multiply+0x50>
 800993a:	f8b3 a000 	ldrh.w	sl, [r3]
 800993e:	f1ba 0f00 	cmp.w	sl, #0
 8009942:	d024      	beq.n	800998e <__multiply+0xf2>
 8009944:	f104 0e14 	add.w	lr, r4, #20
 8009948:	46a9      	mov	r9, r5
 800994a:	f04f 0c00 	mov.w	ip, #0
 800994e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009952:	f8d9 1000 	ldr.w	r1, [r9]
 8009956:	fa1f fb82 	uxth.w	fp, r2
 800995a:	b289      	uxth	r1, r1
 800995c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009960:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009964:	f8d9 2000 	ldr.w	r2, [r9]
 8009968:	4461      	add	r1, ip
 800996a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800996e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009972:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009976:	b289      	uxth	r1, r1
 8009978:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800997c:	4577      	cmp	r7, lr
 800997e:	f849 1b04 	str.w	r1, [r9], #4
 8009982:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009986:	d8e2      	bhi.n	800994e <__multiply+0xb2>
 8009988:	9a01      	ldr	r2, [sp, #4]
 800998a:	f845 c002 	str.w	ip, [r5, r2]
 800998e:	9a03      	ldr	r2, [sp, #12]
 8009990:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009994:	3304      	adds	r3, #4
 8009996:	f1b9 0f00 	cmp.w	r9, #0
 800999a:	d021      	beq.n	80099e0 <__multiply+0x144>
 800999c:	6829      	ldr	r1, [r5, #0]
 800999e:	f104 0c14 	add.w	ip, r4, #20
 80099a2:	46ae      	mov	lr, r5
 80099a4:	f04f 0a00 	mov.w	sl, #0
 80099a8:	f8bc b000 	ldrh.w	fp, [ip]
 80099ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80099b0:	fb09 220b 	mla	r2, r9, fp, r2
 80099b4:	4452      	add	r2, sl
 80099b6:	b289      	uxth	r1, r1
 80099b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80099bc:	f84e 1b04 	str.w	r1, [lr], #4
 80099c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80099c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80099c8:	f8be 1000 	ldrh.w	r1, [lr]
 80099cc:	fb09 110a 	mla	r1, r9, sl, r1
 80099d0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80099d4:	4567      	cmp	r7, ip
 80099d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80099da:	d8e5      	bhi.n	80099a8 <__multiply+0x10c>
 80099dc:	9a01      	ldr	r2, [sp, #4]
 80099de:	50a9      	str	r1, [r5, r2]
 80099e0:	3504      	adds	r5, #4
 80099e2:	e799      	b.n	8009918 <__multiply+0x7c>
 80099e4:	3e01      	subs	r6, #1
 80099e6:	e79b      	b.n	8009920 <__multiply+0x84>
 80099e8:	0800a6e8 	.word	0x0800a6e8
 80099ec:	0800a6f9 	.word	0x0800a6f9

080099f0 <__pow5mult>:
 80099f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099f4:	4615      	mov	r5, r2
 80099f6:	f012 0203 	ands.w	r2, r2, #3
 80099fa:	4606      	mov	r6, r0
 80099fc:	460f      	mov	r7, r1
 80099fe:	d007      	beq.n	8009a10 <__pow5mult+0x20>
 8009a00:	4c25      	ldr	r4, [pc, #148]	; (8009a98 <__pow5mult+0xa8>)
 8009a02:	3a01      	subs	r2, #1
 8009a04:	2300      	movs	r3, #0
 8009a06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a0a:	f7ff fe9d 	bl	8009748 <__multadd>
 8009a0e:	4607      	mov	r7, r0
 8009a10:	10ad      	asrs	r5, r5, #2
 8009a12:	d03d      	beq.n	8009a90 <__pow5mult+0xa0>
 8009a14:	69f4      	ldr	r4, [r6, #28]
 8009a16:	b97c      	cbnz	r4, 8009a38 <__pow5mult+0x48>
 8009a18:	2010      	movs	r0, #16
 8009a1a:	f7ff fd7f 	bl	800951c <malloc>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	61f0      	str	r0, [r6, #28]
 8009a22:	b928      	cbnz	r0, 8009a30 <__pow5mult+0x40>
 8009a24:	4b1d      	ldr	r3, [pc, #116]	; (8009a9c <__pow5mult+0xac>)
 8009a26:	481e      	ldr	r0, [pc, #120]	; (8009aa0 <__pow5mult+0xb0>)
 8009a28:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009a2c:	f000 fc2c 	bl	800a288 <__assert_func>
 8009a30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a34:	6004      	str	r4, [r0, #0]
 8009a36:	60c4      	str	r4, [r0, #12]
 8009a38:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009a3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a40:	b94c      	cbnz	r4, 8009a56 <__pow5mult+0x66>
 8009a42:	f240 2171 	movw	r1, #625	; 0x271
 8009a46:	4630      	mov	r0, r6
 8009a48:	f7ff ff12 	bl	8009870 <__i2b>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a52:	4604      	mov	r4, r0
 8009a54:	6003      	str	r3, [r0, #0]
 8009a56:	f04f 0900 	mov.w	r9, #0
 8009a5a:	07eb      	lsls	r3, r5, #31
 8009a5c:	d50a      	bpl.n	8009a74 <__pow5mult+0x84>
 8009a5e:	4639      	mov	r1, r7
 8009a60:	4622      	mov	r2, r4
 8009a62:	4630      	mov	r0, r6
 8009a64:	f7ff ff1a 	bl	800989c <__multiply>
 8009a68:	4639      	mov	r1, r7
 8009a6a:	4680      	mov	r8, r0
 8009a6c:	4630      	mov	r0, r6
 8009a6e:	f7ff fe49 	bl	8009704 <_Bfree>
 8009a72:	4647      	mov	r7, r8
 8009a74:	106d      	asrs	r5, r5, #1
 8009a76:	d00b      	beq.n	8009a90 <__pow5mult+0xa0>
 8009a78:	6820      	ldr	r0, [r4, #0]
 8009a7a:	b938      	cbnz	r0, 8009a8c <__pow5mult+0x9c>
 8009a7c:	4622      	mov	r2, r4
 8009a7e:	4621      	mov	r1, r4
 8009a80:	4630      	mov	r0, r6
 8009a82:	f7ff ff0b 	bl	800989c <__multiply>
 8009a86:	6020      	str	r0, [r4, #0]
 8009a88:	f8c0 9000 	str.w	r9, [r0]
 8009a8c:	4604      	mov	r4, r0
 8009a8e:	e7e4      	b.n	8009a5a <__pow5mult+0x6a>
 8009a90:	4638      	mov	r0, r7
 8009a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a96:	bf00      	nop
 8009a98:	0800a848 	.word	0x0800a848
 8009a9c:	0800a679 	.word	0x0800a679
 8009aa0:	0800a6f9 	.word	0x0800a6f9

08009aa4 <__lshift>:
 8009aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009aa8:	460c      	mov	r4, r1
 8009aaa:	6849      	ldr	r1, [r1, #4]
 8009aac:	6923      	ldr	r3, [r4, #16]
 8009aae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009ab2:	68a3      	ldr	r3, [r4, #8]
 8009ab4:	4607      	mov	r7, r0
 8009ab6:	4691      	mov	r9, r2
 8009ab8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009abc:	f108 0601 	add.w	r6, r8, #1
 8009ac0:	42b3      	cmp	r3, r6
 8009ac2:	db0b      	blt.n	8009adc <__lshift+0x38>
 8009ac4:	4638      	mov	r0, r7
 8009ac6:	f7ff fddd 	bl	8009684 <_Balloc>
 8009aca:	4605      	mov	r5, r0
 8009acc:	b948      	cbnz	r0, 8009ae2 <__lshift+0x3e>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	4b28      	ldr	r3, [pc, #160]	; (8009b74 <__lshift+0xd0>)
 8009ad2:	4829      	ldr	r0, [pc, #164]	; (8009b78 <__lshift+0xd4>)
 8009ad4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009ad8:	f000 fbd6 	bl	800a288 <__assert_func>
 8009adc:	3101      	adds	r1, #1
 8009ade:	005b      	lsls	r3, r3, #1
 8009ae0:	e7ee      	b.n	8009ac0 <__lshift+0x1c>
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	f100 0114 	add.w	r1, r0, #20
 8009ae8:	f100 0210 	add.w	r2, r0, #16
 8009aec:	4618      	mov	r0, r3
 8009aee:	4553      	cmp	r3, sl
 8009af0:	db33      	blt.n	8009b5a <__lshift+0xb6>
 8009af2:	6920      	ldr	r0, [r4, #16]
 8009af4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009af8:	f104 0314 	add.w	r3, r4, #20
 8009afc:	f019 091f 	ands.w	r9, r9, #31
 8009b00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b08:	d02b      	beq.n	8009b62 <__lshift+0xbe>
 8009b0a:	f1c9 0e20 	rsb	lr, r9, #32
 8009b0e:	468a      	mov	sl, r1
 8009b10:	2200      	movs	r2, #0
 8009b12:	6818      	ldr	r0, [r3, #0]
 8009b14:	fa00 f009 	lsl.w	r0, r0, r9
 8009b18:	4310      	orrs	r0, r2
 8009b1a:	f84a 0b04 	str.w	r0, [sl], #4
 8009b1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b22:	459c      	cmp	ip, r3
 8009b24:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b28:	d8f3      	bhi.n	8009b12 <__lshift+0x6e>
 8009b2a:	ebac 0304 	sub.w	r3, ip, r4
 8009b2e:	3b15      	subs	r3, #21
 8009b30:	f023 0303 	bic.w	r3, r3, #3
 8009b34:	3304      	adds	r3, #4
 8009b36:	f104 0015 	add.w	r0, r4, #21
 8009b3a:	4584      	cmp	ip, r0
 8009b3c:	bf38      	it	cc
 8009b3e:	2304      	movcc	r3, #4
 8009b40:	50ca      	str	r2, [r1, r3]
 8009b42:	b10a      	cbz	r2, 8009b48 <__lshift+0xa4>
 8009b44:	f108 0602 	add.w	r6, r8, #2
 8009b48:	3e01      	subs	r6, #1
 8009b4a:	4638      	mov	r0, r7
 8009b4c:	612e      	str	r6, [r5, #16]
 8009b4e:	4621      	mov	r1, r4
 8009b50:	f7ff fdd8 	bl	8009704 <_Bfree>
 8009b54:	4628      	mov	r0, r5
 8009b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b5e:	3301      	adds	r3, #1
 8009b60:	e7c5      	b.n	8009aee <__lshift+0x4a>
 8009b62:	3904      	subs	r1, #4
 8009b64:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b68:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b6c:	459c      	cmp	ip, r3
 8009b6e:	d8f9      	bhi.n	8009b64 <__lshift+0xc0>
 8009b70:	e7ea      	b.n	8009b48 <__lshift+0xa4>
 8009b72:	bf00      	nop
 8009b74:	0800a6e8 	.word	0x0800a6e8
 8009b78:	0800a6f9 	.word	0x0800a6f9

08009b7c <__mcmp>:
 8009b7c:	b530      	push	{r4, r5, lr}
 8009b7e:	6902      	ldr	r2, [r0, #16]
 8009b80:	690c      	ldr	r4, [r1, #16]
 8009b82:	1b12      	subs	r2, r2, r4
 8009b84:	d10e      	bne.n	8009ba4 <__mcmp+0x28>
 8009b86:	f100 0314 	add.w	r3, r0, #20
 8009b8a:	3114      	adds	r1, #20
 8009b8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009b90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b9c:	42a5      	cmp	r5, r4
 8009b9e:	d003      	beq.n	8009ba8 <__mcmp+0x2c>
 8009ba0:	d305      	bcc.n	8009bae <__mcmp+0x32>
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	4610      	mov	r0, r2
 8009ba6:	bd30      	pop	{r4, r5, pc}
 8009ba8:	4283      	cmp	r3, r0
 8009baa:	d3f3      	bcc.n	8009b94 <__mcmp+0x18>
 8009bac:	e7fa      	b.n	8009ba4 <__mcmp+0x28>
 8009bae:	f04f 32ff 	mov.w	r2, #4294967295
 8009bb2:	e7f7      	b.n	8009ba4 <__mcmp+0x28>

08009bb4 <__mdiff>:
 8009bb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb8:	460c      	mov	r4, r1
 8009bba:	4606      	mov	r6, r0
 8009bbc:	4611      	mov	r1, r2
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	4690      	mov	r8, r2
 8009bc2:	f7ff ffdb 	bl	8009b7c <__mcmp>
 8009bc6:	1e05      	subs	r5, r0, #0
 8009bc8:	d110      	bne.n	8009bec <__mdiff+0x38>
 8009bca:	4629      	mov	r1, r5
 8009bcc:	4630      	mov	r0, r6
 8009bce:	f7ff fd59 	bl	8009684 <_Balloc>
 8009bd2:	b930      	cbnz	r0, 8009be2 <__mdiff+0x2e>
 8009bd4:	4b3a      	ldr	r3, [pc, #232]	; (8009cc0 <__mdiff+0x10c>)
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	f240 2137 	movw	r1, #567	; 0x237
 8009bdc:	4839      	ldr	r0, [pc, #228]	; (8009cc4 <__mdiff+0x110>)
 8009bde:	f000 fb53 	bl	800a288 <__assert_func>
 8009be2:	2301      	movs	r3, #1
 8009be4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009be8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bec:	bfa4      	itt	ge
 8009bee:	4643      	movge	r3, r8
 8009bf0:	46a0      	movge	r8, r4
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009bf8:	bfa6      	itte	ge
 8009bfa:	461c      	movge	r4, r3
 8009bfc:	2500      	movge	r5, #0
 8009bfe:	2501      	movlt	r5, #1
 8009c00:	f7ff fd40 	bl	8009684 <_Balloc>
 8009c04:	b920      	cbnz	r0, 8009c10 <__mdiff+0x5c>
 8009c06:	4b2e      	ldr	r3, [pc, #184]	; (8009cc0 <__mdiff+0x10c>)
 8009c08:	4602      	mov	r2, r0
 8009c0a:	f240 2145 	movw	r1, #581	; 0x245
 8009c0e:	e7e5      	b.n	8009bdc <__mdiff+0x28>
 8009c10:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c14:	6926      	ldr	r6, [r4, #16]
 8009c16:	60c5      	str	r5, [r0, #12]
 8009c18:	f104 0914 	add.w	r9, r4, #20
 8009c1c:	f108 0514 	add.w	r5, r8, #20
 8009c20:	f100 0e14 	add.w	lr, r0, #20
 8009c24:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009c28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009c2c:	f108 0210 	add.w	r2, r8, #16
 8009c30:	46f2      	mov	sl, lr
 8009c32:	2100      	movs	r1, #0
 8009c34:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c3c:	fa11 f88b 	uxtah	r8, r1, fp
 8009c40:	b299      	uxth	r1, r3
 8009c42:	0c1b      	lsrs	r3, r3, #16
 8009c44:	eba8 0801 	sub.w	r8, r8, r1
 8009c48:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c4c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c50:	fa1f f888 	uxth.w	r8, r8
 8009c54:	1419      	asrs	r1, r3, #16
 8009c56:	454e      	cmp	r6, r9
 8009c58:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c5c:	f84a 3b04 	str.w	r3, [sl], #4
 8009c60:	d8e8      	bhi.n	8009c34 <__mdiff+0x80>
 8009c62:	1b33      	subs	r3, r6, r4
 8009c64:	3b15      	subs	r3, #21
 8009c66:	f023 0303 	bic.w	r3, r3, #3
 8009c6a:	3304      	adds	r3, #4
 8009c6c:	3415      	adds	r4, #21
 8009c6e:	42a6      	cmp	r6, r4
 8009c70:	bf38      	it	cc
 8009c72:	2304      	movcc	r3, #4
 8009c74:	441d      	add	r5, r3
 8009c76:	4473      	add	r3, lr
 8009c78:	469e      	mov	lr, r3
 8009c7a:	462e      	mov	r6, r5
 8009c7c:	4566      	cmp	r6, ip
 8009c7e:	d30e      	bcc.n	8009c9e <__mdiff+0xea>
 8009c80:	f10c 0203 	add.w	r2, ip, #3
 8009c84:	1b52      	subs	r2, r2, r5
 8009c86:	f022 0203 	bic.w	r2, r2, #3
 8009c8a:	3d03      	subs	r5, #3
 8009c8c:	45ac      	cmp	ip, r5
 8009c8e:	bf38      	it	cc
 8009c90:	2200      	movcc	r2, #0
 8009c92:	4413      	add	r3, r2
 8009c94:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009c98:	b17a      	cbz	r2, 8009cba <__mdiff+0x106>
 8009c9a:	6107      	str	r7, [r0, #16]
 8009c9c:	e7a4      	b.n	8009be8 <__mdiff+0x34>
 8009c9e:	f856 8b04 	ldr.w	r8, [r6], #4
 8009ca2:	fa11 f288 	uxtah	r2, r1, r8
 8009ca6:	1414      	asrs	r4, r2, #16
 8009ca8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009cac:	b292      	uxth	r2, r2
 8009cae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009cb2:	f84e 2b04 	str.w	r2, [lr], #4
 8009cb6:	1421      	asrs	r1, r4, #16
 8009cb8:	e7e0      	b.n	8009c7c <__mdiff+0xc8>
 8009cba:	3f01      	subs	r7, #1
 8009cbc:	e7ea      	b.n	8009c94 <__mdiff+0xe0>
 8009cbe:	bf00      	nop
 8009cc0:	0800a6e8 	.word	0x0800a6e8
 8009cc4:	0800a6f9 	.word	0x0800a6f9

08009cc8 <__d2b>:
 8009cc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ccc:	460f      	mov	r7, r1
 8009cce:	2101      	movs	r1, #1
 8009cd0:	ec59 8b10 	vmov	r8, r9, d0
 8009cd4:	4616      	mov	r6, r2
 8009cd6:	f7ff fcd5 	bl	8009684 <_Balloc>
 8009cda:	4604      	mov	r4, r0
 8009cdc:	b930      	cbnz	r0, 8009cec <__d2b+0x24>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	4b24      	ldr	r3, [pc, #144]	; (8009d74 <__d2b+0xac>)
 8009ce2:	4825      	ldr	r0, [pc, #148]	; (8009d78 <__d2b+0xb0>)
 8009ce4:	f240 310f 	movw	r1, #783	; 0x30f
 8009ce8:	f000 face 	bl	800a288 <__assert_func>
 8009cec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009cf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009cf4:	bb2d      	cbnz	r5, 8009d42 <__d2b+0x7a>
 8009cf6:	9301      	str	r3, [sp, #4]
 8009cf8:	f1b8 0300 	subs.w	r3, r8, #0
 8009cfc:	d026      	beq.n	8009d4c <__d2b+0x84>
 8009cfe:	4668      	mov	r0, sp
 8009d00:	9300      	str	r3, [sp, #0]
 8009d02:	f7ff fd87 	bl	8009814 <__lo0bits>
 8009d06:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009d0a:	b1e8      	cbz	r0, 8009d48 <__d2b+0x80>
 8009d0c:	f1c0 0320 	rsb	r3, r0, #32
 8009d10:	fa02 f303 	lsl.w	r3, r2, r3
 8009d14:	430b      	orrs	r3, r1
 8009d16:	40c2      	lsrs	r2, r0
 8009d18:	6163      	str	r3, [r4, #20]
 8009d1a:	9201      	str	r2, [sp, #4]
 8009d1c:	9b01      	ldr	r3, [sp, #4]
 8009d1e:	61a3      	str	r3, [r4, #24]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	bf14      	ite	ne
 8009d24:	2202      	movne	r2, #2
 8009d26:	2201      	moveq	r2, #1
 8009d28:	6122      	str	r2, [r4, #16]
 8009d2a:	b1bd      	cbz	r5, 8009d5c <__d2b+0x94>
 8009d2c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009d30:	4405      	add	r5, r0
 8009d32:	603d      	str	r5, [r7, #0]
 8009d34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d38:	6030      	str	r0, [r6, #0]
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	b003      	add	sp, #12
 8009d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d46:	e7d6      	b.n	8009cf6 <__d2b+0x2e>
 8009d48:	6161      	str	r1, [r4, #20]
 8009d4a:	e7e7      	b.n	8009d1c <__d2b+0x54>
 8009d4c:	a801      	add	r0, sp, #4
 8009d4e:	f7ff fd61 	bl	8009814 <__lo0bits>
 8009d52:	9b01      	ldr	r3, [sp, #4]
 8009d54:	6163      	str	r3, [r4, #20]
 8009d56:	3020      	adds	r0, #32
 8009d58:	2201      	movs	r2, #1
 8009d5a:	e7e5      	b.n	8009d28 <__d2b+0x60>
 8009d5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d64:	6038      	str	r0, [r7, #0]
 8009d66:	6918      	ldr	r0, [r3, #16]
 8009d68:	f7ff fd34 	bl	80097d4 <__hi0bits>
 8009d6c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d70:	e7e2      	b.n	8009d38 <__d2b+0x70>
 8009d72:	bf00      	nop
 8009d74:	0800a6e8 	.word	0x0800a6e8
 8009d78:	0800a6f9 	.word	0x0800a6f9

08009d7c <__sfputc_r>:
 8009d7c:	6893      	ldr	r3, [r2, #8]
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	b410      	push	{r4}
 8009d84:	6093      	str	r3, [r2, #8]
 8009d86:	da08      	bge.n	8009d9a <__sfputc_r+0x1e>
 8009d88:	6994      	ldr	r4, [r2, #24]
 8009d8a:	42a3      	cmp	r3, r4
 8009d8c:	db01      	blt.n	8009d92 <__sfputc_r+0x16>
 8009d8e:	290a      	cmp	r1, #10
 8009d90:	d103      	bne.n	8009d9a <__sfputc_r+0x1e>
 8009d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d96:	f7fe bbd8 	b.w	800854a <__swbuf_r>
 8009d9a:	6813      	ldr	r3, [r2, #0]
 8009d9c:	1c58      	adds	r0, r3, #1
 8009d9e:	6010      	str	r0, [r2, #0]
 8009da0:	7019      	strb	r1, [r3, #0]
 8009da2:	4608      	mov	r0, r1
 8009da4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009da8:	4770      	bx	lr

08009daa <__sfputs_r>:
 8009daa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dac:	4606      	mov	r6, r0
 8009dae:	460f      	mov	r7, r1
 8009db0:	4614      	mov	r4, r2
 8009db2:	18d5      	adds	r5, r2, r3
 8009db4:	42ac      	cmp	r4, r5
 8009db6:	d101      	bne.n	8009dbc <__sfputs_r+0x12>
 8009db8:	2000      	movs	r0, #0
 8009dba:	e007      	b.n	8009dcc <__sfputs_r+0x22>
 8009dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dc0:	463a      	mov	r2, r7
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	f7ff ffda 	bl	8009d7c <__sfputc_r>
 8009dc8:	1c43      	adds	r3, r0, #1
 8009dca:	d1f3      	bne.n	8009db4 <__sfputs_r+0xa>
 8009dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009dd0 <_vfiprintf_r>:
 8009dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd4:	460d      	mov	r5, r1
 8009dd6:	b09d      	sub	sp, #116	; 0x74
 8009dd8:	4614      	mov	r4, r2
 8009dda:	4698      	mov	r8, r3
 8009ddc:	4606      	mov	r6, r0
 8009dde:	b118      	cbz	r0, 8009de8 <_vfiprintf_r+0x18>
 8009de0:	6a03      	ldr	r3, [r0, #32]
 8009de2:	b90b      	cbnz	r3, 8009de8 <_vfiprintf_r+0x18>
 8009de4:	f7fe faca 	bl	800837c <__sinit>
 8009de8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dea:	07d9      	lsls	r1, r3, #31
 8009dec:	d405      	bmi.n	8009dfa <_vfiprintf_r+0x2a>
 8009dee:	89ab      	ldrh	r3, [r5, #12]
 8009df0:	059a      	lsls	r2, r3, #22
 8009df2:	d402      	bmi.n	8009dfa <_vfiprintf_r+0x2a>
 8009df4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009df6:	f7fe fcba 	bl	800876e <__retarget_lock_acquire_recursive>
 8009dfa:	89ab      	ldrh	r3, [r5, #12]
 8009dfc:	071b      	lsls	r3, r3, #28
 8009dfe:	d501      	bpl.n	8009e04 <_vfiprintf_r+0x34>
 8009e00:	692b      	ldr	r3, [r5, #16]
 8009e02:	b99b      	cbnz	r3, 8009e2c <_vfiprintf_r+0x5c>
 8009e04:	4629      	mov	r1, r5
 8009e06:	4630      	mov	r0, r6
 8009e08:	f7fe fbdc 	bl	80085c4 <__swsetup_r>
 8009e0c:	b170      	cbz	r0, 8009e2c <_vfiprintf_r+0x5c>
 8009e0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e10:	07dc      	lsls	r4, r3, #31
 8009e12:	d504      	bpl.n	8009e1e <_vfiprintf_r+0x4e>
 8009e14:	f04f 30ff 	mov.w	r0, #4294967295
 8009e18:	b01d      	add	sp, #116	; 0x74
 8009e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e1e:	89ab      	ldrh	r3, [r5, #12]
 8009e20:	0598      	lsls	r0, r3, #22
 8009e22:	d4f7      	bmi.n	8009e14 <_vfiprintf_r+0x44>
 8009e24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e26:	f7fe fca3 	bl	8008770 <__retarget_lock_release_recursive>
 8009e2a:	e7f3      	b.n	8009e14 <_vfiprintf_r+0x44>
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e30:	2320      	movs	r3, #32
 8009e32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e36:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e3a:	2330      	movs	r3, #48	; 0x30
 8009e3c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009ff0 <_vfiprintf_r+0x220>
 8009e40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e44:	f04f 0901 	mov.w	r9, #1
 8009e48:	4623      	mov	r3, r4
 8009e4a:	469a      	mov	sl, r3
 8009e4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e50:	b10a      	cbz	r2, 8009e56 <_vfiprintf_r+0x86>
 8009e52:	2a25      	cmp	r2, #37	; 0x25
 8009e54:	d1f9      	bne.n	8009e4a <_vfiprintf_r+0x7a>
 8009e56:	ebba 0b04 	subs.w	fp, sl, r4
 8009e5a:	d00b      	beq.n	8009e74 <_vfiprintf_r+0xa4>
 8009e5c:	465b      	mov	r3, fp
 8009e5e:	4622      	mov	r2, r4
 8009e60:	4629      	mov	r1, r5
 8009e62:	4630      	mov	r0, r6
 8009e64:	f7ff ffa1 	bl	8009daa <__sfputs_r>
 8009e68:	3001      	adds	r0, #1
 8009e6a:	f000 80a9 	beq.w	8009fc0 <_vfiprintf_r+0x1f0>
 8009e6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e70:	445a      	add	r2, fp
 8009e72:	9209      	str	r2, [sp, #36]	; 0x24
 8009e74:	f89a 3000 	ldrb.w	r3, [sl]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f000 80a1 	beq.w	8009fc0 <_vfiprintf_r+0x1f0>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f04f 32ff 	mov.w	r2, #4294967295
 8009e84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e88:	f10a 0a01 	add.w	sl, sl, #1
 8009e8c:	9304      	str	r3, [sp, #16]
 8009e8e:	9307      	str	r3, [sp, #28]
 8009e90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e94:	931a      	str	r3, [sp, #104]	; 0x68
 8009e96:	4654      	mov	r4, sl
 8009e98:	2205      	movs	r2, #5
 8009e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e9e:	4854      	ldr	r0, [pc, #336]	; (8009ff0 <_vfiprintf_r+0x220>)
 8009ea0:	f7f6 f996 	bl	80001d0 <memchr>
 8009ea4:	9a04      	ldr	r2, [sp, #16]
 8009ea6:	b9d8      	cbnz	r0, 8009ee0 <_vfiprintf_r+0x110>
 8009ea8:	06d1      	lsls	r1, r2, #27
 8009eaa:	bf44      	itt	mi
 8009eac:	2320      	movmi	r3, #32
 8009eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009eb2:	0713      	lsls	r3, r2, #28
 8009eb4:	bf44      	itt	mi
 8009eb6:	232b      	movmi	r3, #43	; 0x2b
 8009eb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ebc:	f89a 3000 	ldrb.w	r3, [sl]
 8009ec0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ec2:	d015      	beq.n	8009ef0 <_vfiprintf_r+0x120>
 8009ec4:	9a07      	ldr	r2, [sp, #28]
 8009ec6:	4654      	mov	r4, sl
 8009ec8:	2000      	movs	r0, #0
 8009eca:	f04f 0c0a 	mov.w	ip, #10
 8009ece:	4621      	mov	r1, r4
 8009ed0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ed4:	3b30      	subs	r3, #48	; 0x30
 8009ed6:	2b09      	cmp	r3, #9
 8009ed8:	d94d      	bls.n	8009f76 <_vfiprintf_r+0x1a6>
 8009eda:	b1b0      	cbz	r0, 8009f0a <_vfiprintf_r+0x13a>
 8009edc:	9207      	str	r2, [sp, #28]
 8009ede:	e014      	b.n	8009f0a <_vfiprintf_r+0x13a>
 8009ee0:	eba0 0308 	sub.w	r3, r0, r8
 8009ee4:	fa09 f303 	lsl.w	r3, r9, r3
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	9304      	str	r3, [sp, #16]
 8009eec:	46a2      	mov	sl, r4
 8009eee:	e7d2      	b.n	8009e96 <_vfiprintf_r+0xc6>
 8009ef0:	9b03      	ldr	r3, [sp, #12]
 8009ef2:	1d19      	adds	r1, r3, #4
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	9103      	str	r1, [sp, #12]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	bfbb      	ittet	lt
 8009efc:	425b      	neglt	r3, r3
 8009efe:	f042 0202 	orrlt.w	r2, r2, #2
 8009f02:	9307      	strge	r3, [sp, #28]
 8009f04:	9307      	strlt	r3, [sp, #28]
 8009f06:	bfb8      	it	lt
 8009f08:	9204      	strlt	r2, [sp, #16]
 8009f0a:	7823      	ldrb	r3, [r4, #0]
 8009f0c:	2b2e      	cmp	r3, #46	; 0x2e
 8009f0e:	d10c      	bne.n	8009f2a <_vfiprintf_r+0x15a>
 8009f10:	7863      	ldrb	r3, [r4, #1]
 8009f12:	2b2a      	cmp	r3, #42	; 0x2a
 8009f14:	d134      	bne.n	8009f80 <_vfiprintf_r+0x1b0>
 8009f16:	9b03      	ldr	r3, [sp, #12]
 8009f18:	1d1a      	adds	r2, r3, #4
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	9203      	str	r2, [sp, #12]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	bfb8      	it	lt
 8009f22:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f26:	3402      	adds	r4, #2
 8009f28:	9305      	str	r3, [sp, #20]
 8009f2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a000 <_vfiprintf_r+0x230>
 8009f2e:	7821      	ldrb	r1, [r4, #0]
 8009f30:	2203      	movs	r2, #3
 8009f32:	4650      	mov	r0, sl
 8009f34:	f7f6 f94c 	bl	80001d0 <memchr>
 8009f38:	b138      	cbz	r0, 8009f4a <_vfiprintf_r+0x17a>
 8009f3a:	9b04      	ldr	r3, [sp, #16]
 8009f3c:	eba0 000a 	sub.w	r0, r0, sl
 8009f40:	2240      	movs	r2, #64	; 0x40
 8009f42:	4082      	lsls	r2, r0
 8009f44:	4313      	orrs	r3, r2
 8009f46:	3401      	adds	r4, #1
 8009f48:	9304      	str	r3, [sp, #16]
 8009f4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f4e:	4829      	ldr	r0, [pc, #164]	; (8009ff4 <_vfiprintf_r+0x224>)
 8009f50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f54:	2206      	movs	r2, #6
 8009f56:	f7f6 f93b 	bl	80001d0 <memchr>
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	d03f      	beq.n	8009fde <_vfiprintf_r+0x20e>
 8009f5e:	4b26      	ldr	r3, [pc, #152]	; (8009ff8 <_vfiprintf_r+0x228>)
 8009f60:	bb1b      	cbnz	r3, 8009faa <_vfiprintf_r+0x1da>
 8009f62:	9b03      	ldr	r3, [sp, #12]
 8009f64:	3307      	adds	r3, #7
 8009f66:	f023 0307 	bic.w	r3, r3, #7
 8009f6a:	3308      	adds	r3, #8
 8009f6c:	9303      	str	r3, [sp, #12]
 8009f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f70:	443b      	add	r3, r7
 8009f72:	9309      	str	r3, [sp, #36]	; 0x24
 8009f74:	e768      	b.n	8009e48 <_vfiprintf_r+0x78>
 8009f76:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	2001      	movs	r0, #1
 8009f7e:	e7a6      	b.n	8009ece <_vfiprintf_r+0xfe>
 8009f80:	2300      	movs	r3, #0
 8009f82:	3401      	adds	r4, #1
 8009f84:	9305      	str	r3, [sp, #20]
 8009f86:	4619      	mov	r1, r3
 8009f88:	f04f 0c0a 	mov.w	ip, #10
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f92:	3a30      	subs	r2, #48	; 0x30
 8009f94:	2a09      	cmp	r2, #9
 8009f96:	d903      	bls.n	8009fa0 <_vfiprintf_r+0x1d0>
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d0c6      	beq.n	8009f2a <_vfiprintf_r+0x15a>
 8009f9c:	9105      	str	r1, [sp, #20]
 8009f9e:	e7c4      	b.n	8009f2a <_vfiprintf_r+0x15a>
 8009fa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fa4:	4604      	mov	r4, r0
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e7f0      	b.n	8009f8c <_vfiprintf_r+0x1bc>
 8009faa:	ab03      	add	r3, sp, #12
 8009fac:	9300      	str	r3, [sp, #0]
 8009fae:	462a      	mov	r2, r5
 8009fb0:	4b12      	ldr	r3, [pc, #72]	; (8009ffc <_vfiprintf_r+0x22c>)
 8009fb2:	a904      	add	r1, sp, #16
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	f7fd fd8f 	bl	8007ad8 <_printf_float>
 8009fba:	4607      	mov	r7, r0
 8009fbc:	1c78      	adds	r0, r7, #1
 8009fbe:	d1d6      	bne.n	8009f6e <_vfiprintf_r+0x19e>
 8009fc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fc2:	07d9      	lsls	r1, r3, #31
 8009fc4:	d405      	bmi.n	8009fd2 <_vfiprintf_r+0x202>
 8009fc6:	89ab      	ldrh	r3, [r5, #12]
 8009fc8:	059a      	lsls	r2, r3, #22
 8009fca:	d402      	bmi.n	8009fd2 <_vfiprintf_r+0x202>
 8009fcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fce:	f7fe fbcf 	bl	8008770 <__retarget_lock_release_recursive>
 8009fd2:	89ab      	ldrh	r3, [r5, #12]
 8009fd4:	065b      	lsls	r3, r3, #25
 8009fd6:	f53f af1d 	bmi.w	8009e14 <_vfiprintf_r+0x44>
 8009fda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fdc:	e71c      	b.n	8009e18 <_vfiprintf_r+0x48>
 8009fde:	ab03      	add	r3, sp, #12
 8009fe0:	9300      	str	r3, [sp, #0]
 8009fe2:	462a      	mov	r2, r5
 8009fe4:	4b05      	ldr	r3, [pc, #20]	; (8009ffc <_vfiprintf_r+0x22c>)
 8009fe6:	a904      	add	r1, sp, #16
 8009fe8:	4630      	mov	r0, r6
 8009fea:	f7fe f819 	bl	8008020 <_printf_i>
 8009fee:	e7e4      	b.n	8009fba <_vfiprintf_r+0x1ea>
 8009ff0:	0800a854 	.word	0x0800a854
 8009ff4:	0800a85e 	.word	0x0800a85e
 8009ff8:	08007ad9 	.word	0x08007ad9
 8009ffc:	08009dab 	.word	0x08009dab
 800a000:	0800a85a 	.word	0x0800a85a

0800a004 <__sflush_r>:
 800a004:	898a      	ldrh	r2, [r1, #12]
 800a006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a00a:	4605      	mov	r5, r0
 800a00c:	0710      	lsls	r0, r2, #28
 800a00e:	460c      	mov	r4, r1
 800a010:	d458      	bmi.n	800a0c4 <__sflush_r+0xc0>
 800a012:	684b      	ldr	r3, [r1, #4]
 800a014:	2b00      	cmp	r3, #0
 800a016:	dc05      	bgt.n	800a024 <__sflush_r+0x20>
 800a018:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	dc02      	bgt.n	800a024 <__sflush_r+0x20>
 800a01e:	2000      	movs	r0, #0
 800a020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a024:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a026:	2e00      	cmp	r6, #0
 800a028:	d0f9      	beq.n	800a01e <__sflush_r+0x1a>
 800a02a:	2300      	movs	r3, #0
 800a02c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a030:	682f      	ldr	r7, [r5, #0]
 800a032:	6a21      	ldr	r1, [r4, #32]
 800a034:	602b      	str	r3, [r5, #0]
 800a036:	d032      	beq.n	800a09e <__sflush_r+0x9a>
 800a038:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a03a:	89a3      	ldrh	r3, [r4, #12]
 800a03c:	075a      	lsls	r2, r3, #29
 800a03e:	d505      	bpl.n	800a04c <__sflush_r+0x48>
 800a040:	6863      	ldr	r3, [r4, #4]
 800a042:	1ac0      	subs	r0, r0, r3
 800a044:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a046:	b10b      	cbz	r3, 800a04c <__sflush_r+0x48>
 800a048:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a04a:	1ac0      	subs	r0, r0, r3
 800a04c:	2300      	movs	r3, #0
 800a04e:	4602      	mov	r2, r0
 800a050:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a052:	6a21      	ldr	r1, [r4, #32]
 800a054:	4628      	mov	r0, r5
 800a056:	47b0      	blx	r6
 800a058:	1c43      	adds	r3, r0, #1
 800a05a:	89a3      	ldrh	r3, [r4, #12]
 800a05c:	d106      	bne.n	800a06c <__sflush_r+0x68>
 800a05e:	6829      	ldr	r1, [r5, #0]
 800a060:	291d      	cmp	r1, #29
 800a062:	d82b      	bhi.n	800a0bc <__sflush_r+0xb8>
 800a064:	4a29      	ldr	r2, [pc, #164]	; (800a10c <__sflush_r+0x108>)
 800a066:	410a      	asrs	r2, r1
 800a068:	07d6      	lsls	r6, r2, #31
 800a06a:	d427      	bmi.n	800a0bc <__sflush_r+0xb8>
 800a06c:	2200      	movs	r2, #0
 800a06e:	6062      	str	r2, [r4, #4]
 800a070:	04d9      	lsls	r1, r3, #19
 800a072:	6922      	ldr	r2, [r4, #16]
 800a074:	6022      	str	r2, [r4, #0]
 800a076:	d504      	bpl.n	800a082 <__sflush_r+0x7e>
 800a078:	1c42      	adds	r2, r0, #1
 800a07a:	d101      	bne.n	800a080 <__sflush_r+0x7c>
 800a07c:	682b      	ldr	r3, [r5, #0]
 800a07e:	b903      	cbnz	r3, 800a082 <__sflush_r+0x7e>
 800a080:	6560      	str	r0, [r4, #84]	; 0x54
 800a082:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a084:	602f      	str	r7, [r5, #0]
 800a086:	2900      	cmp	r1, #0
 800a088:	d0c9      	beq.n	800a01e <__sflush_r+0x1a>
 800a08a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a08e:	4299      	cmp	r1, r3
 800a090:	d002      	beq.n	800a098 <__sflush_r+0x94>
 800a092:	4628      	mov	r0, r5
 800a094:	f7ff f9f6 	bl	8009484 <_free_r>
 800a098:	2000      	movs	r0, #0
 800a09a:	6360      	str	r0, [r4, #52]	; 0x34
 800a09c:	e7c0      	b.n	800a020 <__sflush_r+0x1c>
 800a09e:	2301      	movs	r3, #1
 800a0a0:	4628      	mov	r0, r5
 800a0a2:	47b0      	blx	r6
 800a0a4:	1c41      	adds	r1, r0, #1
 800a0a6:	d1c8      	bne.n	800a03a <__sflush_r+0x36>
 800a0a8:	682b      	ldr	r3, [r5, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d0c5      	beq.n	800a03a <__sflush_r+0x36>
 800a0ae:	2b1d      	cmp	r3, #29
 800a0b0:	d001      	beq.n	800a0b6 <__sflush_r+0xb2>
 800a0b2:	2b16      	cmp	r3, #22
 800a0b4:	d101      	bne.n	800a0ba <__sflush_r+0xb6>
 800a0b6:	602f      	str	r7, [r5, #0]
 800a0b8:	e7b1      	b.n	800a01e <__sflush_r+0x1a>
 800a0ba:	89a3      	ldrh	r3, [r4, #12]
 800a0bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0c0:	81a3      	strh	r3, [r4, #12]
 800a0c2:	e7ad      	b.n	800a020 <__sflush_r+0x1c>
 800a0c4:	690f      	ldr	r7, [r1, #16]
 800a0c6:	2f00      	cmp	r7, #0
 800a0c8:	d0a9      	beq.n	800a01e <__sflush_r+0x1a>
 800a0ca:	0793      	lsls	r3, r2, #30
 800a0cc:	680e      	ldr	r6, [r1, #0]
 800a0ce:	bf08      	it	eq
 800a0d0:	694b      	ldreq	r3, [r1, #20]
 800a0d2:	600f      	str	r7, [r1, #0]
 800a0d4:	bf18      	it	ne
 800a0d6:	2300      	movne	r3, #0
 800a0d8:	eba6 0807 	sub.w	r8, r6, r7
 800a0dc:	608b      	str	r3, [r1, #8]
 800a0de:	f1b8 0f00 	cmp.w	r8, #0
 800a0e2:	dd9c      	ble.n	800a01e <__sflush_r+0x1a>
 800a0e4:	6a21      	ldr	r1, [r4, #32]
 800a0e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a0e8:	4643      	mov	r3, r8
 800a0ea:	463a      	mov	r2, r7
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	47b0      	blx	r6
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	dc06      	bgt.n	800a102 <__sflush_r+0xfe>
 800a0f4:	89a3      	ldrh	r3, [r4, #12]
 800a0f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0fa:	81a3      	strh	r3, [r4, #12]
 800a0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a100:	e78e      	b.n	800a020 <__sflush_r+0x1c>
 800a102:	4407      	add	r7, r0
 800a104:	eba8 0800 	sub.w	r8, r8, r0
 800a108:	e7e9      	b.n	800a0de <__sflush_r+0xda>
 800a10a:	bf00      	nop
 800a10c:	dfbffffe 	.word	0xdfbffffe

0800a110 <_fflush_r>:
 800a110:	b538      	push	{r3, r4, r5, lr}
 800a112:	690b      	ldr	r3, [r1, #16]
 800a114:	4605      	mov	r5, r0
 800a116:	460c      	mov	r4, r1
 800a118:	b913      	cbnz	r3, 800a120 <_fflush_r+0x10>
 800a11a:	2500      	movs	r5, #0
 800a11c:	4628      	mov	r0, r5
 800a11e:	bd38      	pop	{r3, r4, r5, pc}
 800a120:	b118      	cbz	r0, 800a12a <_fflush_r+0x1a>
 800a122:	6a03      	ldr	r3, [r0, #32]
 800a124:	b90b      	cbnz	r3, 800a12a <_fflush_r+0x1a>
 800a126:	f7fe f929 	bl	800837c <__sinit>
 800a12a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d0f3      	beq.n	800a11a <_fflush_r+0xa>
 800a132:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a134:	07d0      	lsls	r0, r2, #31
 800a136:	d404      	bmi.n	800a142 <_fflush_r+0x32>
 800a138:	0599      	lsls	r1, r3, #22
 800a13a:	d402      	bmi.n	800a142 <_fflush_r+0x32>
 800a13c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a13e:	f7fe fb16 	bl	800876e <__retarget_lock_acquire_recursive>
 800a142:	4628      	mov	r0, r5
 800a144:	4621      	mov	r1, r4
 800a146:	f7ff ff5d 	bl	800a004 <__sflush_r>
 800a14a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a14c:	07da      	lsls	r2, r3, #31
 800a14e:	4605      	mov	r5, r0
 800a150:	d4e4      	bmi.n	800a11c <_fflush_r+0xc>
 800a152:	89a3      	ldrh	r3, [r4, #12]
 800a154:	059b      	lsls	r3, r3, #22
 800a156:	d4e1      	bmi.n	800a11c <_fflush_r+0xc>
 800a158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a15a:	f7fe fb09 	bl	8008770 <__retarget_lock_release_recursive>
 800a15e:	e7dd      	b.n	800a11c <_fflush_r+0xc>

0800a160 <__swhatbuf_r>:
 800a160:	b570      	push	{r4, r5, r6, lr}
 800a162:	460c      	mov	r4, r1
 800a164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a168:	2900      	cmp	r1, #0
 800a16a:	b096      	sub	sp, #88	; 0x58
 800a16c:	4615      	mov	r5, r2
 800a16e:	461e      	mov	r6, r3
 800a170:	da0d      	bge.n	800a18e <__swhatbuf_r+0x2e>
 800a172:	89a3      	ldrh	r3, [r4, #12]
 800a174:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a178:	f04f 0100 	mov.w	r1, #0
 800a17c:	bf0c      	ite	eq
 800a17e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a182:	2340      	movne	r3, #64	; 0x40
 800a184:	2000      	movs	r0, #0
 800a186:	6031      	str	r1, [r6, #0]
 800a188:	602b      	str	r3, [r5, #0]
 800a18a:	b016      	add	sp, #88	; 0x58
 800a18c:	bd70      	pop	{r4, r5, r6, pc}
 800a18e:	466a      	mov	r2, sp
 800a190:	f000 f848 	bl	800a224 <_fstat_r>
 800a194:	2800      	cmp	r0, #0
 800a196:	dbec      	blt.n	800a172 <__swhatbuf_r+0x12>
 800a198:	9901      	ldr	r1, [sp, #4]
 800a19a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a19e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a1a2:	4259      	negs	r1, r3
 800a1a4:	4159      	adcs	r1, r3
 800a1a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1aa:	e7eb      	b.n	800a184 <__swhatbuf_r+0x24>

0800a1ac <__smakebuf_r>:
 800a1ac:	898b      	ldrh	r3, [r1, #12]
 800a1ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1b0:	079d      	lsls	r5, r3, #30
 800a1b2:	4606      	mov	r6, r0
 800a1b4:	460c      	mov	r4, r1
 800a1b6:	d507      	bpl.n	800a1c8 <__smakebuf_r+0x1c>
 800a1b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1bc:	6023      	str	r3, [r4, #0]
 800a1be:	6123      	str	r3, [r4, #16]
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	6163      	str	r3, [r4, #20]
 800a1c4:	b002      	add	sp, #8
 800a1c6:	bd70      	pop	{r4, r5, r6, pc}
 800a1c8:	ab01      	add	r3, sp, #4
 800a1ca:	466a      	mov	r2, sp
 800a1cc:	f7ff ffc8 	bl	800a160 <__swhatbuf_r>
 800a1d0:	9900      	ldr	r1, [sp, #0]
 800a1d2:	4605      	mov	r5, r0
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	f7ff f9c9 	bl	800956c <_malloc_r>
 800a1da:	b948      	cbnz	r0, 800a1f0 <__smakebuf_r+0x44>
 800a1dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1e0:	059a      	lsls	r2, r3, #22
 800a1e2:	d4ef      	bmi.n	800a1c4 <__smakebuf_r+0x18>
 800a1e4:	f023 0303 	bic.w	r3, r3, #3
 800a1e8:	f043 0302 	orr.w	r3, r3, #2
 800a1ec:	81a3      	strh	r3, [r4, #12]
 800a1ee:	e7e3      	b.n	800a1b8 <__smakebuf_r+0xc>
 800a1f0:	89a3      	ldrh	r3, [r4, #12]
 800a1f2:	6020      	str	r0, [r4, #0]
 800a1f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1f8:	81a3      	strh	r3, [r4, #12]
 800a1fa:	9b00      	ldr	r3, [sp, #0]
 800a1fc:	6163      	str	r3, [r4, #20]
 800a1fe:	9b01      	ldr	r3, [sp, #4]
 800a200:	6120      	str	r0, [r4, #16]
 800a202:	b15b      	cbz	r3, 800a21c <__smakebuf_r+0x70>
 800a204:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a208:	4630      	mov	r0, r6
 800a20a:	f000 f81d 	bl	800a248 <_isatty_r>
 800a20e:	b128      	cbz	r0, 800a21c <__smakebuf_r+0x70>
 800a210:	89a3      	ldrh	r3, [r4, #12]
 800a212:	f023 0303 	bic.w	r3, r3, #3
 800a216:	f043 0301 	orr.w	r3, r3, #1
 800a21a:	81a3      	strh	r3, [r4, #12]
 800a21c:	89a3      	ldrh	r3, [r4, #12]
 800a21e:	431d      	orrs	r5, r3
 800a220:	81a5      	strh	r5, [r4, #12]
 800a222:	e7cf      	b.n	800a1c4 <__smakebuf_r+0x18>

0800a224 <_fstat_r>:
 800a224:	b538      	push	{r3, r4, r5, lr}
 800a226:	4d07      	ldr	r5, [pc, #28]	; (800a244 <_fstat_r+0x20>)
 800a228:	2300      	movs	r3, #0
 800a22a:	4604      	mov	r4, r0
 800a22c:	4608      	mov	r0, r1
 800a22e:	4611      	mov	r1, r2
 800a230:	602b      	str	r3, [r5, #0]
 800a232:	f7f9 f833 	bl	800329c <_fstat>
 800a236:	1c43      	adds	r3, r0, #1
 800a238:	d102      	bne.n	800a240 <_fstat_r+0x1c>
 800a23a:	682b      	ldr	r3, [r5, #0]
 800a23c:	b103      	cbz	r3, 800a240 <_fstat_r+0x1c>
 800a23e:	6023      	str	r3, [r4, #0]
 800a240:	bd38      	pop	{r3, r4, r5, pc}
 800a242:	bf00      	nop
 800a244:	20000bb4 	.word	0x20000bb4

0800a248 <_isatty_r>:
 800a248:	b538      	push	{r3, r4, r5, lr}
 800a24a:	4d06      	ldr	r5, [pc, #24]	; (800a264 <_isatty_r+0x1c>)
 800a24c:	2300      	movs	r3, #0
 800a24e:	4604      	mov	r4, r0
 800a250:	4608      	mov	r0, r1
 800a252:	602b      	str	r3, [r5, #0]
 800a254:	f7f9 f832 	bl	80032bc <_isatty>
 800a258:	1c43      	adds	r3, r0, #1
 800a25a:	d102      	bne.n	800a262 <_isatty_r+0x1a>
 800a25c:	682b      	ldr	r3, [r5, #0]
 800a25e:	b103      	cbz	r3, 800a262 <_isatty_r+0x1a>
 800a260:	6023      	str	r3, [r4, #0]
 800a262:	bd38      	pop	{r3, r4, r5, pc}
 800a264:	20000bb4 	.word	0x20000bb4

0800a268 <_sbrk_r>:
 800a268:	b538      	push	{r3, r4, r5, lr}
 800a26a:	4d06      	ldr	r5, [pc, #24]	; (800a284 <_sbrk_r+0x1c>)
 800a26c:	2300      	movs	r3, #0
 800a26e:	4604      	mov	r4, r0
 800a270:	4608      	mov	r0, r1
 800a272:	602b      	str	r3, [r5, #0]
 800a274:	f7f9 f83a 	bl	80032ec <_sbrk>
 800a278:	1c43      	adds	r3, r0, #1
 800a27a:	d102      	bne.n	800a282 <_sbrk_r+0x1a>
 800a27c:	682b      	ldr	r3, [r5, #0]
 800a27e:	b103      	cbz	r3, 800a282 <_sbrk_r+0x1a>
 800a280:	6023      	str	r3, [r4, #0]
 800a282:	bd38      	pop	{r3, r4, r5, pc}
 800a284:	20000bb4 	.word	0x20000bb4

0800a288 <__assert_func>:
 800a288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a28a:	4614      	mov	r4, r2
 800a28c:	461a      	mov	r2, r3
 800a28e:	4b09      	ldr	r3, [pc, #36]	; (800a2b4 <__assert_func+0x2c>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4605      	mov	r5, r0
 800a294:	68d8      	ldr	r0, [r3, #12]
 800a296:	b14c      	cbz	r4, 800a2ac <__assert_func+0x24>
 800a298:	4b07      	ldr	r3, [pc, #28]	; (800a2b8 <__assert_func+0x30>)
 800a29a:	9100      	str	r1, [sp, #0]
 800a29c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2a0:	4906      	ldr	r1, [pc, #24]	; (800a2bc <__assert_func+0x34>)
 800a2a2:	462b      	mov	r3, r5
 800a2a4:	f000 f844 	bl	800a330 <fiprintf>
 800a2a8:	f000 f854 	bl	800a354 <abort>
 800a2ac:	4b04      	ldr	r3, [pc, #16]	; (800a2c0 <__assert_func+0x38>)
 800a2ae:	461c      	mov	r4, r3
 800a2b0:	e7f3      	b.n	800a29a <__assert_func+0x12>
 800a2b2:	bf00      	nop
 800a2b4:	20000128 	.word	0x20000128
 800a2b8:	0800a86f 	.word	0x0800a86f
 800a2bc:	0800a87c 	.word	0x0800a87c
 800a2c0:	0800a8aa 	.word	0x0800a8aa

0800a2c4 <_calloc_r>:
 800a2c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2c6:	fba1 2402 	umull	r2, r4, r1, r2
 800a2ca:	b94c      	cbnz	r4, 800a2e0 <_calloc_r+0x1c>
 800a2cc:	4611      	mov	r1, r2
 800a2ce:	9201      	str	r2, [sp, #4]
 800a2d0:	f7ff f94c 	bl	800956c <_malloc_r>
 800a2d4:	9a01      	ldr	r2, [sp, #4]
 800a2d6:	4605      	mov	r5, r0
 800a2d8:	b930      	cbnz	r0, 800a2e8 <_calloc_r+0x24>
 800a2da:	4628      	mov	r0, r5
 800a2dc:	b003      	add	sp, #12
 800a2de:	bd30      	pop	{r4, r5, pc}
 800a2e0:	220c      	movs	r2, #12
 800a2e2:	6002      	str	r2, [r0, #0]
 800a2e4:	2500      	movs	r5, #0
 800a2e6:	e7f8      	b.n	800a2da <_calloc_r+0x16>
 800a2e8:	4621      	mov	r1, r4
 800a2ea:	f7fe f9c3 	bl	8008674 <memset>
 800a2ee:	e7f4      	b.n	800a2da <_calloc_r+0x16>

0800a2f0 <__ascii_mbtowc>:
 800a2f0:	b082      	sub	sp, #8
 800a2f2:	b901      	cbnz	r1, 800a2f6 <__ascii_mbtowc+0x6>
 800a2f4:	a901      	add	r1, sp, #4
 800a2f6:	b142      	cbz	r2, 800a30a <__ascii_mbtowc+0x1a>
 800a2f8:	b14b      	cbz	r3, 800a30e <__ascii_mbtowc+0x1e>
 800a2fa:	7813      	ldrb	r3, [r2, #0]
 800a2fc:	600b      	str	r3, [r1, #0]
 800a2fe:	7812      	ldrb	r2, [r2, #0]
 800a300:	1e10      	subs	r0, r2, #0
 800a302:	bf18      	it	ne
 800a304:	2001      	movne	r0, #1
 800a306:	b002      	add	sp, #8
 800a308:	4770      	bx	lr
 800a30a:	4610      	mov	r0, r2
 800a30c:	e7fb      	b.n	800a306 <__ascii_mbtowc+0x16>
 800a30e:	f06f 0001 	mvn.w	r0, #1
 800a312:	e7f8      	b.n	800a306 <__ascii_mbtowc+0x16>

0800a314 <__ascii_wctomb>:
 800a314:	b149      	cbz	r1, 800a32a <__ascii_wctomb+0x16>
 800a316:	2aff      	cmp	r2, #255	; 0xff
 800a318:	bf85      	ittet	hi
 800a31a:	238a      	movhi	r3, #138	; 0x8a
 800a31c:	6003      	strhi	r3, [r0, #0]
 800a31e:	700a      	strbls	r2, [r1, #0]
 800a320:	f04f 30ff 	movhi.w	r0, #4294967295
 800a324:	bf98      	it	ls
 800a326:	2001      	movls	r0, #1
 800a328:	4770      	bx	lr
 800a32a:	4608      	mov	r0, r1
 800a32c:	4770      	bx	lr
	...

0800a330 <fiprintf>:
 800a330:	b40e      	push	{r1, r2, r3}
 800a332:	b503      	push	{r0, r1, lr}
 800a334:	4601      	mov	r1, r0
 800a336:	ab03      	add	r3, sp, #12
 800a338:	4805      	ldr	r0, [pc, #20]	; (800a350 <fiprintf+0x20>)
 800a33a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a33e:	6800      	ldr	r0, [r0, #0]
 800a340:	9301      	str	r3, [sp, #4]
 800a342:	f7ff fd45 	bl	8009dd0 <_vfiprintf_r>
 800a346:	b002      	add	sp, #8
 800a348:	f85d eb04 	ldr.w	lr, [sp], #4
 800a34c:	b003      	add	sp, #12
 800a34e:	4770      	bx	lr
 800a350:	20000128 	.word	0x20000128

0800a354 <abort>:
 800a354:	b508      	push	{r3, lr}
 800a356:	2006      	movs	r0, #6
 800a358:	f000 f82c 	bl	800a3b4 <raise>
 800a35c:	2001      	movs	r0, #1
 800a35e:	f7f8 ff4e 	bl	80031fe <_exit>

0800a362 <_raise_r>:
 800a362:	291f      	cmp	r1, #31
 800a364:	b538      	push	{r3, r4, r5, lr}
 800a366:	4604      	mov	r4, r0
 800a368:	460d      	mov	r5, r1
 800a36a:	d904      	bls.n	800a376 <_raise_r+0x14>
 800a36c:	2316      	movs	r3, #22
 800a36e:	6003      	str	r3, [r0, #0]
 800a370:	f04f 30ff 	mov.w	r0, #4294967295
 800a374:	bd38      	pop	{r3, r4, r5, pc}
 800a376:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a378:	b112      	cbz	r2, 800a380 <_raise_r+0x1e>
 800a37a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a37e:	b94b      	cbnz	r3, 800a394 <_raise_r+0x32>
 800a380:	4620      	mov	r0, r4
 800a382:	f000 f831 	bl	800a3e8 <_getpid_r>
 800a386:	462a      	mov	r2, r5
 800a388:	4601      	mov	r1, r0
 800a38a:	4620      	mov	r0, r4
 800a38c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a390:	f000 b818 	b.w	800a3c4 <_kill_r>
 800a394:	2b01      	cmp	r3, #1
 800a396:	d00a      	beq.n	800a3ae <_raise_r+0x4c>
 800a398:	1c59      	adds	r1, r3, #1
 800a39a:	d103      	bne.n	800a3a4 <_raise_r+0x42>
 800a39c:	2316      	movs	r3, #22
 800a39e:	6003      	str	r3, [r0, #0]
 800a3a0:	2001      	movs	r0, #1
 800a3a2:	e7e7      	b.n	800a374 <_raise_r+0x12>
 800a3a4:	2400      	movs	r4, #0
 800a3a6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a3aa:	4628      	mov	r0, r5
 800a3ac:	4798      	blx	r3
 800a3ae:	2000      	movs	r0, #0
 800a3b0:	e7e0      	b.n	800a374 <_raise_r+0x12>
	...

0800a3b4 <raise>:
 800a3b4:	4b02      	ldr	r3, [pc, #8]	; (800a3c0 <raise+0xc>)
 800a3b6:	4601      	mov	r1, r0
 800a3b8:	6818      	ldr	r0, [r3, #0]
 800a3ba:	f7ff bfd2 	b.w	800a362 <_raise_r>
 800a3be:	bf00      	nop
 800a3c0:	20000128 	.word	0x20000128

0800a3c4 <_kill_r>:
 800a3c4:	b538      	push	{r3, r4, r5, lr}
 800a3c6:	4d07      	ldr	r5, [pc, #28]	; (800a3e4 <_kill_r+0x20>)
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	4608      	mov	r0, r1
 800a3ce:	4611      	mov	r1, r2
 800a3d0:	602b      	str	r3, [r5, #0]
 800a3d2:	f7f8 ff04 	bl	80031de <_kill>
 800a3d6:	1c43      	adds	r3, r0, #1
 800a3d8:	d102      	bne.n	800a3e0 <_kill_r+0x1c>
 800a3da:	682b      	ldr	r3, [r5, #0]
 800a3dc:	b103      	cbz	r3, 800a3e0 <_kill_r+0x1c>
 800a3de:	6023      	str	r3, [r4, #0]
 800a3e0:	bd38      	pop	{r3, r4, r5, pc}
 800a3e2:	bf00      	nop
 800a3e4:	20000bb4 	.word	0x20000bb4

0800a3e8 <_getpid_r>:
 800a3e8:	f7f8 bef1 	b.w	80031ce <_getpid>

0800a3ec <_init>:
 800a3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ee:	bf00      	nop
 800a3f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3f2:	bc08      	pop	{r3}
 800a3f4:	469e      	mov	lr, r3
 800a3f6:	4770      	bx	lr

0800a3f8 <_fini>:
 800a3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fa:	bf00      	nop
 800a3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3fe:	bc08      	pop	{r3}
 800a400:	469e      	mov	lr, r3
 800a402:	4770      	bx	lr
