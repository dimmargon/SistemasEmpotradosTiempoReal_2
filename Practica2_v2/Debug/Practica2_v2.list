
Practica2_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008038  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080081c8  080081c8  000181c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008280  08008280  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08008280  08008280  00018280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008288  08008288  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008288  08008288  00018288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800828c  0800828c  0001828c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08008290  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003a18  20000064  080082f4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003a7c  080082f4  00023a7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002831c  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f9a  00000000  00000000  000483f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000023b8  00000000  00000000  0004d390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001bd0  00000000  00000000  0004f748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b0fd  00000000  00000000  00051318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029bc4  00000000  00000000  0007c415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00108502  00000000  00000000  000a5fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009c7c  00000000  00000000  001ae4dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001b8158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081b0 	.word	0x080081b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	080081b0 	.word	0x080081b0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <CreateLedTask>:
 */
TaskHandle_t taskHandler;
extern uint8_t numPulsaciones;


void CreateLedTask(){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af02      	add	r7, sp, #8
//	xTaskCreate(animationTask2, "LedAnimationTask2", 128, NULL, 1, NULL);
//	xTaskCreate(animationTask3, "LedAnimationTask2", 128, NULL, 1, NULL);
	/*
	 * EJERCICIO 5
	 */
	xTaskCreate(JoyTask, "JoyTask", 128, NULL, 1, NULL);
 80004d2:	2300      	movs	r3, #0
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	2301      	movs	r3, #1
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	2300      	movs	r3, #0
 80004dc:	2280      	movs	r2, #128	; 0x80
 80004de:	4908      	ldr	r1, [pc, #32]	; (8000500 <CreateLedTask+0x34>)
 80004e0:	4808      	ldr	r0, [pc, #32]	; (8000504 <CreateLedTask+0x38>)
 80004e2:	f005 fe22 	bl	800612a <xTaskCreate>
	/*
	 * EJERCICIO 6
	 */
	xTaskCreate(LedAnimationTask6, "AnimationTask", 128, NULL, 1, &taskHandler);
 80004e6:	4b08      	ldr	r3, [pc, #32]	; (8000508 <CreateLedTask+0x3c>)
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	2301      	movs	r3, #1
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2300      	movs	r3, #0
 80004f0:	2280      	movs	r2, #128	; 0x80
 80004f2:	4906      	ldr	r1, [pc, #24]	; (800050c <CreateLedTask+0x40>)
 80004f4:	4806      	ldr	r0, [pc, #24]	; (8000510 <CreateLedTask+0x44>)
 80004f6:	f005 fe18 	bl	800612a <xTaskCreate>
}
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	080081c8 	.word	0x080081c8
 8000504:	080005b1 	.word	0x080005b1
 8000508:	20000080 	.word	0x20000080
 800050c:	080081d0 	.word	0x080081d0
 8000510:	080005e1 	.word	0x080005e1

08000514 <animationTask1>:
}

/*
 * EJERCICIO 4
 */
void animationTask1(void *pArg) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
//	for(;;){
	LED_Toggle(1);
 800051c:	2001      	movs	r0, #1
 800051e:	f000 f8b5 	bl	800068c <LED_Toggle>
	vTaskDelay(200);
 8000522:	20c8      	movs	r0, #200	; 0xc8
 8000524:	f005 ff5c 	bl	80063e0 <vTaskDelay>
	LED_Toggle(1);
 8000528:	2001      	movs	r0, #1
 800052a:	f000 f8af 	bl	800068c <LED_Toggle>
		vTaskDelay(200);
 800052e:	20c8      	movs	r0, #200	; 0xc8
 8000530:	f005 ff56 	bl	80063e0 <vTaskDelay>
		LED_Toggle(1);
 8000534:	2001      	movs	r0, #1
 8000536:	f000 f8a9 	bl	800068c <LED_Toggle>
			vTaskDelay(200);
 800053a:	20c8      	movs	r0, #200	; 0xc8
 800053c:	f005 ff50 	bl	80063e0 <vTaskDelay>
//	}
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <animationTask2>:

void animationTask2(void *pArg) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
//	for(;;){
	LED_Toggle(2);
 8000550:	2002      	movs	r0, #2
 8000552:	f000 f89b 	bl	800068c <LED_Toggle>
	vTaskDelay(200);
 8000556:	20c8      	movs	r0, #200	; 0xc8
 8000558:	f005 ff42 	bl	80063e0 <vTaskDelay>
	LED_Toggle(2);
 800055c:	2002      	movs	r0, #2
 800055e:	f000 f895 	bl	800068c <LED_Toggle>
		vTaskDelay(200);
 8000562:	20c8      	movs	r0, #200	; 0xc8
 8000564:	f005 ff3c 	bl	80063e0 <vTaskDelay>
		LED_Toggle(2);
 8000568:	2002      	movs	r0, #2
 800056a:	f000 f88f 	bl	800068c <LED_Toggle>
			vTaskDelay(200);
 800056e:	20c8      	movs	r0, #200	; 0xc8
 8000570:	f005 ff36 	bl	80063e0 <vTaskDelay>
//	}
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <animationTask3>:

void animationTask3(void *pArg) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
//	for(;;){
	LED_Toggle(3);
 8000584:	2003      	movs	r0, #3
 8000586:	f000 f881 	bl	800068c <LED_Toggle>
	vTaskDelay(200);
 800058a:	20c8      	movs	r0, #200	; 0xc8
 800058c:	f005 ff28 	bl	80063e0 <vTaskDelay>
	LED_Toggle(3);
 8000590:	2003      	movs	r0, #3
 8000592:	f000 f87b 	bl	800068c <LED_Toggle>
		vTaskDelay(200);
 8000596:	20c8      	movs	r0, #200	; 0xc8
 8000598:	f005 ff22 	bl	80063e0 <vTaskDelay>
		LED_Toggle(3);
 800059c:	2003      	movs	r0, #3
 800059e:	f000 f875 	bl	800068c <LED_Toggle>
			vTaskDelay(200);
 80005a2:	20c8      	movs	r0, #200	; 0xc8
 80005a4:	f005 ff1c 	bl	80063e0 <vTaskDelay>
//	}
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <JoyTask>:

/*
 * EJERCICIO 5
 */
void JoyTask(void *pArg){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	for(;;){
		uint8_t joyState = ReadJoy();
 80005b8:	f000 f836 	bl	8000628 <ReadJoy>
 80005bc:	4603      	mov	r3, r0
 80005be:	73fb      	strb	r3, [r7, #15]
		if (joyState != 0) {
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d006      	beq.n	80005d4 <JoyTask+0x24>
//			LED_Toggle(0);
			xTaskNotifyGive(taskHandler);
 80005c6:	4b05      	ldr	r3, [pc, #20]	; (80005dc <JoyTask+0x2c>)
 80005c8:	6818      	ldr	r0, [r3, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	2202      	movs	r2, #2
 80005ce:	2100      	movs	r1, #0
 80005d0:	f006 fc6e 	bl	8006eb0 <xTaskGenericNotify>
		}
		vTaskDelay(10);
 80005d4:	200a      	movs	r0, #10
 80005d6:	f005 ff03 	bl	80063e0 <vTaskDelay>
	for(;;){
 80005da:	e7ed      	b.n	80005b8 <JoyTask+0x8>
 80005dc:	20000080 	.word	0x20000080

080005e0 <LedAnimationTask6>:
}

/*
 * EJERCICIO 6
 */
void LedAnimationTask6(void *pArg) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]

	for (;;) {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80005e8:	f04f 31ff 	mov.w	r1, #4294967295
 80005ec:	2001      	movs	r0, #1
 80005ee:	f006 fc13 	bl	8006e18 <ulTaskNotifyTake>
		switch(numPulsaciones){
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <LedAnimationTask6+0x44>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b03      	cmp	r3, #3
 80005f8:	d00e      	beq.n	8000618 <LedAnimationTask6+0x38>
 80005fa:	2b03      	cmp	r3, #3
 80005fc:	dcf4      	bgt.n	80005e8 <LedAnimationTask6+0x8>
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d002      	beq.n	8000608 <LedAnimationTask6+0x28>
 8000602:	2b02      	cmp	r3, #2
 8000604:	d004      	beq.n	8000610 <LedAnimationTask6+0x30>
 8000606:	e00b      	b.n	8000620 <LedAnimationTask6+0x40>
		case 1:
			animationTask1(NULL);
 8000608:	2000      	movs	r0, #0
 800060a:	f7ff ff83 	bl	8000514 <animationTask1>
			break;
 800060e:	e007      	b.n	8000620 <LedAnimationTask6+0x40>
		case 2:
			animationTask2(NULL);
 8000610:	2000      	movs	r0, #0
 8000612:	f7ff ff99 	bl	8000548 <animationTask2>
			break;
 8000616:	e003      	b.n	8000620 <LedAnimationTask6+0x40>
		case 3:
			animationTask3(NULL);
 8000618:	2000      	movs	r0, #0
 800061a:	f7ff ffaf 	bl	800057c <animationTask3>
			break;
 800061e:	bf00      	nop
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000620:	e7e2      	b.n	80005e8 <LedAnimationTask6+0x8>
 8000622:	bf00      	nop
 8000624:	20000084 	.word	0x20000084

08000628 <ReadJoy>:
//}

uint8_t numPulsaciones = 0;
uint8_t estadoAnterior = 1;  // 1 significa que no está presionado (GPIO_PIN_SET)

uint8_t ReadJoy(void){
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
    uint8_t estadoActual = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800062e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000632:	4813      	ldr	r0, [pc, #76]	; (8000680 <ReadJoy+0x58>)
 8000634:	f001 fbc6 	bl	8001dc4 <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	71fb      	strb	r3, [r7, #7]

    // Detectar flanco de bajada (cuando pasa de no presionado a presionado)
    if(estadoAnterior == GPIO_PIN_SET && estadoActual == GPIO_PIN_RESET){
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <ReadJoy+0x5c>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d10f      	bne.n	8000664 <ReadJoy+0x3c>
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d10c      	bne.n	8000664 <ReadJoy+0x3c>
        numPulsaciones++;  // Incrementar el contador de pulsaciones
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <ReadJoy+0x60>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	3301      	adds	r3, #1
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <ReadJoy+0x60>)
 8000654:	701a      	strb	r2, [r3, #0]
        if(numPulsaciones==4) numPulsaciones=1;
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <ReadJoy+0x60>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b04      	cmp	r3, #4
 800065c:	d102      	bne.n	8000664 <ReadJoy+0x3c>
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <ReadJoy+0x60>)
 8000660:	2201      	movs	r2, #1
 8000662:	701a      	strb	r2, [r3, #0]
    }

    // Actualizar el estado anterior para la próxima lectura
    estadoAnterior = estadoActual;
 8000664:	4a07      	ldr	r2, [pc, #28]	; (8000684 <ReadJoy+0x5c>)
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	7013      	strb	r3, [r2, #0]

    // Devolver 1 si el botón está presionado, 0 si no lo está
    if (estadoActual == GPIO_PIN_RESET) {
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d101      	bne.n	8000674 <ReadJoy+0x4c>
        return 1;
 8000670:	2301      	movs	r3, #1
 8000672:	e000      	b.n	8000676 <ReadJoy+0x4e>
    } else {
        return 0;
 8000674:	2300      	movs	r3, #0
    }
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	48000800 	.word	0x48000800
 8000684:	20000000 	.word	0x20000000
 8000688:	20000084 	.word	0x20000084

0800068c <LED_Toggle>:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, RESET);
		break;
	}
}

void LED_Toggle(uint8_t nLed) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	switch (nLed) {
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b03      	cmp	r3, #3
 800069a:	d82d      	bhi.n	80006f8 <LED_Toggle+0x6c>
 800069c:	a201      	add	r2, pc, #4	; (adr r2, 80006a4 <LED_Toggle+0x18>)
 800069e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a2:	bf00      	nop
 80006a4:	080006b5 	.word	0x080006b5
 80006a8:	080006d5 	.word	0x080006d5
 80006ac:	080006e1 	.word	0x080006e1
 80006b0:	080006ed 	.word	0x080006ed
	case 0:
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006b4:	2120      	movs	r1, #32
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ba:	f001 fbb3 	bl	8001e24 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80006be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c2:	480f      	ldr	r0, [pc, #60]	; (8000700 <LED_Toggle+0x74>)
 80006c4:	f001 fbae 	bl	8001e24 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 80006c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <LED_Toggle+0x78>)
 80006ce:	f001 fba9 	bl	8001e24 <HAL_GPIO_TogglePin>
		break;
 80006d2:	e011      	b.n	80006f8 <LED_Toggle+0x6c>
	case 1:
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006d4:	2120      	movs	r1, #32
 80006d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006da:	f001 fba3 	bl	8001e24 <HAL_GPIO_TogglePin>
		break;
 80006de:	e00b      	b.n	80006f8 <LED_Toggle+0x6c>
	case 2:
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80006e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e4:	4806      	ldr	r0, [pc, #24]	; (8000700 <LED_Toggle+0x74>)
 80006e6:	f001 fb9d 	bl	8001e24 <HAL_GPIO_TogglePin>
		break;
 80006ea:	e005      	b.n	80006f8 <LED_Toggle+0x6c>
	case 3:
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 80006ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <LED_Toggle+0x78>)
 80006f2:	f001 fb97 	bl	8001e24 <HAL_GPIO_TogglePin>
		break;
 80006f6:	bf00      	nop
	}
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	48000400 	.word	0x48000400
 8000704:	48000800 	.word	0x48000800

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070c:	f000 ff65 	bl	80015da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000710:	f000 f826 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000714:	f000 f9f0 	bl	8000af8 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000718:	f000 f884 	bl	8000824 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800071c:	f000 f8ba 	bl	8000894 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000720:	f000 f8f8 	bl	8000914 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000724:	f000 f91c 	bl	8000960 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000728:	f000 f958 	bl	80009dc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800072c:	f000 f986 	bl	8000a3c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000730:	f000 f9b4 	bl	8000a9c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000734:	f004 fdd0 	bl	80052d8 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  CreateLedTask();
 8000738:	f7ff fec8 	bl	80004cc <CreateLedTask>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800073c:	4a05      	ldr	r2, [pc, #20]	; (8000754 <main+0x4c>)
 800073e:	2100      	movs	r1, #0
 8000740:	4805      	ldr	r0, [pc, #20]	; (8000758 <main+0x50>)
 8000742:	f004 fe13 	bl	800536c <osThreadNew>
 8000746:	4603      	mov	r3, r0
 8000748:	4a04      	ldr	r2, [pc, #16]	; (800075c <main+0x54>)
 800074a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800074c:	f004 fde8 	bl	8005320 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000750:	e7fe      	b.n	8000750 <main+0x48>
 8000752:	bf00      	nop
 8000754:	08008214 	.word	0x08008214
 8000758:	08000e59 	.word	0x08000e59
 800075c:	200007b0 	.word	0x200007b0

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b096      	sub	sp, #88	; 0x58
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2244      	movs	r2, #68	; 0x44
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f007 fc34 	bl	8007fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	463b      	mov	r3, r7
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000782:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000786:	f001 fe0d 	bl	80023a4 <HAL_PWREx_ControlVoltageScaling>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000790:	f000 fb7c 	bl	8000e8c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000794:	f001 fde8 	bl	8002368 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000798:	4b21      	ldr	r3, [pc, #132]	; (8000820 <SystemClock_Config+0xc0>)
 800079a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800079e:	4a20      	ldr	r2, [pc, #128]	; (8000820 <SystemClock_Config+0xc0>)
 80007a0:	f023 0318 	bic.w	r3, r3, #24
 80007a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80007a8:	2314      	movs	r3, #20
 80007aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007ac:	2301      	movs	r3, #1
 80007ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007b0:	2301      	movs	r3, #1
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007b8:	2360      	movs	r3, #96	; 0x60
 80007ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007bc:	2302      	movs	r3, #2
 80007be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007c0:	2301      	movs	r3, #1
 80007c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007c4:	2301      	movs	r3, #1
 80007c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007c8:	2328      	movs	r3, #40	; 0x28
 80007ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007cc:	2307      	movs	r3, #7
 80007ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4618      	mov	r0, r3
 80007de:	f001 ff03 	bl	80025e8 <HAL_RCC_OscConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80007e8:	f000 fb50 	bl	8000e8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ec:	230f      	movs	r3, #15
 80007ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f0:	2303      	movs	r3, #3
 80007f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000800:	463b      	mov	r3, r7
 8000802:	2104      	movs	r1, #4
 8000804:	4618      	mov	r0, r3
 8000806:	f002 facb 	bl	8002da0 <HAL_RCC_ClockConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000810:	f000 fb3c 	bl	8000e8c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000814:	f003 f804 	bl	8003820 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000818:	bf00      	nop
 800081a:	3758      	adds	r7, #88	; 0x58
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40021000 	.word	0x40021000

08000824 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_DFSDM1_Init+0x68>)
 800082a:	4a19      	ldr	r2, [pc, #100]	; (8000890 <MX_DFSDM1_Init+0x6c>)
 800082c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_DFSDM1_Init+0x68>)
 8000830:	2201      	movs	r2, #1
 8000832:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_DFSDM1_Init+0x68>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_DFSDM1_Init+0x68>)
 800083c:	2202      	movs	r2, #2
 800083e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_DFSDM1_Init+0x68>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_DFSDM1_Init+0x68>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_DFSDM1_Init+0x68>)
 800084e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000852:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000854:	4b0d      	ldr	r3, [pc, #52]	; (800088c <MX_DFSDM1_Init+0x68>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_DFSDM1_Init+0x68>)
 800085c:	2204      	movs	r2, #4
 800085e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <MX_DFSDM1_Init+0x68>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_DFSDM1_Init+0x68>)
 8000868:	2201      	movs	r2, #1
 800086a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <MX_DFSDM1_Init+0x68>)
 800086e:	2200      	movs	r2, #0
 8000870:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_DFSDM1_Init+0x68>)
 8000874:	2200      	movs	r2, #0
 8000876:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <MX_DFSDM1_Init+0x68>)
 800087a:	f000 ffed 	bl	8001858 <HAL_DFSDM_ChannelInit>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000884:	f000 fb02 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000088 	.word	0x20000088
 8000890:	40016020 	.word	0x40016020

08000894 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000898:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <MX_I2C2_Init+0x74>)
 800089a:	4a1c      	ldr	r2, [pc, #112]	; (800090c <MX_I2C2_Init+0x78>)
 800089c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800089e:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_I2C2_Init+0x74>)
 80008a0:	4a1b      	ldr	r2, [pc, #108]	; (8000910 <MX_I2C2_Init+0x7c>)
 80008a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_I2C2_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <MX_I2C2_Init+0x74>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_I2C2_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_I2C2_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_I2C2_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_I2C2_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_I2C2_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008ce:	480e      	ldr	r0, [pc, #56]	; (8000908 <MX_I2C2_Init+0x74>)
 80008d0:	f001 fae5 	bl	8001e9e <HAL_I2C_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008da:	f000 fad7 	bl	8000e8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008de:	2100      	movs	r1, #0
 80008e0:	4809      	ldr	r0, [pc, #36]	; (8000908 <MX_I2C2_Init+0x74>)
 80008e2:	f001 fb77 	bl	8001fd4 <HAL_I2CEx_ConfigAnalogFilter>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008ec:	f000 face 	bl	8000e8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008f0:	2100      	movs	r1, #0
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_I2C2_Init+0x74>)
 80008f4:	f001 fbb9 	bl	800206a <HAL_I2CEx_ConfigDigitalFilter>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008fe:	f000 fac5 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200000c0 	.word	0x200000c0
 800090c:	40005800 	.word	0x40005800
 8000910:	10909cec 	.word	0x10909cec

08000914 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_QUADSPI_Init+0x44>)
 800091a:	4a10      	ldr	r2, [pc, #64]	; (800095c <MX_QUADSPI_Init+0x48>)
 800091c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_QUADSPI_Init+0x44>)
 8000920:	2202      	movs	r2, #2
 8000922:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_QUADSPI_Init+0x44>)
 8000926:	2204      	movs	r2, #4
 8000928:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_QUADSPI_Init+0x44>)
 800092c:	2210      	movs	r2, #16
 800092e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_QUADSPI_Init+0x44>)
 8000932:	2217      	movs	r2, #23
 8000934:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_QUADSPI_Init+0x44>)
 8000938:	2200      	movs	r2, #0
 800093a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_QUADSPI_Init+0x44>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_QUADSPI_Init+0x44>)
 8000944:	f001 fd94 	bl	8002470 <HAL_QSPI_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800094e:	f000 fa9d 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000114 	.word	0x20000114
 800095c:	a0001000 	.word	0xa0001000

08000960 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_SPI3_Init+0x74>)
 8000966:	4a1c      	ldr	r2, [pc, #112]	; (80009d8 <MX_SPI3_Init+0x78>)
 8000968:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_SPI3_Init+0x74>)
 800096c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000970:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_SPI3_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_SPI3_Init+0x74>)
 800097a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800097e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_SPI3_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <MX_SPI3_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_SPI3_Init+0x74>)
 800098e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000992:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_SPI3_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_SPI3_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_SPI3_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_SPI3_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_SPI3_Init+0x74>)
 80009ae:	2207      	movs	r2, #7
 80009b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MX_SPI3_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_SPI3_Init+0x74>)
 80009ba:	2208      	movs	r2, #8
 80009bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_SPI3_Init+0x74>)
 80009c0:	f003 f910 	bl	8003be4 <HAL_SPI_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80009ca:	f000 fa5f 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000158 	.word	0x20000158
 80009d8:	40003c00 	.word	0x40003c00

080009dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_USART1_UART_Init+0x58>)
 80009e2:	4a15      	ldr	r2, [pc, #84]	; (8000a38 <MX_USART1_UART_Init+0x5c>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_USART1_UART_Init+0x58>)
 80009e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_USART1_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_USART1_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_USART1_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_USART1_UART_Init+0x58>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_USART1_UART_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_USART1_UART_Init+0x58>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_USART1_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_USART1_UART_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_USART1_UART_Init+0x58>)
 8000a20:	f003 fc48 	bl	80042b4 <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a2a:	f000 fa2f 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200001bc 	.word	0x200001bc
 8000a38:	40013800 	.word	0x40013800

08000a3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_USART3_UART_Init+0x58>)
 8000a42:	4a15      	ldr	r2, [pc, #84]	; (8000a98 <MX_USART3_UART_Init+0x5c>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_USART3_UART_Init+0x58>)
 8000a48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_USART3_UART_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_USART3_UART_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_USART3_UART_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_USART3_UART_Init+0x58>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_USART3_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_USART3_UART_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_USART3_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_USART3_UART_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_USART3_UART_Init+0x58>)
 8000a80:	f003 fc18 	bl	80042b4 <HAL_UART_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a8a:	f000 f9ff 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000244 	.word	0x20000244
 8000a98:	40004800 	.word	0x40004800

08000a9c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000aa6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aaa:	2206      	movs	r2, #6
 8000aac:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae0:	f001 fb0f 	bl	8002102 <HAL_PCD_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000aea:	f000 f9cf 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200002cc 	.word	0x200002cc

08000af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b0e:	4bbc      	ldr	r3, [pc, #752]	; (8000e00 <MX_GPIO_Init+0x308>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	4abb      	ldr	r2, [pc, #748]	; (8000e00 <MX_GPIO_Init+0x308>)
 8000b14:	f043 0310 	orr.w	r3, r3, #16
 8000b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1a:	4bb9      	ldr	r3, [pc, #740]	; (8000e00 <MX_GPIO_Init+0x308>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	f003 0310 	and.w	r3, r3, #16
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b26:	4bb6      	ldr	r3, [pc, #728]	; (8000e00 <MX_GPIO_Init+0x308>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	4ab5      	ldr	r2, [pc, #724]	; (8000e00 <MX_GPIO_Init+0x308>)
 8000b2c:	f043 0304 	orr.w	r3, r3, #4
 8000b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b32:	4bb3      	ldr	r3, [pc, #716]	; (8000e00 <MX_GPIO_Init+0x308>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	f003 0304 	and.w	r3, r3, #4
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	4bb0      	ldr	r3, [pc, #704]	; (8000e00 <MX_GPIO_Init+0x308>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	4aaf      	ldr	r2, [pc, #700]	; (8000e00 <MX_GPIO_Init+0x308>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4a:	4bad      	ldr	r3, [pc, #692]	; (8000e00 <MX_GPIO_Init+0x308>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	4baa      	ldr	r3, [pc, #680]	; (8000e00 <MX_GPIO_Init+0x308>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	4aa9      	ldr	r2, [pc, #676]	; (8000e00 <MX_GPIO_Init+0x308>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b62:	4ba7      	ldr	r3, [pc, #668]	; (8000e00 <MX_GPIO_Init+0x308>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b6e:	4ba4      	ldr	r3, [pc, #656]	; (8000e00 <MX_GPIO_Init+0x308>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	4aa3      	ldr	r2, [pc, #652]	; (8000e00 <MX_GPIO_Init+0x308>)
 8000b74:	f043 0308 	orr.w	r3, r3, #8
 8000b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7a:	4ba1      	ldr	r3, [pc, #644]	; (8000e00 <MX_GPIO_Init+0x308>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	f003 0308 	and.w	r3, r3, #8
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000b8c:	489d      	ldr	r0, [pc, #628]	; (8000e04 <MX_GPIO_Init+0x30c>)
 8000b8e:	f001 f931 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|GPIO_PIN_5|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f248 1124 	movw	r1, #33060	; 0x8124
 8000b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9c:	f001 f92a 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|GPIO_PIN_14
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000ba6:	4898      	ldr	r0, [pc, #608]	; (8000e08 <MX_GPIO_Init+0x310>)
 8000ba8:	f001 f924 	bl	8001df4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f241 0181 	movw	r1, #4225	; 0x1081
 8000bb2:	4896      	ldr	r0, [pc, #600]	; (8000e0c <MX_GPIO_Init+0x314>)
 8000bb4:	f001 f91e 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bbe:	4893      	ldr	r0, [pc, #588]	; (8000e0c <MX_GPIO_Init+0x314>)
 8000bc0:	f001 f918 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000bca:	4891      	ldr	r0, [pc, #580]	; (8000e10 <MX_GPIO_Init+0x318>)
 8000bcc:	f001 f912 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2120      	movs	r1, #32
 8000bd4:	488c      	ldr	r0, [pc, #560]	; (8000e08 <MX_GPIO_Init+0x310>)
 8000bd6:	f001 f90d 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	2101      	movs	r1, #1
 8000bde:	4889      	ldr	r0, [pc, #548]	; (8000e04 <MX_GPIO_Init+0x30c>)
 8000be0:	f001 f908 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000be4:	f240 1315 	movw	r3, #277	; 0x115
 8000be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	2301      	movs	r3, #1
 8000bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4881      	ldr	r0, [pc, #516]	; (8000e04 <MX_GPIO_Init+0x30c>)
 8000bfe:	f000 ff37 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000c02:	236a      	movs	r3, #106	; 0x6a
 8000c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	487b      	ldr	r0, [pc, #492]	; (8000e04 <MX_GPIO_Init+0x30c>)
 8000c18:	f000 ff2a 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4877      	ldr	r0, [pc, #476]	; (8000e10 <MX_GPIO_Init+0x318>)
 8000c32:	f000 ff1d 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000c36:	233f      	movs	r3, #63	; 0x3f
 8000c38:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c3a:	230b      	movs	r3, #11
 8000c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	4871      	ldr	r0, [pc, #452]	; (8000e10 <MX_GPIO_Init+0x318>)
 8000c4a:	f000 ff11 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c5e:	2308      	movs	r3, #8
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6c:	f000 ff00 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin PA5 SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|GPIO_PIN_5|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000c70:	f248 1324 	movw	r3, #33060	; 0x8124
 8000c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8c:	f000 fef0 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000c90:	2308      	movs	r3, #8
 8000c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cae:	f000 fedf 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000cb2:	2310      	movs	r3, #16
 8000cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cb6:	230b      	movs	r3, #11
 8000cb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc8:	f000 fed2 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000ccc:	23c0      	movs	r3, #192	; 0xc0
 8000cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cdc:	2305      	movs	r3, #5
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cea:	f000 fec1 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cf2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4619      	mov	r1, r3
 8000d02:	4841      	ldr	r0, [pc, #260]	; (8000e08 <MX_GPIO_Init+0x310>)
 8000d04:	f000 feb4 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d0c:	230b      	movs	r3, #11
 8000d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	483b      	ldr	r0, [pc, #236]	; (8000e08 <MX_GPIO_Init+0x310>)
 8000d1c:	f000 fea8 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin PB14
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|GPIO_PIN_14
 8000d20:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000d24:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	4833      	ldr	r0, [pc, #204]	; (8000e08 <MX_GPIO_Init+0x310>)
 8000d3a:	f000 fe99 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000d3e:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000d42:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d44:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	482d      	ldr	r0, [pc, #180]	; (8000e0c <MX_GPIO_Init+0x314>)
 8000d56:	f000 fe8b 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000d5a:	f243 0381 	movw	r3, #12417	; 0x3081
 8000d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4619      	mov	r1, r3
 8000d72:	4826      	ldr	r0, [pc, #152]	; (8000e0c <MX_GPIO_Init+0x314>)
 8000d74:	f000 fe7c 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin PC9 */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|GPIO_PIN_9;
 8000d78:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	481f      	ldr	r0, [pc, #124]	; (8000e10 <MX_GPIO_Init+0x318>)
 8000d92:	f000 fe6d 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000d96:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d9c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	4818      	ldr	r0, [pc, #96]	; (8000e10 <MX_GPIO_Init+0x318>)
 8000dae:	f000 fe5f 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000db2:	2302      	movs	r3, #2
 8000db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dc2:	2305      	movs	r3, #5
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480f      	ldr	r0, [pc, #60]	; (8000e0c <MX_GPIO_Init+0x314>)
 8000dce:	f000 fe4f 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000dd2:	2378      	movs	r3, #120	; 0x78
 8000dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dde:	2303      	movs	r3, #3
 8000de0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000de2:	2307      	movs	r3, #7
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <MX_GPIO_Init+0x314>)
 8000dee:	f000 fe3f 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000df2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000df6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df8:	2312      	movs	r3, #18
 8000dfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	e009      	b.n	8000e14 <MX_GPIO_Init+0x31c>
 8000e00:	40021000 	.word	0x40021000
 8000e04:	48001000 	.word	0x48001000
 8000e08:	48000400 	.word	0x48000400
 8000e0c:	48000c00 	.word	0x48000c00
 8000e10:	48000800 	.word	0x48000800
 8000e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e16:	2303      	movs	r3, #3
 8000e18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	480b      	ldr	r0, [pc, #44]	; (8000e54 <MX_GPIO_Init+0x35c>)
 8000e26:	f000 fe23 	bl	8001a70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2105      	movs	r1, #5
 8000e2e:	2017      	movs	r0, #23
 8000e30:	f000 fce8 	bl	8001804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e34:	2017      	movs	r0, #23
 8000e36:	f000 fd01 	bl	800183c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2105      	movs	r1, #5
 8000e3e:	2028      	movs	r0, #40	; 0x28
 8000e40:	f000 fce0 	bl	8001804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e44:	2028      	movs	r0, #40	; 0x28
 8000e46:	f000 fcf9 	bl	800183c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e4a:	bf00      	nop
 8000e4c:	3728      	adds	r7, #40	; 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	48000400 	.word	0x48000400

08000e58 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e60:	2001      	movs	r0, #1
 8000e62:	f004 fb15 	bl	8005490 <osDelay>
 8000e66:	e7fb      	b.n	8000e60 <StartDefaultTask+0x8>

08000e68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d101      	bne.n	8000e7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e7a:	f000 fbc7 	bl	800160c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40014800 	.word	0x40014800

08000e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e90:	b672      	cpsid	i
}
 8000e92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <Error_Handler+0x8>
	...

08000e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea2:	4a10      	ldr	r2, [pc, #64]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	210f      	movs	r1, #15
 8000ed2:	f06f 0001 	mvn.w	r0, #1
 8000ed6:	f000 fc95 	bl	8001804 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b0ac      	sub	sp, #176	; 0xb0
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2288      	movs	r2, #136	; 0x88
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f007 f867 	bl	8007fdc <memset>
  if(DFSDM1_Init == 0)
 8000f0e:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d142      	bne.n	8000f9c <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000f16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f1a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4618      	mov	r0, r3
 8000f28:	f002 f990 	bl	800324c <HAL_RCCEx_PeriphCLKConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000f32:	f7ff ffab 	bl	8000e8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000f36:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3a:	4a1b      	ldr	r2, [pc, #108]	; (8000fa8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f40:	6613      	str	r3, [r2, #96]	; 0x60
 8000f42:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	4a15      	ldr	r2, [pc, #84]	; (8000fa8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f54:	f043 0310 	orr.w	r3, r3, #16
 8000f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f003 0310 	and.w	r3, r3, #16
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000f66:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000f6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f80:	2306      	movs	r3, #6
 8000f82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f86:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4807      	ldr	r0, [pc, #28]	; (8000fac <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000f8e:	f000 fd6f 	bl	8001a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000f92:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	3301      	adds	r3, #1
 8000f98:	4a02      	ldr	r2, [pc, #8]	; (8000fa4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f9a:	6013      	str	r3, [r2, #0]
  }

}
 8000f9c:	bf00      	nop
 8000f9e:	37b0      	adds	r7, #176	; 0xb0
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200007b4 	.word	0x200007b4
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	48001000 	.word	0x48001000

08000fb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b0ac      	sub	sp, #176	; 0xb0
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2288      	movs	r2, #136	; 0x88
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f007 f803 	bl	8007fdc <memset>
  if(hi2c->Instance==I2C2)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a21      	ldr	r2, [pc, #132]	; (8001060 <HAL_I2C_MspInit+0xb0>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d13b      	bne.n	8001058 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000fe0:	2380      	movs	r3, #128	; 0x80
 8000fe2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4618      	mov	r0, r3
 8000fee:	f002 f92d 	bl	800324c <HAL_RCCEx_PeriphCLKConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ff8:	f7ff ff48 	bl	8000e8c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <HAL_I2C_MspInit+0xb4>)
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001000:	4a18      	ldr	r2, [pc, #96]	; (8001064 <HAL_I2C_MspInit+0xb4>)
 8001002:	f043 0302 	orr.w	r3, r3, #2
 8001006:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <HAL_I2C_MspInit+0xb4>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001014:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001018:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800101c:	2312      	movs	r3, #18
 800101e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001022:	2301      	movs	r3, #1
 8001024:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800102e:	2304      	movs	r3, #4
 8001030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001034:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001038:	4619      	mov	r1, r3
 800103a:	480b      	ldr	r0, [pc, #44]	; (8001068 <HAL_I2C_MspInit+0xb8>)
 800103c:	f000 fd18 	bl	8001a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_I2C_MspInit+0xb4>)
 8001042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_I2C_MspInit+0xb4>)
 8001046:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800104a:	6593      	str	r3, [r2, #88]	; 0x58
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_I2C_MspInit+0xb4>)
 800104e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001050:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001058:	bf00      	nop
 800105a:	37b0      	adds	r7, #176	; 0xb0
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40005800 	.word	0x40005800
 8001064:	40021000 	.word	0x40021000
 8001068:	48000400 	.word	0x48000400

0800106c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	; 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <HAL_QSPI_MspInit+0x7c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d128      	bne.n	80010e0 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <HAL_QSPI_MspInit+0x80>)
 8001090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001092:	4a16      	ldr	r2, [pc, #88]	; (80010ec <HAL_QSPI_MspInit+0x80>)
 8001094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001098:	6513      	str	r3, [r2, #80]	; 0x50
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <HAL_QSPI_MspInit+0x80>)
 800109c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800109e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <HAL_QSPI_MspInit+0x80>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	4a10      	ldr	r2, [pc, #64]	; (80010ec <HAL_QSPI_MspInit+0x80>)
 80010ac:	f043 0310 	orr.w	r3, r3, #16
 80010b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <HAL_QSPI_MspInit+0x80>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	f003 0310 	and.w	r3, r3, #16
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80010be:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80010c2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010cc:	2303      	movs	r3, #3
 80010ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80010d0:	230a      	movs	r3, #10
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	4619      	mov	r1, r3
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <HAL_QSPI_MspInit+0x84>)
 80010dc:	f000 fcc8 	bl	8001a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80010e0:	bf00      	nop
 80010e2:	3728      	adds	r7, #40	; 0x28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	a0001000 	.word	0xa0001000
 80010ec:	40021000 	.word	0x40021000
 80010f0:	48001000 	.word	0x48001000

080010f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a17      	ldr	r2, [pc, #92]	; (8001170 <HAL_SPI_MspInit+0x7c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d128      	bne.n	8001168 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <HAL_SPI_MspInit+0x80>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111a:	4a16      	ldr	r2, [pc, #88]	; (8001174 <HAL_SPI_MspInit+0x80>)
 800111c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001120:	6593      	str	r3, [r2, #88]	; 0x58
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_SPI_MspInit+0x80>)
 8001124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_SPI_MspInit+0x80>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	4a10      	ldr	r2, [pc, #64]	; (8001174 <HAL_SPI_MspInit+0x80>)
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <HAL_SPI_MspInit+0x80>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001146:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800114a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001154:	2303      	movs	r3, #3
 8001156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001158:	2306      	movs	r3, #6
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4619      	mov	r1, r3
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <HAL_SPI_MspInit+0x84>)
 8001164:	f000 fc84 	bl	8001a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001168:	bf00      	nop
 800116a:	3728      	adds	r7, #40	; 0x28
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40003c00 	.word	0x40003c00
 8001174:	40021000 	.word	0x40021000
 8001178:	48000800 	.word	0x48000800

0800117c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b0ae      	sub	sp, #184	; 0xb8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	2288      	movs	r2, #136	; 0x88
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f006 ff1d 	bl	8007fdc <memset>
  if(huart->Instance==USART1)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a42      	ldr	r2, [pc, #264]	; (80012b0 <HAL_UART_MspInit+0x134>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d13b      	bne.n	8001224 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011ac:	2301      	movs	r3, #1
 80011ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011b0:	2300      	movs	r3, #0
 80011b2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	4618      	mov	r0, r3
 80011ba:	f002 f847 	bl	800324c <HAL_RCCEx_PeriphCLKConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011c4:	f7ff fe62 	bl	8000e8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011c8:	4b3a      	ldr	r3, [pc, #232]	; (80012b4 <HAL_UART_MspInit+0x138>)
 80011ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011cc:	4a39      	ldr	r2, [pc, #228]	; (80012b4 <HAL_UART_MspInit+0x138>)
 80011ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d2:	6613      	str	r3, [r2, #96]	; 0x60
 80011d4:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <HAL_UART_MspInit+0x138>)
 80011d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011dc:	61bb      	str	r3, [r7, #24]
 80011de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e0:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <HAL_UART_MspInit+0x138>)
 80011e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e4:	4a33      	ldr	r2, [pc, #204]	; (80012b4 <HAL_UART_MspInit+0x138>)
 80011e6:	f043 0302 	orr.w	r3, r3, #2
 80011ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ec:	4b31      	ldr	r3, [pc, #196]	; (80012b4 <HAL_UART_MspInit+0x138>)
 80011ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80011f8:	23c0      	movs	r3, #192	; 0xc0
 80011fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120a:	2303      	movs	r3, #3
 800120c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001210:	2307      	movs	r3, #7
 8001212:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001216:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800121a:	4619      	mov	r1, r3
 800121c:	4826      	ldr	r0, [pc, #152]	; (80012b8 <HAL_UART_MspInit+0x13c>)
 800121e:	f000 fc27 	bl	8001a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001222:	e040      	b.n	80012a6 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a24      	ldr	r2, [pc, #144]	; (80012bc <HAL_UART_MspInit+0x140>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d13b      	bne.n	80012a6 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800122e:	2304      	movs	r3, #4
 8001230:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001232:	2300      	movs	r3, #0
 8001234:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	4618      	mov	r0, r3
 800123c:	f002 f806 	bl	800324c <HAL_RCCEx_PeriphCLKConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001246:	f7ff fe21 	bl	8000e8c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <HAL_UART_MspInit+0x138>)
 800124c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124e:	4a19      	ldr	r2, [pc, #100]	; (80012b4 <HAL_UART_MspInit+0x138>)
 8001250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001254:	6593      	str	r3, [r2, #88]	; 0x58
 8001256:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <HAL_UART_MspInit+0x138>)
 8001258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <HAL_UART_MspInit+0x138>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	4a13      	ldr	r2, [pc, #76]	; (80012b4 <HAL_UART_MspInit+0x138>)
 8001268:	f043 0308 	orr.w	r3, r3, #8
 800126c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <HAL_UART_MspInit+0x138>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800127a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800127e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001294:	2307      	movs	r3, #7
 8001296:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800129a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800129e:	4619      	mov	r1, r3
 80012a0:	4807      	ldr	r0, [pc, #28]	; (80012c0 <HAL_UART_MspInit+0x144>)
 80012a2:	f000 fbe5 	bl	8001a70 <HAL_GPIO_Init>
}
 80012a6:	bf00      	nop
 80012a8:	37b8      	adds	r7, #184	; 0xb8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40013800 	.word	0x40013800
 80012b4:	40021000 	.word	0x40021000
 80012b8:	48000400 	.word	0x48000400
 80012bc:	40004800 	.word	0x40004800
 80012c0:	48000c00 	.word	0x48000c00

080012c4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b0ac      	sub	sp, #176	; 0xb0
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	2288      	movs	r2, #136	; 0x88
 80012e2:	2100      	movs	r1, #0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f006 fe79 	bl	8007fdc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012f2:	d17c      	bne.n	80013ee <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80012fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80012fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001302:	2301      	movs	r3, #1
 8001304:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001306:	2301      	movs	r3, #1
 8001308:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800130a:	2318      	movs	r3, #24
 800130c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800130e:	2307      	movs	r3, #7
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001312:	2302      	movs	r3, #2
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001316:	2302      	movs	r3, #2
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800131a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800131e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4618      	mov	r0, r3
 8001326:	f001 ff91 	bl	800324c <HAL_RCCEx_PeriphCLKConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001330:	f7ff fdac 	bl	8000e8c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b30      	ldr	r3, [pc, #192]	; (80013f8 <HAL_PCD_MspInit+0x134>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001338:	4a2f      	ldr	r2, [pc, #188]	; (80013f8 <HAL_PCD_MspInit+0x134>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001340:	4b2d      	ldr	r3, [pc, #180]	; (80013f8 <HAL_PCD_MspInit+0x134>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800134c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001350:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001364:	4619      	mov	r1, r3
 8001366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136a:	f000 fb81 	bl	8001a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800136e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001372:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001382:	2303      	movs	r3, #3
 8001384:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001388:	230a      	movs	r3, #10
 800138a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001392:	4619      	mov	r1, r3
 8001394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001398:	f000 fb6a 	bl	8001a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800139c:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <HAL_PCD_MspInit+0x134>)
 800139e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a0:	4a15      	ldr	r2, [pc, #84]	; (80013f8 <HAL_PCD_MspInit+0x134>)
 80013a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <HAL_PCD_MspInit+0x134>)
 80013aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013b4:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <HAL_PCD_MspInit+0x134>)
 80013b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d114      	bne.n	80013ea <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013c0:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <HAL_PCD_MspInit+0x134>)
 80013c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c4:	4a0c      	ldr	r2, [pc, #48]	; (80013f8 <HAL_PCD_MspInit+0x134>)
 80013c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ca:	6593      	str	r3, [r2, #88]	; 0x58
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <HAL_PCD_MspInit+0x134>)
 80013ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80013d8:	f001 f83a 	bl	8002450 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_PCD_MspInit+0x134>)
 80013de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e0:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <HAL_PCD_MspInit+0x134>)
 80013e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013e6:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013e8:	e001      	b.n	80013ee <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80013ea:	f001 f831 	bl	8002450 <HAL_PWREx_EnableVddUSB>
}
 80013ee:	bf00      	nop
 80013f0:	37b0      	adds	r7, #176	; 0xb0
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40021000 	.word	0x40021000

080013fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08c      	sub	sp, #48	; 0x30
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001404:	2300      	movs	r3, #0
 8001406:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 800140a:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <HAL_InitTick+0xc8>)
 800140c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800140e:	4a2d      	ldr	r2, [pc, #180]	; (80014c4 <HAL_InitTick+0xc8>)
 8001410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001414:	6613      	str	r3, [r2, #96]	; 0x60
 8001416:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <HAL_InitTick+0xc8>)
 8001418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001422:	f107 020c 	add.w	r2, r7, #12
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f001 fe7b 	bl	8003128 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001432:	f001 fe63 	bl	80030fc <HAL_RCC_GetPCLK2Freq>
 8001436:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143a:	4a23      	ldr	r2, [pc, #140]	; (80014c8 <HAL_InitTick+0xcc>)
 800143c:	fba2 2303 	umull	r2, r3, r2, r3
 8001440:	0c9b      	lsrs	r3, r3, #18
 8001442:	3b01      	subs	r3, #1
 8001444:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001446:	4b21      	ldr	r3, [pc, #132]	; (80014cc <HAL_InitTick+0xd0>)
 8001448:	4a21      	ldr	r2, [pc, #132]	; (80014d0 <HAL_InitTick+0xd4>)
 800144a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800144c:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <HAL_InitTick+0xd0>)
 800144e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001452:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001454:	4a1d      	ldr	r2, [pc, #116]	; (80014cc <HAL_InitTick+0xd0>)
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800145a:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <HAL_InitTick+0xd0>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <HAL_InitTick+0xd0>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001466:	4b19      	ldr	r3, [pc, #100]	; (80014cc <HAL_InitTick+0xd0>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 800146c:	4817      	ldr	r0, [pc, #92]	; (80014cc <HAL_InitTick+0xd0>)
 800146e:	f002 fc5c 	bl	8003d2a <HAL_TIM_Base_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001478:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800147c:	2b00      	cmp	r3, #0
 800147e:	d11b      	bne.n	80014b8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8001480:	4812      	ldr	r0, [pc, #72]	; (80014cc <HAL_InitTick+0xd0>)
 8001482:	f002 fcb3 	bl	8003dec <HAL_TIM_Base_Start_IT>
 8001486:	4603      	mov	r3, r0
 8001488:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800148c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001490:	2b00      	cmp	r3, #0
 8001492:	d111      	bne.n	80014b8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001494:	201a      	movs	r0, #26
 8001496:	f000 f9d1 	bl	800183c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b0f      	cmp	r3, #15
 800149e:	d808      	bhi.n	80014b2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 80014a0:	2200      	movs	r2, #0
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	201a      	movs	r0, #26
 80014a6:	f000 f9ad 	bl	8001804 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <HAL_InitTick+0xd8>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	e002      	b.n	80014b8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80014b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3730      	adds	r7, #48	; 0x30
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40021000 	.word	0x40021000
 80014c8:	431bde83 	.word	0x431bde83
 80014cc:	200007b8 	.word	0x200007b8
 80014d0:	40014800 	.word	0x40014800
 80014d4:	20000008 	.word	0x20000008

080014d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014dc:	e7fe      	b.n	80014dc <NMI_Handler+0x4>

080014de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <HardFault_Handler+0x4>

080014e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <MemManage_Handler+0x4>

080014ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <BusFault_Handler+0x4>

080014f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <UsageFault_Handler+0x4>

080014f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001508:	2020      	movs	r0, #32
 800150a:	f000 fca5 	bl	8001e58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800150e:	2040      	movs	r0, #64	; 0x40
 8001510:	f000 fca2 	bl	8001e58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001514:	2080      	movs	r0, #128	; 0x80
 8001516:	f000 fc9f 	bl	8001e58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800151a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800151e:	f000 fc9b 	bl	8001e58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800152e:	f002 fccd 	bl	8003ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200007b8 	.word	0x200007b8

0800153c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001540:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001544:	f000 fc88 	bl	8001e58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001548:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800154c:	f000 fc84 	bl	8001e58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001550:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001554:	f000 fc80 	bl	8001e58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001558:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800155c:	f000 fc7c 	bl	8001e58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <SystemInit+0x20>)
 800156a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <SystemInit+0x20>)
 8001570:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001574:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800158c:	f7ff ffea 	bl	8001564 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001590:	480c      	ldr	r0, [pc, #48]	; (80015c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001592:	490d      	ldr	r1, [pc, #52]	; (80015c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001594:	4a0d      	ldr	r2, [pc, #52]	; (80015cc <LoopForever+0xe>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001598:	e002      	b.n	80015a0 <LoopCopyDataInit>

0800159a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800159c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159e:	3304      	adds	r3, #4

080015a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a4:	d3f9      	bcc.n	800159a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015a8:	4c0a      	ldr	r4, [pc, #40]	; (80015d4 <LoopForever+0x16>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ac:	e001      	b.n	80015b2 <LoopFillZerobss>

080015ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b0:	3204      	adds	r2, #4

080015b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b4:	d3fb      	bcc.n	80015ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015b6:	f006 fd6f 	bl	8008098 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ba:	f7ff f8a5 	bl	8000708 <main>

080015be <LoopForever>:

LoopForever:
    b LoopForever
 80015be:	e7fe      	b.n	80015be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80015cc:	08008290 	.word	0x08008290
  ldr r2, =_sbss
 80015d0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80015d4:	20003a7c 	.word	0x20003a7c

080015d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015d8:	e7fe      	b.n	80015d8 <ADC1_2_IRQHandler>

080015da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e4:	2003      	movs	r0, #3
 80015e6:	f000 f902 	bl	80017ee <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ea:	200f      	movs	r0, #15
 80015ec:	f7ff ff06 	bl	80013fc <HAL_InitTick>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	71fb      	strb	r3, [r7, #7]
 80015fa:	e001      	b.n	8001600 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015fc:	f7ff fc4c 	bl	8000e98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001600:	79fb      	ldrb	r3, [r7, #7]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_IncTick+0x20>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_IncTick+0x24>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4413      	add	r3, r2
 800161c:	4a04      	ldr	r2, [pc, #16]	; (8001630 <HAL_IncTick+0x24>)
 800161e:	6013      	str	r3, [r2, #0]
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	2000000c 	.word	0x2000000c
 8001630:	20000804 	.word	0x20000804

08001634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return uwTick;
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <HAL_GetTick+0x14>)
 800163a:	681b      	ldr	r3, [r3, #0]
}
 800163c:	4618      	mov	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000804 	.word	0x20000804

0800164c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001654:	f7ff ffee 	bl	8001634 <HAL_GetTick>
 8001658:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001664:	d005      	beq.n	8001672 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <HAL_Delay+0x44>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	461a      	mov	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4413      	add	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001672:	bf00      	nop
 8001674:	f7ff ffde 	bl	8001634 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	429a      	cmp	r2, r3
 8001682:	d8f7      	bhi.n	8001674 <HAL_Delay+0x28>
  {
  }
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2000000c 	.word	0x2000000c

08001694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b0:	4013      	ands	r3, r2
 80016b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016c6:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	60d3      	str	r3, [r2, #12]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <__NVIC_GetPriorityGrouping+0x18>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	0a1b      	lsrs	r3, r3, #8
 80016e6:	f003 0307 	and.w	r3, r3, #7
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	2b00      	cmp	r3, #0
 8001708:	db0b      	blt.n	8001722 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	f003 021f 	and.w	r2, r3, #31
 8001710:	4907      	ldr	r1, [pc, #28]	; (8001730 <__NVIC_EnableIRQ+0x38>)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	095b      	lsrs	r3, r3, #5
 8001718:	2001      	movs	r0, #1
 800171a:	fa00 f202 	lsl.w	r2, r0, r2
 800171e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000e100 	.word	0xe000e100

08001734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	6039      	str	r1, [r7, #0]
 800173e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	2b00      	cmp	r3, #0
 8001746:	db0a      	blt.n	800175e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	b2da      	uxtb	r2, r3
 800174c:	490c      	ldr	r1, [pc, #48]	; (8001780 <__NVIC_SetPriority+0x4c>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	0112      	lsls	r2, r2, #4
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	440b      	add	r3, r1
 8001758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800175c:	e00a      	b.n	8001774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4908      	ldr	r1, [pc, #32]	; (8001784 <__NVIC_SetPriority+0x50>)
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	3b04      	subs	r3, #4
 800176c:	0112      	lsls	r2, r2, #4
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	440b      	add	r3, r1
 8001772:	761a      	strb	r2, [r3, #24]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000e100 	.word	0xe000e100
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001788:	b480      	push	{r7}
 800178a:	b089      	sub	sp, #36	; 0x24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f1c3 0307 	rsb	r3, r3, #7
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	bf28      	it	cs
 80017a6:	2304      	movcs	r3, #4
 80017a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3304      	adds	r3, #4
 80017ae:	2b06      	cmp	r3, #6
 80017b0:	d902      	bls.n	80017b8 <NVIC_EncodePriority+0x30>
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3b03      	subs	r3, #3
 80017b6:	e000      	b.n	80017ba <NVIC_EncodePriority+0x32>
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	f04f 32ff 	mov.w	r2, #4294967295
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43da      	mvns	r2, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	401a      	ands	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d0:	f04f 31ff 	mov.w	r1, #4294967295
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	fa01 f303 	lsl.w	r3, r1, r3
 80017da:	43d9      	mvns	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	4313      	orrs	r3, r2
         );
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3724      	adds	r7, #36	; 0x24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff ff4c 	bl	8001694 <__NVIC_SetPriorityGrouping>
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001816:	f7ff ff61 	bl	80016dc <__NVIC_GetPriorityGrouping>
 800181a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	68b9      	ldr	r1, [r7, #8]
 8001820:	6978      	ldr	r0, [r7, #20]
 8001822:	f7ff ffb1 	bl	8001788 <NVIC_EncodePriority>
 8001826:	4602      	mov	r2, r0
 8001828:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182c:	4611      	mov	r1, r2
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff80 	bl	8001734 <__NVIC_SetPriority>
}
 8001834:	bf00      	nop
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff ff54 	bl	80016f8 <__NVIC_EnableIRQ>
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e0ac      	b.n	80019c4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f8b2 	bl	80019d8 <DFSDM_GetChannelFromInstance>
 8001874:	4603      	mov	r3, r0
 8001876:	4a55      	ldr	r2, [pc, #340]	; (80019cc <HAL_DFSDM_ChannelInit+0x174>)
 8001878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e09f      	b.n	80019c4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff fb2f 	bl	8000ee8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800188a:	4b51      	ldr	r3, [pc, #324]	; (80019d0 <HAL_DFSDM_ChannelInit+0x178>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	4a4f      	ldr	r2, [pc, #316]	; (80019d0 <HAL_DFSDM_ChannelInit+0x178>)
 8001892:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001894:	4b4e      	ldr	r3, [pc, #312]	; (80019d0 <HAL_DFSDM_ChannelInit+0x178>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d125      	bne.n	80018e8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800189c:	4b4d      	ldr	r3, [pc, #308]	; (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a4c      	ldr	r2, [pc, #304]	; (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80018a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80018a6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80018a8:	4b4a      	ldr	r3, [pc, #296]	; (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	4948      	ldr	r1, [pc, #288]	; (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80018b6:	4b47      	ldr	r3, [pc, #284]	; (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a46      	ldr	r2, [pc, #280]	; (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80018bc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80018c0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	791b      	ldrb	r3, [r3, #4]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d108      	bne.n	80018dc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80018ca:	4b42      	ldr	r3, [pc, #264]	; (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	041b      	lsls	r3, r3, #16
 80018d6:	493f      	ldr	r1, [pc, #252]	; (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80018dc:	4b3d      	ldr	r3, [pc, #244]	; (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a3c      	ldr	r2, [pc, #240]	; (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80018e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018e6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80018f6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6819      	ldr	r1, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001906:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800190c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 020f 	bic.w	r2, r2, #15
 8001924:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6819      	ldr	r1, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001934:	431a      	orrs	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800194c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6899      	ldr	r1, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195c:	3b01      	subs	r3, #1
 800195e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001960:	431a      	orrs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f002 0207 	and.w	r2, r2, #7
 8001978:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6859      	ldr	r1, [r3, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800198c:	431a      	orrs	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019a4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f810 	bl	80019d8 <DFSDM_GetChannelFromInstance>
 80019b8:	4602      	mov	r2, r0
 80019ba:	4904      	ldr	r1, [pc, #16]	; (80019cc <HAL_DFSDM_ChannelInit+0x174>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	2000080c 	.word	0x2000080c
 80019d0:	20000808 	.word	0x20000808
 80019d4:	40016000 	.word	0x40016000

080019d8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a1c      	ldr	r2, [pc, #112]	; (8001a54 <DFSDM_GetChannelFromInstance+0x7c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d102      	bne.n	80019ee <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	e02b      	b.n	8001a46 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a19      	ldr	r2, [pc, #100]	; (8001a58 <DFSDM_GetChannelFromInstance+0x80>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d102      	bne.n	80019fc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80019f6:	2301      	movs	r3, #1
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	e024      	b.n	8001a46 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a17      	ldr	r2, [pc, #92]	; (8001a5c <DFSDM_GetChannelFromInstance+0x84>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d102      	bne.n	8001a0a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001a04:	2302      	movs	r3, #2
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	e01d      	b.n	8001a46 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a14      	ldr	r2, [pc, #80]	; (8001a60 <DFSDM_GetChannelFromInstance+0x88>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d102      	bne.n	8001a18 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001a12:	2304      	movs	r3, #4
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	e016      	b.n	8001a46 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <DFSDM_GetChannelFromInstance+0x8c>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d102      	bne.n	8001a26 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001a20:	2305      	movs	r3, #5
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	e00f      	b.n	8001a46 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a0f      	ldr	r2, [pc, #60]	; (8001a68 <DFSDM_GetChannelFromInstance+0x90>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d102      	bne.n	8001a34 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001a2e:	2306      	movs	r3, #6
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	e008      	b.n	8001a46 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a0d      	ldr	r2, [pc, #52]	; (8001a6c <DFSDM_GetChannelFromInstance+0x94>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d102      	bne.n	8001a42 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001a3c:	2307      	movs	r3, #7
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	e001      	b.n	8001a46 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001a42:	2303      	movs	r3, #3
 8001a44:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001a46:	68fb      	ldr	r3, [r7, #12]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	40016000 	.word	0x40016000
 8001a58:	40016020 	.word	0x40016020
 8001a5c:	40016040 	.word	0x40016040
 8001a60:	40016080 	.word	0x40016080
 8001a64:	400160a0 	.word	0x400160a0
 8001a68:	400160c0 	.word	0x400160c0
 8001a6c:	400160e0 	.word	0x400160e0

08001a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a7e:	e17f      	b.n	8001d80 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	2101      	movs	r1, #1
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 8171 	beq.w	8001d7a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d005      	beq.n	8001ab0 <HAL_GPIO_Init+0x40>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d130      	bne.n	8001b12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	2203      	movs	r2, #3
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	091b      	lsrs	r3, r3, #4
 8001afc:	f003 0201 	and.w	r2, r3, #1
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d118      	bne.n	8001b50 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b24:	2201      	movs	r2, #1
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	08db      	lsrs	r3, r3, #3
 8001b3a:	f003 0201 	and.w	r2, r3, #1
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d017      	beq.n	8001b8c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	2203      	movs	r2, #3
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d123      	bne.n	8001be0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	08da      	lsrs	r2, r3, #3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3208      	adds	r2, #8
 8001ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	220f      	movs	r2, #15
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	08da      	lsrs	r2, r3, #3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3208      	adds	r2, #8
 8001bda:	6939      	ldr	r1, [r7, #16]
 8001bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	2203      	movs	r2, #3
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0203 	and.w	r2, r3, #3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 80ac 	beq.w	8001d7a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c22:	4b5f      	ldr	r3, [pc, #380]	; (8001da0 <HAL_GPIO_Init+0x330>)
 8001c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c26:	4a5e      	ldr	r2, [pc, #376]	; (8001da0 <HAL_GPIO_Init+0x330>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c2e:	4b5c      	ldr	r3, [pc, #368]	; (8001da0 <HAL_GPIO_Init+0x330>)
 8001c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c3a:	4a5a      	ldr	r2, [pc, #360]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	3302      	adds	r3, #2
 8001c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c46:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	220f      	movs	r2, #15
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c64:	d025      	beq.n	8001cb2 <HAL_GPIO_Init+0x242>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4f      	ldr	r2, [pc, #316]	; (8001da8 <HAL_GPIO_Init+0x338>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d01f      	beq.n	8001cae <HAL_GPIO_Init+0x23e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4e      	ldr	r2, [pc, #312]	; (8001dac <HAL_GPIO_Init+0x33c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d019      	beq.n	8001caa <HAL_GPIO_Init+0x23a>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4d      	ldr	r2, [pc, #308]	; (8001db0 <HAL_GPIO_Init+0x340>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d013      	beq.n	8001ca6 <HAL_GPIO_Init+0x236>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a4c      	ldr	r2, [pc, #304]	; (8001db4 <HAL_GPIO_Init+0x344>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d00d      	beq.n	8001ca2 <HAL_GPIO_Init+0x232>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a4b      	ldr	r2, [pc, #300]	; (8001db8 <HAL_GPIO_Init+0x348>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d007      	beq.n	8001c9e <HAL_GPIO_Init+0x22e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a4a      	ldr	r2, [pc, #296]	; (8001dbc <HAL_GPIO_Init+0x34c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d101      	bne.n	8001c9a <HAL_GPIO_Init+0x22a>
 8001c96:	2306      	movs	r3, #6
 8001c98:	e00c      	b.n	8001cb4 <HAL_GPIO_Init+0x244>
 8001c9a:	2307      	movs	r3, #7
 8001c9c:	e00a      	b.n	8001cb4 <HAL_GPIO_Init+0x244>
 8001c9e:	2305      	movs	r3, #5
 8001ca0:	e008      	b.n	8001cb4 <HAL_GPIO_Init+0x244>
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	e006      	b.n	8001cb4 <HAL_GPIO_Init+0x244>
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e004      	b.n	8001cb4 <HAL_GPIO_Init+0x244>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e002      	b.n	8001cb4 <HAL_GPIO_Init+0x244>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <HAL_GPIO_Init+0x244>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	f002 0203 	and.w	r2, r2, #3
 8001cba:	0092      	lsls	r2, r2, #2
 8001cbc:	4093      	lsls	r3, r2
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cc4:	4937      	ldr	r1, [pc, #220]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cd2:	4b3b      	ldr	r3, [pc, #236]	; (8001dc0 <HAL_GPIO_Init+0x350>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cf6:	4a32      	ldr	r2, [pc, #200]	; (8001dc0 <HAL_GPIO_Init+0x350>)
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cfc:	4b30      	ldr	r3, [pc, #192]	; (8001dc0 <HAL_GPIO_Init+0x350>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d20:	4a27      	ldr	r2, [pc, #156]	; (8001dc0 <HAL_GPIO_Init+0x350>)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d26:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <HAL_GPIO_Init+0x350>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4013      	ands	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d4a:	4a1d      	ldr	r2, [pc, #116]	; (8001dc0 <HAL_GPIO_Init+0x350>)
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d50:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <HAL_GPIO_Init+0x350>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d74:	4a12      	ldr	r2, [pc, #72]	; (8001dc0 <HAL_GPIO_Init+0x350>)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f47f ae78 	bne.w	8001a80 <HAL_GPIO_Init+0x10>
  }
}
 8001d90:	bf00      	nop
 8001d92:	bf00      	nop
 8001d94:	371c      	adds	r7, #28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40010000 	.word	0x40010000
 8001da8:	48000400 	.word	0x48000400
 8001dac:	48000800 	.word	0x48000800
 8001db0:	48000c00 	.word	0x48000c00
 8001db4:	48001000 	.word	0x48001000
 8001db8:	48001400 	.word	0x48001400
 8001dbc:	48001800 	.word	0x48001800
 8001dc0:	40010400 	.word	0x40010400

08001dc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	887b      	ldrh	r3, [r7, #2]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
 8001de0:	e001      	b.n	8001de6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001de2:	2300      	movs	r3, #0
 8001de4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	807b      	strh	r3, [r7, #2]
 8001e00:	4613      	mov	r3, r2
 8001e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e04:	787b      	ldrb	r3, [r7, #1]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e0a:	887a      	ldrh	r2, [r7, #2]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e10:	e002      	b.n	8001e18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e12:	887a      	ldrh	r2, [r7, #2]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e36:	887a      	ldrh	r2, [r7, #2]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	041a      	lsls	r2, r3, #16
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	43d9      	mvns	r1, r3
 8001e42:	887b      	ldrh	r3, [r7, #2]
 8001e44:	400b      	ands	r3, r1
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	619a      	str	r2, [r3, #24]
}
 8001e4c:	bf00      	nop
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e64:	695a      	ldr	r2, [r3, #20]
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d006      	beq.n	8001e7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e6e:	4a05      	ldr	r2, [pc, #20]	; (8001e84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e70:	88fb      	ldrh	r3, [r7, #6]
 8001e72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e74:	88fb      	ldrh	r3, [r7, #6]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f806 	bl	8001e88 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40010400 	.word	0x40010400

08001e88 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e08d      	b.n	8001fcc <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d106      	bne.n	8001eca <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff f873 	bl	8000fb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2224      	movs	r2, #36	; 0x24
 8001ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0201 	bic.w	r2, r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001eee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001efe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d107      	bne.n	8001f18 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	e006      	b.n	8001f26 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f24:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d108      	bne.n	8001f40 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	e007      	b.n	8001f50 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f4e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f62:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f72:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69d9      	ldr	r1, [r3, #28]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a1a      	ldr	r2, [r3, #32]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f042 0201 	orr.w	r2, r2, #1
 8001fac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b20      	cmp	r3, #32
 8001fe8:	d138      	bne.n	800205c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e032      	b.n	800205e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2224      	movs	r2, #36	; 0x24
 8002004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0201 	bic.w	r2, r2, #1
 8002016:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002026:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6819      	ldr	r1, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0201 	orr.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2220      	movs	r2, #32
 800204c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	e000      	b.n	800205e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800205c:	2302      	movs	r3, #2
  }
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800206a:	b480      	push	{r7}
 800206c:	b085      	sub	sp, #20
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b20      	cmp	r3, #32
 800207e:	d139      	bne.n	80020f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800208a:	2302      	movs	r3, #2
 800208c:	e033      	b.n	80020f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2224      	movs	r2, #36	; 0x24
 800209a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0201 	bic.w	r2, r2, #1
 80020ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	021b      	lsls	r3, r3, #8
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0201 	orr.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	e000      	b.n	80020f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020f4:	2302      	movs	r3, #2
  }
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b086      	sub	sp, #24
 8002106:	af02      	add	r7, sp, #8
 8002108:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e101      	b.n	8002318 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d106      	bne.n	800212e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff f8cb 	bl	80012c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2203      	movs	r2, #3
 8002132:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f002 fe05 	bl	8004d50 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	7c1a      	ldrb	r2, [r3, #16]
 800214e:	f88d 2000 	strb.w	r2, [sp]
 8002152:	3304      	adds	r3, #4
 8002154:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002156:	f002 fdce 	bl	8004cf6 <USB_CoreInit>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0d5      	b.n	8002318 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2100      	movs	r1, #0
 8002172:	4618      	mov	r0, r3
 8002174:	f002 fdfd 	bl	8004d72 <USB_SetCurrentMode>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2202      	movs	r2, #2
 8002182:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e0c6      	b.n	8002318 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800218a:	2300      	movs	r3, #0
 800218c:	73fb      	strb	r3, [r7, #15]
 800218e:	e04a      	b.n	8002226 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002190:	7bfa      	ldrb	r2, [r7, #15]
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	3315      	adds	r3, #21
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021a4:	7bfa      	ldrb	r2, [r7, #15]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	3314      	adds	r3, #20
 80021b4:	7bfa      	ldrb	r2, [r7, #15]
 80021b6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021b8:	7bfa      	ldrb	r2, [r7, #15]
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	b298      	uxth	r0, r3
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	332e      	adds	r3, #46	; 0x2e
 80021cc:	4602      	mov	r2, r0
 80021ce:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021d0:	7bfa      	ldrb	r2, [r7, #15]
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	3318      	adds	r3, #24
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	331c      	adds	r3, #28
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	3320      	adds	r3, #32
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800220c:	7bfa      	ldrb	r2, [r7, #15]
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4413      	add	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	3324      	adds	r3, #36	; 0x24
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	3301      	adds	r3, #1
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	791b      	ldrb	r3, [r3, #4]
 800222a:	7bfa      	ldrb	r2, [r7, #15]
 800222c:	429a      	cmp	r2, r3
 800222e:	d3af      	bcc.n	8002190 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002230:	2300      	movs	r3, #0
 8002232:	73fb      	strb	r3, [r7, #15]
 8002234:	e044      	b.n	80022c0 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002236:	7bfa      	ldrb	r2, [r7, #15]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002248:	2200      	movs	r2, #0
 800224a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4413      	add	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800225e:	7bfa      	ldrb	r2, [r7, #15]
 8002260:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002262:	7bfa      	ldrb	r2, [r7, #15]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4413      	add	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002278:	7bfa      	ldrb	r2, [r7, #15]
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800228e:	7bfa      	ldrb	r2, [r7, #15]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022a4:	7bfa      	ldrb	r2, [r7, #15]
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	3301      	adds	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	791b      	ldrb	r3, [r3, #4]
 80022c4:	7bfa      	ldrb	r2, [r7, #15]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d3b5      	bcc.n	8002236 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	7c1a      	ldrb	r2, [r3, #16]
 80022d2:	f88d 2000 	strb.w	r2, [sp]
 80022d6:	3304      	adds	r3, #4
 80022d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022da:	f002 fd97 	bl	8004e0c <USB_DevInit>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e013      	b.n	8002318 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	7b1b      	ldrb	r3, [r3, #12]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d102      	bne.n	800230c <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f80a 	bl	8002320 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f002 ff3c 	bl	800518e <USB_DevDisconnect>

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002352:	f043 0303 	orr.w	r3, r3, #3
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800236c:	4b05      	ldr	r3, [pc, #20]	; (8002384 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a04      	ldr	r2, [pc, #16]	; (8002384 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002376:	6013      	str	r3, [r2, #0]
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40007000 	.word	0x40007000

08002388 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800238c:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40007000 	.word	0x40007000

080023a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023b2:	d130      	bne.n	8002416 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023b4:	4b23      	ldr	r3, [pc, #140]	; (8002444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c0:	d038      	beq.n	8002434 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023c2:	4b20      	ldr	r3, [pc, #128]	; (8002444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023ca:	4a1e      	ldr	r2, [pc, #120]	; (8002444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023d2:	4b1d      	ldr	r3, [pc, #116]	; (8002448 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2232      	movs	r2, #50	; 0x32
 80023d8:	fb02 f303 	mul.w	r3, r2, r3
 80023dc:	4a1b      	ldr	r2, [pc, #108]	; (800244c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	0c9b      	lsrs	r3, r3, #18
 80023e4:	3301      	adds	r3, #1
 80023e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023e8:	e002      	b.n	80023f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	3b01      	subs	r3, #1
 80023ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023f0:	4b14      	ldr	r3, [pc, #80]	; (8002444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023fc:	d102      	bne.n	8002404 <HAL_PWREx_ControlVoltageScaling+0x60>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1f2      	bne.n	80023ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002404:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002410:	d110      	bne.n	8002434 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e00f      	b.n	8002436 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800241e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002422:	d007      	beq.n	8002434 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002424:	4b07      	ldr	r3, [pc, #28]	; (8002444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800242c:	4a05      	ldr	r2, [pc, #20]	; (8002444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800242e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002432:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40007000 	.word	0x40007000
 8002448:	20000004 	.word	0x20000004
 800244c:	431bde83 	.word	0x431bde83

08002450 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002454:	4b05      	ldr	r3, [pc, #20]	; (800246c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4a04      	ldr	r2, [pc, #16]	; (800246c <HAL_PWREx_EnableVddUSB+0x1c>)
 800245a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800245e:	6053      	str	r3, [r2, #4]
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40007000 	.word	0x40007000

08002470 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af02      	add	r7, sp, #8
 8002476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002478:	f7ff f8dc 	bl	8001634 <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e063      	b.n	8002550 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10b      	bne.n	80024ac <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7fe fde5 	bl	800106c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80024a2:	f241 3188 	movw	r1, #5000	; 0x1388
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f858 	bl	800255c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	021a      	lsls	r2, r3, #8
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	2120      	movs	r1, #32
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f850 	bl	8002578 <QSPI_WaitFlagStateUntilTimeout>
 80024d8:	4603      	mov	r3, r0
 80024da:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80024dc:	7afb      	ldrb	r3, [r7, #11]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d131      	bne.n	8002546 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80024ec:	f023 0310 	bic.w	r3, r3, #16
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6852      	ldr	r2, [r2, #4]
 80024f4:	0611      	lsls	r1, r2, #24
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68d2      	ldr	r2, [r2, #12]
 80024fa:	4311      	orrs	r1, r2
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	430b      	orrs	r3, r1
 8002502:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	4b13      	ldr	r3, [pc, #76]	; (8002558 <HAL_QSPI_Init+0xe8>)
 800250c:	4013      	ands	r3, r2
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6912      	ldr	r2, [r2, #16]
 8002512:	0411      	lsls	r1, r2, #16
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6952      	ldr	r2, [r2, #20]
 8002518:	4311      	orrs	r1, r2
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6992      	ldr	r2, [r2, #24]
 800251e:	4311      	orrs	r1, r2
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	430b      	orrs	r3, r1
 8002526:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800254e:	7afb      	ldrb	r3, [r7, #11]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	ffe0f8fe 	.word	0xffe0f8fe

0800255c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	4613      	mov	r3, r2
 8002586:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002588:	e01a      	b.n	80025c0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002590:	d016      	beq.n	80025c0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002592:	f7ff f84f 	bl	8001634 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d302      	bcc.n	80025a8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10b      	bne.n	80025c0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2204      	movs	r2, #4
 80025ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b4:	f043 0201 	orr.w	r2, r3, #1
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e00e      	b.n	80025de <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	bf14      	ite	ne
 80025ce:	2301      	movne	r3, #1
 80025d0:	2300      	moveq	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d1d6      	bne.n	800258a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e3ca      	b.n	8002d90 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025fa:	4b97      	ldr	r3, [pc, #604]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002604:	4b94      	ldr	r3, [pc, #592]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 80e4 	beq.w	80027e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d007      	beq.n	8002632 <HAL_RCC_OscConfig+0x4a>
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	2b0c      	cmp	r3, #12
 8002626:	f040 808b 	bne.w	8002740 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2b01      	cmp	r3, #1
 800262e:	f040 8087 	bne.w	8002740 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002632:	4b89      	ldr	r3, [pc, #548]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <HAL_RCC_OscConfig+0x62>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e3a2      	b.n	8002d90 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1a      	ldr	r2, [r3, #32]
 800264e:	4b82      	ldr	r3, [pc, #520]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d004      	beq.n	8002664 <HAL_RCC_OscConfig+0x7c>
 800265a:	4b7f      	ldr	r3, [pc, #508]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002662:	e005      	b.n	8002670 <HAL_RCC_OscConfig+0x88>
 8002664:	4b7c      	ldr	r3, [pc, #496]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 8002666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800266a:	091b      	lsrs	r3, r3, #4
 800266c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002670:	4293      	cmp	r3, r2
 8002672:	d223      	bcs.n	80026bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	4618      	mov	r0, r3
 800267a:	f000 fd87 	bl	800318c <RCC_SetFlashLatencyFromMSIRange>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e383      	b.n	8002d90 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002688:	4b73      	ldr	r3, [pc, #460]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a72      	ldr	r2, [pc, #456]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 800268e:	f043 0308 	orr.w	r3, r3, #8
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	4b70      	ldr	r3, [pc, #448]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	496d      	ldr	r1, [pc, #436]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026a6:	4b6c      	ldr	r3, [pc, #432]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	021b      	lsls	r3, r3, #8
 80026b4:	4968      	ldr	r1, [pc, #416]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	604b      	str	r3, [r1, #4]
 80026ba:	e025      	b.n	8002708 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026bc:	4b66      	ldr	r3, [pc, #408]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a65      	ldr	r2, [pc, #404]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 80026c2:	f043 0308 	orr.w	r3, r3, #8
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	4b63      	ldr	r3, [pc, #396]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	4960      	ldr	r1, [pc, #384]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026da:	4b5f      	ldr	r3, [pc, #380]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	021b      	lsls	r3, r3, #8
 80026e8:	495b      	ldr	r1, [pc, #364]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d109      	bne.n	8002708 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 fd47 	bl	800318c <RCC_SetFlashLatencyFromMSIRange>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e343      	b.n	8002d90 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002708:	f000 fc4a 	bl	8002fa0 <HAL_RCC_GetSysClockFreq>
 800270c:	4602      	mov	r2, r0
 800270e:	4b52      	ldr	r3, [pc, #328]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	091b      	lsrs	r3, r3, #4
 8002714:	f003 030f 	and.w	r3, r3, #15
 8002718:	4950      	ldr	r1, [pc, #320]	; (800285c <HAL_RCC_OscConfig+0x274>)
 800271a:	5ccb      	ldrb	r3, [r1, r3]
 800271c:	f003 031f 	and.w	r3, r3, #31
 8002720:	fa22 f303 	lsr.w	r3, r2, r3
 8002724:	4a4e      	ldr	r2, [pc, #312]	; (8002860 <HAL_RCC_OscConfig+0x278>)
 8002726:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002728:	4b4e      	ldr	r3, [pc, #312]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f7fe fe65 	bl	80013fc <HAL_InitTick>
 8002732:	4603      	mov	r3, r0
 8002734:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d052      	beq.n	80027e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	e327      	b.n	8002d90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d032      	beq.n	80027ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002748:	4b43      	ldr	r3, [pc, #268]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a42      	ldr	r2, [pc, #264]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002754:	f7fe ff6e 	bl	8001634 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800275c:	f7fe ff6a 	bl	8001634 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e310      	b.n	8002d90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800276e:	4b3a      	ldr	r3, [pc, #232]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800277a:	4b37      	ldr	r3, [pc, #220]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a36      	ldr	r2, [pc, #216]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 8002780:	f043 0308 	orr.w	r3, r3, #8
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	4b34      	ldr	r3, [pc, #208]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	4931      	ldr	r1, [pc, #196]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 8002794:	4313      	orrs	r3, r2
 8002796:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002798:	4b2f      	ldr	r3, [pc, #188]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	021b      	lsls	r3, r3, #8
 80027a6:	492c      	ldr	r1, [pc, #176]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]
 80027ac:	e01a      	b.n	80027e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027ae:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a29      	ldr	r2, [pc, #164]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 80027b4:	f023 0301 	bic.w	r3, r3, #1
 80027b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027ba:	f7fe ff3b 	bl	8001634 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027c2:	f7fe ff37 	bl	8001634 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e2dd      	b.n	8002d90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027d4:	4b20      	ldr	r3, [pc, #128]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1f0      	bne.n	80027c2 <HAL_RCC_OscConfig+0x1da>
 80027e0:	e000      	b.n	80027e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d074      	beq.n	80028da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d005      	beq.n	8002802 <HAL_RCC_OscConfig+0x21a>
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	2b0c      	cmp	r3, #12
 80027fa:	d10e      	bne.n	800281a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d10b      	bne.n	800281a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002802:	4b15      	ldr	r3, [pc, #84]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d064      	beq.n	80028d8 <HAL_RCC_OscConfig+0x2f0>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d160      	bne.n	80028d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e2ba      	b.n	8002d90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002822:	d106      	bne.n	8002832 <HAL_RCC_OscConfig+0x24a>
 8002824:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a0b      	ldr	r2, [pc, #44]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 800282a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	e026      	b.n	8002880 <HAL_RCC_OscConfig+0x298>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800283a:	d115      	bne.n	8002868 <HAL_RCC_OscConfig+0x280>
 800283c:	4b06      	ldr	r3, [pc, #24]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a05      	ldr	r2, [pc, #20]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 8002842:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	4b03      	ldr	r3, [pc, #12]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a02      	ldr	r2, [pc, #8]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 800284e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	e014      	b.n	8002880 <HAL_RCC_OscConfig+0x298>
 8002856:	bf00      	nop
 8002858:	40021000 	.word	0x40021000
 800285c:	08008238 	.word	0x08008238
 8002860:	20000004 	.word	0x20000004
 8002864:	20000008 	.word	0x20000008
 8002868:	4ba0      	ldr	r3, [pc, #640]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a9f      	ldr	r2, [pc, #636]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 800286e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	4b9d      	ldr	r3, [pc, #628]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a9c      	ldr	r2, [pc, #624]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 800287a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800287e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d013      	beq.n	80028b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002888:	f7fe fed4 	bl	8001634 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002890:	f7fe fed0 	bl	8001634 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	; 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e276      	b.n	8002d90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028a2:	4b92      	ldr	r3, [pc, #584]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0f0      	beq.n	8002890 <HAL_RCC_OscConfig+0x2a8>
 80028ae:	e014      	b.n	80028da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b0:	f7fe fec0 	bl	8001634 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b8:	f7fe febc 	bl	8001634 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b64      	cmp	r3, #100	; 0x64
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e262      	b.n	8002d90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ca:	4b88      	ldr	r3, [pc, #544]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0x2d0>
 80028d6:	e000      	b.n	80028da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d060      	beq.n	80029a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d005      	beq.n	80028f8 <HAL_RCC_OscConfig+0x310>
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	2b0c      	cmp	r3, #12
 80028f0:	d119      	bne.n	8002926 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d116      	bne.n	8002926 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028f8:	4b7c      	ldr	r3, [pc, #496]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_RCC_OscConfig+0x328>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e23f      	b.n	8002d90 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002910:	4b76      	ldr	r3, [pc, #472]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	061b      	lsls	r3, r3, #24
 800291e:	4973      	ldr	r1, [pc, #460]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 8002920:	4313      	orrs	r3, r2
 8002922:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002924:	e040      	b.n	80029a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d023      	beq.n	8002976 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800292e:	4b6f      	ldr	r3, [pc, #444]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a6e      	ldr	r2, [pc, #440]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 8002934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293a:	f7fe fe7b 	bl	8001634 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002942:	f7fe fe77 	bl	8001634 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e21d      	b.n	8002d90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002954:	4b65      	ldr	r3, [pc, #404]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002960:	4b62      	ldr	r3, [pc, #392]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	061b      	lsls	r3, r3, #24
 800296e:	495f      	ldr	r1, [pc, #380]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]
 8002974:	e018      	b.n	80029a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002976:	4b5d      	ldr	r3, [pc, #372]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a5c      	ldr	r2, [pc, #368]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 800297c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002982:	f7fe fe57 	bl	8001634 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800298a:	f7fe fe53 	bl	8001634 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e1f9      	b.n	8002d90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800299c:	4b53      	ldr	r3, [pc, #332]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f0      	bne.n	800298a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d03c      	beq.n	8002a2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d01c      	beq.n	80029f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029bc:	4b4b      	ldr	r3, [pc, #300]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 80029be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029c2:	4a4a      	ldr	r2, [pc, #296]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029cc:	f7fe fe32 	bl	8001634 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d4:	f7fe fe2e 	bl	8001634 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e1d4      	b.n	8002d90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029e6:	4b41      	ldr	r3, [pc, #260]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 80029e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0ef      	beq.n	80029d4 <HAL_RCC_OscConfig+0x3ec>
 80029f4:	e01b      	b.n	8002a2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f6:	4b3d      	ldr	r3, [pc, #244]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 80029f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029fc:	4a3b      	ldr	r2, [pc, #236]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 80029fe:	f023 0301 	bic.w	r3, r3, #1
 8002a02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a06:	f7fe fe15 	bl	8001634 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a0e:	f7fe fe11 	bl	8001634 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e1b7      	b.n	8002d90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a20:	4b32      	ldr	r3, [pc, #200]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 8002a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1ef      	bne.n	8002a0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 80a6 	beq.w	8002b88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a40:	4b2a      	ldr	r3, [pc, #168]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 8002a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10d      	bne.n	8002a68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a4c:	4b27      	ldr	r3, [pc, #156]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a50:	4a26      	ldr	r2, [pc, #152]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 8002a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a56:	6593      	str	r3, [r2, #88]	; 0x58
 8002a58:	4b24      	ldr	r3, [pc, #144]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a64:	2301      	movs	r3, #1
 8002a66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a68:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <HAL_RCC_OscConfig+0x508>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d118      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a74:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <HAL_RCC_OscConfig+0x508>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a1d      	ldr	r2, [pc, #116]	; (8002af0 <HAL_RCC_OscConfig+0x508>)
 8002a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a80:	f7fe fdd8 	bl	8001634 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a88:	f7fe fdd4 	bl	8001634 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e17a      	b.n	8002d90 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a9a:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <HAL_RCC_OscConfig+0x508>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d108      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x4d8>
 8002aae:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab4:	4a0d      	ldr	r2, [pc, #52]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002abe:	e029      	b.n	8002b14 <HAL_RCC_OscConfig+0x52c>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b05      	cmp	r3, #5
 8002ac6:	d115      	bne.n	8002af4 <HAL_RCC_OscConfig+0x50c>
 8002ac8:	4b08      	ldr	r3, [pc, #32]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 8002aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ace:	4a07      	ldr	r2, [pc, #28]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 8002ad0:	f043 0304 	orr.w	r3, r3, #4
 8002ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ad8:	4b04      	ldr	r3, [pc, #16]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 8002ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ade:	4a03      	ldr	r2, [pc, #12]	; (8002aec <HAL_RCC_OscConfig+0x504>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ae8:	e014      	b.n	8002b14 <HAL_RCC_OscConfig+0x52c>
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40007000 	.word	0x40007000
 8002af4:	4b9c      	ldr	r3, [pc, #624]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afa:	4a9b      	ldr	r2, [pc, #620]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002afc:	f023 0301 	bic.w	r3, r3, #1
 8002b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b04:	4b98      	ldr	r3, [pc, #608]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0a:	4a97      	ldr	r2, [pc, #604]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002b0c:	f023 0304 	bic.w	r3, r3, #4
 8002b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d016      	beq.n	8002b4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1c:	f7fe fd8a 	bl	8001634 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b22:	e00a      	b.n	8002b3a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b24:	f7fe fd86 	bl	8001634 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e12a      	b.n	8002d90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b3a:	4b8b      	ldr	r3, [pc, #556]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0ed      	beq.n	8002b24 <HAL_RCC_OscConfig+0x53c>
 8002b48:	e015      	b.n	8002b76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4a:	f7fe fd73 	bl	8001634 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b50:	e00a      	b.n	8002b68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b52:	f7fe fd6f 	bl	8001634 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e113      	b.n	8002d90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b68:	4b7f      	ldr	r3, [pc, #508]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1ed      	bne.n	8002b52 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b76:	7ffb      	ldrb	r3, [r7, #31]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d105      	bne.n	8002b88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b7c:	4b7a      	ldr	r3, [pc, #488]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b80:	4a79      	ldr	r2, [pc, #484]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b86:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 80fe 	beq.w	8002d8e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	f040 80d0 	bne.w	8002d3c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b9c:	4b72      	ldr	r3, [pc, #456]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f003 0203 	and.w	r2, r3, #3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d130      	bne.n	8002c12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d127      	bne.n	8002c12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bcc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d11f      	bne.n	8002c12 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bdc:	2a07      	cmp	r2, #7
 8002bde:	bf14      	ite	ne
 8002be0:	2201      	movne	r2, #1
 8002be2:	2200      	moveq	r2, #0
 8002be4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d113      	bne.n	8002c12 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf4:	085b      	lsrs	r3, r3, #1
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d109      	bne.n	8002c12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	085b      	lsrs	r3, r3, #1
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d06e      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	2b0c      	cmp	r3, #12
 8002c16:	d069      	beq.n	8002cec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c18:	4b53      	ldr	r3, [pc, #332]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d105      	bne.n	8002c30 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c24:	4b50      	ldr	r3, [pc, #320]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0ad      	b.n	8002d90 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c34:	4b4c      	ldr	r3, [pc, #304]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a4b      	ldr	r2, [pc, #300]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002c3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c3e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c40:	f7fe fcf8 	bl	8001634 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c48:	f7fe fcf4 	bl	8001634 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e09a      	b.n	8002d90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c5a:	4b43      	ldr	r3, [pc, #268]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c66:	4b40      	ldr	r3, [pc, #256]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	4b40      	ldr	r3, [pc, #256]	; (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c76:	3a01      	subs	r2, #1
 8002c78:	0112      	lsls	r2, r2, #4
 8002c7a:	4311      	orrs	r1, r2
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c80:	0212      	lsls	r2, r2, #8
 8002c82:	4311      	orrs	r1, r2
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c88:	0852      	lsrs	r2, r2, #1
 8002c8a:	3a01      	subs	r2, #1
 8002c8c:	0552      	lsls	r2, r2, #21
 8002c8e:	4311      	orrs	r1, r2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c94:	0852      	lsrs	r2, r2, #1
 8002c96:	3a01      	subs	r2, #1
 8002c98:	0652      	lsls	r2, r2, #25
 8002c9a:	4311      	orrs	r1, r2
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ca0:	0912      	lsrs	r2, r2, #4
 8002ca2:	0452      	lsls	r2, r2, #17
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	4930      	ldr	r1, [pc, #192]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cac:	4b2e      	ldr	r3, [pc, #184]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a2d      	ldr	r2, [pc, #180]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cb6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cb8:	4b2b      	ldr	r3, [pc, #172]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	4a2a      	ldr	r2, [pc, #168]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cc2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cc4:	f7fe fcb6 	bl	8001634 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ccc:	f7fe fcb2 	bl	8001634 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e058      	b.n	8002d90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cde:	4b22      	ldr	r3, [pc, #136]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cea:	e050      	b.n	8002d8e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e04f      	b.n	8002d90 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf0:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d148      	bne.n	8002d8e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cfc:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a19      	ldr	r2, [pc, #100]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d08:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	4a16      	ldr	r2, [pc, #88]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d14:	f7fe fc8e 	bl	8001634 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1c:	f7fe fc8a 	bl	8001634 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e030      	b.n	8002d90 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0x734>
 8002d3a:	e028      	b.n	8002d8e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	2b0c      	cmp	r3, #12
 8002d40:	d023      	beq.n	8002d8a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d42:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a08      	ldr	r2, [pc, #32]	; (8002d68 <HAL_RCC_OscConfig+0x780>)
 8002d48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4e:	f7fe fc71 	bl	8001634 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d54:	e00c      	b.n	8002d70 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d56:	f7fe fc6d 	bl	8001634 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d905      	bls.n	8002d70 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e013      	b.n	8002d90 <HAL_RCC_OscConfig+0x7a8>
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d70:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <HAL_RCC_OscConfig+0x7b0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1ec      	bne.n	8002d56 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d7c:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <HAL_RCC_OscConfig+0x7b0>)
 8002d7e:	68da      	ldr	r2, [r3, #12]
 8002d80:	4905      	ldr	r1, [pc, #20]	; (8002d98 <HAL_RCC_OscConfig+0x7b0>)
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_RCC_OscConfig+0x7b4>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	60cb      	str	r3, [r1, #12]
 8002d88:	e001      	b.n	8002d8e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3720      	adds	r7, #32
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	feeefffc 	.word	0xfeeefffc

08002da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0e7      	b.n	8002f84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002db4:	4b75      	ldr	r3, [pc, #468]	; (8002f8c <HAL_RCC_ClockConfig+0x1ec>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d910      	bls.n	8002de4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc2:	4b72      	ldr	r3, [pc, #456]	; (8002f8c <HAL_RCC_ClockConfig+0x1ec>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 0207 	bic.w	r2, r3, #7
 8002dca:	4970      	ldr	r1, [pc, #448]	; (8002f8c <HAL_RCC_ClockConfig+0x1ec>)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd2:	4b6e      	ldr	r3, [pc, #440]	; (8002f8c <HAL_RCC_ClockConfig+0x1ec>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d001      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0cf      	b.n	8002f84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d010      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	4b66      	ldr	r3, [pc, #408]	; (8002f90 <HAL_RCC_ClockConfig+0x1f0>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d908      	bls.n	8002e12 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e00:	4b63      	ldr	r3, [pc, #396]	; (8002f90 <HAL_RCC_ClockConfig+0x1f0>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	4960      	ldr	r1, [pc, #384]	; (8002f90 <HAL_RCC_ClockConfig+0x1f0>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d04c      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e26:	4b5a      	ldr	r3, [pc, #360]	; (8002f90 <HAL_RCC_ClockConfig+0x1f0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d121      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e0a6      	b.n	8002f84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d107      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e3e:	4b54      	ldr	r3, [pc, #336]	; (8002f90 <HAL_RCC_ClockConfig+0x1f0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d115      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e09a      	b.n	8002f84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d107      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e56:	4b4e      	ldr	r3, [pc, #312]	; (8002f90 <HAL_RCC_ClockConfig+0x1f0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d109      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e08e      	b.n	8002f84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e66:	4b4a      	ldr	r3, [pc, #296]	; (8002f90 <HAL_RCC_ClockConfig+0x1f0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e086      	b.n	8002f84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e76:	4b46      	ldr	r3, [pc, #280]	; (8002f90 <HAL_RCC_ClockConfig+0x1f0>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f023 0203 	bic.w	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4943      	ldr	r1, [pc, #268]	; (8002f90 <HAL_RCC_ClockConfig+0x1f0>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e88:	f7fe fbd4 	bl	8001634 <HAL_GetTick>
 8002e8c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e90:	f7fe fbd0 	bl	8001634 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e06e      	b.n	8002f84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea6:	4b3a      	ldr	r3, [pc, #232]	; (8002f90 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 020c 	and.w	r2, r3, #12
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d1eb      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d010      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	4b31      	ldr	r3, [pc, #196]	; (8002f90 <HAL_RCC_ClockConfig+0x1f0>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d208      	bcs.n	8002ee6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed4:	4b2e      	ldr	r3, [pc, #184]	; (8002f90 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	492b      	ldr	r1, [pc, #172]	; (8002f90 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ee6:	4b29      	ldr	r3, [pc, #164]	; (8002f8c <HAL_RCC_ClockConfig+0x1ec>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d210      	bcs.n	8002f16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef4:	4b25      	ldr	r3, [pc, #148]	; (8002f8c <HAL_RCC_ClockConfig+0x1ec>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f023 0207 	bic.w	r2, r3, #7
 8002efc:	4923      	ldr	r1, [pc, #140]	; (8002f8c <HAL_RCC_ClockConfig+0x1ec>)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f04:	4b21      	ldr	r3, [pc, #132]	; (8002f8c <HAL_RCC_ClockConfig+0x1ec>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d001      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e036      	b.n	8002f84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d008      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f22:	4b1b      	ldr	r3, [pc, #108]	; (8002f90 <HAL_RCC_ClockConfig+0x1f0>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	4918      	ldr	r1, [pc, #96]	; (8002f90 <HAL_RCC_ClockConfig+0x1f0>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d009      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f40:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <HAL_RCC_ClockConfig+0x1f0>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	4910      	ldr	r1, [pc, #64]	; (8002f90 <HAL_RCC_ClockConfig+0x1f0>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f54:	f000 f824 	bl	8002fa0 <HAL_RCC_GetSysClockFreq>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	4b0d      	ldr	r3, [pc, #52]	; (8002f90 <HAL_RCC_ClockConfig+0x1f0>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	091b      	lsrs	r3, r3, #4
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	490b      	ldr	r1, [pc, #44]	; (8002f94 <HAL_RCC_ClockConfig+0x1f4>)
 8002f66:	5ccb      	ldrb	r3, [r1, r3]
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f70:	4a09      	ldr	r2, [pc, #36]	; (8002f98 <HAL_RCC_ClockConfig+0x1f8>)
 8002f72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f74:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <HAL_RCC_ClockConfig+0x1fc>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fe fa3f 	bl	80013fc <HAL_InitTick>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f82:	7afb      	ldrb	r3, [r7, #11]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40022000 	.word	0x40022000
 8002f90:	40021000 	.word	0x40021000
 8002f94:	08008238 	.word	0x08008238
 8002f98:	20000004 	.word	0x20000004
 8002f9c:	20000008 	.word	0x20000008

08002fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b089      	sub	sp, #36	; 0x24
 8002fa4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
 8002faa:	2300      	movs	r3, #0
 8002fac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fae:	4b3e      	ldr	r3, [pc, #248]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
 8002fb6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fb8:	4b3b      	ldr	r3, [pc, #236]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x34>
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	2b0c      	cmp	r3, #12
 8002fcc:	d121      	bne.n	8003012 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d11e      	bne.n	8003012 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fd4:	4b34      	ldr	r3, [pc, #208]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0308 	and.w	r3, r3, #8
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d107      	bne.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fe0:	4b31      	ldr	r3, [pc, #196]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fe6:	0a1b      	lsrs	r3, r3, #8
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	61fb      	str	r3, [r7, #28]
 8002fee:	e005      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ff0:	4b2d      	ldr	r3, [pc, #180]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ffc:	4a2b      	ldr	r2, [pc, #172]	; (80030ac <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003004:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10d      	bne.n	8003028 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003010:	e00a      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	2b04      	cmp	r3, #4
 8003016:	d102      	bne.n	800301e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003018:	4b25      	ldr	r3, [pc, #148]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800301a:	61bb      	str	r3, [r7, #24]
 800301c:	e004      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	2b08      	cmp	r3, #8
 8003022:	d101      	bne.n	8003028 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003024:	4b23      	ldr	r3, [pc, #140]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003026:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	2b0c      	cmp	r3, #12
 800302c:	d134      	bne.n	8003098 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800302e:	4b1e      	ldr	r3, [pc, #120]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b02      	cmp	r3, #2
 800303c:	d003      	beq.n	8003046 <HAL_RCC_GetSysClockFreq+0xa6>
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b03      	cmp	r3, #3
 8003042:	d003      	beq.n	800304c <HAL_RCC_GetSysClockFreq+0xac>
 8003044:	e005      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003046:	4b1a      	ldr	r3, [pc, #104]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003048:	617b      	str	r3, [r7, #20]
      break;
 800304a:	e005      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800304c:	4b19      	ldr	r3, [pc, #100]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800304e:	617b      	str	r3, [r7, #20]
      break;
 8003050:	e002      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	617b      	str	r3, [r7, #20]
      break;
 8003056:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003058:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	3301      	adds	r3, #1
 8003064:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003066:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	0a1b      	lsrs	r3, r3, #8
 800306c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	fb03 f202 	mul.w	r2, r3, r2
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	fbb2 f3f3 	udiv	r3, r2, r3
 800307c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800307e:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	0e5b      	lsrs	r3, r3, #25
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	3301      	adds	r3, #1
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	fbb2 f3f3 	udiv	r3, r2, r3
 8003096:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003098:	69bb      	ldr	r3, [r7, #24]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3724      	adds	r7, #36	; 0x24
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40021000 	.word	0x40021000
 80030ac:	08008250 	.word	0x08008250
 80030b0:	00f42400 	.word	0x00f42400
 80030b4:	007a1200 	.word	0x007a1200

080030b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030bc:	4b03      	ldr	r3, [pc, #12]	; (80030cc <HAL_RCC_GetHCLKFreq+0x14>)
 80030be:	681b      	ldr	r3, [r3, #0]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	20000004 	.word	0x20000004

080030d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030d4:	f7ff fff0 	bl	80030b8 <HAL_RCC_GetHCLKFreq>
 80030d8:	4602      	mov	r2, r0
 80030da:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	0a1b      	lsrs	r3, r3, #8
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	4904      	ldr	r1, [pc, #16]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030e6:	5ccb      	ldrb	r3, [r1, r3]
 80030e8:	f003 031f 	and.w	r3, r3, #31
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40021000 	.word	0x40021000
 80030f8:	08008248 	.word	0x08008248

080030fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003100:	f7ff ffda 	bl	80030b8 <HAL_RCC_GetHCLKFreq>
 8003104:	4602      	mov	r2, r0
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	0adb      	lsrs	r3, r3, #11
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	4904      	ldr	r1, [pc, #16]	; (8003124 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003112:	5ccb      	ldrb	r3, [r1, r3]
 8003114:	f003 031f 	and.w	r3, r3, #31
 8003118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800311c:	4618      	mov	r0, r3
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40021000 	.word	0x40021000
 8003124:	08008248 	.word	0x08008248

08003128 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	220f      	movs	r2, #15
 8003136:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003138:	4b12      	ldr	r3, [pc, #72]	; (8003184 <HAL_RCC_GetClockConfig+0x5c>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 0203 	and.w	r2, r3, #3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003144:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <HAL_RCC_GetClockConfig+0x5c>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003150:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <HAL_RCC_GetClockConfig+0x5c>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800315c:	4b09      	ldr	r3, [pc, #36]	; (8003184 <HAL_RCC_GetClockConfig+0x5c>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	08db      	lsrs	r3, r3, #3
 8003162:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800316a:	4b07      	ldr	r3, [pc, #28]	; (8003188 <HAL_RCC_GetClockConfig+0x60>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0207 	and.w	r2, r3, #7
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	601a      	str	r2, [r3, #0]
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40021000 	.word	0x40021000
 8003188:	40022000 	.word	0x40022000

0800318c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003194:	2300      	movs	r3, #0
 8003196:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003198:	4b2a      	ldr	r3, [pc, #168]	; (8003244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800319a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031a4:	f7ff f8f0 	bl	8002388 <HAL_PWREx_GetVoltageRange>
 80031a8:	6178      	str	r0, [r7, #20]
 80031aa:	e014      	b.n	80031d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031ac:	4b25      	ldr	r3, [pc, #148]	; (8003244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b0:	4a24      	ldr	r2, [pc, #144]	; (8003244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b6:	6593      	str	r3, [r2, #88]	; 0x58
 80031b8:	4b22      	ldr	r3, [pc, #136]	; (8003244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031c4:	f7ff f8e0 	bl	8002388 <HAL_PWREx_GetVoltageRange>
 80031c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031ca:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ce:	4a1d      	ldr	r2, [pc, #116]	; (8003244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031dc:	d10b      	bne.n	80031f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b80      	cmp	r3, #128	; 0x80
 80031e2:	d919      	bls.n	8003218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2ba0      	cmp	r3, #160	; 0xa0
 80031e8:	d902      	bls.n	80031f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031ea:	2302      	movs	r3, #2
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	e013      	b.n	8003218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031f0:	2301      	movs	r3, #1
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	e010      	b.n	8003218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b80      	cmp	r3, #128	; 0x80
 80031fa:	d902      	bls.n	8003202 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031fc:	2303      	movs	r3, #3
 80031fe:	613b      	str	r3, [r7, #16]
 8003200:	e00a      	b.n	8003218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b80      	cmp	r3, #128	; 0x80
 8003206:	d102      	bne.n	800320e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003208:	2302      	movs	r3, #2
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	e004      	b.n	8003218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b70      	cmp	r3, #112	; 0x70
 8003212:	d101      	bne.n	8003218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003214:	2301      	movs	r3, #1
 8003216:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003218:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f023 0207 	bic.w	r2, r3, #7
 8003220:	4909      	ldr	r1, [pc, #36]	; (8003248 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003228:	4b07      	ldr	r3, [pc, #28]	; (8003248 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	429a      	cmp	r2, r3
 8003234:	d001      	beq.n	800323a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40021000 	.word	0x40021000
 8003248:	40022000 	.word	0x40022000

0800324c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003254:	2300      	movs	r3, #0
 8003256:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003258:	2300      	movs	r3, #0
 800325a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003264:	2b00      	cmp	r3, #0
 8003266:	d041      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800326c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003270:	d02a      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003272:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003276:	d824      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003278:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800327c:	d008      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800327e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003282:	d81e      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00a      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003288:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800328c:	d010      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800328e:	e018      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003290:	4b86      	ldr	r3, [pc, #536]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	4a85      	ldr	r2, [pc, #532]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800329c:	e015      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3304      	adds	r3, #4
 80032a2:	2100      	movs	r1, #0
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 facb 	bl	8003840 <RCCEx_PLLSAI1_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032ae:	e00c      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3320      	adds	r3, #32
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fbb6 	bl	8003a28 <RCCEx_PLLSAI2_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032c0:	e003      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	74fb      	strb	r3, [r7, #19]
      break;
 80032c6:	e000      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80032c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ca:	7cfb      	ldrb	r3, [r7, #19]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10b      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032d0:	4b76      	ldr	r3, [pc, #472]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032de:	4973      	ldr	r1, [pc, #460]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032e6:	e001      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e8:	7cfb      	ldrb	r3, [r7, #19]
 80032ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d041      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003300:	d02a      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003302:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003306:	d824      	bhi.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003308:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800330c:	d008      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800330e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003312:	d81e      	bhi.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800331c:	d010      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800331e:	e018      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003320:	4b62      	ldr	r3, [pc, #392]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	4a61      	ldr	r2, [pc, #388]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800332a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800332c:	e015      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3304      	adds	r3, #4
 8003332:	2100      	movs	r1, #0
 8003334:	4618      	mov	r0, r3
 8003336:	f000 fa83 	bl	8003840 <RCCEx_PLLSAI1_Config>
 800333a:	4603      	mov	r3, r0
 800333c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800333e:	e00c      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3320      	adds	r3, #32
 8003344:	2100      	movs	r1, #0
 8003346:	4618      	mov	r0, r3
 8003348:	f000 fb6e 	bl	8003a28 <RCCEx_PLLSAI2_Config>
 800334c:	4603      	mov	r3, r0
 800334e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003350:	e003      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	74fb      	strb	r3, [r7, #19]
      break;
 8003356:	e000      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003358:	bf00      	nop
    }

    if(ret == HAL_OK)
 800335a:	7cfb      	ldrb	r3, [r7, #19]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10b      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003360:	4b52      	ldr	r3, [pc, #328]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003366:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800336e:	494f      	ldr	r1, [pc, #316]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003376:	e001      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 80a0 	beq.w	80034ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800338a:	2300      	movs	r3, #0
 800338c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800338e:	4b47      	ldr	r3, [pc, #284]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800339e:	2300      	movs	r3, #0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00d      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a4:	4b41      	ldr	r3, [pc, #260]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a8:	4a40      	ldr	r2, [pc, #256]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ae:	6593      	str	r3, [r2, #88]	; 0x58
 80033b0:	4b3e      	ldr	r3, [pc, #248]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033bc:	2301      	movs	r3, #1
 80033be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033c0:	4b3b      	ldr	r3, [pc, #236]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a3a      	ldr	r2, [pc, #232]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033cc:	f7fe f932 	bl	8001634 <HAL_GetTick>
 80033d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033d2:	e009      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d4:	f7fe f92e 	bl	8001634 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d902      	bls.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	74fb      	strb	r3, [r7, #19]
        break;
 80033e6:	e005      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033e8:	4b31      	ldr	r3, [pc, #196]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0ef      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80033f4:	7cfb      	ldrb	r3, [r7, #19]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d15c      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033fa:	4b2c      	ldr	r3, [pc, #176]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003400:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003404:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d01f      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	429a      	cmp	r2, r3
 8003416:	d019      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003418:	4b24      	ldr	r3, [pc, #144]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003422:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003424:	4b21      	ldr	r3, [pc, #132]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342a:	4a20      	ldr	r2, [pc, #128]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003434:	4b1d      	ldr	r3, [pc, #116]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343a:	4a1c      	ldr	r2, [pc, #112]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003444:	4a19      	ldr	r2, [pc, #100]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d016      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003456:	f7fe f8ed 	bl	8001634 <HAL_GetTick>
 800345a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800345c:	e00b      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345e:	f7fe f8e9 	bl	8001634 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	f241 3288 	movw	r2, #5000	; 0x1388
 800346c:	4293      	cmp	r3, r2
 800346e:	d902      	bls.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	74fb      	strb	r3, [r7, #19]
            break;
 8003474:	e006      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003476:	4b0d      	ldr	r3, [pc, #52]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0ec      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003484:	7cfb      	ldrb	r3, [r7, #19]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10c      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800348a:	4b08      	ldr	r3, [pc, #32]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800348c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003490:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800349a:	4904      	ldr	r1, [pc, #16]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034a2:	e009      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034a4:	7cfb      	ldrb	r3, [r7, #19]
 80034a6:	74bb      	strb	r3, [r7, #18]
 80034a8:	e006      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80034aa:	bf00      	nop
 80034ac:	40021000 	.word	0x40021000
 80034b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b4:	7cfb      	ldrb	r3, [r7, #19]
 80034b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034b8:	7c7b      	ldrb	r3, [r7, #17]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d105      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034be:	4b9e      	ldr	r3, [pc, #632]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c2:	4a9d      	ldr	r2, [pc, #628]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034d6:	4b98      	ldr	r3, [pc, #608]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034dc:	f023 0203 	bic.w	r2, r3, #3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e4:	4994      	ldr	r1, [pc, #592]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00a      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034f8:	4b8f      	ldr	r3, [pc, #572]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fe:	f023 020c 	bic.w	r2, r3, #12
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003506:	498c      	ldr	r1, [pc, #560]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800351a:	4b87      	ldr	r3, [pc, #540]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003520:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	4983      	ldr	r1, [pc, #524]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00a      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800353c:	4b7e      	ldr	r3, [pc, #504]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003542:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	497b      	ldr	r1, [pc, #492]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0310 	and.w	r3, r3, #16
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800355e:	4b76      	ldr	r3, [pc, #472]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003564:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800356c:	4972      	ldr	r1, [pc, #456]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003580:	4b6d      	ldr	r3, [pc, #436]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003586:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358e:	496a      	ldr	r1, [pc, #424]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003590:	4313      	orrs	r3, r2
 8003592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035a2:	4b65      	ldr	r3, [pc, #404]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b0:	4961      	ldr	r1, [pc, #388]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035c4:	4b5c      	ldr	r3, [pc, #368]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d2:	4959      	ldr	r1, [pc, #356]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035e6:	4b54      	ldr	r3, [pc, #336]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f4:	4950      	ldr	r1, [pc, #320]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003608:	4b4b      	ldr	r3, [pc, #300]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003616:	4948      	ldr	r1, [pc, #288]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800362a:	4b43      	ldr	r3, [pc, #268]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003630:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003638:	493f      	ldr	r1, [pc, #252]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d028      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800364c:	4b3a      	ldr	r3, [pc, #232]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003652:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800365a:	4937      	ldr	r1, [pc, #220]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003666:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800366a:	d106      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800366c:	4b32      	ldr	r3, [pc, #200]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4a31      	ldr	r2, [pc, #196]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003676:	60d3      	str	r3, [r2, #12]
 8003678:	e011      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800367e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003682:	d10c      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3304      	adds	r3, #4
 8003688:	2101      	movs	r1, #1
 800368a:	4618      	mov	r0, r3
 800368c:	f000 f8d8 	bl	8003840 <RCCEx_PLLSAI1_Config>
 8003690:	4603      	mov	r3, r0
 8003692:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003694:	7cfb      	ldrb	r3, [r7, #19]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800369a:	7cfb      	ldrb	r3, [r7, #19]
 800369c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d028      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036aa:	4b23      	ldr	r3, [pc, #140]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	491f      	ldr	r1, [pc, #124]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036c8:	d106      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ca:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	4a1a      	ldr	r2, [pc, #104]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036d4:	60d3      	str	r3, [r2, #12]
 80036d6:	e011      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036e0:	d10c      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3304      	adds	r3, #4
 80036e6:	2101      	movs	r1, #1
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 f8a9 	bl	8003840 <RCCEx_PLLSAI1_Config>
 80036ee:	4603      	mov	r3, r0
 80036f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036f2:	7cfb      	ldrb	r3, [r7, #19]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80036f8:	7cfb      	ldrb	r3, [r7, #19]
 80036fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d02b      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003708:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003716:	4908      	ldr	r1, [pc, #32]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003722:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003726:	d109      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003728:	4b03      	ldr	r3, [pc, #12]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	4a02      	ldr	r2, [pc, #8]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003732:	60d3      	str	r3, [r2, #12]
 8003734:	e014      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003736:	bf00      	nop
 8003738:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003740:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003744:	d10c      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3304      	adds	r3, #4
 800374a:	2101      	movs	r1, #1
 800374c:	4618      	mov	r0, r3
 800374e:	f000 f877 	bl	8003840 <RCCEx_PLLSAI1_Config>
 8003752:	4603      	mov	r3, r0
 8003754:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003756:	7cfb      	ldrb	r3, [r7, #19]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800375c:	7cfb      	ldrb	r3, [r7, #19]
 800375e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d02f      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800376c:	4b2b      	ldr	r3, [pc, #172]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003772:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800377a:	4928      	ldr	r1, [pc, #160]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003786:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800378a:	d10d      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3304      	adds	r3, #4
 8003790:	2102      	movs	r1, #2
 8003792:	4618      	mov	r0, r3
 8003794:	f000 f854 	bl	8003840 <RCCEx_PLLSAI1_Config>
 8003798:	4603      	mov	r3, r0
 800379a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800379c:	7cfb      	ldrb	r3, [r7, #19]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d014      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037a2:	7cfb      	ldrb	r3, [r7, #19]
 80037a4:	74bb      	strb	r3, [r7, #18]
 80037a6:	e011      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037b0:	d10c      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3320      	adds	r3, #32
 80037b6:	2102      	movs	r1, #2
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 f935 	bl	8003a28 <RCCEx_PLLSAI2_Config>
 80037be:	4603      	mov	r3, r0
 80037c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037c2:	7cfb      	ldrb	r3, [r7, #19]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037c8:	7cfb      	ldrb	r3, [r7, #19]
 80037ca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037d8:	4b10      	ldr	r3, [pc, #64]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037de:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037e6:	490d      	ldr	r1, [pc, #52]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00b      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037fa:	4b08      	ldr	r3, [pc, #32]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003800:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800380a:	4904      	ldr	r1, [pc, #16]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003812:	7cbb      	ldrb	r3, [r7, #18]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40021000 	.word	0x40021000

08003820 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a04      	ldr	r2, [pc, #16]	; (800383c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800382a:	f043 0304 	orr.w	r3, r3, #4
 800382e:	6013      	str	r3, [r2, #0]
}
 8003830:	bf00      	nop
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	40021000 	.word	0x40021000

08003840 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800384e:	4b75      	ldr	r3, [pc, #468]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d018      	beq.n	800388c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800385a:	4b72      	ldr	r3, [pc, #456]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f003 0203 	and.w	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d10d      	bne.n	8003886 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
       ||
 800386e:	2b00      	cmp	r3, #0
 8003870:	d009      	beq.n	8003886 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003872:	4b6c      	ldr	r3, [pc, #432]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	091b      	lsrs	r3, r3, #4
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
       ||
 8003882:	429a      	cmp	r2, r3
 8003884:	d047      	beq.n	8003916 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	73fb      	strb	r3, [r7, #15]
 800388a:	e044      	b.n	8003916 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b03      	cmp	r3, #3
 8003892:	d018      	beq.n	80038c6 <RCCEx_PLLSAI1_Config+0x86>
 8003894:	2b03      	cmp	r3, #3
 8003896:	d825      	bhi.n	80038e4 <RCCEx_PLLSAI1_Config+0xa4>
 8003898:	2b01      	cmp	r3, #1
 800389a:	d002      	beq.n	80038a2 <RCCEx_PLLSAI1_Config+0x62>
 800389c:	2b02      	cmp	r3, #2
 800389e:	d009      	beq.n	80038b4 <RCCEx_PLLSAI1_Config+0x74>
 80038a0:	e020      	b.n	80038e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038a2:	4b60      	ldr	r3, [pc, #384]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d11d      	bne.n	80038ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b2:	e01a      	b.n	80038ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038b4:	4b5b      	ldr	r3, [pc, #364]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d116      	bne.n	80038ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038c4:	e013      	b.n	80038ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038c6:	4b57      	ldr	r3, [pc, #348]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10f      	bne.n	80038f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038d2:	4b54      	ldr	r3, [pc, #336]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d109      	bne.n	80038f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038e2:	e006      	b.n	80038f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	73fb      	strb	r3, [r7, #15]
      break;
 80038e8:	e004      	b.n	80038f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038ea:	bf00      	nop
 80038ec:	e002      	b.n	80038f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038ee:	bf00      	nop
 80038f0:	e000      	b.n	80038f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10d      	bne.n	8003916 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038fa:	4b4a      	ldr	r3, [pc, #296]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6819      	ldr	r1, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	3b01      	subs	r3, #1
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	430b      	orrs	r3, r1
 8003910:	4944      	ldr	r1, [pc, #272]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003912:	4313      	orrs	r3, r2
 8003914:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d17d      	bne.n	8003a18 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800391c:	4b41      	ldr	r3, [pc, #260]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a40      	ldr	r2, [pc, #256]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003922:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003926:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003928:	f7fd fe84 	bl	8001634 <HAL_GetTick>
 800392c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800392e:	e009      	b.n	8003944 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003930:	f7fd fe80 	bl	8001634 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d902      	bls.n	8003944 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	73fb      	strb	r3, [r7, #15]
        break;
 8003942:	e005      	b.n	8003950 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003944:	4b37      	ldr	r3, [pc, #220]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1ef      	bne.n	8003930 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003950:	7bfb      	ldrb	r3, [r7, #15]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d160      	bne.n	8003a18 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d111      	bne.n	8003980 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800395c:	4b31      	ldr	r3, [pc, #196]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6892      	ldr	r2, [r2, #8]
 800396c:	0211      	lsls	r1, r2, #8
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	68d2      	ldr	r2, [r2, #12]
 8003972:	0912      	lsrs	r2, r2, #4
 8003974:	0452      	lsls	r2, r2, #17
 8003976:	430a      	orrs	r2, r1
 8003978:	492a      	ldr	r1, [pc, #168]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 800397a:	4313      	orrs	r3, r2
 800397c:	610b      	str	r3, [r1, #16]
 800397e:	e027      	b.n	80039d0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d112      	bne.n	80039ac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003986:	4b27      	ldr	r3, [pc, #156]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800398e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6892      	ldr	r2, [r2, #8]
 8003996:	0211      	lsls	r1, r2, #8
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6912      	ldr	r2, [r2, #16]
 800399c:	0852      	lsrs	r2, r2, #1
 800399e:	3a01      	subs	r2, #1
 80039a0:	0552      	lsls	r2, r2, #21
 80039a2:	430a      	orrs	r2, r1
 80039a4:	491f      	ldr	r1, [pc, #124]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	610b      	str	r3, [r1, #16]
 80039aa:	e011      	b.n	80039d0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039ac:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6892      	ldr	r2, [r2, #8]
 80039bc:	0211      	lsls	r1, r2, #8
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6952      	ldr	r2, [r2, #20]
 80039c2:	0852      	lsrs	r2, r2, #1
 80039c4:	3a01      	subs	r2, #1
 80039c6:	0652      	lsls	r2, r2, #25
 80039c8:	430a      	orrs	r2, r1
 80039ca:	4916      	ldr	r1, [pc, #88]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039d0:	4b14      	ldr	r3, [pc, #80]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a13      	ldr	r2, [pc, #76]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039dc:	f7fd fe2a 	bl	8001634 <HAL_GetTick>
 80039e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039e2:	e009      	b.n	80039f8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039e4:	f7fd fe26 	bl	8001634 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d902      	bls.n	80039f8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	73fb      	strb	r3, [r7, #15]
          break;
 80039f6:	e005      	b.n	8003a04 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039f8:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0ef      	beq.n	80039e4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d106      	bne.n	8003a18 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a0a:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a0c:	691a      	ldr	r2, [r3, #16]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	4904      	ldr	r1, [pc, #16]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40021000 	.word	0x40021000

08003a28 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a36:	4b6a      	ldr	r3, [pc, #424]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d018      	beq.n	8003a74 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a42:	4b67      	ldr	r3, [pc, #412]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f003 0203 	and.w	r2, r3, #3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d10d      	bne.n	8003a6e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
       ||
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d009      	beq.n	8003a6e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a5a:	4b61      	ldr	r3, [pc, #388]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	091b      	lsrs	r3, r3, #4
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
       ||
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d047      	beq.n	8003afe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	73fb      	strb	r3, [r7, #15]
 8003a72:	e044      	b.n	8003afe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b03      	cmp	r3, #3
 8003a7a:	d018      	beq.n	8003aae <RCCEx_PLLSAI2_Config+0x86>
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d825      	bhi.n	8003acc <RCCEx_PLLSAI2_Config+0xa4>
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d002      	beq.n	8003a8a <RCCEx_PLLSAI2_Config+0x62>
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d009      	beq.n	8003a9c <RCCEx_PLLSAI2_Config+0x74>
 8003a88:	e020      	b.n	8003acc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a8a:	4b55      	ldr	r3, [pc, #340]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d11d      	bne.n	8003ad2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9a:	e01a      	b.n	8003ad2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a9c:	4b50      	ldr	r3, [pc, #320]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d116      	bne.n	8003ad6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aac:	e013      	b.n	8003ad6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003aae:	4b4c      	ldr	r3, [pc, #304]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10f      	bne.n	8003ada <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003aba:	4b49      	ldr	r3, [pc, #292]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d109      	bne.n	8003ada <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003aca:	e006      	b.n	8003ada <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad0:	e004      	b.n	8003adc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ad2:	bf00      	nop
 8003ad4:	e002      	b.n	8003adc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ad6:	bf00      	nop
 8003ad8:	e000      	b.n	8003adc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ada:	bf00      	nop
    }

    if(status == HAL_OK)
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10d      	bne.n	8003afe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ae2:	4b3f      	ldr	r3, [pc, #252]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6819      	ldr	r1, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	430b      	orrs	r3, r1
 8003af8:	4939      	ldr	r1, [pc, #228]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d167      	bne.n	8003bd4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b04:	4b36      	ldr	r3, [pc, #216]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a35      	ldr	r2, [pc, #212]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b10:	f7fd fd90 	bl	8001634 <HAL_GetTick>
 8003b14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b16:	e009      	b.n	8003b2c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b18:	f7fd fd8c 	bl	8001634 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d902      	bls.n	8003b2c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	73fb      	strb	r3, [r7, #15]
        break;
 8003b2a:	e005      	b.n	8003b38 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b2c:	4b2c      	ldr	r3, [pc, #176]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1ef      	bne.n	8003b18 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d14a      	bne.n	8003bd4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d111      	bne.n	8003b68 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b44:	4b26      	ldr	r3, [pc, #152]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6892      	ldr	r2, [r2, #8]
 8003b54:	0211      	lsls	r1, r2, #8
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	68d2      	ldr	r2, [r2, #12]
 8003b5a:	0912      	lsrs	r2, r2, #4
 8003b5c:	0452      	lsls	r2, r2, #17
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	491f      	ldr	r1, [pc, #124]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	614b      	str	r3, [r1, #20]
 8003b66:	e011      	b.n	8003b8c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b68:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6892      	ldr	r2, [r2, #8]
 8003b78:	0211      	lsls	r1, r2, #8
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6912      	ldr	r2, [r2, #16]
 8003b7e:	0852      	lsrs	r2, r2, #1
 8003b80:	3a01      	subs	r2, #1
 8003b82:	0652      	lsls	r2, r2, #25
 8003b84:	430a      	orrs	r2, r1
 8003b86:	4916      	ldr	r1, [pc, #88]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b8c:	4b14      	ldr	r3, [pc, #80]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a13      	ldr	r2, [pc, #76]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b98:	f7fd fd4c 	bl	8001634 <HAL_GetTick>
 8003b9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b9e:	e009      	b.n	8003bb4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ba0:	f7fd fd48 	bl	8001634 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d902      	bls.n	8003bb4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	73fb      	strb	r3, [r7, #15]
          break;
 8003bb2:	e005      	b.n	8003bc0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bb4:	4b0a      	ldr	r3, [pc, #40]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0ef      	beq.n	8003ba0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d106      	bne.n	8003bd4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003bc6:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc8:	695a      	ldr	r2, [r3, #20]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	4904      	ldr	r1, [pc, #16]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40021000 	.word	0x40021000

08003be4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e095      	b.n	8003d22 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d108      	bne.n	8003c10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c06:	d009      	beq.n	8003c1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	61da      	str	r2, [r3, #28]
 8003c0e:	e005      	b.n	8003c1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d106      	bne.n	8003c3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7fd fa5c 	bl	80010f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c5c:	d902      	bls.n	8003c64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	e002      	b.n	8003c6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c72:	d007      	beq.n	8003c84 <HAL_SPI_Init+0xa0>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c7c:	d002      	beq.n	8003c84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c94:	431a      	orrs	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc6:	ea42 0103 	orr.w	r1, r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	0c1b      	lsrs	r3, r3, #16
 8003ce0:	f003 0204 	and.w	r2, r3, #4
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	f003 0310 	and.w	r3, r3, #16
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003d00:	ea42 0103 	orr.w	r1, r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b082      	sub	sp, #8
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e049      	b.n	8003dd0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d106      	bne.n	8003d56 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f841 	bl	8003dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2202      	movs	r2, #2
 8003d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3304      	adds	r3, #4
 8003d66:	4619      	mov	r1, r3
 8003d68:	4610      	mov	r0, r2
 8003d6a:	f000 f9df 	bl	800412c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d001      	beq.n	8003e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e04f      	b.n	8003ea4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0201 	orr.w	r2, r2, #1
 8003e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a23      	ldr	r2, [pc, #140]	; (8003eb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d01d      	beq.n	8003e62 <HAL_TIM_Base_Start_IT+0x76>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2e:	d018      	beq.n	8003e62 <HAL_TIM_Base_Start_IT+0x76>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a1f      	ldr	r2, [pc, #124]	; (8003eb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d013      	beq.n	8003e62 <HAL_TIM_Base_Start_IT+0x76>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a1e      	ldr	r2, [pc, #120]	; (8003eb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00e      	beq.n	8003e62 <HAL_TIM_Base_Start_IT+0x76>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a1c      	ldr	r2, [pc, #112]	; (8003ebc <HAL_TIM_Base_Start_IT+0xd0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d009      	beq.n	8003e62 <HAL_TIM_Base_Start_IT+0x76>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a1b      	ldr	r2, [pc, #108]	; (8003ec0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d004      	beq.n	8003e62 <HAL_TIM_Base_Start_IT+0x76>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a19      	ldr	r2, [pc, #100]	; (8003ec4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d115      	bne.n	8003e8e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	4b17      	ldr	r3, [pc, #92]	; (8003ec8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2b06      	cmp	r3, #6
 8003e72:	d015      	beq.n	8003ea0 <HAL_TIM_Base_Start_IT+0xb4>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e7a:	d011      	beq.n	8003ea0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e8c:	e008      	b.n	8003ea0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f042 0201 	orr.w	r2, r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	e000      	b.n	8003ea2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	40012c00 	.word	0x40012c00
 8003eb4:	40000400 	.word	0x40000400
 8003eb8:	40000800 	.word	0x40000800
 8003ebc:	40000c00 	.word	0x40000c00
 8003ec0:	40013400 	.word	0x40013400
 8003ec4:	40014000 	.word	0x40014000
 8003ec8:	00010007 	.word	0x00010007

08003ecc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d020      	beq.n	8003f30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d01b      	beq.n	8003f30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f06f 0202 	mvn.w	r2, #2
 8003f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f8e9 	bl	80040ee <HAL_TIM_IC_CaptureCallback>
 8003f1c:	e005      	b.n	8003f2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f8db 	bl	80040da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f8ec 	bl	8004102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	f003 0304 	and.w	r3, r3, #4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d020      	beq.n	8003f7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d01b      	beq.n	8003f7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f06f 0204 	mvn.w	r2, #4
 8003f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2202      	movs	r2, #2
 8003f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f8c3 	bl	80040ee <HAL_TIM_IC_CaptureCallback>
 8003f68:	e005      	b.n	8003f76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f8b5 	bl	80040da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f8c6 	bl	8004102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d020      	beq.n	8003fc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d01b      	beq.n	8003fc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f06f 0208 	mvn.w	r2, #8
 8003f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2204      	movs	r2, #4
 8003f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f89d 	bl	80040ee <HAL_TIM_IC_CaptureCallback>
 8003fb4:	e005      	b.n	8003fc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f88f 	bl	80040da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f8a0 	bl	8004102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f003 0310 	and.w	r3, r3, #16
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d020      	beq.n	8004014 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f003 0310 	and.w	r3, r3, #16
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01b      	beq.n	8004014 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0210 	mvn.w	r2, #16
 8003fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2208      	movs	r2, #8
 8003fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f877 	bl	80040ee <HAL_TIM_IC_CaptureCallback>
 8004000:	e005      	b.n	800400e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f869 	bl	80040da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f87a 	bl	8004102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00c      	beq.n	8004038 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b00      	cmp	r3, #0
 8004026:	d007      	beq.n	8004038 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f06f 0201 	mvn.w	r2, #1
 8004030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7fc ff18 	bl	8000e68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403e:	2b00      	cmp	r3, #0
 8004040:	d104      	bne.n	800404c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00c      	beq.n	8004066 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004052:	2b00      	cmp	r3, #0
 8004054:	d007      	beq.n	8004066 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800405e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f913 	bl	800428c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00c      	beq.n	800408a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004076:	2b00      	cmp	r3, #0
 8004078:	d007      	beq.n	800408a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f90b 	bl	80042a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00c      	beq.n	80040ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d007      	beq.n	80040ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f834 	bl	8004116 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	f003 0320 	and.w	r3, r3, #32
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00c      	beq.n	80040d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f003 0320 	and.w	r3, r3, #32
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d007      	beq.n	80040d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f06f 0220 	mvn.w	r2, #32
 80040ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f8d3 	bl	8004278 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040d2:	bf00      	nop
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
	...

0800412c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a46      	ldr	r2, [pc, #280]	; (8004258 <TIM_Base_SetConfig+0x12c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d013      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414a:	d00f      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a43      	ldr	r2, [pc, #268]	; (800425c <TIM_Base_SetConfig+0x130>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d00b      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a42      	ldr	r2, [pc, #264]	; (8004260 <TIM_Base_SetConfig+0x134>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d007      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a41      	ldr	r2, [pc, #260]	; (8004264 <TIM_Base_SetConfig+0x138>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d003      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a40      	ldr	r2, [pc, #256]	; (8004268 <TIM_Base_SetConfig+0x13c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d108      	bne.n	800417e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a35      	ldr	r2, [pc, #212]	; (8004258 <TIM_Base_SetConfig+0x12c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d01f      	beq.n	80041c6 <TIM_Base_SetConfig+0x9a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418c:	d01b      	beq.n	80041c6 <TIM_Base_SetConfig+0x9a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a32      	ldr	r2, [pc, #200]	; (800425c <TIM_Base_SetConfig+0x130>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d017      	beq.n	80041c6 <TIM_Base_SetConfig+0x9a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a31      	ldr	r2, [pc, #196]	; (8004260 <TIM_Base_SetConfig+0x134>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d013      	beq.n	80041c6 <TIM_Base_SetConfig+0x9a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a30      	ldr	r2, [pc, #192]	; (8004264 <TIM_Base_SetConfig+0x138>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00f      	beq.n	80041c6 <TIM_Base_SetConfig+0x9a>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a2f      	ldr	r2, [pc, #188]	; (8004268 <TIM_Base_SetConfig+0x13c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d00b      	beq.n	80041c6 <TIM_Base_SetConfig+0x9a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a2e      	ldr	r2, [pc, #184]	; (800426c <TIM_Base_SetConfig+0x140>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d007      	beq.n	80041c6 <TIM_Base_SetConfig+0x9a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a2d      	ldr	r2, [pc, #180]	; (8004270 <TIM_Base_SetConfig+0x144>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d003      	beq.n	80041c6 <TIM_Base_SetConfig+0x9a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a2c      	ldr	r2, [pc, #176]	; (8004274 <TIM_Base_SetConfig+0x148>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d108      	bne.n	80041d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a16      	ldr	r2, [pc, #88]	; (8004258 <TIM_Base_SetConfig+0x12c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d00f      	beq.n	8004224 <TIM_Base_SetConfig+0xf8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a18      	ldr	r2, [pc, #96]	; (8004268 <TIM_Base_SetConfig+0x13c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d00b      	beq.n	8004224 <TIM_Base_SetConfig+0xf8>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a17      	ldr	r2, [pc, #92]	; (800426c <TIM_Base_SetConfig+0x140>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d007      	beq.n	8004224 <TIM_Base_SetConfig+0xf8>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a16      	ldr	r2, [pc, #88]	; (8004270 <TIM_Base_SetConfig+0x144>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d003      	beq.n	8004224 <TIM_Base_SetConfig+0xf8>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a15      	ldr	r2, [pc, #84]	; (8004274 <TIM_Base_SetConfig+0x148>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d103      	bne.n	800422c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b01      	cmp	r3, #1
 800423c:	d105      	bne.n	800424a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	f023 0201 	bic.w	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	611a      	str	r2, [r3, #16]
  }
}
 800424a:	bf00      	nop
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40012c00 	.word	0x40012c00
 800425c:	40000400 	.word	0x40000400
 8004260:	40000800 	.word	0x40000800
 8004264:	40000c00 	.word	0x40000c00
 8004268:	40013400 	.word	0x40013400
 800426c:	40014000 	.word	0x40014000
 8004270:	40014400 	.word	0x40014400
 8004274:	40014800 	.word	0x40014800

08004278 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e040      	b.n	8004348 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7fc ff50 	bl	800117c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2224      	movs	r2, #36	; 0x24
 80042e0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0201 	bic.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fae0 	bl	80048c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f825 	bl	8004350 <UART_SetConfig>
 8004306:	4603      	mov	r3, r0
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e01b      	b.n	8004348 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800431e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800432e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0201 	orr.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 fb5f 	bl	8004a04 <UART_CheckIdleState>
 8004346:	4603      	mov	r3, r0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004354:	b08a      	sub	sp, #40	; 0x28
 8004356:	af00      	add	r7, sp, #0
 8004358:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	431a      	orrs	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	431a      	orrs	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	4313      	orrs	r3, r2
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	4ba4      	ldr	r3, [pc, #656]	; (8004610 <UART_SetConfig+0x2c0>)
 8004380:	4013      	ands	r3, r2
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	6812      	ldr	r2, [r2, #0]
 8004386:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004388:	430b      	orrs	r3, r1
 800438a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a99      	ldr	r2, [pc, #612]	; (8004614 <UART_SetConfig+0x2c4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d004      	beq.n	80043bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b8:	4313      	orrs	r3, r2
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043cc:	430a      	orrs	r2, r1
 80043ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a90      	ldr	r2, [pc, #576]	; (8004618 <UART_SetConfig+0x2c8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d126      	bne.n	8004428 <UART_SetConfig+0xd8>
 80043da:	4b90      	ldr	r3, [pc, #576]	; (800461c <UART_SetConfig+0x2cc>)
 80043dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e0:	f003 0303 	and.w	r3, r3, #3
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d81b      	bhi.n	8004420 <UART_SetConfig+0xd0>
 80043e8:	a201      	add	r2, pc, #4	; (adr r2, 80043f0 <UART_SetConfig+0xa0>)
 80043ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ee:	bf00      	nop
 80043f0:	08004401 	.word	0x08004401
 80043f4:	08004411 	.word	0x08004411
 80043f8:	08004409 	.word	0x08004409
 80043fc:	08004419 	.word	0x08004419
 8004400:	2301      	movs	r3, #1
 8004402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004406:	e116      	b.n	8004636 <UART_SetConfig+0x2e6>
 8004408:	2302      	movs	r3, #2
 800440a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800440e:	e112      	b.n	8004636 <UART_SetConfig+0x2e6>
 8004410:	2304      	movs	r3, #4
 8004412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004416:	e10e      	b.n	8004636 <UART_SetConfig+0x2e6>
 8004418:	2308      	movs	r3, #8
 800441a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441e:	e10a      	b.n	8004636 <UART_SetConfig+0x2e6>
 8004420:	2310      	movs	r3, #16
 8004422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004426:	e106      	b.n	8004636 <UART_SetConfig+0x2e6>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a7c      	ldr	r2, [pc, #496]	; (8004620 <UART_SetConfig+0x2d0>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d138      	bne.n	80044a4 <UART_SetConfig+0x154>
 8004432:	4b7a      	ldr	r3, [pc, #488]	; (800461c <UART_SetConfig+0x2cc>)
 8004434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004438:	f003 030c 	and.w	r3, r3, #12
 800443c:	2b0c      	cmp	r3, #12
 800443e:	d82d      	bhi.n	800449c <UART_SetConfig+0x14c>
 8004440:	a201      	add	r2, pc, #4	; (adr r2, 8004448 <UART_SetConfig+0xf8>)
 8004442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004446:	bf00      	nop
 8004448:	0800447d 	.word	0x0800447d
 800444c:	0800449d 	.word	0x0800449d
 8004450:	0800449d 	.word	0x0800449d
 8004454:	0800449d 	.word	0x0800449d
 8004458:	0800448d 	.word	0x0800448d
 800445c:	0800449d 	.word	0x0800449d
 8004460:	0800449d 	.word	0x0800449d
 8004464:	0800449d 	.word	0x0800449d
 8004468:	08004485 	.word	0x08004485
 800446c:	0800449d 	.word	0x0800449d
 8004470:	0800449d 	.word	0x0800449d
 8004474:	0800449d 	.word	0x0800449d
 8004478:	08004495 	.word	0x08004495
 800447c:	2300      	movs	r3, #0
 800447e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004482:	e0d8      	b.n	8004636 <UART_SetConfig+0x2e6>
 8004484:	2302      	movs	r3, #2
 8004486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800448a:	e0d4      	b.n	8004636 <UART_SetConfig+0x2e6>
 800448c:	2304      	movs	r3, #4
 800448e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004492:	e0d0      	b.n	8004636 <UART_SetConfig+0x2e6>
 8004494:	2308      	movs	r3, #8
 8004496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800449a:	e0cc      	b.n	8004636 <UART_SetConfig+0x2e6>
 800449c:	2310      	movs	r3, #16
 800449e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044a2:	e0c8      	b.n	8004636 <UART_SetConfig+0x2e6>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a5e      	ldr	r2, [pc, #376]	; (8004624 <UART_SetConfig+0x2d4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d125      	bne.n	80044fa <UART_SetConfig+0x1aa>
 80044ae:	4b5b      	ldr	r3, [pc, #364]	; (800461c <UART_SetConfig+0x2cc>)
 80044b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80044b8:	2b30      	cmp	r3, #48	; 0x30
 80044ba:	d016      	beq.n	80044ea <UART_SetConfig+0x19a>
 80044bc:	2b30      	cmp	r3, #48	; 0x30
 80044be:	d818      	bhi.n	80044f2 <UART_SetConfig+0x1a2>
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	d00a      	beq.n	80044da <UART_SetConfig+0x18a>
 80044c4:	2b20      	cmp	r3, #32
 80044c6:	d814      	bhi.n	80044f2 <UART_SetConfig+0x1a2>
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d002      	beq.n	80044d2 <UART_SetConfig+0x182>
 80044cc:	2b10      	cmp	r3, #16
 80044ce:	d008      	beq.n	80044e2 <UART_SetConfig+0x192>
 80044d0:	e00f      	b.n	80044f2 <UART_SetConfig+0x1a2>
 80044d2:	2300      	movs	r3, #0
 80044d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044d8:	e0ad      	b.n	8004636 <UART_SetConfig+0x2e6>
 80044da:	2302      	movs	r3, #2
 80044dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044e0:	e0a9      	b.n	8004636 <UART_SetConfig+0x2e6>
 80044e2:	2304      	movs	r3, #4
 80044e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044e8:	e0a5      	b.n	8004636 <UART_SetConfig+0x2e6>
 80044ea:	2308      	movs	r3, #8
 80044ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f0:	e0a1      	b.n	8004636 <UART_SetConfig+0x2e6>
 80044f2:	2310      	movs	r3, #16
 80044f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f8:	e09d      	b.n	8004636 <UART_SetConfig+0x2e6>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a4a      	ldr	r2, [pc, #296]	; (8004628 <UART_SetConfig+0x2d8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d125      	bne.n	8004550 <UART_SetConfig+0x200>
 8004504:	4b45      	ldr	r3, [pc, #276]	; (800461c <UART_SetConfig+0x2cc>)
 8004506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800450e:	2bc0      	cmp	r3, #192	; 0xc0
 8004510:	d016      	beq.n	8004540 <UART_SetConfig+0x1f0>
 8004512:	2bc0      	cmp	r3, #192	; 0xc0
 8004514:	d818      	bhi.n	8004548 <UART_SetConfig+0x1f8>
 8004516:	2b80      	cmp	r3, #128	; 0x80
 8004518:	d00a      	beq.n	8004530 <UART_SetConfig+0x1e0>
 800451a:	2b80      	cmp	r3, #128	; 0x80
 800451c:	d814      	bhi.n	8004548 <UART_SetConfig+0x1f8>
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <UART_SetConfig+0x1d8>
 8004522:	2b40      	cmp	r3, #64	; 0x40
 8004524:	d008      	beq.n	8004538 <UART_SetConfig+0x1e8>
 8004526:	e00f      	b.n	8004548 <UART_SetConfig+0x1f8>
 8004528:	2300      	movs	r3, #0
 800452a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800452e:	e082      	b.n	8004636 <UART_SetConfig+0x2e6>
 8004530:	2302      	movs	r3, #2
 8004532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004536:	e07e      	b.n	8004636 <UART_SetConfig+0x2e6>
 8004538:	2304      	movs	r3, #4
 800453a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800453e:	e07a      	b.n	8004636 <UART_SetConfig+0x2e6>
 8004540:	2308      	movs	r3, #8
 8004542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004546:	e076      	b.n	8004636 <UART_SetConfig+0x2e6>
 8004548:	2310      	movs	r3, #16
 800454a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800454e:	e072      	b.n	8004636 <UART_SetConfig+0x2e6>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a35      	ldr	r2, [pc, #212]	; (800462c <UART_SetConfig+0x2dc>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d12a      	bne.n	80045b0 <UART_SetConfig+0x260>
 800455a:	4b30      	ldr	r3, [pc, #192]	; (800461c <UART_SetConfig+0x2cc>)
 800455c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004564:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004568:	d01a      	beq.n	80045a0 <UART_SetConfig+0x250>
 800456a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800456e:	d81b      	bhi.n	80045a8 <UART_SetConfig+0x258>
 8004570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004574:	d00c      	beq.n	8004590 <UART_SetConfig+0x240>
 8004576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800457a:	d815      	bhi.n	80045a8 <UART_SetConfig+0x258>
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <UART_SetConfig+0x238>
 8004580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004584:	d008      	beq.n	8004598 <UART_SetConfig+0x248>
 8004586:	e00f      	b.n	80045a8 <UART_SetConfig+0x258>
 8004588:	2300      	movs	r3, #0
 800458a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800458e:	e052      	b.n	8004636 <UART_SetConfig+0x2e6>
 8004590:	2302      	movs	r3, #2
 8004592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004596:	e04e      	b.n	8004636 <UART_SetConfig+0x2e6>
 8004598:	2304      	movs	r3, #4
 800459a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800459e:	e04a      	b.n	8004636 <UART_SetConfig+0x2e6>
 80045a0:	2308      	movs	r3, #8
 80045a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045a6:	e046      	b.n	8004636 <UART_SetConfig+0x2e6>
 80045a8:	2310      	movs	r3, #16
 80045aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ae:	e042      	b.n	8004636 <UART_SetConfig+0x2e6>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a17      	ldr	r2, [pc, #92]	; (8004614 <UART_SetConfig+0x2c4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d13a      	bne.n	8004630 <UART_SetConfig+0x2e0>
 80045ba:	4b18      	ldr	r3, [pc, #96]	; (800461c <UART_SetConfig+0x2cc>)
 80045bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045c8:	d01a      	beq.n	8004600 <UART_SetConfig+0x2b0>
 80045ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045ce:	d81b      	bhi.n	8004608 <UART_SetConfig+0x2b8>
 80045d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d4:	d00c      	beq.n	80045f0 <UART_SetConfig+0x2a0>
 80045d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045da:	d815      	bhi.n	8004608 <UART_SetConfig+0x2b8>
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <UART_SetConfig+0x298>
 80045e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e4:	d008      	beq.n	80045f8 <UART_SetConfig+0x2a8>
 80045e6:	e00f      	b.n	8004608 <UART_SetConfig+0x2b8>
 80045e8:	2300      	movs	r3, #0
 80045ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ee:	e022      	b.n	8004636 <UART_SetConfig+0x2e6>
 80045f0:	2302      	movs	r3, #2
 80045f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f6:	e01e      	b.n	8004636 <UART_SetConfig+0x2e6>
 80045f8:	2304      	movs	r3, #4
 80045fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045fe:	e01a      	b.n	8004636 <UART_SetConfig+0x2e6>
 8004600:	2308      	movs	r3, #8
 8004602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004606:	e016      	b.n	8004636 <UART_SetConfig+0x2e6>
 8004608:	2310      	movs	r3, #16
 800460a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800460e:	e012      	b.n	8004636 <UART_SetConfig+0x2e6>
 8004610:	efff69f3 	.word	0xefff69f3
 8004614:	40008000 	.word	0x40008000
 8004618:	40013800 	.word	0x40013800
 800461c:	40021000 	.word	0x40021000
 8004620:	40004400 	.word	0x40004400
 8004624:	40004800 	.word	0x40004800
 8004628:	40004c00 	.word	0x40004c00
 800462c:	40005000 	.word	0x40005000
 8004630:	2310      	movs	r3, #16
 8004632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a9f      	ldr	r2, [pc, #636]	; (80048b8 <UART_SetConfig+0x568>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d17a      	bne.n	8004736 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004640:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004644:	2b08      	cmp	r3, #8
 8004646:	d824      	bhi.n	8004692 <UART_SetConfig+0x342>
 8004648:	a201      	add	r2, pc, #4	; (adr r2, 8004650 <UART_SetConfig+0x300>)
 800464a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464e:	bf00      	nop
 8004650:	08004675 	.word	0x08004675
 8004654:	08004693 	.word	0x08004693
 8004658:	0800467d 	.word	0x0800467d
 800465c:	08004693 	.word	0x08004693
 8004660:	08004683 	.word	0x08004683
 8004664:	08004693 	.word	0x08004693
 8004668:	08004693 	.word	0x08004693
 800466c:	08004693 	.word	0x08004693
 8004670:	0800468b 	.word	0x0800468b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004674:	f7fe fd2c 	bl	80030d0 <HAL_RCC_GetPCLK1Freq>
 8004678:	61f8      	str	r0, [r7, #28]
        break;
 800467a:	e010      	b.n	800469e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800467c:	4b8f      	ldr	r3, [pc, #572]	; (80048bc <UART_SetConfig+0x56c>)
 800467e:	61fb      	str	r3, [r7, #28]
        break;
 8004680:	e00d      	b.n	800469e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004682:	f7fe fc8d 	bl	8002fa0 <HAL_RCC_GetSysClockFreq>
 8004686:	61f8      	str	r0, [r7, #28]
        break;
 8004688:	e009      	b.n	800469e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800468a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800468e:	61fb      	str	r3, [r7, #28]
        break;
 8004690:	e005      	b.n	800469e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800469c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 80fb 	beq.w	800489c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	4613      	mov	r3, r2
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	4413      	add	r3, r2
 80046b0:	69fa      	ldr	r2, [r7, #28]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d305      	bcc.n	80046c2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046bc:	69fa      	ldr	r2, [r7, #28]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d903      	bls.n	80046ca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046c8:	e0e8      	b.n	800489c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	2200      	movs	r2, #0
 80046ce:	461c      	mov	r4, r3
 80046d0:	4615      	mov	r5, r2
 80046d2:	f04f 0200 	mov.w	r2, #0
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	022b      	lsls	r3, r5, #8
 80046dc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80046e0:	0222      	lsls	r2, r4, #8
 80046e2:	68f9      	ldr	r1, [r7, #12]
 80046e4:	6849      	ldr	r1, [r1, #4]
 80046e6:	0849      	lsrs	r1, r1, #1
 80046e8:	2000      	movs	r0, #0
 80046ea:	4688      	mov	r8, r1
 80046ec:	4681      	mov	r9, r0
 80046ee:	eb12 0a08 	adds.w	sl, r2, r8
 80046f2:	eb43 0b09 	adc.w	fp, r3, r9
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	603b      	str	r3, [r7, #0]
 80046fe:	607a      	str	r2, [r7, #4]
 8004700:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004704:	4650      	mov	r0, sl
 8004706:	4659      	mov	r1, fp
 8004708:	f7fb fd62 	bl	80001d0 <__aeabi_uldivmod>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4613      	mov	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800471a:	d308      	bcc.n	800472e <UART_SetConfig+0x3de>
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004722:	d204      	bcs.n	800472e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	60da      	str	r2, [r3, #12]
 800472c:	e0b6      	b.n	800489c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004734:	e0b2      	b.n	800489c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800473e:	d15e      	bne.n	80047fe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004740:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004744:	2b08      	cmp	r3, #8
 8004746:	d828      	bhi.n	800479a <UART_SetConfig+0x44a>
 8004748:	a201      	add	r2, pc, #4	; (adr r2, 8004750 <UART_SetConfig+0x400>)
 800474a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474e:	bf00      	nop
 8004750:	08004775 	.word	0x08004775
 8004754:	0800477d 	.word	0x0800477d
 8004758:	08004785 	.word	0x08004785
 800475c:	0800479b 	.word	0x0800479b
 8004760:	0800478b 	.word	0x0800478b
 8004764:	0800479b 	.word	0x0800479b
 8004768:	0800479b 	.word	0x0800479b
 800476c:	0800479b 	.word	0x0800479b
 8004770:	08004793 	.word	0x08004793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004774:	f7fe fcac 	bl	80030d0 <HAL_RCC_GetPCLK1Freq>
 8004778:	61f8      	str	r0, [r7, #28]
        break;
 800477a:	e014      	b.n	80047a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800477c:	f7fe fcbe 	bl	80030fc <HAL_RCC_GetPCLK2Freq>
 8004780:	61f8      	str	r0, [r7, #28]
        break;
 8004782:	e010      	b.n	80047a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004784:	4b4d      	ldr	r3, [pc, #308]	; (80048bc <UART_SetConfig+0x56c>)
 8004786:	61fb      	str	r3, [r7, #28]
        break;
 8004788:	e00d      	b.n	80047a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800478a:	f7fe fc09 	bl	8002fa0 <HAL_RCC_GetSysClockFreq>
 800478e:	61f8      	str	r0, [r7, #28]
        break;
 8004790:	e009      	b.n	80047a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004796:	61fb      	str	r3, [r7, #28]
        break;
 8004798:	e005      	b.n	80047a6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d077      	beq.n	800489c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	005a      	lsls	r2, r3, #1
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	085b      	lsrs	r3, r3, #1
 80047b6:	441a      	add	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	2b0f      	cmp	r3, #15
 80047c6:	d916      	bls.n	80047f6 <UART_SetConfig+0x4a6>
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ce:	d212      	bcs.n	80047f6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	f023 030f 	bic.w	r3, r3, #15
 80047d8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	085b      	lsrs	r3, r3, #1
 80047de:	b29b      	uxth	r3, r3
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	8afb      	ldrh	r3, [r7, #22]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	8afa      	ldrh	r2, [r7, #22]
 80047f2:	60da      	str	r2, [r3, #12]
 80047f4:	e052      	b.n	800489c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047fc:	e04e      	b.n	800489c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004802:	2b08      	cmp	r3, #8
 8004804:	d827      	bhi.n	8004856 <UART_SetConfig+0x506>
 8004806:	a201      	add	r2, pc, #4	; (adr r2, 800480c <UART_SetConfig+0x4bc>)
 8004808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480c:	08004831 	.word	0x08004831
 8004810:	08004839 	.word	0x08004839
 8004814:	08004841 	.word	0x08004841
 8004818:	08004857 	.word	0x08004857
 800481c:	08004847 	.word	0x08004847
 8004820:	08004857 	.word	0x08004857
 8004824:	08004857 	.word	0x08004857
 8004828:	08004857 	.word	0x08004857
 800482c:	0800484f 	.word	0x0800484f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004830:	f7fe fc4e 	bl	80030d0 <HAL_RCC_GetPCLK1Freq>
 8004834:	61f8      	str	r0, [r7, #28]
        break;
 8004836:	e014      	b.n	8004862 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004838:	f7fe fc60 	bl	80030fc <HAL_RCC_GetPCLK2Freq>
 800483c:	61f8      	str	r0, [r7, #28]
        break;
 800483e:	e010      	b.n	8004862 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004840:	4b1e      	ldr	r3, [pc, #120]	; (80048bc <UART_SetConfig+0x56c>)
 8004842:	61fb      	str	r3, [r7, #28]
        break;
 8004844:	e00d      	b.n	8004862 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004846:	f7fe fbab 	bl	8002fa0 <HAL_RCC_GetSysClockFreq>
 800484a:	61f8      	str	r0, [r7, #28]
        break;
 800484c:	e009      	b.n	8004862 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800484e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004852:	61fb      	str	r3, [r7, #28]
        break;
 8004854:	e005      	b.n	8004862 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004860:	bf00      	nop
    }

    if (pclk != 0U)
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d019      	beq.n	800489c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	085a      	lsrs	r2, r3, #1
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	441a      	add	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	fbb2 f3f3 	udiv	r3, r2, r3
 800487a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	2b0f      	cmp	r3, #15
 8004880:	d909      	bls.n	8004896 <UART_SetConfig+0x546>
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004888:	d205      	bcs.n	8004896 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	b29a      	uxth	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60da      	str	r2, [r3, #12]
 8004894:	e002      	b.n	800489c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80048a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3728      	adds	r7, #40	; 0x28
 80048b0:	46bd      	mov	sp, r7
 80048b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048b6:	bf00      	nop
 80048b8:	40008000 	.word	0x40008000
 80048bc:	00f42400 	.word	0x00f42400

080048c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	f003 0308 	and.w	r3, r3, #8
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	430a      	orrs	r2, r1
 800494e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	f003 0320 	and.w	r3, r3, #32
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499c:	2b00      	cmp	r3, #0
 800499e:	d01a      	beq.n	80049d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049be:	d10a      	bne.n	80049d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	605a      	str	r2, [r3, #4]
  }
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b098      	sub	sp, #96	; 0x60
 8004a08:	af02      	add	r7, sp, #8
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a14:	f7fc fe0e 	bl	8001634 <HAL_GetTick>
 8004a18:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d12e      	bne.n	8004a86 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a30:	2200      	movs	r2, #0
 8004a32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f88c 	bl	8004b54 <UART_WaitOnFlagUntilTimeout>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d021      	beq.n	8004a86 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4a:	e853 3f00 	ldrex	r3, [r3]
 8004a4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a56:	653b      	str	r3, [r7, #80]	; 0x50
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a60:	647b      	str	r3, [r7, #68]	; 0x44
 8004a62:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a68:	e841 2300 	strex	r3, r2, [r1]
 8004a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1e6      	bne.n	8004a42 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2220      	movs	r2, #32
 8004a78:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e062      	b.n	8004b4c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d149      	bne.n	8004b28 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f856 	bl	8004b54 <UART_WaitOnFlagUntilTimeout>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d03c      	beq.n	8004b28 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	e853 3f00 	ldrex	r3, [r3]
 8004aba:	623b      	str	r3, [r7, #32]
   return(result);
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004acc:	633b      	str	r3, [r7, #48]	; 0x30
 8004ace:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad4:	e841 2300 	strex	r3, r2, [r1]
 8004ad8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1e6      	bne.n	8004aae <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	e853 3f00 	ldrex	r3, [r3]
 8004aee:	60fb      	str	r3, [r7, #12]
   return(result);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f023 0301 	bic.w	r3, r3, #1
 8004af6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3308      	adds	r3, #8
 8004afe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b00:	61fa      	str	r2, [r7, #28]
 8004b02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	69b9      	ldr	r1, [r7, #24]
 8004b06:	69fa      	ldr	r2, [r7, #28]
 8004b08:	e841 2300 	strex	r3, r2, [r1]
 8004b0c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e5      	bne.n	8004ae0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e011      	b.n	8004b4c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3758      	adds	r7, #88	; 0x58
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	603b      	str	r3, [r7, #0]
 8004b60:	4613      	mov	r3, r2
 8004b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b64:	e04f      	b.n	8004c06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6c:	d04b      	beq.n	8004c06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6e:	f7fc fd61 	bl	8001634 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d302      	bcc.n	8004b84 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e04e      	b.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0304 	and.w	r3, r3, #4
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d037      	beq.n	8004c06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2b80      	cmp	r3, #128	; 0x80
 8004b9a:	d034      	beq.n	8004c06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b40      	cmp	r3, #64	; 0x40
 8004ba0:	d031      	beq.n	8004c06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	f003 0308 	and.w	r3, r3, #8
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d110      	bne.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2208      	movs	r2, #8
 8004bb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 f838 	bl	8004c2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2208      	movs	r2, #8
 8004bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e029      	b.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004be0:	d111      	bne.n	8004c06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 f81e 	bl	8004c2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e00f      	b.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69da      	ldr	r2, [r3, #28]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	bf0c      	ite	eq
 8004c16:	2301      	moveq	r3, #1
 8004c18:	2300      	movne	r3, #0
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	79fb      	ldrb	r3, [r7, #7]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d0a0      	beq.n	8004b66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b095      	sub	sp, #84	; 0x54
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3e:	e853 3f00 	ldrex	r3, [r3]
 8004c42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	461a      	mov	r2, r3
 8004c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c54:	643b      	str	r3, [r7, #64]	; 0x40
 8004c56:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c5c:	e841 2300 	strex	r3, r2, [r1]
 8004c60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1e6      	bne.n	8004c36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3308      	adds	r3, #8
 8004c6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	e853 3f00 	ldrex	r3, [r3]
 8004c76:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	f023 0301 	bic.w	r3, r3, #1
 8004c7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3308      	adds	r3, #8
 8004c86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c90:	e841 2300 	strex	r3, r2, [r1]
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1e5      	bne.n	8004c68 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d118      	bne.n	8004cd6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	e853 3f00 	ldrex	r3, [r3]
 8004cb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f023 0310 	bic.w	r3, r3, #16
 8004cb8:	647b      	str	r3, [r7, #68]	; 0x44
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cc2:	61bb      	str	r3, [r7, #24]
 8004cc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc6:	6979      	ldr	r1, [r7, #20]
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	e841 2300 	strex	r3, r2, [r1]
 8004cce:	613b      	str	r3, [r7, #16]
   return(result);
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1e6      	bne.n	8004ca4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004cea:	bf00      	nop
 8004cec:	3754      	adds	r7, #84	; 0x54
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	f107 001c 	add.w	r0, r7, #28
 8004d04:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 fa69 	bl	80051ec <USB_CoreReset>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004d1e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d106      	bne.n	8004d34 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	639a      	str	r2, [r3, #56]	; 0x38
 8004d32:	e005      	b.n	8004d40 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d4c:	b004      	add	sp, #16
 8004d4e:	4770      	bx	lr

08004d50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f023 0201 	bic.w	r2, r3, #1
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b084      	sub	sp, #16
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d8e:	78fb      	ldrb	r3, [r7, #3]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d115      	bne.n	8004dc0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004da0:	200a      	movs	r0, #10
 8004da2:	f7fc fc53 	bl	800164c <HAL_Delay>
      ms += 10U;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	330a      	adds	r3, #10
 8004daa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 fa0f 	bl	80051d0 <USB_GetMode>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d01e      	beq.n	8004df6 <USB_SetCurrentMode+0x84>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2bc7      	cmp	r3, #199	; 0xc7
 8004dbc:	d9f0      	bls.n	8004da0 <USB_SetCurrentMode+0x2e>
 8004dbe:	e01a      	b.n	8004df6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d115      	bne.n	8004df2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004dd2:	200a      	movs	r0, #10
 8004dd4:	f7fc fc3a 	bl	800164c <HAL_Delay>
      ms += 10U;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	330a      	adds	r3, #10
 8004ddc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f9f6 	bl	80051d0 <USB_GetMode>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d005      	beq.n	8004df6 <USB_SetCurrentMode+0x84>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2bc7      	cmp	r3, #199	; 0xc7
 8004dee:	d9f0      	bls.n	8004dd2 <USB_SetCurrentMode+0x60>
 8004df0:	e001      	b.n	8004df6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e005      	b.n	8004e02 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2bc8      	cmp	r3, #200	; 0xc8
 8004dfa:	d101      	bne.n	8004e00 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e000      	b.n	8004e02 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e0c:	b084      	sub	sp, #16
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b086      	sub	sp, #24
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
 8004e16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004e1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e26:	2300      	movs	r3, #0
 8004e28:	613b      	str	r3, [r7, #16]
 8004e2a:	e009      	b.n	8004e40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	3340      	adds	r3, #64	; 0x40
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	2200      	movs	r2, #0
 8004e38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	2b0e      	cmp	r3, #14
 8004e44:	d9f2      	bls.n	8004e2c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e46:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d11c      	bne.n	8004e88 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e5c:	f043 0302 	orr.w	r3, r3, #2
 8004e60:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	e005      	b.n	8004e94 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ea0:	2103      	movs	r1, #3
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f95a 	bl	800515c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ea8:	2110      	movs	r1, #16
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f8f6 	bl	800509c <USB_FlushTxFifo>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f920 	bl	8005100 <USB_FlushRxFifo>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004edc:	461a      	mov	r2, r3
 8004ede:	2300      	movs	r3, #0
 8004ee0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee8:	461a      	mov	r2, r3
 8004eea:	2300      	movs	r3, #0
 8004eec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004eee:	2300      	movs	r3, #0
 8004ef0:	613b      	str	r3, [r7, #16]
 8004ef2:	e043      	b.n	8004f7c <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f0a:	d118      	bne.n	8004f3e <USB_DevInit+0x132>
    {
      if (i == 0U)
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10a      	bne.n	8004f28 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	e013      	b.n	8004f50 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f34:	461a      	mov	r2, r3
 8004f36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	e008      	b.n	8004f50 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	2300      	movs	r3, #0
 8004f60:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	015a      	lsls	r2, r3, #5
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6e:	461a      	mov	r2, r3
 8004f70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	613b      	str	r3, [r7, #16]
 8004f7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004f80:	461a      	mov	r2, r3
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d3b5      	bcc.n	8004ef4 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f88:	2300      	movs	r3, #0
 8004f8a:	613b      	str	r3, [r7, #16]
 8004f8c:	e043      	b.n	8005016 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fa4:	d118      	bne.n	8004fd8 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10a      	bne.n	8004fc2 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb8:	461a      	mov	r2, r3
 8004fba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004fbe:	6013      	str	r3, [r2, #0]
 8004fc0:	e013      	b.n	8004fea <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fce:	461a      	mov	r2, r3
 8004fd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	e008      	b.n	8004fea <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	015a      	lsls	r2, r3, #5
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	4413      	add	r3, r2
 8005004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005008:	461a      	mov	r2, r3
 800500a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800500e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	3301      	adds	r3, #1
 8005014:	613b      	str	r3, [r7, #16]
 8005016:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800501a:	461a      	mov	r2, r3
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	4293      	cmp	r3, r2
 8005020:	d3b5      	bcc.n	8004f8e <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005034:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005042:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	f043 0210 	orr.w	r2, r3, #16
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699a      	ldr	r2, [r3, #24]
 8005054:	4b10      	ldr	r3, [pc, #64]	; (8005098 <USB_DevInit+0x28c>)
 8005056:	4313      	orrs	r3, r2
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800505c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005060:	2b00      	cmp	r3, #0
 8005062:	d005      	beq.n	8005070 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	f043 0208 	orr.w	r2, r3, #8
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005070:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005074:	2b01      	cmp	r3, #1
 8005076:	d107      	bne.n	8005088 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005080:	f043 0304 	orr.w	r3, r3, #4
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005088:	7dfb      	ldrb	r3, [r7, #23]
}
 800508a:	4618      	mov	r0, r3
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005094:	b004      	add	sp, #16
 8005096:	4770      	bx	lr
 8005098:	803c3800 	.word	0x803c3800

0800509c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	3301      	adds	r3, #1
 80050ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80050b6:	d901      	bls.n	80050bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e01b      	b.n	80050f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	daf2      	bge.n	80050aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	019b      	lsls	r3, r3, #6
 80050cc:	f043 0220 	orr.w	r2, r3, #32
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	3301      	adds	r3, #1
 80050d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80050e0:	d901      	bls.n	80050e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e006      	b.n	80050f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f003 0320 	and.w	r3, r3, #32
 80050ee:	2b20      	cmp	r3, #32
 80050f0:	d0f0      	beq.n	80050d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	3301      	adds	r3, #1
 8005110:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005118:	d901      	bls.n	800511e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e018      	b.n	8005150 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	daf2      	bge.n	800510c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2210      	movs	r2, #16
 800512e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	3301      	adds	r3, #1
 8005134:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800513c:	d901      	bls.n	8005142 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e006      	b.n	8005150 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f003 0310 	and.w	r3, r3, #16
 800514a:	2b10      	cmp	r3, #16
 800514c:	d0f0      	beq.n	8005130 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	460b      	mov	r3, r1
 8005166:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	68f9      	ldr	r1, [r7, #12]
 8005178:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800517c:	4313      	orrs	r3, r2
 800517e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800518e:	b480      	push	{r7}
 8005190:	b085      	sub	sp, #20
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80051a8:	f023 0303 	bic.w	r3, r3, #3
 80051ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051bc:	f043 0302 	orr.w	r3, r3, #2
 80051c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	f003 0301 	and.w	r3, r3, #1
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	3301      	adds	r3, #1
 80051fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005204:	d901      	bls.n	800520a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e01b      	b.n	8005242 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	2b00      	cmp	r3, #0
 8005210:	daf2      	bge.n	80051f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005212:	2300      	movs	r3, #0
 8005214:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f043 0201 	orr.w	r2, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3301      	adds	r3, #1
 8005226:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800522e:	d901      	bls.n	8005234 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e006      	b.n	8005242 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b01      	cmp	r3, #1
 800523e:	d0f0      	beq.n	8005222 <USB_CoreReset+0x36>

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
	...

08005250 <__NVIC_SetPriority>:
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	6039      	str	r1, [r7, #0]
 800525a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800525c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005260:	2b00      	cmp	r3, #0
 8005262:	db0a      	blt.n	800527a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	b2da      	uxtb	r2, r3
 8005268:	490c      	ldr	r1, [pc, #48]	; (800529c <__NVIC_SetPriority+0x4c>)
 800526a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800526e:	0112      	lsls	r2, r2, #4
 8005270:	b2d2      	uxtb	r2, r2
 8005272:	440b      	add	r3, r1
 8005274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005278:	e00a      	b.n	8005290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	b2da      	uxtb	r2, r3
 800527e:	4908      	ldr	r1, [pc, #32]	; (80052a0 <__NVIC_SetPriority+0x50>)
 8005280:	79fb      	ldrb	r3, [r7, #7]
 8005282:	f003 030f 	and.w	r3, r3, #15
 8005286:	3b04      	subs	r3, #4
 8005288:	0112      	lsls	r2, r2, #4
 800528a:	b2d2      	uxtb	r2, r2
 800528c:	440b      	add	r3, r1
 800528e:	761a      	strb	r2, [r3, #24]
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	e000e100 	.word	0xe000e100
 80052a0:	e000ed00 	.word	0xe000ed00

080052a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80052a8:	4b05      	ldr	r3, [pc, #20]	; (80052c0 <SysTick_Handler+0x1c>)
 80052aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80052ac:	f001 fd28 	bl	8006d00 <xTaskGetSchedulerState>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d001      	beq.n	80052ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80052b6:	f002 fc17 	bl	8007ae8 <xPortSysTickHandler>
  }
}
 80052ba:	bf00      	nop
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	e000e010 	.word	0xe000e010

080052c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80052c8:	2100      	movs	r1, #0
 80052ca:	f06f 0004 	mvn.w	r0, #4
 80052ce:	f7ff ffbf 	bl	8005250 <__NVIC_SetPriority>
#endif
}
 80052d2:	bf00      	nop
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052de:	f3ef 8305 	mrs	r3, IPSR
 80052e2:	603b      	str	r3, [r7, #0]
  return(result);
 80052e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80052ea:	f06f 0305 	mvn.w	r3, #5
 80052ee:	607b      	str	r3, [r7, #4]
 80052f0:	e00c      	b.n	800530c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80052f2:	4b0a      	ldr	r3, [pc, #40]	; (800531c <osKernelInitialize+0x44>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d105      	bne.n	8005306 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80052fa:	4b08      	ldr	r3, [pc, #32]	; (800531c <osKernelInitialize+0x44>)
 80052fc:	2201      	movs	r2, #1
 80052fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005300:	2300      	movs	r3, #0
 8005302:	607b      	str	r3, [r7, #4]
 8005304:	e002      	b.n	800530c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005306:	f04f 33ff 	mov.w	r3, #4294967295
 800530a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800530c:	687b      	ldr	r3, [r7, #4]
}
 800530e:	4618      	mov	r0, r3
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	2000082c 	.word	0x2000082c

08005320 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005326:	f3ef 8305 	mrs	r3, IPSR
 800532a:	603b      	str	r3, [r7, #0]
  return(result);
 800532c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005332:	f06f 0305 	mvn.w	r3, #5
 8005336:	607b      	str	r3, [r7, #4]
 8005338:	e010      	b.n	800535c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800533a:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <osKernelStart+0x48>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d109      	bne.n	8005356 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005342:	f7ff ffbf 	bl	80052c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005346:	4b08      	ldr	r3, [pc, #32]	; (8005368 <osKernelStart+0x48>)
 8005348:	2202      	movs	r2, #2
 800534a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800534c:	f001 f87c 	bl	8006448 <vTaskStartScheduler>
      stat = osOK;
 8005350:	2300      	movs	r3, #0
 8005352:	607b      	str	r3, [r7, #4]
 8005354:	e002      	b.n	800535c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005356:	f04f 33ff 	mov.w	r3, #4294967295
 800535a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800535c:	687b      	ldr	r3, [r7, #4]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	2000082c 	.word	0x2000082c

0800536c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800536c:	b580      	push	{r7, lr}
 800536e:	b08e      	sub	sp, #56	; 0x38
 8005370:	af04      	add	r7, sp, #16
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005378:	2300      	movs	r3, #0
 800537a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800537c:	f3ef 8305 	mrs	r3, IPSR
 8005380:	617b      	str	r3, [r7, #20]
  return(result);
 8005382:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005384:	2b00      	cmp	r3, #0
 8005386:	d17e      	bne.n	8005486 <osThreadNew+0x11a>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d07b      	beq.n	8005486 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800538e:	2380      	movs	r3, #128	; 0x80
 8005390:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005392:	2318      	movs	r3, #24
 8005394:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005396:	2300      	movs	r3, #0
 8005398:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800539a:	f04f 33ff 	mov.w	r3, #4294967295
 800539e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d045      	beq.n	8005432 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <osThreadNew+0x48>
        name = attr->name;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d008      	beq.n	80053da <osThreadNew+0x6e>
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	2b38      	cmp	r3, #56	; 0x38
 80053cc:	d805      	bhi.n	80053da <osThreadNew+0x6e>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <osThreadNew+0x72>
        return (NULL);
 80053da:	2300      	movs	r3, #0
 80053dc:	e054      	b.n	8005488 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	089b      	lsrs	r3, r3, #2
 80053ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00e      	beq.n	8005414 <osThreadNew+0xa8>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	2ba7      	cmp	r3, #167	; 0xa7
 80053fc:	d90a      	bls.n	8005414 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005402:	2b00      	cmp	r3, #0
 8005404:	d006      	beq.n	8005414 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <osThreadNew+0xa8>
        mem = 1;
 800540e:	2301      	movs	r3, #1
 8005410:	61bb      	str	r3, [r7, #24]
 8005412:	e010      	b.n	8005436 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10c      	bne.n	8005436 <osThreadNew+0xca>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d108      	bne.n	8005436 <osThreadNew+0xca>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d104      	bne.n	8005436 <osThreadNew+0xca>
          mem = 0;
 800542c:	2300      	movs	r3, #0
 800542e:	61bb      	str	r3, [r7, #24]
 8005430:	e001      	b.n	8005436 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005432:	2300      	movs	r3, #0
 8005434:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d110      	bne.n	800545e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005444:	9202      	str	r2, [sp, #8]
 8005446:	9301      	str	r3, [sp, #4]
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	6a3a      	ldr	r2, [r7, #32]
 8005450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 fe0c 	bl	8006070 <xTaskCreateStatic>
 8005458:	4603      	mov	r3, r0
 800545a:	613b      	str	r3, [r7, #16]
 800545c:	e013      	b.n	8005486 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d110      	bne.n	8005486 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	b29a      	uxth	r2, r3
 8005468:	f107 0310 	add.w	r3, r7, #16
 800546c:	9301      	str	r3, [sp, #4]
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 fe57 	bl	800612a <xTaskCreate>
 800547c:	4603      	mov	r3, r0
 800547e:	2b01      	cmp	r3, #1
 8005480:	d001      	beq.n	8005486 <osThreadNew+0x11a>
            hTask = NULL;
 8005482:	2300      	movs	r3, #0
 8005484:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005486:	693b      	ldr	r3, [r7, #16]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3728      	adds	r7, #40	; 0x28
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005498:	f3ef 8305 	mrs	r3, IPSR
 800549c:	60bb      	str	r3, [r7, #8]
  return(result);
 800549e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <osDelay+0x1c>
    stat = osErrorISR;
 80054a4:	f06f 0305 	mvn.w	r3, #5
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	e007      	b.n	80054bc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80054ac:	2300      	movs	r3, #0
 80054ae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <osDelay+0x2c>
      vTaskDelay(ticks);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 ff92 	bl	80063e0 <vTaskDelay>
    }
  }

  return (stat);
 80054bc:	68fb      	ldr	r3, [r7, #12]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
	...

080054c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4a07      	ldr	r2, [pc, #28]	; (80054f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80054d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	4a06      	ldr	r2, [pc, #24]	; (80054f8 <vApplicationGetIdleTaskMemory+0x30>)
 80054de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2280      	movs	r2, #128	; 0x80
 80054e4:	601a      	str	r2, [r3, #0]
}
 80054e6:	bf00      	nop
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	20000830 	.word	0x20000830
 80054f8:	200008d8 	.word	0x200008d8

080054fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4a07      	ldr	r2, [pc, #28]	; (8005528 <vApplicationGetTimerTaskMemory+0x2c>)
 800550c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	4a06      	ldr	r2, [pc, #24]	; (800552c <vApplicationGetTimerTaskMemory+0x30>)
 8005512:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800551a:	601a      	str	r2, [r3, #0]
}
 800551c:	bf00      	nop
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	20000ad8 	.word	0x20000ad8
 800552c:	20000b80 	.word	0x20000b80

08005530 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f103 0208 	add.w	r2, r3, #8
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f04f 32ff 	mov.w	r2, #4294967295
 8005548:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f103 0208 	add.w	r2, r3, #8
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f103 0208 	add.w	r2, r3, #8
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800558a:	b480      	push	{r7}
 800558c:	b085      	sub	sp, #20
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
 8005592:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	601a      	str	r2, [r3, #0]
}
 80055c6:	bf00      	nop
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055d2:	b480      	push	{r7}
 80055d4:	b085      	sub	sp, #20
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e8:	d103      	bne.n	80055f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	e00c      	b.n	800560c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	3308      	adds	r3, #8
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	e002      	b.n	8005600 <vListInsert+0x2e>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	429a      	cmp	r2, r3
 800560a:	d2f6      	bcs.n	80055fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	1c5a      	adds	r2, r3, #1
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	601a      	str	r2, [r3, #0]
}
 8005638:	bf00      	nop
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6892      	ldr	r2, [r2, #8]
 800565a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6852      	ldr	r2, [r2, #4]
 8005664:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	429a      	cmp	r2, r3
 800566e:	d103      	bne.n	8005678 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	1e5a      	subs	r2, r3, #1
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10a      	bne.n	80056c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80056be:	bf00      	nop
 80056c0:	e7fe      	b.n	80056c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80056c2:	f002 f97f 	bl	80079c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ce:	68f9      	ldr	r1, [r7, #12]
 80056d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056d2:	fb01 f303 	mul.w	r3, r1, r3
 80056d6:	441a      	add	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f2:	3b01      	subs	r3, #1
 80056f4:	68f9      	ldr	r1, [r7, #12]
 80056f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056f8:	fb01 f303 	mul.w	r3, r1, r3
 80056fc:	441a      	add	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	22ff      	movs	r2, #255	; 0xff
 8005706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	22ff      	movs	r2, #255	; 0xff
 800570e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d114      	bne.n	8005742 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01a      	beq.n	8005756 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	3310      	adds	r3, #16
 8005724:	4618      	mov	r0, r3
 8005726:	f001 f929 	bl	800697c <xTaskRemoveFromEventList>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d012      	beq.n	8005756 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005730:	4b0c      	ldr	r3, [pc, #48]	; (8005764 <xQueueGenericReset+0xcc>)
 8005732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	f3bf 8f6f 	isb	sy
 8005740:	e009      	b.n	8005756 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	3310      	adds	r3, #16
 8005746:	4618      	mov	r0, r3
 8005748:	f7ff fef2 	bl	8005530 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	3324      	adds	r3, #36	; 0x24
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff feed 	bl	8005530 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005756:	f002 f965 	bl	8007a24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800575a:	2301      	movs	r3, #1
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	e000ed04 	.word	0xe000ed04

08005768 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005768:	b580      	push	{r7, lr}
 800576a:	b08e      	sub	sp, #56	; 0x38
 800576c:	af02      	add	r7, sp, #8
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10a      	bne.n	8005792 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800577c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005780:	f383 8811 	msr	BASEPRI, r3
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800578e:	bf00      	nop
 8005790:	e7fe      	b.n	8005790 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10a      	bne.n	80057ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057aa:	bf00      	nop
 80057ac:	e7fe      	b.n	80057ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d002      	beq.n	80057ba <xQueueGenericCreateStatic+0x52>
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <xQueueGenericCreateStatic+0x56>
 80057ba:	2301      	movs	r3, #1
 80057bc:	e000      	b.n	80057c0 <xQueueGenericCreateStatic+0x58>
 80057be:	2300      	movs	r3, #0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10a      	bne.n	80057da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	623b      	str	r3, [r7, #32]
}
 80057d6:	bf00      	nop
 80057d8:	e7fe      	b.n	80057d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d102      	bne.n	80057e6 <xQueueGenericCreateStatic+0x7e>
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <xQueueGenericCreateStatic+0x82>
 80057e6:	2301      	movs	r3, #1
 80057e8:	e000      	b.n	80057ec <xQueueGenericCreateStatic+0x84>
 80057ea:	2300      	movs	r3, #0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10a      	bne.n	8005806 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80057f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	61fb      	str	r3, [r7, #28]
}
 8005802:	bf00      	nop
 8005804:	e7fe      	b.n	8005804 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005806:	2350      	movs	r3, #80	; 0x50
 8005808:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2b50      	cmp	r3, #80	; 0x50
 800580e:	d00a      	beq.n	8005826 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	61bb      	str	r3, [r7, #24]
}
 8005822:	bf00      	nop
 8005824:	e7fe      	b.n	8005824 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005826:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800582c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00d      	beq.n	800584e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800583a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800583e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	4613      	mov	r3, r2
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	68b9      	ldr	r1, [r7, #8]
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 f805 	bl	8005858 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800584e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005850:	4618      	mov	r0, r3
 8005852:	3730      	adds	r7, #48	; 0x30
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d103      	bne.n	8005874 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	e002      	b.n	800587a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005886:	2101      	movs	r1, #1
 8005888:	69b8      	ldr	r0, [r7, #24]
 800588a:	f7ff ff05 	bl	8005698 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	78fa      	ldrb	r2, [r7, #3]
 8005892:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005896:	bf00      	nop
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
	...

080058a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b08e      	sub	sp, #56	; 0x38
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80058ae:	2300      	movs	r3, #0
 80058b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80058b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10a      	bne.n	80058d2 <xQueueGenericSend+0x32>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80058ce:	bf00      	nop
 80058d0:	e7fe      	b.n	80058d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d103      	bne.n	80058e0 <xQueueGenericSend+0x40>
 80058d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <xQueueGenericSend+0x44>
 80058e0:	2301      	movs	r3, #1
 80058e2:	e000      	b.n	80058e6 <xQueueGenericSend+0x46>
 80058e4:	2300      	movs	r3, #0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10a      	bne.n	8005900 <xQueueGenericSend+0x60>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058fc:	bf00      	nop
 80058fe:	e7fe      	b.n	80058fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	2b02      	cmp	r3, #2
 8005904:	d103      	bne.n	800590e <xQueueGenericSend+0x6e>
 8005906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590a:	2b01      	cmp	r3, #1
 800590c:	d101      	bne.n	8005912 <xQueueGenericSend+0x72>
 800590e:	2301      	movs	r3, #1
 8005910:	e000      	b.n	8005914 <xQueueGenericSend+0x74>
 8005912:	2300      	movs	r3, #0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10a      	bne.n	800592e <xQueueGenericSend+0x8e>
	__asm volatile
 8005918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	623b      	str	r3, [r7, #32]
}
 800592a:	bf00      	nop
 800592c:	e7fe      	b.n	800592c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800592e:	f001 f9e7 	bl	8006d00 <xTaskGetSchedulerState>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d102      	bne.n	800593e <xQueueGenericSend+0x9e>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <xQueueGenericSend+0xa2>
 800593e:	2301      	movs	r3, #1
 8005940:	e000      	b.n	8005944 <xQueueGenericSend+0xa4>
 8005942:	2300      	movs	r3, #0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10a      	bne.n	800595e <xQueueGenericSend+0xbe>
	__asm volatile
 8005948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	61fb      	str	r3, [r7, #28]
}
 800595a:	bf00      	nop
 800595c:	e7fe      	b.n	800595c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800595e:	f002 f831 	bl	80079c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596a:	429a      	cmp	r2, r3
 800596c:	d302      	bcc.n	8005974 <xQueueGenericSend+0xd4>
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b02      	cmp	r3, #2
 8005972:	d129      	bne.n	80059c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	68b9      	ldr	r1, [r7, #8]
 8005978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800597a:	f000 fa0b 	bl	8005d94 <prvCopyDataToQueue>
 800597e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	2b00      	cmp	r3, #0
 8005986:	d010      	beq.n	80059aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598a:	3324      	adds	r3, #36	; 0x24
 800598c:	4618      	mov	r0, r3
 800598e:	f000 fff5 	bl	800697c <xTaskRemoveFromEventList>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d013      	beq.n	80059c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005998:	4b3f      	ldr	r3, [pc, #252]	; (8005a98 <xQueueGenericSend+0x1f8>)
 800599a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	e00a      	b.n	80059c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80059aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d007      	beq.n	80059c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80059b0:	4b39      	ldr	r3, [pc, #228]	; (8005a98 <xQueueGenericSend+0x1f8>)
 80059b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80059c0:	f002 f830 	bl	8007a24 <vPortExitCritical>
				return pdPASS;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e063      	b.n	8005a90 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d103      	bne.n	80059d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059ce:	f002 f829 	bl	8007a24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80059d2:	2300      	movs	r3, #0
 80059d4:	e05c      	b.n	8005a90 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d106      	bne.n	80059ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059dc:	f107 0314 	add.w	r3, r7, #20
 80059e0:	4618      	mov	r0, r3
 80059e2:	f001 f82f 	bl	8006a44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059e6:	2301      	movs	r3, #1
 80059e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059ea:	f002 f81b 	bl	8007a24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059ee:	f000 fd9b 	bl	8006528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059f2:	f001 ffe7 	bl	80079c4 <vPortEnterCritical>
 80059f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059fc:	b25b      	sxtb	r3, r3
 80059fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a02:	d103      	bne.n	8005a0c <xQueueGenericSend+0x16c>
 8005a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a12:	b25b      	sxtb	r3, r3
 8005a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a18:	d103      	bne.n	8005a22 <xQueueGenericSend+0x182>
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a22:	f001 ffff 	bl	8007a24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a26:	1d3a      	adds	r2, r7, #4
 8005a28:	f107 0314 	add.w	r3, r7, #20
 8005a2c:	4611      	mov	r1, r2
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f001 f81e 	bl	8006a70 <xTaskCheckForTimeOut>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d124      	bne.n	8005a84 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a3c:	f000 faa2 	bl	8005f84 <prvIsQueueFull>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d018      	beq.n	8005a78 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	3310      	adds	r3, #16
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	4611      	mov	r1, r2
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 ff44 	bl	80068dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a56:	f000 fa2d 	bl	8005eb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a5a:	f000 fd73 	bl	8006544 <xTaskResumeAll>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f47f af7c 	bne.w	800595e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005a66:	4b0c      	ldr	r3, [pc, #48]	; (8005a98 <xQueueGenericSend+0x1f8>)
 8005a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	e772      	b.n	800595e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a7a:	f000 fa1b 	bl	8005eb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a7e:	f000 fd61 	bl	8006544 <xTaskResumeAll>
 8005a82:	e76c      	b.n	800595e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a86:	f000 fa15 	bl	8005eb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a8a:	f000 fd5b 	bl	8006544 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3738      	adds	r7, #56	; 0x38
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	e000ed04 	.word	0xe000ed04

08005a9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b090      	sub	sp, #64	; 0x40
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
 8005aa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10a      	bne.n	8005aca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ac6:	bf00      	nop
 8005ac8:	e7fe      	b.n	8005ac8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d103      	bne.n	8005ad8 <xQueueGenericSendFromISR+0x3c>
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <xQueueGenericSendFromISR+0x40>
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e000      	b.n	8005ade <xQueueGenericSendFromISR+0x42>
 8005adc:	2300      	movs	r3, #0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10a      	bne.n	8005af8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005af4:	bf00      	nop
 8005af6:	e7fe      	b.n	8005af6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d103      	bne.n	8005b06 <xQueueGenericSendFromISR+0x6a>
 8005afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d101      	bne.n	8005b0a <xQueueGenericSendFromISR+0x6e>
 8005b06:	2301      	movs	r3, #1
 8005b08:	e000      	b.n	8005b0c <xQueueGenericSendFromISR+0x70>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10a      	bne.n	8005b26 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	623b      	str	r3, [r7, #32]
}
 8005b22:	bf00      	nop
 8005b24:	e7fe      	b.n	8005b24 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b26:	f002 f82f 	bl	8007b88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b2a:	f3ef 8211 	mrs	r2, BASEPRI
 8005b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	61fa      	str	r2, [r7, #28]
 8005b40:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b42:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b44:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d302      	bcc.n	8005b58 <xQueueGenericSendFromISR+0xbc>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d12f      	bne.n	8005bb8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b66:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	68b9      	ldr	r1, [r7, #8]
 8005b6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005b6e:	f000 f911 	bl	8005d94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b72:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7a:	d112      	bne.n	8005ba2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d016      	beq.n	8005bb2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b86:	3324      	adds	r3, #36	; 0x24
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 fef7 	bl	800697c <xTaskRemoveFromEventList>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00e      	beq.n	8005bb2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00b      	beq.n	8005bb2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]
 8005ba0:	e007      	b.n	8005bb2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ba2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	b25a      	sxtb	r2, r3
 8005bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005bb6:	e001      	b.n	8005bbc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bbe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005bc6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3740      	adds	r7, #64	; 0x40
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08c      	sub	sp, #48	; 0x30
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005be0:	2300      	movs	r3, #0
 8005be2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10a      	bne.n	8005c04 <xQueueReceive+0x30>
	__asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	623b      	str	r3, [r7, #32]
}
 8005c00:	bf00      	nop
 8005c02:	e7fe      	b.n	8005c02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d103      	bne.n	8005c12 <xQueueReceive+0x3e>
 8005c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <xQueueReceive+0x42>
 8005c12:	2301      	movs	r3, #1
 8005c14:	e000      	b.n	8005c18 <xQueueReceive+0x44>
 8005c16:	2300      	movs	r3, #0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10a      	bne.n	8005c32 <xQueueReceive+0x5e>
	__asm volatile
 8005c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c20:	f383 8811 	msr	BASEPRI, r3
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	61fb      	str	r3, [r7, #28]
}
 8005c2e:	bf00      	nop
 8005c30:	e7fe      	b.n	8005c30 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c32:	f001 f865 	bl	8006d00 <xTaskGetSchedulerState>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d102      	bne.n	8005c42 <xQueueReceive+0x6e>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <xQueueReceive+0x72>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <xQueueReceive+0x74>
 8005c46:	2300      	movs	r3, #0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10a      	bne.n	8005c62 <xQueueReceive+0x8e>
	__asm volatile
 8005c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c50:	f383 8811 	msr	BASEPRI, r3
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	61bb      	str	r3, [r7, #24]
}
 8005c5e:	bf00      	nop
 8005c60:	e7fe      	b.n	8005c60 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c62:	f001 feaf 	bl	80079c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d01f      	beq.n	8005cb2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c72:	68b9      	ldr	r1, [r7, #8]
 8005c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c76:	f000 f8f7 	bl	8005e68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	1e5a      	subs	r2, r3, #1
 8005c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c80:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00f      	beq.n	8005caa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8c:	3310      	adds	r3, #16
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 fe74 	bl	800697c <xTaskRemoveFromEventList>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d007      	beq.n	8005caa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c9a:	4b3d      	ldr	r3, [pc, #244]	; (8005d90 <xQueueReceive+0x1bc>)
 8005c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005caa:	f001 febb 	bl	8007a24 <vPortExitCritical>
				return pdPASS;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e069      	b.n	8005d86 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d103      	bne.n	8005cc0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005cb8:	f001 feb4 	bl	8007a24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	e062      	b.n	8005d86 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d106      	bne.n	8005cd4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cc6:	f107 0310 	add.w	r3, r7, #16
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 feba 	bl	8006a44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cd4:	f001 fea6 	bl	8007a24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cd8:	f000 fc26 	bl	8006528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cdc:	f001 fe72 	bl	80079c4 <vPortEnterCritical>
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ce6:	b25b      	sxtb	r3, r3
 8005ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cec:	d103      	bne.n	8005cf6 <xQueueReceive+0x122>
 8005cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cfc:	b25b      	sxtb	r3, r3
 8005cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d02:	d103      	bne.n	8005d0c <xQueueReceive+0x138>
 8005d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d0c:	f001 fe8a 	bl	8007a24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d10:	1d3a      	adds	r2, r7, #4
 8005d12:	f107 0310 	add.w	r3, r7, #16
 8005d16:	4611      	mov	r1, r2
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 fea9 	bl	8006a70 <xTaskCheckForTimeOut>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d123      	bne.n	8005d6c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d26:	f000 f917 	bl	8005f58 <prvIsQueueEmpty>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d017      	beq.n	8005d60 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d32:	3324      	adds	r3, #36	; 0x24
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	4611      	mov	r1, r2
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 fdcf 	bl	80068dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d40:	f000 f8b8 	bl	8005eb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d44:	f000 fbfe 	bl	8006544 <xTaskResumeAll>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d189      	bne.n	8005c62 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005d4e:	4b10      	ldr	r3, [pc, #64]	; (8005d90 <xQueueReceive+0x1bc>)
 8005d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	e780      	b.n	8005c62 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d62:	f000 f8a7 	bl	8005eb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d66:	f000 fbed 	bl	8006544 <xTaskResumeAll>
 8005d6a:	e77a      	b.n	8005c62 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d6e:	f000 f8a1 	bl	8005eb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d72:	f000 fbe7 	bl	8006544 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d78:	f000 f8ee 	bl	8005f58 <prvIsQueueEmpty>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f43f af6f 	beq.w	8005c62 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3730      	adds	r7, #48	; 0x30
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	e000ed04 	.word	0xe000ed04

08005d94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005da0:	2300      	movs	r3, #0
 8005da2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10d      	bne.n	8005dce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d14d      	bne.n	8005e56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 ffbc 	bl	8006d3c <xTaskPriorityDisinherit>
 8005dc4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	609a      	str	r2, [r3, #8]
 8005dcc:	e043      	b.n	8005e56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d119      	bne.n	8005e08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6858      	ldr	r0, [r3, #4]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ddc:	461a      	mov	r2, r3
 8005dde:	68b9      	ldr	r1, [r7, #8]
 8005de0:	f002 f980 	bl	80080e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dec:	441a      	add	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d32b      	bcc.n	8005e56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	605a      	str	r2, [r3, #4]
 8005e06:	e026      	b.n	8005e56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	68d8      	ldr	r0, [r3, #12]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e10:	461a      	mov	r2, r3
 8005e12:	68b9      	ldr	r1, [r7, #8]
 8005e14:	f002 f966 	bl	80080e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	68da      	ldr	r2, [r3, #12]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e20:	425b      	negs	r3, r3
 8005e22:	441a      	add	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	68da      	ldr	r2, [r3, #12]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d207      	bcs.n	8005e44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3c:	425b      	negs	r3, r3
 8005e3e:	441a      	add	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d105      	bne.n	8005e56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	3b01      	subs	r3, #1
 8005e54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005e5e:	697b      	ldr	r3, [r7, #20]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3718      	adds	r7, #24
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d018      	beq.n	8005eac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68da      	ldr	r2, [r3, #12]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e82:	441a      	add	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68da      	ldr	r2, [r3, #12]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d303      	bcc.n	8005e9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68d9      	ldr	r1, [r3, #12]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	6838      	ldr	r0, [r7, #0]
 8005ea8:	f002 f91c 	bl	80080e4 <memcpy>
	}
}
 8005eac:	bf00      	nop
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ebc:	f001 fd82 	bl	80079c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ec6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ec8:	e011      	b.n	8005eee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d012      	beq.n	8005ef8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	3324      	adds	r3, #36	; 0x24
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 fd50 	bl	800697c <xTaskRemoveFromEventList>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ee2:	f000 fe27 	bl	8006b34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	dce9      	bgt.n	8005eca <prvUnlockQueue+0x16>
 8005ef6:	e000      	b.n	8005efa <prvUnlockQueue+0x46>
					break;
 8005ef8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	22ff      	movs	r2, #255	; 0xff
 8005efe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005f02:	f001 fd8f 	bl	8007a24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f06:	f001 fd5d 	bl	80079c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f12:	e011      	b.n	8005f38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d012      	beq.n	8005f42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3310      	adds	r3, #16
 8005f20:	4618      	mov	r0, r3
 8005f22:	f000 fd2b 	bl	800697c <xTaskRemoveFromEventList>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f2c:	f000 fe02 	bl	8006b34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f30:	7bbb      	ldrb	r3, [r7, #14]
 8005f32:	3b01      	subs	r3, #1
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	dce9      	bgt.n	8005f14 <prvUnlockQueue+0x60>
 8005f40:	e000      	b.n	8005f44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	22ff      	movs	r2, #255	; 0xff
 8005f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005f4c:	f001 fd6a 	bl	8007a24 <vPortExitCritical>
}
 8005f50:	bf00      	nop
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f60:	f001 fd30 	bl	80079c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d102      	bne.n	8005f72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	e001      	b.n	8005f76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f76:	f001 fd55 	bl	8007a24 <vPortExitCritical>

	return xReturn;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f8c:	f001 fd1a 	bl	80079c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d102      	bne.n	8005fa2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	e001      	b.n	8005fa6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fa6:	f001 fd3d 	bl	8007a24 <vPortExitCritical>

	return xReturn;
 8005faa:	68fb      	ldr	r3, [r7, #12]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60fb      	str	r3, [r7, #12]
 8005fc2:	e014      	b.n	8005fee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005fc4:	4a0f      	ldr	r2, [pc, #60]	; (8006004 <vQueueAddToRegistry+0x50>)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10b      	bne.n	8005fe8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005fd0:	490c      	ldr	r1, [pc, #48]	; (8006004 <vQueueAddToRegistry+0x50>)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005fda:	4a0a      	ldr	r2, [pc, #40]	; (8006004 <vQueueAddToRegistry+0x50>)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	00db      	lsls	r3, r3, #3
 8005fe0:	4413      	add	r3, r2
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005fe6:	e006      	b.n	8005ff6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	3301      	adds	r3, #1
 8005fec:	60fb      	str	r3, [r7, #12]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2b07      	cmp	r3, #7
 8005ff2:	d9e7      	bls.n	8005fc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ff4:	bf00      	nop
 8005ff6:	bf00      	nop
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	20000f80 	.word	0x20000f80

08006008 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006018:	f001 fcd4 	bl	80079c4 <vPortEnterCritical>
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006022:	b25b      	sxtb	r3, r3
 8006024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006028:	d103      	bne.n	8006032 <vQueueWaitForMessageRestricted+0x2a>
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006038:	b25b      	sxtb	r3, r3
 800603a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603e:	d103      	bne.n	8006048 <vQueueWaitForMessageRestricted+0x40>
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006048:	f001 fcec 	bl	8007a24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006050:	2b00      	cmp	r3, #0
 8006052:	d106      	bne.n	8006062 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	3324      	adds	r3, #36	; 0x24
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	68b9      	ldr	r1, [r7, #8]
 800605c:	4618      	mov	r0, r3
 800605e:	f000 fc61 	bl	8006924 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006062:	6978      	ldr	r0, [r7, #20]
 8006064:	f7ff ff26 	bl	8005eb4 <prvUnlockQueue>
	}
 8006068:	bf00      	nop
 800606a:	3718      	adds	r7, #24
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006070:	b580      	push	{r7, lr}
 8006072:	b08e      	sub	sp, #56	; 0x38
 8006074:	af04      	add	r7, sp, #16
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
 800607c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800607e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10a      	bne.n	800609a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	623b      	str	r3, [r7, #32]
}
 8006096:	bf00      	nop
 8006098:	e7fe      	b.n	8006098 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10a      	bne.n	80060b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	61fb      	str	r3, [r7, #28]
}
 80060b2:	bf00      	nop
 80060b4:	e7fe      	b.n	80060b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060b6:	23a8      	movs	r3, #168	; 0xa8
 80060b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	2ba8      	cmp	r3, #168	; 0xa8
 80060be:	d00a      	beq.n	80060d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	61bb      	str	r3, [r7, #24]
}
 80060d2:	bf00      	nop
 80060d4:	e7fe      	b.n	80060d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d01e      	beq.n	800611c <xTaskCreateStatic+0xac>
 80060de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d01b      	beq.n	800611c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	2202      	movs	r2, #2
 80060f2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060f6:	2300      	movs	r3, #0
 80060f8:	9303      	str	r3, [sp, #12]
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	9302      	str	r3, [sp, #8]
 80060fe:	f107 0314 	add.w	r3, r7, #20
 8006102:	9301      	str	r3, [sp, #4]
 8006104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 f850 	bl	80061b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006114:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006116:	f000 f8f3 	bl	8006300 <prvAddNewTaskToReadyList>
 800611a:	e001      	b.n	8006120 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800611c:	2300      	movs	r3, #0
 800611e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006120:	697b      	ldr	r3, [r7, #20]
	}
 8006122:	4618      	mov	r0, r3
 8006124:	3728      	adds	r7, #40	; 0x28
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800612a:	b580      	push	{r7, lr}
 800612c:	b08c      	sub	sp, #48	; 0x30
 800612e:	af04      	add	r7, sp, #16
 8006130:	60f8      	str	r0, [r7, #12]
 8006132:	60b9      	str	r1, [r7, #8]
 8006134:	603b      	str	r3, [r7, #0]
 8006136:	4613      	mov	r3, r2
 8006138:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800613a:	88fb      	ldrh	r3, [r7, #6]
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4618      	mov	r0, r3
 8006140:	f001 fd62 	bl	8007c08 <pvPortMalloc>
 8006144:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00e      	beq.n	800616a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800614c:	20a8      	movs	r0, #168	; 0xa8
 800614e:	f001 fd5b 	bl	8007c08 <pvPortMalloc>
 8006152:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	631a      	str	r2, [r3, #48]	; 0x30
 8006160:	e005      	b.n	800616e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006162:	6978      	ldr	r0, [r7, #20]
 8006164:	f001 fe1c 	bl	8007da0 <vPortFree>
 8006168:	e001      	b.n	800616e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800616a:	2300      	movs	r3, #0
 800616c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d017      	beq.n	80061a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800617c:	88fa      	ldrh	r2, [r7, #6]
 800617e:	2300      	movs	r3, #0
 8006180:	9303      	str	r3, [sp, #12]
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	9302      	str	r3, [sp, #8]
 8006186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006188:	9301      	str	r3, [sp, #4]
 800618a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	68b9      	ldr	r1, [r7, #8]
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 f80e 	bl	80061b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006198:	69f8      	ldr	r0, [r7, #28]
 800619a:	f000 f8b1 	bl	8006300 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800619e:	2301      	movs	r3, #1
 80061a0:	61bb      	str	r3, [r7, #24]
 80061a2:	e002      	b.n	80061aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061a4:	f04f 33ff 	mov.w	r3, #4294967295
 80061a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061aa:	69bb      	ldr	r3, [r7, #24]
	}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3720      	adds	r7, #32
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b088      	sub	sp, #32
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
 80061c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80061c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	461a      	mov	r2, r3
 80061cc:	21a5      	movs	r1, #165	; 0xa5
 80061ce:	f001 ff05 	bl	8007fdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80061dc:	3b01      	subs	r3, #1
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	f023 0307 	bic.w	r3, r3, #7
 80061ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	f003 0307 	and.w	r3, r3, #7
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <prvInitialiseNewTask+0x58>
	__asm volatile
 80061f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	617b      	str	r3, [r7, #20]
}
 8006208:	bf00      	nop
 800620a:	e7fe      	b.n	800620a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d01f      	beq.n	8006252 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006212:	2300      	movs	r3, #0
 8006214:	61fb      	str	r3, [r7, #28]
 8006216:	e012      	b.n	800623e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	4413      	add	r3, r2
 800621e:	7819      	ldrb	r1, [r3, #0]
 8006220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	4413      	add	r3, r2
 8006226:	3334      	adds	r3, #52	; 0x34
 8006228:	460a      	mov	r2, r1
 800622a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	4413      	add	r3, r2
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d006      	beq.n	8006246 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	3301      	adds	r3, #1
 800623c:	61fb      	str	r3, [r7, #28]
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	2b0f      	cmp	r3, #15
 8006242:	d9e9      	bls.n	8006218 <prvInitialiseNewTask+0x64>
 8006244:	e000      	b.n	8006248 <prvInitialiseNewTask+0x94>
			{
				break;
 8006246:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006250:	e003      	b.n	800625a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	2b37      	cmp	r3, #55	; 0x37
 800625e:	d901      	bls.n	8006264 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006260:	2337      	movs	r3, #55	; 0x37
 8006262:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006268:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800626a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800626e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006272:	2200      	movs	r2, #0
 8006274:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006278:	3304      	adds	r3, #4
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff f978 	bl	8005570 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006282:	3318      	adds	r3, #24
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff f973 	bl	8005570 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800628a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800628e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006292:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800629a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800629e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a2:	2200      	movs	r2, #0
 80062a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b2:	3354      	adds	r3, #84	; 0x54
 80062b4:	224c      	movs	r2, #76	; 0x4c
 80062b6:	2100      	movs	r1, #0
 80062b8:	4618      	mov	r0, r3
 80062ba:	f001 fe8f 	bl	8007fdc <memset>
 80062be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c0:	4a0c      	ldr	r2, [pc, #48]	; (80062f4 <prvInitialiseNewTask+0x140>)
 80062c2:	659a      	str	r2, [r3, #88]	; 0x58
 80062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c6:	4a0c      	ldr	r2, [pc, #48]	; (80062f8 <prvInitialiseNewTask+0x144>)
 80062c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062cc:	4a0b      	ldr	r2, [pc, #44]	; (80062fc <prvInitialiseNewTask+0x148>)
 80062ce:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062d0:	683a      	ldr	r2, [r7, #0]
 80062d2:	68f9      	ldr	r1, [r7, #12]
 80062d4:	69b8      	ldr	r0, [r7, #24]
 80062d6:	f001 fa4b 	bl	8007770 <pxPortInitialiseStack>
 80062da:	4602      	mov	r2, r0
 80062dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062ec:	bf00      	nop
 80062ee:	3720      	adds	r7, #32
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	2000393c 	.word	0x2000393c
 80062f8:	200039a4 	.word	0x200039a4
 80062fc:	20003a0c 	.word	0x20003a0c

08006300 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006308:	f001 fb5c 	bl	80079c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800630c:	4b2d      	ldr	r3, [pc, #180]	; (80063c4 <prvAddNewTaskToReadyList+0xc4>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3301      	adds	r3, #1
 8006312:	4a2c      	ldr	r2, [pc, #176]	; (80063c4 <prvAddNewTaskToReadyList+0xc4>)
 8006314:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006316:	4b2c      	ldr	r3, [pc, #176]	; (80063c8 <prvAddNewTaskToReadyList+0xc8>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d109      	bne.n	8006332 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800631e:	4a2a      	ldr	r2, [pc, #168]	; (80063c8 <prvAddNewTaskToReadyList+0xc8>)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006324:	4b27      	ldr	r3, [pc, #156]	; (80063c4 <prvAddNewTaskToReadyList+0xc4>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d110      	bne.n	800634e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800632c:	f000 fc26 	bl	8006b7c <prvInitialiseTaskLists>
 8006330:	e00d      	b.n	800634e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006332:	4b26      	ldr	r3, [pc, #152]	; (80063cc <prvAddNewTaskToReadyList+0xcc>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d109      	bne.n	800634e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800633a:	4b23      	ldr	r3, [pc, #140]	; (80063c8 <prvAddNewTaskToReadyList+0xc8>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006344:	429a      	cmp	r2, r3
 8006346:	d802      	bhi.n	800634e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006348:	4a1f      	ldr	r2, [pc, #124]	; (80063c8 <prvAddNewTaskToReadyList+0xc8>)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800634e:	4b20      	ldr	r3, [pc, #128]	; (80063d0 <prvAddNewTaskToReadyList+0xd0>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	3301      	adds	r3, #1
 8006354:	4a1e      	ldr	r2, [pc, #120]	; (80063d0 <prvAddNewTaskToReadyList+0xd0>)
 8006356:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006358:	4b1d      	ldr	r3, [pc, #116]	; (80063d0 <prvAddNewTaskToReadyList+0xd0>)
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006364:	4b1b      	ldr	r3, [pc, #108]	; (80063d4 <prvAddNewTaskToReadyList+0xd4>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	429a      	cmp	r2, r3
 800636a:	d903      	bls.n	8006374 <prvAddNewTaskToReadyList+0x74>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006370:	4a18      	ldr	r2, [pc, #96]	; (80063d4 <prvAddNewTaskToReadyList+0xd4>)
 8006372:	6013      	str	r3, [r2, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006378:	4613      	mov	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	4a15      	ldr	r2, [pc, #84]	; (80063d8 <prvAddNewTaskToReadyList+0xd8>)
 8006382:	441a      	add	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	3304      	adds	r3, #4
 8006388:	4619      	mov	r1, r3
 800638a:	4610      	mov	r0, r2
 800638c:	f7ff f8fd 	bl	800558a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006390:	f001 fb48 	bl	8007a24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006394:	4b0d      	ldr	r3, [pc, #52]	; (80063cc <prvAddNewTaskToReadyList+0xcc>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00e      	beq.n	80063ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800639c:	4b0a      	ldr	r3, [pc, #40]	; (80063c8 <prvAddNewTaskToReadyList+0xc8>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d207      	bcs.n	80063ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80063aa:	4b0c      	ldr	r3, [pc, #48]	; (80063dc <prvAddNewTaskToReadyList+0xdc>)
 80063ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063ba:	bf00      	nop
 80063bc:	3708      	adds	r7, #8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	20001494 	.word	0x20001494
 80063c8:	20000fc0 	.word	0x20000fc0
 80063cc:	200014a0 	.word	0x200014a0
 80063d0:	200014b0 	.word	0x200014b0
 80063d4:	2000149c 	.word	0x2000149c
 80063d8:	20000fc4 	.word	0x20000fc4
 80063dc:	e000ed04 	.word	0xe000ed04

080063e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80063e8:	2300      	movs	r3, #0
 80063ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d017      	beq.n	8006422 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80063f2:	4b13      	ldr	r3, [pc, #76]	; (8006440 <vTaskDelay+0x60>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00a      	beq.n	8006410 <vTaskDelay+0x30>
	__asm volatile
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	60bb      	str	r3, [r7, #8]
}
 800640c:	bf00      	nop
 800640e:	e7fe      	b.n	800640e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006410:	f000 f88a 	bl	8006528 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006414:	2100      	movs	r1, #0
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fe08 	bl	800702c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800641c:	f000 f892 	bl	8006544 <xTaskResumeAll>
 8006420:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d107      	bne.n	8006438 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006428:	4b06      	ldr	r3, [pc, #24]	; (8006444 <vTaskDelay+0x64>)
 800642a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006438:	bf00      	nop
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	200014bc 	.word	0x200014bc
 8006444:	e000ed04 	.word	0xe000ed04

08006448 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b08a      	sub	sp, #40	; 0x28
 800644c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800644e:	2300      	movs	r3, #0
 8006450:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006452:	2300      	movs	r3, #0
 8006454:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006456:	463a      	mov	r2, r7
 8006458:	1d39      	adds	r1, r7, #4
 800645a:	f107 0308 	add.w	r3, r7, #8
 800645e:	4618      	mov	r0, r3
 8006460:	f7ff f832 	bl	80054c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	9202      	str	r2, [sp, #8]
 800646c:	9301      	str	r3, [sp, #4]
 800646e:	2300      	movs	r3, #0
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	2300      	movs	r3, #0
 8006474:	460a      	mov	r2, r1
 8006476:	4924      	ldr	r1, [pc, #144]	; (8006508 <vTaskStartScheduler+0xc0>)
 8006478:	4824      	ldr	r0, [pc, #144]	; (800650c <vTaskStartScheduler+0xc4>)
 800647a:	f7ff fdf9 	bl	8006070 <xTaskCreateStatic>
 800647e:	4603      	mov	r3, r0
 8006480:	4a23      	ldr	r2, [pc, #140]	; (8006510 <vTaskStartScheduler+0xc8>)
 8006482:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006484:	4b22      	ldr	r3, [pc, #136]	; (8006510 <vTaskStartScheduler+0xc8>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800648c:	2301      	movs	r3, #1
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	e001      	b.n	8006496 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006492:	2300      	movs	r3, #0
 8006494:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d102      	bne.n	80064a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800649c:	f000 fe1a 	bl	80070d4 <xTimerCreateTimerTask>
 80064a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d11b      	bne.n	80064e0 <vTaskStartScheduler+0x98>
	__asm volatile
 80064a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ac:	f383 8811 	msr	BASEPRI, r3
 80064b0:	f3bf 8f6f 	isb	sy
 80064b4:	f3bf 8f4f 	dsb	sy
 80064b8:	613b      	str	r3, [r7, #16]
}
 80064ba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80064bc:	4b15      	ldr	r3, [pc, #84]	; (8006514 <vTaskStartScheduler+0xcc>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3354      	adds	r3, #84	; 0x54
 80064c2:	4a15      	ldr	r2, [pc, #84]	; (8006518 <vTaskStartScheduler+0xd0>)
 80064c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80064c6:	4b15      	ldr	r3, [pc, #84]	; (800651c <vTaskStartScheduler+0xd4>)
 80064c8:	f04f 32ff 	mov.w	r2, #4294967295
 80064cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80064ce:	4b14      	ldr	r3, [pc, #80]	; (8006520 <vTaskStartScheduler+0xd8>)
 80064d0:	2201      	movs	r2, #1
 80064d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80064d4:	4b13      	ldr	r3, [pc, #76]	; (8006524 <vTaskStartScheduler+0xdc>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80064da:	f001 f9d1 	bl	8007880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80064de:	e00e      	b.n	80064fe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e6:	d10a      	bne.n	80064fe <vTaskStartScheduler+0xb6>
	__asm volatile
 80064e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	60fb      	str	r3, [r7, #12]
}
 80064fa:	bf00      	nop
 80064fc:	e7fe      	b.n	80064fc <vTaskStartScheduler+0xb4>
}
 80064fe:	bf00      	nop
 8006500:	3718      	adds	r7, #24
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	080081fc 	.word	0x080081fc
 800650c:	08006b4d 	.word	0x08006b4d
 8006510:	200014b8 	.word	0x200014b8
 8006514:	20000fc0 	.word	0x20000fc0
 8006518:	20000060 	.word	0x20000060
 800651c:	200014b4 	.word	0x200014b4
 8006520:	200014a0 	.word	0x200014a0
 8006524:	20001498 	.word	0x20001498

08006528 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006528:	b480      	push	{r7}
 800652a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800652c:	4b04      	ldr	r3, [pc, #16]	; (8006540 <vTaskSuspendAll+0x18>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3301      	adds	r3, #1
 8006532:	4a03      	ldr	r2, [pc, #12]	; (8006540 <vTaskSuspendAll+0x18>)
 8006534:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006536:	bf00      	nop
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	200014bc 	.word	0x200014bc

08006544 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800654a:	2300      	movs	r3, #0
 800654c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800654e:	2300      	movs	r3, #0
 8006550:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006552:	4b42      	ldr	r3, [pc, #264]	; (800665c <xTaskResumeAll+0x118>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10a      	bne.n	8006570 <xTaskResumeAll+0x2c>
	__asm volatile
 800655a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	603b      	str	r3, [r7, #0]
}
 800656c:	bf00      	nop
 800656e:	e7fe      	b.n	800656e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006570:	f001 fa28 	bl	80079c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006574:	4b39      	ldr	r3, [pc, #228]	; (800665c <xTaskResumeAll+0x118>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3b01      	subs	r3, #1
 800657a:	4a38      	ldr	r2, [pc, #224]	; (800665c <xTaskResumeAll+0x118>)
 800657c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800657e:	4b37      	ldr	r3, [pc, #220]	; (800665c <xTaskResumeAll+0x118>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d162      	bne.n	800664c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006586:	4b36      	ldr	r3, [pc, #216]	; (8006660 <xTaskResumeAll+0x11c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d05e      	beq.n	800664c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800658e:	e02f      	b.n	80065f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006590:	4b34      	ldr	r3, [pc, #208]	; (8006664 <xTaskResumeAll+0x120>)
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	3318      	adds	r3, #24
 800659c:	4618      	mov	r0, r3
 800659e:	f7ff f851 	bl	8005644 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	3304      	adds	r3, #4
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7ff f84c 	bl	8005644 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b0:	4b2d      	ldr	r3, [pc, #180]	; (8006668 <xTaskResumeAll+0x124>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d903      	bls.n	80065c0 <xTaskResumeAll+0x7c>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065bc:	4a2a      	ldr	r2, [pc, #168]	; (8006668 <xTaskResumeAll+0x124>)
 80065be:	6013      	str	r3, [r2, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c4:	4613      	mov	r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4413      	add	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4a27      	ldr	r2, [pc, #156]	; (800666c <xTaskResumeAll+0x128>)
 80065ce:	441a      	add	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3304      	adds	r3, #4
 80065d4:	4619      	mov	r1, r3
 80065d6:	4610      	mov	r0, r2
 80065d8:	f7fe ffd7 	bl	800558a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e0:	4b23      	ldr	r3, [pc, #140]	; (8006670 <xTaskResumeAll+0x12c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d302      	bcc.n	80065f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80065ea:	4b22      	ldr	r3, [pc, #136]	; (8006674 <xTaskResumeAll+0x130>)
 80065ec:	2201      	movs	r2, #1
 80065ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065f0:	4b1c      	ldr	r3, [pc, #112]	; (8006664 <xTaskResumeAll+0x120>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1cb      	bne.n	8006590 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80065fe:	f000 fb5f 	bl	8006cc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006602:	4b1d      	ldr	r3, [pc, #116]	; (8006678 <xTaskResumeAll+0x134>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d010      	beq.n	8006630 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800660e:	f000 f847 	bl	80066a0 <xTaskIncrementTick>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006618:	4b16      	ldr	r3, [pc, #88]	; (8006674 <xTaskResumeAll+0x130>)
 800661a:	2201      	movs	r2, #1
 800661c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	3b01      	subs	r3, #1
 8006622:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1f1      	bne.n	800660e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800662a:	4b13      	ldr	r3, [pc, #76]	; (8006678 <xTaskResumeAll+0x134>)
 800662c:	2200      	movs	r2, #0
 800662e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006630:	4b10      	ldr	r3, [pc, #64]	; (8006674 <xTaskResumeAll+0x130>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d009      	beq.n	800664c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006638:	2301      	movs	r3, #1
 800663a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800663c:	4b0f      	ldr	r3, [pc, #60]	; (800667c <xTaskResumeAll+0x138>)
 800663e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800664c:	f001 f9ea 	bl	8007a24 <vPortExitCritical>

	return xAlreadyYielded;
 8006650:	68bb      	ldr	r3, [r7, #8]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	200014bc 	.word	0x200014bc
 8006660:	20001494 	.word	0x20001494
 8006664:	20001454 	.word	0x20001454
 8006668:	2000149c 	.word	0x2000149c
 800666c:	20000fc4 	.word	0x20000fc4
 8006670:	20000fc0 	.word	0x20000fc0
 8006674:	200014a8 	.word	0x200014a8
 8006678:	200014a4 	.word	0x200014a4
 800667c:	e000ed04 	.word	0xe000ed04

08006680 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006686:	4b05      	ldr	r3, [pc, #20]	; (800669c <xTaskGetTickCount+0x1c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800668c:	687b      	ldr	r3, [r7, #4]
}
 800668e:	4618      	mov	r0, r3
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	20001498 	.word	0x20001498

080066a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80066a6:	2300      	movs	r3, #0
 80066a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066aa:	4b4f      	ldr	r3, [pc, #316]	; (80067e8 <xTaskIncrementTick+0x148>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f040 808f 	bne.w	80067d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80066b4:	4b4d      	ldr	r3, [pc, #308]	; (80067ec <xTaskIncrementTick+0x14c>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3301      	adds	r3, #1
 80066ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80066bc:	4a4b      	ldr	r2, [pc, #300]	; (80067ec <xTaskIncrementTick+0x14c>)
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d120      	bne.n	800670a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80066c8:	4b49      	ldr	r3, [pc, #292]	; (80067f0 <xTaskIncrementTick+0x150>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00a      	beq.n	80066e8 <xTaskIncrementTick+0x48>
	__asm volatile
 80066d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d6:	f383 8811 	msr	BASEPRI, r3
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	603b      	str	r3, [r7, #0]
}
 80066e4:	bf00      	nop
 80066e6:	e7fe      	b.n	80066e6 <xTaskIncrementTick+0x46>
 80066e8:	4b41      	ldr	r3, [pc, #260]	; (80067f0 <xTaskIncrementTick+0x150>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	4b41      	ldr	r3, [pc, #260]	; (80067f4 <xTaskIncrementTick+0x154>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a3f      	ldr	r2, [pc, #252]	; (80067f0 <xTaskIncrementTick+0x150>)
 80066f4:	6013      	str	r3, [r2, #0]
 80066f6:	4a3f      	ldr	r2, [pc, #252]	; (80067f4 <xTaskIncrementTick+0x154>)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6013      	str	r3, [r2, #0]
 80066fc:	4b3e      	ldr	r3, [pc, #248]	; (80067f8 <xTaskIncrementTick+0x158>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3301      	adds	r3, #1
 8006702:	4a3d      	ldr	r2, [pc, #244]	; (80067f8 <xTaskIncrementTick+0x158>)
 8006704:	6013      	str	r3, [r2, #0]
 8006706:	f000 fadb 	bl	8006cc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800670a:	4b3c      	ldr	r3, [pc, #240]	; (80067fc <xTaskIncrementTick+0x15c>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	429a      	cmp	r2, r3
 8006712:	d349      	bcc.n	80067a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006714:	4b36      	ldr	r3, [pc, #216]	; (80067f0 <xTaskIncrementTick+0x150>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d104      	bne.n	8006728 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800671e:	4b37      	ldr	r3, [pc, #220]	; (80067fc <xTaskIncrementTick+0x15c>)
 8006720:	f04f 32ff 	mov.w	r2, #4294967295
 8006724:	601a      	str	r2, [r3, #0]
					break;
 8006726:	e03f      	b.n	80067a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006728:	4b31      	ldr	r3, [pc, #196]	; (80067f0 <xTaskIncrementTick+0x150>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	429a      	cmp	r2, r3
 800673e:	d203      	bcs.n	8006748 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006740:	4a2e      	ldr	r2, [pc, #184]	; (80067fc <xTaskIncrementTick+0x15c>)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006746:	e02f      	b.n	80067a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	3304      	adds	r3, #4
 800674c:	4618      	mov	r0, r3
 800674e:	f7fe ff79 	bl	8005644 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006756:	2b00      	cmp	r3, #0
 8006758:	d004      	beq.n	8006764 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	3318      	adds	r3, #24
 800675e:	4618      	mov	r0, r3
 8006760:	f7fe ff70 	bl	8005644 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006768:	4b25      	ldr	r3, [pc, #148]	; (8006800 <xTaskIncrementTick+0x160>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	429a      	cmp	r2, r3
 800676e:	d903      	bls.n	8006778 <xTaskIncrementTick+0xd8>
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006774:	4a22      	ldr	r2, [pc, #136]	; (8006800 <xTaskIncrementTick+0x160>)
 8006776:	6013      	str	r3, [r2, #0]
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677c:	4613      	mov	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4413      	add	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4a1f      	ldr	r2, [pc, #124]	; (8006804 <xTaskIncrementTick+0x164>)
 8006786:	441a      	add	r2, r3
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	3304      	adds	r3, #4
 800678c:	4619      	mov	r1, r3
 800678e:	4610      	mov	r0, r2
 8006790:	f7fe fefb 	bl	800558a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006798:	4b1b      	ldr	r3, [pc, #108]	; (8006808 <xTaskIncrementTick+0x168>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679e:	429a      	cmp	r2, r3
 80067a0:	d3b8      	bcc.n	8006714 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80067a2:	2301      	movs	r3, #1
 80067a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067a6:	e7b5      	b.n	8006714 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80067a8:	4b17      	ldr	r3, [pc, #92]	; (8006808 <xTaskIncrementTick+0x168>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ae:	4915      	ldr	r1, [pc, #84]	; (8006804 <xTaskIncrementTick+0x164>)
 80067b0:	4613      	mov	r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	440b      	add	r3, r1
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d901      	bls.n	80067c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80067c0:	2301      	movs	r3, #1
 80067c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80067c4:	4b11      	ldr	r3, [pc, #68]	; (800680c <xTaskIncrementTick+0x16c>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d007      	beq.n	80067dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80067cc:	2301      	movs	r3, #1
 80067ce:	617b      	str	r3, [r7, #20]
 80067d0:	e004      	b.n	80067dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80067d2:	4b0f      	ldr	r3, [pc, #60]	; (8006810 <xTaskIncrementTick+0x170>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3301      	adds	r3, #1
 80067d8:	4a0d      	ldr	r2, [pc, #52]	; (8006810 <xTaskIncrementTick+0x170>)
 80067da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80067dc:	697b      	ldr	r3, [r7, #20]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	200014bc 	.word	0x200014bc
 80067ec:	20001498 	.word	0x20001498
 80067f0:	2000144c 	.word	0x2000144c
 80067f4:	20001450 	.word	0x20001450
 80067f8:	200014ac 	.word	0x200014ac
 80067fc:	200014b4 	.word	0x200014b4
 8006800:	2000149c 	.word	0x2000149c
 8006804:	20000fc4 	.word	0x20000fc4
 8006808:	20000fc0 	.word	0x20000fc0
 800680c:	200014a8 	.word	0x200014a8
 8006810:	200014a4 	.word	0x200014a4

08006814 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800681a:	4b2a      	ldr	r3, [pc, #168]	; (80068c4 <vTaskSwitchContext+0xb0>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006822:	4b29      	ldr	r3, [pc, #164]	; (80068c8 <vTaskSwitchContext+0xb4>)
 8006824:	2201      	movs	r2, #1
 8006826:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006828:	e046      	b.n	80068b8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800682a:	4b27      	ldr	r3, [pc, #156]	; (80068c8 <vTaskSwitchContext+0xb4>)
 800682c:	2200      	movs	r2, #0
 800682e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006830:	4b26      	ldr	r3, [pc, #152]	; (80068cc <vTaskSwitchContext+0xb8>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	60fb      	str	r3, [r7, #12]
 8006836:	e010      	b.n	800685a <vTaskSwitchContext+0x46>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10a      	bne.n	8006854 <vTaskSwitchContext+0x40>
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	607b      	str	r3, [r7, #4]
}
 8006850:	bf00      	nop
 8006852:	e7fe      	b.n	8006852 <vTaskSwitchContext+0x3e>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	3b01      	subs	r3, #1
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	491d      	ldr	r1, [pc, #116]	; (80068d0 <vTaskSwitchContext+0xbc>)
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	4613      	mov	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	440b      	add	r3, r1
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d0e4      	beq.n	8006838 <vTaskSwitchContext+0x24>
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4613      	mov	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4a15      	ldr	r2, [pc, #84]	; (80068d0 <vTaskSwitchContext+0xbc>)
 800687a:	4413      	add	r3, r2
 800687c:	60bb      	str	r3, [r7, #8]
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	605a      	str	r2, [r3, #4]
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	3308      	adds	r3, #8
 8006890:	429a      	cmp	r2, r3
 8006892:	d104      	bne.n	800689e <vTaskSwitchContext+0x8a>
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	685a      	ldr	r2, [r3, #4]
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	605a      	str	r2, [r3, #4]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	4a0b      	ldr	r2, [pc, #44]	; (80068d4 <vTaskSwitchContext+0xc0>)
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	4a08      	ldr	r2, [pc, #32]	; (80068cc <vTaskSwitchContext+0xb8>)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80068ae:	4b09      	ldr	r3, [pc, #36]	; (80068d4 <vTaskSwitchContext+0xc0>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3354      	adds	r3, #84	; 0x54
 80068b4:	4a08      	ldr	r2, [pc, #32]	; (80068d8 <vTaskSwitchContext+0xc4>)
 80068b6:	6013      	str	r3, [r2, #0]
}
 80068b8:	bf00      	nop
 80068ba:	3714      	adds	r7, #20
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	200014bc 	.word	0x200014bc
 80068c8:	200014a8 	.word	0x200014a8
 80068cc:	2000149c 	.word	0x2000149c
 80068d0:	20000fc4 	.word	0x20000fc4
 80068d4:	20000fc0 	.word	0x20000fc0
 80068d8:	20000060 	.word	0x20000060

080068dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10a      	bne.n	8006902 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80068ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	60fb      	str	r3, [r7, #12]
}
 80068fe:	bf00      	nop
 8006900:	e7fe      	b.n	8006900 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006902:	4b07      	ldr	r3, [pc, #28]	; (8006920 <vTaskPlaceOnEventList+0x44>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3318      	adds	r3, #24
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7fe fe61 	bl	80055d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006910:	2101      	movs	r1, #1
 8006912:	6838      	ldr	r0, [r7, #0]
 8006914:	f000 fb8a 	bl	800702c <prvAddCurrentTaskToDelayedList>
}
 8006918:	bf00      	nop
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	20000fc0 	.word	0x20000fc0

08006924 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10a      	bne.n	800694c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693a:	f383 8811 	msr	BASEPRI, r3
 800693e:	f3bf 8f6f 	isb	sy
 8006942:	f3bf 8f4f 	dsb	sy
 8006946:	617b      	str	r3, [r7, #20]
}
 8006948:	bf00      	nop
 800694a:	e7fe      	b.n	800694a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800694c:	4b0a      	ldr	r3, [pc, #40]	; (8006978 <vTaskPlaceOnEventListRestricted+0x54>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	3318      	adds	r3, #24
 8006952:	4619      	mov	r1, r3
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f7fe fe18 	bl	800558a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006960:	f04f 33ff 	mov.w	r3, #4294967295
 8006964:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	68b8      	ldr	r0, [r7, #8]
 800696a:	f000 fb5f 	bl	800702c <prvAddCurrentTaskToDelayedList>
	}
 800696e:	bf00      	nop
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20000fc0 	.word	0x20000fc0

0800697c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10a      	bne.n	80069a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	60fb      	str	r3, [r7, #12]
}
 80069a4:	bf00      	nop
 80069a6:	e7fe      	b.n	80069a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	3318      	adds	r3, #24
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7fe fe49 	bl	8005644 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069b2:	4b1e      	ldr	r3, [pc, #120]	; (8006a2c <xTaskRemoveFromEventList+0xb0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d11d      	bne.n	80069f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	3304      	adds	r3, #4
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fe fe40 	bl	8005644 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c8:	4b19      	ldr	r3, [pc, #100]	; (8006a30 <xTaskRemoveFromEventList+0xb4>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d903      	bls.n	80069d8 <xTaskRemoveFromEventList+0x5c>
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d4:	4a16      	ldr	r2, [pc, #88]	; (8006a30 <xTaskRemoveFromEventList+0xb4>)
 80069d6:	6013      	str	r3, [r2, #0]
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069dc:	4613      	mov	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4a13      	ldr	r2, [pc, #76]	; (8006a34 <xTaskRemoveFromEventList+0xb8>)
 80069e6:	441a      	add	r2, r3
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	3304      	adds	r3, #4
 80069ec:	4619      	mov	r1, r3
 80069ee:	4610      	mov	r0, r2
 80069f0:	f7fe fdcb 	bl	800558a <vListInsertEnd>
 80069f4:	e005      	b.n	8006a02 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	3318      	adds	r3, #24
 80069fa:	4619      	mov	r1, r3
 80069fc:	480e      	ldr	r0, [pc, #56]	; (8006a38 <xTaskRemoveFromEventList+0xbc>)
 80069fe:	f7fe fdc4 	bl	800558a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a06:	4b0d      	ldr	r3, [pc, #52]	; (8006a3c <xTaskRemoveFromEventList+0xc0>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d905      	bls.n	8006a1c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a10:	2301      	movs	r3, #1
 8006a12:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a14:	4b0a      	ldr	r3, [pc, #40]	; (8006a40 <xTaskRemoveFromEventList+0xc4>)
 8006a16:	2201      	movs	r2, #1
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	e001      	b.n	8006a20 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a20:	697b      	ldr	r3, [r7, #20]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3718      	adds	r7, #24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	200014bc 	.word	0x200014bc
 8006a30:	2000149c 	.word	0x2000149c
 8006a34:	20000fc4 	.word	0x20000fc4
 8006a38:	20001454 	.word	0x20001454
 8006a3c:	20000fc0 	.word	0x20000fc0
 8006a40:	200014a8 	.word	0x200014a8

08006a44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a4c:	4b06      	ldr	r3, [pc, #24]	; (8006a68 <vTaskInternalSetTimeOutState+0x24>)
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a54:	4b05      	ldr	r3, [pc, #20]	; (8006a6c <vTaskInternalSetTimeOutState+0x28>)
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	605a      	str	r2, [r3, #4]
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	200014ac 	.word	0x200014ac
 8006a6c:	20001498 	.word	0x20001498

08006a70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b088      	sub	sp, #32
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10a      	bne.n	8006a96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	613b      	str	r3, [r7, #16]
}
 8006a92:	bf00      	nop
 8006a94:	e7fe      	b.n	8006a94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10a      	bne.n	8006ab2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	60fb      	str	r3, [r7, #12]
}
 8006aae:	bf00      	nop
 8006ab0:	e7fe      	b.n	8006ab0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006ab2:	f000 ff87 	bl	80079c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006ab6:	4b1d      	ldr	r3, [pc, #116]	; (8006b2c <xTaskCheckForTimeOut+0xbc>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ace:	d102      	bne.n	8006ad6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	61fb      	str	r3, [r7, #28]
 8006ad4:	e023      	b.n	8006b1e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	4b15      	ldr	r3, [pc, #84]	; (8006b30 <xTaskCheckForTimeOut+0xc0>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d007      	beq.n	8006af2 <xTaskCheckForTimeOut+0x82>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	69ba      	ldr	r2, [r7, #24]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d302      	bcc.n	8006af2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006aec:	2301      	movs	r3, #1
 8006aee:	61fb      	str	r3, [r7, #28]
 8006af0:	e015      	b.n	8006b1e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d20b      	bcs.n	8006b14 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	1ad2      	subs	r2, r2, r3
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7ff ff9b 	bl	8006a44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	61fb      	str	r3, [r7, #28]
 8006b12:	e004      	b.n	8006b1e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	2200      	movs	r2, #0
 8006b18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b1e:	f000 ff81 	bl	8007a24 <vPortExitCritical>

	return xReturn;
 8006b22:	69fb      	ldr	r3, [r7, #28]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3720      	adds	r7, #32
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	20001498 	.word	0x20001498
 8006b30:	200014ac 	.word	0x200014ac

08006b34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b34:	b480      	push	{r7}
 8006b36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b38:	4b03      	ldr	r3, [pc, #12]	; (8006b48 <vTaskMissedYield+0x14>)
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	601a      	str	r2, [r3, #0]
}
 8006b3e:	bf00      	nop
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	200014a8 	.word	0x200014a8

08006b4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b54:	f000 f852 	bl	8006bfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b58:	4b06      	ldr	r3, [pc, #24]	; (8006b74 <prvIdleTask+0x28>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d9f9      	bls.n	8006b54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b60:	4b05      	ldr	r3, [pc, #20]	; (8006b78 <prvIdleTask+0x2c>)
 8006b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b70:	e7f0      	b.n	8006b54 <prvIdleTask+0x8>
 8006b72:	bf00      	nop
 8006b74:	20000fc4 	.word	0x20000fc4
 8006b78:	e000ed04 	.word	0xe000ed04

08006b7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b82:	2300      	movs	r3, #0
 8006b84:	607b      	str	r3, [r7, #4]
 8006b86:	e00c      	b.n	8006ba2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4413      	add	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4a12      	ldr	r2, [pc, #72]	; (8006bdc <prvInitialiseTaskLists+0x60>)
 8006b94:	4413      	add	r3, r2
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fe fcca 	bl	8005530 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	607b      	str	r3, [r7, #4]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b37      	cmp	r3, #55	; 0x37
 8006ba6:	d9ef      	bls.n	8006b88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ba8:	480d      	ldr	r0, [pc, #52]	; (8006be0 <prvInitialiseTaskLists+0x64>)
 8006baa:	f7fe fcc1 	bl	8005530 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006bae:	480d      	ldr	r0, [pc, #52]	; (8006be4 <prvInitialiseTaskLists+0x68>)
 8006bb0:	f7fe fcbe 	bl	8005530 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006bb4:	480c      	ldr	r0, [pc, #48]	; (8006be8 <prvInitialiseTaskLists+0x6c>)
 8006bb6:	f7fe fcbb 	bl	8005530 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006bba:	480c      	ldr	r0, [pc, #48]	; (8006bec <prvInitialiseTaskLists+0x70>)
 8006bbc:	f7fe fcb8 	bl	8005530 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006bc0:	480b      	ldr	r0, [pc, #44]	; (8006bf0 <prvInitialiseTaskLists+0x74>)
 8006bc2:	f7fe fcb5 	bl	8005530 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006bc6:	4b0b      	ldr	r3, [pc, #44]	; (8006bf4 <prvInitialiseTaskLists+0x78>)
 8006bc8:	4a05      	ldr	r2, [pc, #20]	; (8006be0 <prvInitialiseTaskLists+0x64>)
 8006bca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006bcc:	4b0a      	ldr	r3, [pc, #40]	; (8006bf8 <prvInitialiseTaskLists+0x7c>)
 8006bce:	4a05      	ldr	r2, [pc, #20]	; (8006be4 <prvInitialiseTaskLists+0x68>)
 8006bd0:	601a      	str	r2, [r3, #0]
}
 8006bd2:	bf00      	nop
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	20000fc4 	.word	0x20000fc4
 8006be0:	20001424 	.word	0x20001424
 8006be4:	20001438 	.word	0x20001438
 8006be8:	20001454 	.word	0x20001454
 8006bec:	20001468 	.word	0x20001468
 8006bf0:	20001480 	.word	0x20001480
 8006bf4:	2000144c 	.word	0x2000144c
 8006bf8:	20001450 	.word	0x20001450

08006bfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c02:	e019      	b.n	8006c38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c04:	f000 fede 	bl	80079c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c08:	4b10      	ldr	r3, [pc, #64]	; (8006c4c <prvCheckTasksWaitingTermination+0x50>)
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	3304      	adds	r3, #4
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7fe fd15 	bl	8005644 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c1a:	4b0d      	ldr	r3, [pc, #52]	; (8006c50 <prvCheckTasksWaitingTermination+0x54>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	4a0b      	ldr	r2, [pc, #44]	; (8006c50 <prvCheckTasksWaitingTermination+0x54>)
 8006c22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c24:	4b0b      	ldr	r3, [pc, #44]	; (8006c54 <prvCheckTasksWaitingTermination+0x58>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	4a0a      	ldr	r2, [pc, #40]	; (8006c54 <prvCheckTasksWaitingTermination+0x58>)
 8006c2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c2e:	f000 fef9 	bl	8007a24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f810 	bl	8006c58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c38:	4b06      	ldr	r3, [pc, #24]	; (8006c54 <prvCheckTasksWaitingTermination+0x58>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1e1      	bne.n	8006c04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c40:	bf00      	nop
 8006c42:	bf00      	nop
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20001468 	.word	0x20001468
 8006c50:	20001494 	.word	0x20001494
 8006c54:	2000147c 	.word	0x2000147c

08006c58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3354      	adds	r3, #84	; 0x54
 8006c64:	4618      	mov	r0, r3
 8006c66:	f001 f9c1 	bl	8007fec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d108      	bne.n	8006c86 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f001 f891 	bl	8007da0 <vPortFree>
				vPortFree( pxTCB );
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 f88e 	bl	8007da0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c84:	e018      	b.n	8006cb8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d103      	bne.n	8006c98 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f001 f885 	bl	8007da0 <vPortFree>
	}
 8006c96:	e00f      	b.n	8006cb8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d00a      	beq.n	8006cb8 <prvDeleteTCB+0x60>
	__asm volatile
 8006ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca6:	f383 8811 	msr	BASEPRI, r3
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	60fb      	str	r3, [r7, #12]
}
 8006cb4:	bf00      	nop
 8006cb6:	e7fe      	b.n	8006cb6 <prvDeleteTCB+0x5e>
	}
 8006cb8:	bf00      	nop
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cc6:	4b0c      	ldr	r3, [pc, #48]	; (8006cf8 <prvResetNextTaskUnblockTime+0x38>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d104      	bne.n	8006cda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006cd0:	4b0a      	ldr	r3, [pc, #40]	; (8006cfc <prvResetNextTaskUnblockTime+0x3c>)
 8006cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006cd8:	e008      	b.n	8006cec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cda:	4b07      	ldr	r3, [pc, #28]	; (8006cf8 <prvResetNextTaskUnblockTime+0x38>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	4a04      	ldr	r2, [pc, #16]	; (8006cfc <prvResetNextTaskUnblockTime+0x3c>)
 8006cea:	6013      	str	r3, [r2, #0]
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	2000144c 	.word	0x2000144c
 8006cfc:	200014b4 	.word	0x200014b4

08006d00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d06:	4b0b      	ldr	r3, [pc, #44]	; (8006d34 <xTaskGetSchedulerState+0x34>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d102      	bne.n	8006d14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	607b      	str	r3, [r7, #4]
 8006d12:	e008      	b.n	8006d26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d14:	4b08      	ldr	r3, [pc, #32]	; (8006d38 <xTaskGetSchedulerState+0x38>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d102      	bne.n	8006d22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	607b      	str	r3, [r7, #4]
 8006d20:	e001      	b.n	8006d26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d22:	2300      	movs	r3, #0
 8006d24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d26:	687b      	ldr	r3, [r7, #4]
	}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	200014a0 	.word	0x200014a0
 8006d38:	200014bc 	.word	0x200014bc

08006d3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d056      	beq.n	8006e00 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d52:	4b2e      	ldr	r3, [pc, #184]	; (8006e0c <xTaskPriorityDisinherit+0xd0>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d00a      	beq.n	8006d72 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	60fb      	str	r3, [r7, #12]
}
 8006d6e:	bf00      	nop
 8006d70:	e7fe      	b.n	8006d70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10a      	bne.n	8006d90 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	60bb      	str	r3, [r7, #8]
}
 8006d8c:	bf00      	nop
 8006d8e:	e7fe      	b.n	8006d8e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d94:	1e5a      	subs	r2, r3, #1
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d02c      	beq.n	8006e00 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d128      	bne.n	8006e00 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	3304      	adds	r3, #4
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fe fc46 	bl	8005644 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd0:	4b0f      	ldr	r3, [pc, #60]	; (8006e10 <xTaskPriorityDisinherit+0xd4>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d903      	bls.n	8006de0 <xTaskPriorityDisinherit+0xa4>
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ddc:	4a0c      	ldr	r2, [pc, #48]	; (8006e10 <xTaskPriorityDisinherit+0xd4>)
 8006dde:	6013      	str	r3, [r2, #0]
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de4:	4613      	mov	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4a09      	ldr	r2, [pc, #36]	; (8006e14 <xTaskPriorityDisinherit+0xd8>)
 8006dee:	441a      	add	r2, r3
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	3304      	adds	r3, #4
 8006df4:	4619      	mov	r1, r3
 8006df6:	4610      	mov	r0, r2
 8006df8:	f7fe fbc7 	bl	800558a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e00:	697b      	ldr	r3, [r7, #20]
	}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3718      	adds	r7, #24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	20000fc0 	.word	0x20000fc0
 8006e10:	2000149c 	.word	0x2000149c
 8006e14:	20000fc4 	.word	0x20000fc4

08006e18 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8006e22:	f000 fdcf 	bl	80079c4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8006e26:	4b20      	ldr	r3, [pc, #128]	; (8006ea8 <ulTaskNotifyTake+0x90>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d113      	bne.n	8006e5a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006e32:	4b1d      	ldr	r3, [pc, #116]	; (8006ea8 <ulTaskNotifyTake+0x90>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00b      	beq.n	8006e5a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e42:	2101      	movs	r1, #1
 8006e44:	6838      	ldr	r0, [r7, #0]
 8006e46:	f000 f8f1 	bl	800702c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006e4a:	4b18      	ldr	r3, [pc, #96]	; (8006eac <ulTaskNotifyTake+0x94>)
 8006e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e50:	601a      	str	r2, [r3, #0]
 8006e52:	f3bf 8f4f 	dsb	sy
 8006e56:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006e5a:	f000 fde3 	bl	8007a24 <vPortExitCritical>

		taskENTER_CRITICAL();
 8006e5e:	f000 fdb1 	bl	80079c4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8006e62:	4b11      	ldr	r3, [pc, #68]	; (8006ea8 <ulTaskNotifyTake+0x90>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e6a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00e      	beq.n	8006e90 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d005      	beq.n	8006e84 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8006e78:	4b0b      	ldr	r3, [pc, #44]	; (8006ea8 <ulTaskNotifyTake+0x90>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8006e82:	e005      	b.n	8006e90 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8006e84:	4b08      	ldr	r3, [pc, #32]	; (8006ea8 <ulTaskNotifyTake+0x90>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	3a01      	subs	r2, #1
 8006e8c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e90:	4b05      	ldr	r3, [pc, #20]	; (8006ea8 <ulTaskNotifyTake+0x90>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		}
		taskEXIT_CRITICAL();
 8006e9a:	f000 fdc3 	bl	8007a24 <vPortExitCritical>

		return ulReturn;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
	}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	20000fc0 	.word	0x20000fc0
 8006eac:	e000ed04 	.word	0xe000ed04

08006eb0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08a      	sub	sp, #40	; 0x28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	603b      	str	r3, [r7, #0]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10a      	bne.n	8006ee0 <xTaskGenericNotify+0x30>
	__asm volatile
 8006eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ece:	f383 8811 	msr	BASEPRI, r3
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	f3bf 8f4f 	dsb	sy
 8006eda:	61bb      	str	r3, [r7, #24]
}
 8006edc:	bf00      	nop
 8006ede:	e7fe      	b.n	8006ede <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006ee4:	f000 fd6e 	bl	80079c4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d004      	beq.n	8006ef8 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8006efe:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006f00:	6a3b      	ldr	r3, [r7, #32]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 8006f08:	79fb      	ldrb	r3, [r7, #7]
 8006f0a:	2b04      	cmp	r3, #4
 8006f0c:	d82d      	bhi.n	8006f6a <xTaskGenericNotify+0xba>
 8006f0e:	a201      	add	r2, pc, #4	; (adr r2, 8006f14 <xTaskGenericNotify+0x64>)
 8006f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f14:	08006f8d 	.word	0x08006f8d
 8006f18:	08006f29 	.word	0x08006f29
 8006f1c:	08006f3b 	.word	0x08006f3b
 8006f20:	08006f4b 	.word	0x08006f4b
 8006f24:	08006f55 	.word	0x08006f55
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006f28:	6a3b      	ldr	r3, [r7, #32]
 8006f2a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	431a      	orrs	r2, r3
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8006f38:	e02b      	b.n	8006f92 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006f3a:	6a3b      	ldr	r3, [r7, #32]
 8006f3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f40:	1c5a      	adds	r2, r3, #1
 8006f42:	6a3b      	ldr	r3, [r7, #32]
 8006f44:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8006f48:	e023      	b.n	8006f92 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8006f52:	e01e      	b.n	8006f92 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006f54:	7ffb      	ldrb	r3, [r7, #31]
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d004      	beq.n	8006f64 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006f5a:	6a3b      	ldr	r3, [r7, #32]
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006f62:	e016      	b.n	8006f92 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8006f64:	2300      	movs	r3, #0
 8006f66:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8006f68:	e013      	b.n	8006f92 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006f6a:	6a3b      	ldr	r3, [r7, #32]
 8006f6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f74:	d00c      	beq.n	8006f90 <xTaskGenericNotify+0xe0>
	__asm volatile
 8006f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	617b      	str	r3, [r7, #20]
}
 8006f88:	bf00      	nop
 8006f8a:	e7fe      	b.n	8006f8a <xTaskGenericNotify+0xda>
					break;
 8006f8c:	bf00      	nop
 8006f8e:	e000      	b.n	8006f92 <xTaskGenericNotify+0xe2>

					break;
 8006f90:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006f92:	7ffb      	ldrb	r3, [r7, #31]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d13a      	bne.n	800700e <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f98:	6a3b      	ldr	r3, [r7, #32]
 8006f9a:	3304      	adds	r3, #4
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7fe fb51 	bl	8005644 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa6:	4b1d      	ldr	r3, [pc, #116]	; (800701c <xTaskGenericNotify+0x16c>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d903      	bls.n	8006fb6 <xTaskGenericNotify+0x106>
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb2:	4a1a      	ldr	r2, [pc, #104]	; (800701c <xTaskGenericNotify+0x16c>)
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fba:	4613      	mov	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4a17      	ldr	r2, [pc, #92]	; (8007020 <xTaskGenericNotify+0x170>)
 8006fc4:	441a      	add	r2, r3
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	3304      	adds	r3, #4
 8006fca:	4619      	mov	r1, r3
 8006fcc:	4610      	mov	r0, r2
 8006fce:	f7fe fadc 	bl	800558a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00a      	beq.n	8006ff0 <xTaskGenericNotify+0x140>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	613b      	str	r3, [r7, #16]
}
 8006fec:	bf00      	nop
 8006fee:	e7fe      	b.n	8006fee <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ff0:	6a3b      	ldr	r3, [r7, #32]
 8006ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff4:	4b0b      	ldr	r3, [pc, #44]	; (8007024 <xTaskGenericNotify+0x174>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d907      	bls.n	800700e <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006ffe:	4b0a      	ldr	r3, [pc, #40]	; (8007028 <xTaskGenericNotify+0x178>)
 8007000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007004:	601a      	str	r2, [r3, #0]
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800700e:	f000 fd09 	bl	8007a24 <vPortExitCritical>

		return xReturn;
 8007012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007014:	4618      	mov	r0, r3
 8007016:	3728      	adds	r7, #40	; 0x28
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	2000149c 	.word	0x2000149c
 8007020:	20000fc4 	.word	0x20000fc4
 8007024:	20000fc0 	.word	0x20000fc0
 8007028:	e000ed04 	.word	0xe000ed04

0800702c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007036:	4b21      	ldr	r3, [pc, #132]	; (80070bc <prvAddCurrentTaskToDelayedList+0x90>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800703c:	4b20      	ldr	r3, [pc, #128]	; (80070c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	3304      	adds	r3, #4
 8007042:	4618      	mov	r0, r3
 8007044:	f7fe fafe 	bl	8005644 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704e:	d10a      	bne.n	8007066 <prvAddCurrentTaskToDelayedList+0x3a>
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d007      	beq.n	8007066 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007056:	4b1a      	ldr	r3, [pc, #104]	; (80070c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3304      	adds	r3, #4
 800705c:	4619      	mov	r1, r3
 800705e:	4819      	ldr	r0, [pc, #100]	; (80070c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007060:	f7fe fa93 	bl	800558a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007064:	e026      	b.n	80070b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4413      	add	r3, r2
 800706c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800706e:	4b14      	ldr	r3, [pc, #80]	; (80070c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	429a      	cmp	r2, r3
 800707c:	d209      	bcs.n	8007092 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800707e:	4b12      	ldr	r3, [pc, #72]	; (80070c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	4b0f      	ldr	r3, [pc, #60]	; (80070c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	3304      	adds	r3, #4
 8007088:	4619      	mov	r1, r3
 800708a:	4610      	mov	r0, r2
 800708c:	f7fe faa1 	bl	80055d2 <vListInsert>
}
 8007090:	e010      	b.n	80070b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007092:	4b0e      	ldr	r3, [pc, #56]	; (80070cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	4b0a      	ldr	r3, [pc, #40]	; (80070c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	3304      	adds	r3, #4
 800709c:	4619      	mov	r1, r3
 800709e:	4610      	mov	r0, r2
 80070a0:	f7fe fa97 	bl	80055d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80070a4:	4b0a      	ldr	r3, [pc, #40]	; (80070d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d202      	bcs.n	80070b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80070ae:	4a08      	ldr	r2, [pc, #32]	; (80070d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	6013      	str	r3, [r2, #0]
}
 80070b4:	bf00      	nop
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	20001498 	.word	0x20001498
 80070c0:	20000fc0 	.word	0x20000fc0
 80070c4:	20001480 	.word	0x20001480
 80070c8:	20001450 	.word	0x20001450
 80070cc:	2000144c 	.word	0x2000144c
 80070d0:	200014b4 	.word	0x200014b4

080070d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b08a      	sub	sp, #40	; 0x28
 80070d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80070da:	2300      	movs	r3, #0
 80070dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80070de:	f000 fb07 	bl	80076f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80070e2:	4b1c      	ldr	r3, [pc, #112]	; (8007154 <xTimerCreateTimerTask+0x80>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d021      	beq.n	800712e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80070ea:	2300      	movs	r3, #0
 80070ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80070ee:	2300      	movs	r3, #0
 80070f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80070f2:	1d3a      	adds	r2, r7, #4
 80070f4:	f107 0108 	add.w	r1, r7, #8
 80070f8:	f107 030c 	add.w	r3, r7, #12
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7fe f9fd 	bl	80054fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007102:	6879      	ldr	r1, [r7, #4]
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	9202      	str	r2, [sp, #8]
 800710a:	9301      	str	r3, [sp, #4]
 800710c:	2302      	movs	r3, #2
 800710e:	9300      	str	r3, [sp, #0]
 8007110:	2300      	movs	r3, #0
 8007112:	460a      	mov	r2, r1
 8007114:	4910      	ldr	r1, [pc, #64]	; (8007158 <xTimerCreateTimerTask+0x84>)
 8007116:	4811      	ldr	r0, [pc, #68]	; (800715c <xTimerCreateTimerTask+0x88>)
 8007118:	f7fe ffaa 	bl	8006070 <xTaskCreateStatic>
 800711c:	4603      	mov	r3, r0
 800711e:	4a10      	ldr	r2, [pc, #64]	; (8007160 <xTimerCreateTimerTask+0x8c>)
 8007120:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007122:	4b0f      	ldr	r3, [pc, #60]	; (8007160 <xTimerCreateTimerTask+0x8c>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d001      	beq.n	800712e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800712a:	2301      	movs	r3, #1
 800712c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10a      	bne.n	800714a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007138:	f383 8811 	msr	BASEPRI, r3
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	613b      	str	r3, [r7, #16]
}
 8007146:	bf00      	nop
 8007148:	e7fe      	b.n	8007148 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800714a:	697b      	ldr	r3, [r7, #20]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3718      	adds	r7, #24
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	200014f0 	.word	0x200014f0
 8007158:	08008204 	.word	0x08008204
 800715c:	08007299 	.word	0x08007299
 8007160:	200014f4 	.word	0x200014f4

08007164 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b08a      	sub	sp, #40	; 0x28
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
 8007170:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007172:	2300      	movs	r3, #0
 8007174:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10a      	bne.n	8007192 <xTimerGenericCommand+0x2e>
	__asm volatile
 800717c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007180:	f383 8811 	msr	BASEPRI, r3
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	623b      	str	r3, [r7, #32]
}
 800718e:	bf00      	nop
 8007190:	e7fe      	b.n	8007190 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007192:	4b1a      	ldr	r3, [pc, #104]	; (80071fc <xTimerGenericCommand+0x98>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d02a      	beq.n	80071f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	2b05      	cmp	r3, #5
 80071aa:	dc18      	bgt.n	80071de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80071ac:	f7ff fda8 	bl	8006d00 <xTaskGetSchedulerState>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d109      	bne.n	80071ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80071b6:	4b11      	ldr	r3, [pc, #68]	; (80071fc <xTimerGenericCommand+0x98>)
 80071b8:	6818      	ldr	r0, [r3, #0]
 80071ba:	f107 0110 	add.w	r1, r7, #16
 80071be:	2300      	movs	r3, #0
 80071c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071c2:	f7fe fb6d 	bl	80058a0 <xQueueGenericSend>
 80071c6:	6278      	str	r0, [r7, #36]	; 0x24
 80071c8:	e012      	b.n	80071f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80071ca:	4b0c      	ldr	r3, [pc, #48]	; (80071fc <xTimerGenericCommand+0x98>)
 80071cc:	6818      	ldr	r0, [r3, #0]
 80071ce:	f107 0110 	add.w	r1, r7, #16
 80071d2:	2300      	movs	r3, #0
 80071d4:	2200      	movs	r2, #0
 80071d6:	f7fe fb63 	bl	80058a0 <xQueueGenericSend>
 80071da:	6278      	str	r0, [r7, #36]	; 0x24
 80071dc:	e008      	b.n	80071f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80071de:	4b07      	ldr	r3, [pc, #28]	; (80071fc <xTimerGenericCommand+0x98>)
 80071e0:	6818      	ldr	r0, [r3, #0]
 80071e2:	f107 0110 	add.w	r1, r7, #16
 80071e6:	2300      	movs	r3, #0
 80071e8:	683a      	ldr	r2, [r7, #0]
 80071ea:	f7fe fc57 	bl	8005a9c <xQueueGenericSendFromISR>
 80071ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80071f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3728      	adds	r7, #40	; 0x28
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	200014f0 	.word	0x200014f0

08007200 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b088      	sub	sp, #32
 8007204:	af02      	add	r7, sp, #8
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800720a:	4b22      	ldr	r3, [pc, #136]	; (8007294 <prvProcessExpiredTimer+0x94>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	3304      	adds	r3, #4
 8007218:	4618      	mov	r0, r3
 800721a:	f7fe fa13 	bl	8005644 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007224:	f003 0304 	and.w	r3, r3, #4
 8007228:	2b00      	cmp	r3, #0
 800722a:	d022      	beq.n	8007272 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	699a      	ldr	r2, [r3, #24]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	18d1      	adds	r1, r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	6978      	ldr	r0, [r7, #20]
 800723a:	f000 f8d1 	bl	80073e0 <prvInsertTimerInActiveList>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d01f      	beq.n	8007284 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007244:	2300      	movs	r3, #0
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	2300      	movs	r3, #0
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	2100      	movs	r1, #0
 800724e:	6978      	ldr	r0, [r7, #20]
 8007250:	f7ff ff88 	bl	8007164 <xTimerGenericCommand>
 8007254:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d113      	bne.n	8007284 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800725c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007260:	f383 8811 	msr	BASEPRI, r3
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	60fb      	str	r3, [r7, #12]
}
 800726e:	bf00      	nop
 8007270:	e7fe      	b.n	8007270 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007278:	f023 0301 	bic.w	r3, r3, #1
 800727c:	b2da      	uxtb	r2, r3
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	6a1b      	ldr	r3, [r3, #32]
 8007288:	6978      	ldr	r0, [r7, #20]
 800728a:	4798      	blx	r3
}
 800728c:	bf00      	nop
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	200014e8 	.word	0x200014e8

08007298 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072a0:	f107 0308 	add.w	r3, r7, #8
 80072a4:	4618      	mov	r0, r3
 80072a6:	f000 f857 	bl	8007358 <prvGetNextExpireTime>
 80072aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	4619      	mov	r1, r3
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f000 f803 	bl	80072bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80072b6:	f000 f8d5 	bl	8007464 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072ba:	e7f1      	b.n	80072a0 <prvTimerTask+0x8>

080072bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80072c6:	f7ff f92f 	bl	8006528 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072ca:	f107 0308 	add.w	r3, r7, #8
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 f866 	bl	80073a0 <prvSampleTimeNow>
 80072d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d130      	bne.n	800733e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d10a      	bne.n	80072f8 <prvProcessTimerOrBlockTask+0x3c>
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d806      	bhi.n	80072f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80072ea:	f7ff f92b 	bl	8006544 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80072ee:	68f9      	ldr	r1, [r7, #12]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7ff ff85 	bl	8007200 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80072f6:	e024      	b.n	8007342 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d008      	beq.n	8007310 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80072fe:	4b13      	ldr	r3, [pc, #76]	; (800734c <prvProcessTimerOrBlockTask+0x90>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <prvProcessTimerOrBlockTask+0x50>
 8007308:	2301      	movs	r3, #1
 800730a:	e000      	b.n	800730e <prvProcessTimerOrBlockTask+0x52>
 800730c:	2300      	movs	r3, #0
 800730e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007310:	4b0f      	ldr	r3, [pc, #60]	; (8007350 <prvProcessTimerOrBlockTask+0x94>)
 8007312:	6818      	ldr	r0, [r3, #0]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	4619      	mov	r1, r3
 800731e:	f7fe fe73 	bl	8006008 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007322:	f7ff f90f 	bl	8006544 <xTaskResumeAll>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10a      	bne.n	8007342 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800732c:	4b09      	ldr	r3, [pc, #36]	; (8007354 <prvProcessTimerOrBlockTask+0x98>)
 800732e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	f3bf 8f6f 	isb	sy
}
 800733c:	e001      	b.n	8007342 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800733e:	f7ff f901 	bl	8006544 <xTaskResumeAll>
}
 8007342:	bf00      	nop
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	200014ec 	.word	0x200014ec
 8007350:	200014f0 	.word	0x200014f0
 8007354:	e000ed04 	.word	0xe000ed04

08007358 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007360:	4b0e      	ldr	r3, [pc, #56]	; (800739c <prvGetNextExpireTime+0x44>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d101      	bne.n	800736e <prvGetNextExpireTime+0x16>
 800736a:	2201      	movs	r2, #1
 800736c:	e000      	b.n	8007370 <prvGetNextExpireTime+0x18>
 800736e:	2200      	movs	r2, #0
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d105      	bne.n	8007388 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800737c:	4b07      	ldr	r3, [pc, #28]	; (800739c <prvGetNextExpireTime+0x44>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	60fb      	str	r3, [r7, #12]
 8007386:	e001      	b.n	800738c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007388:	2300      	movs	r3, #0
 800738a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800738c:	68fb      	ldr	r3, [r7, #12]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3714      	adds	r7, #20
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	200014e8 	.word	0x200014e8

080073a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80073a8:	f7ff f96a 	bl	8006680 <xTaskGetTickCount>
 80073ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80073ae:	4b0b      	ldr	r3, [pc, #44]	; (80073dc <prvSampleTimeNow+0x3c>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d205      	bcs.n	80073c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80073b8:	f000 f936 	bl	8007628 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	601a      	str	r2, [r3, #0]
 80073c2:	e002      	b.n	80073ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80073ca:	4a04      	ldr	r2, [pc, #16]	; (80073dc <prvSampleTimeNow+0x3c>)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80073d0:	68fb      	ldr	r3, [r7, #12]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	200014f8 	.word	0x200014f8

080073e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
 80073ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80073ee:	2300      	movs	r3, #0
 80073f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	429a      	cmp	r2, r3
 8007404:	d812      	bhi.n	800742c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	1ad2      	subs	r2, r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	429a      	cmp	r2, r3
 8007412:	d302      	bcc.n	800741a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007414:	2301      	movs	r3, #1
 8007416:	617b      	str	r3, [r7, #20]
 8007418:	e01b      	b.n	8007452 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800741a:	4b10      	ldr	r3, [pc, #64]	; (800745c <prvInsertTimerInActiveList+0x7c>)
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3304      	adds	r3, #4
 8007422:	4619      	mov	r1, r3
 8007424:	4610      	mov	r0, r2
 8007426:	f7fe f8d4 	bl	80055d2 <vListInsert>
 800742a:	e012      	b.n	8007452 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	429a      	cmp	r2, r3
 8007432:	d206      	bcs.n	8007442 <prvInsertTimerInActiveList+0x62>
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	429a      	cmp	r2, r3
 800743a:	d302      	bcc.n	8007442 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800743c:	2301      	movs	r3, #1
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	e007      	b.n	8007452 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007442:	4b07      	ldr	r3, [pc, #28]	; (8007460 <prvInsertTimerInActiveList+0x80>)
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	3304      	adds	r3, #4
 800744a:	4619      	mov	r1, r3
 800744c:	4610      	mov	r0, r2
 800744e:	f7fe f8c0 	bl	80055d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007452:	697b      	ldr	r3, [r7, #20]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3718      	adds	r7, #24
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	200014ec 	.word	0x200014ec
 8007460:	200014e8 	.word	0x200014e8

08007464 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b08e      	sub	sp, #56	; 0x38
 8007468:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800746a:	e0ca      	b.n	8007602 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	da18      	bge.n	80074a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007472:	1d3b      	adds	r3, r7, #4
 8007474:	3304      	adds	r3, #4
 8007476:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10a      	bne.n	8007494 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	61fb      	str	r3, [r7, #28]
}
 8007490:	bf00      	nop
 8007492:	e7fe      	b.n	8007492 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800749a:	6850      	ldr	r0, [r2, #4]
 800749c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800749e:	6892      	ldr	r2, [r2, #8]
 80074a0:	4611      	mov	r1, r2
 80074a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f2c0 80ab 	blt.w	8007602 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80074b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b2:	695b      	ldr	r3, [r3, #20]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d004      	beq.n	80074c2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ba:	3304      	adds	r3, #4
 80074bc:	4618      	mov	r0, r3
 80074be:	f7fe f8c1 	bl	8005644 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074c2:	463b      	mov	r3, r7
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7ff ff6b 	bl	80073a0 <prvSampleTimeNow>
 80074ca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b09      	cmp	r3, #9
 80074d0:	f200 8096 	bhi.w	8007600 <prvProcessReceivedCommands+0x19c>
 80074d4:	a201      	add	r2, pc, #4	; (adr r2, 80074dc <prvProcessReceivedCommands+0x78>)
 80074d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074da:	bf00      	nop
 80074dc:	08007505 	.word	0x08007505
 80074e0:	08007505 	.word	0x08007505
 80074e4:	08007505 	.word	0x08007505
 80074e8:	08007579 	.word	0x08007579
 80074ec:	0800758d 	.word	0x0800758d
 80074f0:	080075d7 	.word	0x080075d7
 80074f4:	08007505 	.word	0x08007505
 80074f8:	08007505 	.word	0x08007505
 80074fc:	08007579 	.word	0x08007579
 8007500:	0800758d 	.word	0x0800758d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007506:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800750a:	f043 0301 	orr.w	r3, r3, #1
 800750e:	b2da      	uxtb	r2, r3
 8007510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007512:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	18d1      	adds	r1, r2, r3
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007524:	f7ff ff5c 	bl	80073e0 <prvInsertTimerInActiveList>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d069      	beq.n	8007602 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800752e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007534:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007538:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800753c:	f003 0304 	and.w	r3, r3, #4
 8007540:	2b00      	cmp	r3, #0
 8007542:	d05e      	beq.n	8007602 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	441a      	add	r2, r3
 800754c:	2300      	movs	r3, #0
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	2300      	movs	r3, #0
 8007552:	2100      	movs	r1, #0
 8007554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007556:	f7ff fe05 	bl	8007164 <xTimerGenericCommand>
 800755a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d14f      	bne.n	8007602 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	61bb      	str	r3, [r7, #24]
}
 8007574:	bf00      	nop
 8007576:	e7fe      	b.n	8007576 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800757e:	f023 0301 	bic.w	r3, r3, #1
 8007582:	b2da      	uxtb	r2, r3
 8007584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007586:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800758a:	e03a      	b.n	8007602 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800758c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007592:	f043 0301 	orr.w	r3, r3, #1
 8007596:	b2da      	uxtb	r2, r3
 8007598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80075a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10a      	bne.n	80075c2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80075ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b0:	f383 8811 	msr	BASEPRI, r3
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	617b      	str	r3, [r7, #20]
}
 80075be:	bf00      	nop
 80075c0:	e7fe      	b.n	80075c0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80075c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c4:	699a      	ldr	r2, [r3, #24]
 80075c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c8:	18d1      	adds	r1, r2, r3
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075d0:	f7ff ff06 	bl	80073e0 <prvInsertTimerInActiveList>
					break;
 80075d4:	e015      	b.n	8007602 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80075d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075dc:	f003 0302 	and.w	r3, r3, #2
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d103      	bne.n	80075ec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80075e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075e6:	f000 fbdb 	bl	8007da0 <vPortFree>
 80075ea:	e00a      	b.n	8007602 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075f2:	f023 0301 	bic.w	r3, r3, #1
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80075fe:	e000      	b.n	8007602 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007600:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007602:	4b08      	ldr	r3, [pc, #32]	; (8007624 <prvProcessReceivedCommands+0x1c0>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	1d39      	adds	r1, r7, #4
 8007608:	2200      	movs	r2, #0
 800760a:	4618      	mov	r0, r3
 800760c:	f7fe fae2 	bl	8005bd4 <xQueueReceive>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	f47f af2a 	bne.w	800746c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007618:	bf00      	nop
 800761a:	bf00      	nop
 800761c:	3730      	adds	r7, #48	; 0x30
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	200014f0 	.word	0x200014f0

08007628 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b088      	sub	sp, #32
 800762c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800762e:	e048      	b.n	80076c2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007630:	4b2d      	ldr	r3, [pc, #180]	; (80076e8 <prvSwitchTimerLists+0xc0>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800763a:	4b2b      	ldr	r3, [pc, #172]	; (80076e8 <prvSwitchTimerLists+0xc0>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	3304      	adds	r3, #4
 8007648:	4618      	mov	r0, r3
 800764a:	f7fd fffb 	bl	8005644 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800765c:	f003 0304 	and.w	r3, r3, #4
 8007660:	2b00      	cmp	r3, #0
 8007662:	d02e      	beq.n	80076c2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	693a      	ldr	r2, [r7, #16]
 800766a:	4413      	add	r3, r2
 800766c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	429a      	cmp	r2, r3
 8007674:	d90e      	bls.n	8007694 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007682:	4b19      	ldr	r3, [pc, #100]	; (80076e8 <prvSwitchTimerLists+0xc0>)
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	3304      	adds	r3, #4
 800768a:	4619      	mov	r1, r3
 800768c:	4610      	mov	r0, r2
 800768e:	f7fd ffa0 	bl	80055d2 <vListInsert>
 8007692:	e016      	b.n	80076c2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007694:	2300      	movs	r3, #0
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	2300      	movs	r3, #0
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	2100      	movs	r1, #0
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f7ff fd60 	bl	8007164 <xTimerGenericCommand>
 80076a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10a      	bne.n	80076c2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80076ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	603b      	str	r3, [r7, #0]
}
 80076be:	bf00      	nop
 80076c0:	e7fe      	b.n	80076c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076c2:	4b09      	ldr	r3, [pc, #36]	; (80076e8 <prvSwitchTimerLists+0xc0>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1b1      	bne.n	8007630 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80076cc:	4b06      	ldr	r3, [pc, #24]	; (80076e8 <prvSwitchTimerLists+0xc0>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80076d2:	4b06      	ldr	r3, [pc, #24]	; (80076ec <prvSwitchTimerLists+0xc4>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a04      	ldr	r2, [pc, #16]	; (80076e8 <prvSwitchTimerLists+0xc0>)
 80076d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80076da:	4a04      	ldr	r2, [pc, #16]	; (80076ec <prvSwitchTimerLists+0xc4>)
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	6013      	str	r3, [r2, #0]
}
 80076e0:	bf00      	nop
 80076e2:	3718      	adds	r7, #24
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	200014e8 	.word	0x200014e8
 80076ec:	200014ec 	.word	0x200014ec

080076f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80076f6:	f000 f965 	bl	80079c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80076fa:	4b15      	ldr	r3, [pc, #84]	; (8007750 <prvCheckForValidListAndQueue+0x60>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d120      	bne.n	8007744 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007702:	4814      	ldr	r0, [pc, #80]	; (8007754 <prvCheckForValidListAndQueue+0x64>)
 8007704:	f7fd ff14 	bl	8005530 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007708:	4813      	ldr	r0, [pc, #76]	; (8007758 <prvCheckForValidListAndQueue+0x68>)
 800770a:	f7fd ff11 	bl	8005530 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800770e:	4b13      	ldr	r3, [pc, #76]	; (800775c <prvCheckForValidListAndQueue+0x6c>)
 8007710:	4a10      	ldr	r2, [pc, #64]	; (8007754 <prvCheckForValidListAndQueue+0x64>)
 8007712:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007714:	4b12      	ldr	r3, [pc, #72]	; (8007760 <prvCheckForValidListAndQueue+0x70>)
 8007716:	4a10      	ldr	r2, [pc, #64]	; (8007758 <prvCheckForValidListAndQueue+0x68>)
 8007718:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800771a:	2300      	movs	r3, #0
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	4b11      	ldr	r3, [pc, #68]	; (8007764 <prvCheckForValidListAndQueue+0x74>)
 8007720:	4a11      	ldr	r2, [pc, #68]	; (8007768 <prvCheckForValidListAndQueue+0x78>)
 8007722:	2110      	movs	r1, #16
 8007724:	200a      	movs	r0, #10
 8007726:	f7fe f81f 	bl	8005768 <xQueueGenericCreateStatic>
 800772a:	4603      	mov	r3, r0
 800772c:	4a08      	ldr	r2, [pc, #32]	; (8007750 <prvCheckForValidListAndQueue+0x60>)
 800772e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007730:	4b07      	ldr	r3, [pc, #28]	; (8007750 <prvCheckForValidListAndQueue+0x60>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d005      	beq.n	8007744 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007738:	4b05      	ldr	r3, [pc, #20]	; (8007750 <prvCheckForValidListAndQueue+0x60>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	490b      	ldr	r1, [pc, #44]	; (800776c <prvCheckForValidListAndQueue+0x7c>)
 800773e:	4618      	mov	r0, r3
 8007740:	f7fe fc38 	bl	8005fb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007744:	f000 f96e 	bl	8007a24 <vPortExitCritical>
}
 8007748:	bf00      	nop
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	200014f0 	.word	0x200014f0
 8007754:	200014c0 	.word	0x200014c0
 8007758:	200014d4 	.word	0x200014d4
 800775c:	200014e8 	.word	0x200014e8
 8007760:	200014ec 	.word	0x200014ec
 8007764:	2000159c 	.word	0x2000159c
 8007768:	200014fc 	.word	0x200014fc
 800776c:	0800820c 	.word	0x0800820c

08007770 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	3b04      	subs	r3, #4
 8007780:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007788:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	3b04      	subs	r3, #4
 800778e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	f023 0201 	bic.w	r2, r3, #1
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	3b04      	subs	r3, #4
 800779e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077a0:	4a0c      	ldr	r2, [pc, #48]	; (80077d4 <pxPortInitialiseStack+0x64>)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	3b14      	subs	r3, #20
 80077aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	3b04      	subs	r3, #4
 80077b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f06f 0202 	mvn.w	r2, #2
 80077be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	3b20      	subs	r3, #32
 80077c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80077c6:	68fb      	ldr	r3, [r7, #12]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	080077d9 	.word	0x080077d9

080077d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80077de:	2300      	movs	r3, #0
 80077e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80077e2:	4b12      	ldr	r3, [pc, #72]	; (800782c <prvTaskExitError+0x54>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ea:	d00a      	beq.n	8007802 <prvTaskExitError+0x2a>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	60fb      	str	r3, [r7, #12]
}
 80077fe:	bf00      	nop
 8007800:	e7fe      	b.n	8007800 <prvTaskExitError+0x28>
	__asm volatile
 8007802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	60bb      	str	r3, [r7, #8]
}
 8007814:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007816:	bf00      	nop
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d0fc      	beq.n	8007818 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800781e:	bf00      	nop
 8007820:	bf00      	nop
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr
 800782c:	20000010 	.word	0x20000010

08007830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007830:	4b07      	ldr	r3, [pc, #28]	; (8007850 <pxCurrentTCBConst2>)
 8007832:	6819      	ldr	r1, [r3, #0]
 8007834:	6808      	ldr	r0, [r1, #0]
 8007836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800783a:	f380 8809 	msr	PSP, r0
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f04f 0000 	mov.w	r0, #0
 8007846:	f380 8811 	msr	BASEPRI, r0
 800784a:	4770      	bx	lr
 800784c:	f3af 8000 	nop.w

08007850 <pxCurrentTCBConst2>:
 8007850:	20000fc0 	.word	0x20000fc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007854:	bf00      	nop
 8007856:	bf00      	nop

08007858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007858:	4808      	ldr	r0, [pc, #32]	; (800787c <prvPortStartFirstTask+0x24>)
 800785a:	6800      	ldr	r0, [r0, #0]
 800785c:	6800      	ldr	r0, [r0, #0]
 800785e:	f380 8808 	msr	MSP, r0
 8007862:	f04f 0000 	mov.w	r0, #0
 8007866:	f380 8814 	msr	CONTROL, r0
 800786a:	b662      	cpsie	i
 800786c:	b661      	cpsie	f
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	df00      	svc	0
 8007878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800787a:	bf00      	nop
 800787c:	e000ed08 	.word	0xe000ed08

08007880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007886:	4b46      	ldr	r3, [pc, #280]	; (80079a0 <xPortStartScheduler+0x120>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a46      	ldr	r2, [pc, #280]	; (80079a4 <xPortStartScheduler+0x124>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d10a      	bne.n	80078a6 <xPortStartScheduler+0x26>
	__asm volatile
 8007890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	613b      	str	r3, [r7, #16]
}
 80078a2:	bf00      	nop
 80078a4:	e7fe      	b.n	80078a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80078a6:	4b3e      	ldr	r3, [pc, #248]	; (80079a0 <xPortStartScheduler+0x120>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a3f      	ldr	r2, [pc, #252]	; (80079a8 <xPortStartScheduler+0x128>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d10a      	bne.n	80078c6 <xPortStartScheduler+0x46>
	__asm volatile
 80078b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b4:	f383 8811 	msr	BASEPRI, r3
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	60fb      	str	r3, [r7, #12]
}
 80078c2:	bf00      	nop
 80078c4:	e7fe      	b.n	80078c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078c6:	4b39      	ldr	r3, [pc, #228]	; (80079ac <xPortStartScheduler+0x12c>)
 80078c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	22ff      	movs	r2, #255	; 0xff
 80078d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078e0:	78fb      	ldrb	r3, [r7, #3]
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80078e8:	b2da      	uxtb	r2, r3
 80078ea:	4b31      	ldr	r3, [pc, #196]	; (80079b0 <xPortStartScheduler+0x130>)
 80078ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80078ee:	4b31      	ldr	r3, [pc, #196]	; (80079b4 <xPortStartScheduler+0x134>)
 80078f0:	2207      	movs	r2, #7
 80078f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078f4:	e009      	b.n	800790a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80078f6:	4b2f      	ldr	r3, [pc, #188]	; (80079b4 <xPortStartScheduler+0x134>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	3b01      	subs	r3, #1
 80078fc:	4a2d      	ldr	r2, [pc, #180]	; (80079b4 <xPortStartScheduler+0x134>)
 80078fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007900:	78fb      	ldrb	r3, [r7, #3]
 8007902:	b2db      	uxtb	r3, r3
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	b2db      	uxtb	r3, r3
 8007908:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800790a:	78fb      	ldrb	r3, [r7, #3]
 800790c:	b2db      	uxtb	r3, r3
 800790e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007912:	2b80      	cmp	r3, #128	; 0x80
 8007914:	d0ef      	beq.n	80078f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007916:	4b27      	ldr	r3, [pc, #156]	; (80079b4 <xPortStartScheduler+0x134>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f1c3 0307 	rsb	r3, r3, #7
 800791e:	2b04      	cmp	r3, #4
 8007920:	d00a      	beq.n	8007938 <xPortStartScheduler+0xb8>
	__asm volatile
 8007922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007926:	f383 8811 	msr	BASEPRI, r3
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	60bb      	str	r3, [r7, #8]
}
 8007934:	bf00      	nop
 8007936:	e7fe      	b.n	8007936 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007938:	4b1e      	ldr	r3, [pc, #120]	; (80079b4 <xPortStartScheduler+0x134>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	021b      	lsls	r3, r3, #8
 800793e:	4a1d      	ldr	r2, [pc, #116]	; (80079b4 <xPortStartScheduler+0x134>)
 8007940:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007942:	4b1c      	ldr	r3, [pc, #112]	; (80079b4 <xPortStartScheduler+0x134>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800794a:	4a1a      	ldr	r2, [pc, #104]	; (80079b4 <xPortStartScheduler+0x134>)
 800794c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	b2da      	uxtb	r2, r3
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007956:	4b18      	ldr	r3, [pc, #96]	; (80079b8 <xPortStartScheduler+0x138>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a17      	ldr	r2, [pc, #92]	; (80079b8 <xPortStartScheduler+0x138>)
 800795c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007960:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007962:	4b15      	ldr	r3, [pc, #84]	; (80079b8 <xPortStartScheduler+0x138>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a14      	ldr	r2, [pc, #80]	; (80079b8 <xPortStartScheduler+0x138>)
 8007968:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800796c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800796e:	f000 f8dd 	bl	8007b2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007972:	4b12      	ldr	r3, [pc, #72]	; (80079bc <xPortStartScheduler+0x13c>)
 8007974:	2200      	movs	r2, #0
 8007976:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007978:	f000 f8fc 	bl	8007b74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800797c:	4b10      	ldr	r3, [pc, #64]	; (80079c0 <xPortStartScheduler+0x140>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a0f      	ldr	r2, [pc, #60]	; (80079c0 <xPortStartScheduler+0x140>)
 8007982:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007986:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007988:	f7ff ff66 	bl	8007858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800798c:	f7fe ff42 	bl	8006814 <vTaskSwitchContext>
	prvTaskExitError();
 8007990:	f7ff ff22 	bl	80077d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3718      	adds	r7, #24
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	e000ed00 	.word	0xe000ed00
 80079a4:	410fc271 	.word	0x410fc271
 80079a8:	410fc270 	.word	0x410fc270
 80079ac:	e000e400 	.word	0xe000e400
 80079b0:	200015ec 	.word	0x200015ec
 80079b4:	200015f0 	.word	0x200015f0
 80079b8:	e000ed20 	.word	0xe000ed20
 80079bc:	20000010 	.word	0x20000010
 80079c0:	e000ef34 	.word	0xe000ef34

080079c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
	__asm volatile
 80079ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ce:	f383 8811 	msr	BASEPRI, r3
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	607b      	str	r3, [r7, #4]
}
 80079dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80079de:	4b0f      	ldr	r3, [pc, #60]	; (8007a1c <vPortEnterCritical+0x58>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	3301      	adds	r3, #1
 80079e4:	4a0d      	ldr	r2, [pc, #52]	; (8007a1c <vPortEnterCritical+0x58>)
 80079e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80079e8:	4b0c      	ldr	r3, [pc, #48]	; (8007a1c <vPortEnterCritical+0x58>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d10f      	bne.n	8007a10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80079f0:	4b0b      	ldr	r3, [pc, #44]	; (8007a20 <vPortEnterCritical+0x5c>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00a      	beq.n	8007a10 <vPortEnterCritical+0x4c>
	__asm volatile
 80079fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fe:	f383 8811 	msr	BASEPRI, r3
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	603b      	str	r3, [r7, #0]
}
 8007a0c:	bf00      	nop
 8007a0e:	e7fe      	b.n	8007a0e <vPortEnterCritical+0x4a>
	}
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	20000010 	.word	0x20000010
 8007a20:	e000ed04 	.word	0xe000ed04

08007a24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a2a:	4b12      	ldr	r3, [pc, #72]	; (8007a74 <vPortExitCritical+0x50>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10a      	bne.n	8007a48 <vPortExitCritical+0x24>
	__asm volatile
 8007a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a36:	f383 8811 	msr	BASEPRI, r3
 8007a3a:	f3bf 8f6f 	isb	sy
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	607b      	str	r3, [r7, #4]
}
 8007a44:	bf00      	nop
 8007a46:	e7fe      	b.n	8007a46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a48:	4b0a      	ldr	r3, [pc, #40]	; (8007a74 <vPortExitCritical+0x50>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	4a09      	ldr	r2, [pc, #36]	; (8007a74 <vPortExitCritical+0x50>)
 8007a50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a52:	4b08      	ldr	r3, [pc, #32]	; (8007a74 <vPortExitCritical+0x50>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d105      	bne.n	8007a66 <vPortExitCritical+0x42>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	f383 8811 	msr	BASEPRI, r3
}
 8007a64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a66:	bf00      	nop
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	20000010 	.word	0x20000010
	...

08007a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a80:	f3ef 8009 	mrs	r0, PSP
 8007a84:	f3bf 8f6f 	isb	sy
 8007a88:	4b15      	ldr	r3, [pc, #84]	; (8007ae0 <pxCurrentTCBConst>)
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	f01e 0f10 	tst.w	lr, #16
 8007a90:	bf08      	it	eq
 8007a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a9a:	6010      	str	r0, [r2, #0]
 8007a9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007aa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007aa4:	f380 8811 	msr	BASEPRI, r0
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	f7fe feb0 	bl	8006814 <vTaskSwitchContext>
 8007ab4:	f04f 0000 	mov.w	r0, #0
 8007ab8:	f380 8811 	msr	BASEPRI, r0
 8007abc:	bc09      	pop	{r0, r3}
 8007abe:	6819      	ldr	r1, [r3, #0]
 8007ac0:	6808      	ldr	r0, [r1, #0]
 8007ac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac6:	f01e 0f10 	tst.w	lr, #16
 8007aca:	bf08      	it	eq
 8007acc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ad0:	f380 8809 	msr	PSP, r0
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	f3af 8000 	nop.w

08007ae0 <pxCurrentTCBConst>:
 8007ae0:	20000fc0 	.word	0x20000fc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ae4:	bf00      	nop
 8007ae6:	bf00      	nop

08007ae8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
	__asm volatile
 8007aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	607b      	str	r3, [r7, #4]
}
 8007b00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b02:	f7fe fdcd 	bl	80066a0 <xTaskIncrementTick>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d003      	beq.n	8007b14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b0c:	4b06      	ldr	r3, [pc, #24]	; (8007b28 <xPortSysTickHandler+0x40>)
 8007b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	2300      	movs	r3, #0
 8007b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	f383 8811 	msr	BASEPRI, r3
}
 8007b1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b20:	bf00      	nop
 8007b22:	3708      	adds	r7, #8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	e000ed04 	.word	0xe000ed04

08007b2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b30:	4b0b      	ldr	r3, [pc, #44]	; (8007b60 <vPortSetupTimerInterrupt+0x34>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b36:	4b0b      	ldr	r3, [pc, #44]	; (8007b64 <vPortSetupTimerInterrupt+0x38>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b3c:	4b0a      	ldr	r3, [pc, #40]	; (8007b68 <vPortSetupTimerInterrupt+0x3c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a0a      	ldr	r2, [pc, #40]	; (8007b6c <vPortSetupTimerInterrupt+0x40>)
 8007b42:	fba2 2303 	umull	r2, r3, r2, r3
 8007b46:	099b      	lsrs	r3, r3, #6
 8007b48:	4a09      	ldr	r2, [pc, #36]	; (8007b70 <vPortSetupTimerInterrupt+0x44>)
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b4e:	4b04      	ldr	r3, [pc, #16]	; (8007b60 <vPortSetupTimerInterrupt+0x34>)
 8007b50:	2207      	movs	r2, #7
 8007b52:	601a      	str	r2, [r3, #0]
}
 8007b54:	bf00      	nop
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	e000e010 	.word	0xe000e010
 8007b64:	e000e018 	.word	0xe000e018
 8007b68:	20000004 	.word	0x20000004
 8007b6c:	10624dd3 	.word	0x10624dd3
 8007b70:	e000e014 	.word	0xe000e014

08007b74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b84 <vPortEnableVFP+0x10>
 8007b78:	6801      	ldr	r1, [r0, #0]
 8007b7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b7e:	6001      	str	r1, [r0, #0]
 8007b80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b82:	bf00      	nop
 8007b84:	e000ed88 	.word	0xe000ed88

08007b88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b8e:	f3ef 8305 	mrs	r3, IPSR
 8007b92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2b0f      	cmp	r3, #15
 8007b98:	d914      	bls.n	8007bc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b9a:	4a17      	ldr	r2, [pc, #92]	; (8007bf8 <vPortValidateInterruptPriority+0x70>)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ba4:	4b15      	ldr	r3, [pc, #84]	; (8007bfc <vPortValidateInterruptPriority+0x74>)
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	7afa      	ldrb	r2, [r7, #11]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d20a      	bcs.n	8007bc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	607b      	str	r3, [r7, #4]
}
 8007bc0:	bf00      	nop
 8007bc2:	e7fe      	b.n	8007bc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007bc4:	4b0e      	ldr	r3, [pc, #56]	; (8007c00 <vPortValidateInterruptPriority+0x78>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007bcc:	4b0d      	ldr	r3, [pc, #52]	; (8007c04 <vPortValidateInterruptPriority+0x7c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d90a      	bls.n	8007bea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	603b      	str	r3, [r7, #0]
}
 8007be6:	bf00      	nop
 8007be8:	e7fe      	b.n	8007be8 <vPortValidateInterruptPriority+0x60>
	}
 8007bea:	bf00      	nop
 8007bec:	3714      	adds	r7, #20
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	e000e3f0 	.word	0xe000e3f0
 8007bfc:	200015ec 	.word	0x200015ec
 8007c00:	e000ed0c 	.word	0xe000ed0c
 8007c04:	200015f0 	.word	0x200015f0

08007c08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08a      	sub	sp, #40	; 0x28
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c10:	2300      	movs	r3, #0
 8007c12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c14:	f7fe fc88 	bl	8006528 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c18:	4b5b      	ldr	r3, [pc, #364]	; (8007d88 <pvPortMalloc+0x180>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d101      	bne.n	8007c24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c20:	f000 f920 	bl	8007e64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c24:	4b59      	ldr	r3, [pc, #356]	; (8007d8c <pvPortMalloc+0x184>)
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f040 8093 	bne.w	8007d58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d01d      	beq.n	8007c74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007c38:	2208      	movs	r2, #8
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f003 0307 	and.w	r3, r3, #7
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d014      	beq.n	8007c74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f023 0307 	bic.w	r3, r3, #7
 8007c50:	3308      	adds	r3, #8
 8007c52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f003 0307 	and.w	r3, r3, #7
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00a      	beq.n	8007c74 <pvPortMalloc+0x6c>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	617b      	str	r3, [r7, #20]
}
 8007c70:	bf00      	nop
 8007c72:	e7fe      	b.n	8007c72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d06e      	beq.n	8007d58 <pvPortMalloc+0x150>
 8007c7a:	4b45      	ldr	r3, [pc, #276]	; (8007d90 <pvPortMalloc+0x188>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d869      	bhi.n	8007d58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c84:	4b43      	ldr	r3, [pc, #268]	; (8007d94 <pvPortMalloc+0x18c>)
 8007c86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c88:	4b42      	ldr	r3, [pc, #264]	; (8007d94 <pvPortMalloc+0x18c>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c8e:	e004      	b.n	8007c9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d903      	bls.n	8007cac <pvPortMalloc+0xa4>
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1f1      	bne.n	8007c90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007cac:	4b36      	ldr	r3, [pc, #216]	; (8007d88 <pvPortMalloc+0x180>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d050      	beq.n	8007d58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007cb6:	6a3b      	ldr	r3, [r7, #32]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2208      	movs	r2, #8
 8007cbc:	4413      	add	r3, r2
 8007cbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	1ad2      	subs	r2, r2, r3
 8007cd0:	2308      	movs	r3, #8
 8007cd2:	005b      	lsls	r3, r3, #1
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d91f      	bls.n	8007d18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4413      	add	r3, r2
 8007cde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	f003 0307 	and.w	r3, r3, #7
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00a      	beq.n	8007d00 <pvPortMalloc+0xf8>
	__asm volatile
 8007cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cee:	f383 8811 	msr	BASEPRI, r3
 8007cf2:	f3bf 8f6f 	isb	sy
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	613b      	str	r3, [r7, #16]
}
 8007cfc:	bf00      	nop
 8007cfe:	e7fe      	b.n	8007cfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	1ad2      	subs	r2, r2, r3
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d12:	69b8      	ldr	r0, [r7, #24]
 8007d14:	f000 f908 	bl	8007f28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d18:	4b1d      	ldr	r3, [pc, #116]	; (8007d90 <pvPortMalloc+0x188>)
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	4a1b      	ldr	r2, [pc, #108]	; (8007d90 <pvPortMalloc+0x188>)
 8007d24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d26:	4b1a      	ldr	r3, [pc, #104]	; (8007d90 <pvPortMalloc+0x188>)
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	4b1b      	ldr	r3, [pc, #108]	; (8007d98 <pvPortMalloc+0x190>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d203      	bcs.n	8007d3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d32:	4b17      	ldr	r3, [pc, #92]	; (8007d90 <pvPortMalloc+0x188>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a18      	ldr	r2, [pc, #96]	; (8007d98 <pvPortMalloc+0x190>)
 8007d38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3c:	685a      	ldr	r2, [r3, #4]
 8007d3e:	4b13      	ldr	r3, [pc, #76]	; (8007d8c <pvPortMalloc+0x184>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	431a      	orrs	r2, r3
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007d4e:	4b13      	ldr	r3, [pc, #76]	; (8007d9c <pvPortMalloc+0x194>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	3301      	adds	r3, #1
 8007d54:	4a11      	ldr	r2, [pc, #68]	; (8007d9c <pvPortMalloc+0x194>)
 8007d56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d58:	f7fe fbf4 	bl	8006544 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	f003 0307 	and.w	r3, r3, #7
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00a      	beq.n	8007d7c <pvPortMalloc+0x174>
	__asm volatile
 8007d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6a:	f383 8811 	msr	BASEPRI, r3
 8007d6e:	f3bf 8f6f 	isb	sy
 8007d72:	f3bf 8f4f 	dsb	sy
 8007d76:	60fb      	str	r3, [r7, #12]
}
 8007d78:	bf00      	nop
 8007d7a:	e7fe      	b.n	8007d7a <pvPortMalloc+0x172>
	return pvReturn;
 8007d7c:	69fb      	ldr	r3, [r7, #28]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3728      	adds	r7, #40	; 0x28
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	20003924 	.word	0x20003924
 8007d8c:	20003938 	.word	0x20003938
 8007d90:	20003928 	.word	0x20003928
 8007d94:	2000391c 	.word	0x2000391c
 8007d98:	2000392c 	.word	0x2000392c
 8007d9c:	20003930 	.word	0x20003930

08007da0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d04d      	beq.n	8007e4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007db2:	2308      	movs	r3, #8
 8007db4:	425b      	negs	r3, r3
 8007db6:	697a      	ldr	r2, [r7, #20]
 8007db8:	4413      	add	r3, r2
 8007dba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	685a      	ldr	r2, [r3, #4]
 8007dc4:	4b24      	ldr	r3, [pc, #144]	; (8007e58 <vPortFree+0xb8>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4013      	ands	r3, r2
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10a      	bne.n	8007de4 <vPortFree+0x44>
	__asm volatile
 8007dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd2:	f383 8811 	msr	BASEPRI, r3
 8007dd6:	f3bf 8f6f 	isb	sy
 8007dda:	f3bf 8f4f 	dsb	sy
 8007dde:	60fb      	str	r3, [r7, #12]
}
 8007de0:	bf00      	nop
 8007de2:	e7fe      	b.n	8007de2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00a      	beq.n	8007e02 <vPortFree+0x62>
	__asm volatile
 8007dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df0:	f383 8811 	msr	BASEPRI, r3
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	60bb      	str	r3, [r7, #8]
}
 8007dfe:	bf00      	nop
 8007e00:	e7fe      	b.n	8007e00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	685a      	ldr	r2, [r3, #4]
 8007e06:	4b14      	ldr	r3, [pc, #80]	; (8007e58 <vPortFree+0xb8>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d01e      	beq.n	8007e4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d11a      	bne.n	8007e4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	4b0e      	ldr	r3, [pc, #56]	; (8007e58 <vPortFree+0xb8>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	43db      	mvns	r3, r3
 8007e22:	401a      	ands	r2, r3
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e28:	f7fe fb7e 	bl	8006528 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	685a      	ldr	r2, [r3, #4]
 8007e30:	4b0a      	ldr	r3, [pc, #40]	; (8007e5c <vPortFree+0xbc>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4413      	add	r3, r2
 8007e36:	4a09      	ldr	r2, [pc, #36]	; (8007e5c <vPortFree+0xbc>)
 8007e38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e3a:	6938      	ldr	r0, [r7, #16]
 8007e3c:	f000 f874 	bl	8007f28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007e40:	4b07      	ldr	r3, [pc, #28]	; (8007e60 <vPortFree+0xc0>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	3301      	adds	r3, #1
 8007e46:	4a06      	ldr	r2, [pc, #24]	; (8007e60 <vPortFree+0xc0>)
 8007e48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007e4a:	f7fe fb7b 	bl	8006544 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e4e:	bf00      	nop
 8007e50:	3718      	adds	r7, #24
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	20003938 	.word	0x20003938
 8007e5c:	20003928 	.word	0x20003928
 8007e60:	20003934 	.word	0x20003934

08007e64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e6a:	f242 3328 	movw	r3, #9000	; 0x2328
 8007e6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e70:	4b27      	ldr	r3, [pc, #156]	; (8007f10 <prvHeapInit+0xac>)
 8007e72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f003 0307 	and.w	r3, r3, #7
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00c      	beq.n	8007e98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	3307      	adds	r3, #7
 8007e82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f023 0307 	bic.w	r3, r3, #7
 8007e8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e8c:	68ba      	ldr	r2, [r7, #8]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	4a1f      	ldr	r2, [pc, #124]	; (8007f10 <prvHeapInit+0xac>)
 8007e94:	4413      	add	r3, r2
 8007e96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e9c:	4a1d      	ldr	r2, [pc, #116]	; (8007f14 <prvHeapInit+0xb0>)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ea2:	4b1c      	ldr	r3, [pc, #112]	; (8007f14 <prvHeapInit+0xb0>)
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	68ba      	ldr	r2, [r7, #8]
 8007eac:	4413      	add	r3, r2
 8007eae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007eb0:	2208      	movs	r2, #8
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	1a9b      	subs	r3, r3, r2
 8007eb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f023 0307 	bic.w	r3, r3, #7
 8007ebe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	4a15      	ldr	r2, [pc, #84]	; (8007f18 <prvHeapInit+0xb4>)
 8007ec4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ec6:	4b14      	ldr	r3, [pc, #80]	; (8007f18 <prvHeapInit+0xb4>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ece:	4b12      	ldr	r3, [pc, #72]	; (8007f18 <prvHeapInit+0xb4>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	1ad2      	subs	r2, r2, r3
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ee4:	4b0c      	ldr	r3, [pc, #48]	; (8007f18 <prvHeapInit+0xb4>)
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	4a0a      	ldr	r2, [pc, #40]	; (8007f1c <prvHeapInit+0xb8>)
 8007ef2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	4a09      	ldr	r2, [pc, #36]	; (8007f20 <prvHeapInit+0xbc>)
 8007efa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007efc:	4b09      	ldr	r3, [pc, #36]	; (8007f24 <prvHeapInit+0xc0>)
 8007efe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007f02:	601a      	str	r2, [r3, #0]
}
 8007f04:	bf00      	nop
 8007f06:	3714      	adds	r7, #20
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr
 8007f10:	200015f4 	.word	0x200015f4
 8007f14:	2000391c 	.word	0x2000391c
 8007f18:	20003924 	.word	0x20003924
 8007f1c:	2000392c 	.word	0x2000392c
 8007f20:	20003928 	.word	0x20003928
 8007f24:	20003938 	.word	0x20003938

08007f28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f30:	4b28      	ldr	r3, [pc, #160]	; (8007fd4 <prvInsertBlockIntoFreeList+0xac>)
 8007f32:	60fb      	str	r3, [r7, #12]
 8007f34:	e002      	b.n	8007f3c <prvInsertBlockIntoFreeList+0x14>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	60fb      	str	r3, [r7, #12]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d8f7      	bhi.n	8007f36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	4413      	add	r3, r2
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d108      	bne.n	8007f6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	441a      	add	r2, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	441a      	add	r2, r3
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d118      	bne.n	8007fb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	4b15      	ldr	r3, [pc, #84]	; (8007fd8 <prvInsertBlockIntoFreeList+0xb0>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d00d      	beq.n	8007fa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	685a      	ldr	r2, [r3, #4]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	441a      	add	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	601a      	str	r2, [r3, #0]
 8007fa4:	e008      	b.n	8007fb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007fa6:	4b0c      	ldr	r3, [pc, #48]	; (8007fd8 <prvInsertBlockIntoFreeList+0xb0>)
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	601a      	str	r2, [r3, #0]
 8007fae:	e003      	b.n	8007fb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d002      	beq.n	8007fc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fc6:	bf00      	nop
 8007fc8:	3714      	adds	r7, #20
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	2000391c 	.word	0x2000391c
 8007fd8:	20003924 	.word	0x20003924

08007fdc <memset>:
 8007fdc:	4402      	add	r2, r0
 8007fde:	4603      	mov	r3, r0
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d100      	bne.n	8007fe6 <memset+0xa>
 8007fe4:	4770      	bx	lr
 8007fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8007fea:	e7f9      	b.n	8007fe0 <memset+0x4>

08007fec <_reclaim_reent>:
 8007fec:	4b29      	ldr	r3, [pc, #164]	; (8008094 <_reclaim_reent+0xa8>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4283      	cmp	r3, r0
 8007ff2:	b570      	push	{r4, r5, r6, lr}
 8007ff4:	4604      	mov	r4, r0
 8007ff6:	d04b      	beq.n	8008090 <_reclaim_reent+0xa4>
 8007ff8:	69c3      	ldr	r3, [r0, #28]
 8007ffa:	b143      	cbz	r3, 800800e <_reclaim_reent+0x22>
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d144      	bne.n	800808c <_reclaim_reent+0xa0>
 8008002:	69e3      	ldr	r3, [r4, #28]
 8008004:	6819      	ldr	r1, [r3, #0]
 8008006:	b111      	cbz	r1, 800800e <_reclaim_reent+0x22>
 8008008:	4620      	mov	r0, r4
 800800a:	f000 f879 	bl	8008100 <_free_r>
 800800e:	6961      	ldr	r1, [r4, #20]
 8008010:	b111      	cbz	r1, 8008018 <_reclaim_reent+0x2c>
 8008012:	4620      	mov	r0, r4
 8008014:	f000 f874 	bl	8008100 <_free_r>
 8008018:	69e1      	ldr	r1, [r4, #28]
 800801a:	b111      	cbz	r1, 8008022 <_reclaim_reent+0x36>
 800801c:	4620      	mov	r0, r4
 800801e:	f000 f86f 	bl	8008100 <_free_r>
 8008022:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008024:	b111      	cbz	r1, 800802c <_reclaim_reent+0x40>
 8008026:	4620      	mov	r0, r4
 8008028:	f000 f86a 	bl	8008100 <_free_r>
 800802c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800802e:	b111      	cbz	r1, 8008036 <_reclaim_reent+0x4a>
 8008030:	4620      	mov	r0, r4
 8008032:	f000 f865 	bl	8008100 <_free_r>
 8008036:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008038:	b111      	cbz	r1, 8008040 <_reclaim_reent+0x54>
 800803a:	4620      	mov	r0, r4
 800803c:	f000 f860 	bl	8008100 <_free_r>
 8008040:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008042:	b111      	cbz	r1, 800804a <_reclaim_reent+0x5e>
 8008044:	4620      	mov	r0, r4
 8008046:	f000 f85b 	bl	8008100 <_free_r>
 800804a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800804c:	b111      	cbz	r1, 8008054 <_reclaim_reent+0x68>
 800804e:	4620      	mov	r0, r4
 8008050:	f000 f856 	bl	8008100 <_free_r>
 8008054:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008056:	b111      	cbz	r1, 800805e <_reclaim_reent+0x72>
 8008058:	4620      	mov	r0, r4
 800805a:	f000 f851 	bl	8008100 <_free_r>
 800805e:	6a23      	ldr	r3, [r4, #32]
 8008060:	b1b3      	cbz	r3, 8008090 <_reclaim_reent+0xa4>
 8008062:	4620      	mov	r0, r4
 8008064:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008068:	4718      	bx	r3
 800806a:	5949      	ldr	r1, [r1, r5]
 800806c:	b941      	cbnz	r1, 8008080 <_reclaim_reent+0x94>
 800806e:	3504      	adds	r5, #4
 8008070:	69e3      	ldr	r3, [r4, #28]
 8008072:	2d80      	cmp	r5, #128	; 0x80
 8008074:	68d9      	ldr	r1, [r3, #12]
 8008076:	d1f8      	bne.n	800806a <_reclaim_reent+0x7e>
 8008078:	4620      	mov	r0, r4
 800807a:	f000 f841 	bl	8008100 <_free_r>
 800807e:	e7c0      	b.n	8008002 <_reclaim_reent+0x16>
 8008080:	680e      	ldr	r6, [r1, #0]
 8008082:	4620      	mov	r0, r4
 8008084:	f000 f83c 	bl	8008100 <_free_r>
 8008088:	4631      	mov	r1, r6
 800808a:	e7ef      	b.n	800806c <_reclaim_reent+0x80>
 800808c:	2500      	movs	r5, #0
 800808e:	e7ef      	b.n	8008070 <_reclaim_reent+0x84>
 8008090:	bd70      	pop	{r4, r5, r6, pc}
 8008092:	bf00      	nop
 8008094:	20000060 	.word	0x20000060

08008098 <__libc_init_array>:
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	4d0d      	ldr	r5, [pc, #52]	; (80080d0 <__libc_init_array+0x38>)
 800809c:	4c0d      	ldr	r4, [pc, #52]	; (80080d4 <__libc_init_array+0x3c>)
 800809e:	1b64      	subs	r4, r4, r5
 80080a0:	10a4      	asrs	r4, r4, #2
 80080a2:	2600      	movs	r6, #0
 80080a4:	42a6      	cmp	r6, r4
 80080a6:	d109      	bne.n	80080bc <__libc_init_array+0x24>
 80080a8:	4d0b      	ldr	r5, [pc, #44]	; (80080d8 <__libc_init_array+0x40>)
 80080aa:	4c0c      	ldr	r4, [pc, #48]	; (80080dc <__libc_init_array+0x44>)
 80080ac:	f000 f880 	bl	80081b0 <_init>
 80080b0:	1b64      	subs	r4, r4, r5
 80080b2:	10a4      	asrs	r4, r4, #2
 80080b4:	2600      	movs	r6, #0
 80080b6:	42a6      	cmp	r6, r4
 80080b8:	d105      	bne.n	80080c6 <__libc_init_array+0x2e>
 80080ba:	bd70      	pop	{r4, r5, r6, pc}
 80080bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80080c0:	4798      	blx	r3
 80080c2:	3601      	adds	r6, #1
 80080c4:	e7ee      	b.n	80080a4 <__libc_init_array+0xc>
 80080c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ca:	4798      	blx	r3
 80080cc:	3601      	adds	r6, #1
 80080ce:	e7f2      	b.n	80080b6 <__libc_init_array+0x1e>
 80080d0:	08008288 	.word	0x08008288
 80080d4:	08008288 	.word	0x08008288
 80080d8:	08008288 	.word	0x08008288
 80080dc:	0800828c 	.word	0x0800828c

080080e0 <__retarget_lock_acquire_recursive>:
 80080e0:	4770      	bx	lr

080080e2 <__retarget_lock_release_recursive>:
 80080e2:	4770      	bx	lr

080080e4 <memcpy>:
 80080e4:	440a      	add	r2, r1
 80080e6:	4291      	cmp	r1, r2
 80080e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80080ec:	d100      	bne.n	80080f0 <memcpy+0xc>
 80080ee:	4770      	bx	lr
 80080f0:	b510      	push	{r4, lr}
 80080f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080fa:	4291      	cmp	r1, r2
 80080fc:	d1f9      	bne.n	80080f2 <memcpy+0xe>
 80080fe:	bd10      	pop	{r4, pc}

08008100 <_free_r>:
 8008100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008102:	2900      	cmp	r1, #0
 8008104:	d044      	beq.n	8008190 <_free_r+0x90>
 8008106:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800810a:	9001      	str	r0, [sp, #4]
 800810c:	2b00      	cmp	r3, #0
 800810e:	f1a1 0404 	sub.w	r4, r1, #4
 8008112:	bfb8      	it	lt
 8008114:	18e4      	addlt	r4, r4, r3
 8008116:	f000 f83f 	bl	8008198 <__malloc_lock>
 800811a:	4a1e      	ldr	r2, [pc, #120]	; (8008194 <_free_r+0x94>)
 800811c:	9801      	ldr	r0, [sp, #4]
 800811e:	6813      	ldr	r3, [r2, #0]
 8008120:	b933      	cbnz	r3, 8008130 <_free_r+0x30>
 8008122:	6063      	str	r3, [r4, #4]
 8008124:	6014      	str	r4, [r2, #0]
 8008126:	b003      	add	sp, #12
 8008128:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800812c:	f000 b83a 	b.w	80081a4 <__malloc_unlock>
 8008130:	42a3      	cmp	r3, r4
 8008132:	d908      	bls.n	8008146 <_free_r+0x46>
 8008134:	6825      	ldr	r5, [r4, #0]
 8008136:	1961      	adds	r1, r4, r5
 8008138:	428b      	cmp	r3, r1
 800813a:	bf01      	itttt	eq
 800813c:	6819      	ldreq	r1, [r3, #0]
 800813e:	685b      	ldreq	r3, [r3, #4]
 8008140:	1949      	addeq	r1, r1, r5
 8008142:	6021      	streq	r1, [r4, #0]
 8008144:	e7ed      	b.n	8008122 <_free_r+0x22>
 8008146:	461a      	mov	r2, r3
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	b10b      	cbz	r3, 8008150 <_free_r+0x50>
 800814c:	42a3      	cmp	r3, r4
 800814e:	d9fa      	bls.n	8008146 <_free_r+0x46>
 8008150:	6811      	ldr	r1, [r2, #0]
 8008152:	1855      	adds	r5, r2, r1
 8008154:	42a5      	cmp	r5, r4
 8008156:	d10b      	bne.n	8008170 <_free_r+0x70>
 8008158:	6824      	ldr	r4, [r4, #0]
 800815a:	4421      	add	r1, r4
 800815c:	1854      	adds	r4, r2, r1
 800815e:	42a3      	cmp	r3, r4
 8008160:	6011      	str	r1, [r2, #0]
 8008162:	d1e0      	bne.n	8008126 <_free_r+0x26>
 8008164:	681c      	ldr	r4, [r3, #0]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	6053      	str	r3, [r2, #4]
 800816a:	440c      	add	r4, r1
 800816c:	6014      	str	r4, [r2, #0]
 800816e:	e7da      	b.n	8008126 <_free_r+0x26>
 8008170:	d902      	bls.n	8008178 <_free_r+0x78>
 8008172:	230c      	movs	r3, #12
 8008174:	6003      	str	r3, [r0, #0]
 8008176:	e7d6      	b.n	8008126 <_free_r+0x26>
 8008178:	6825      	ldr	r5, [r4, #0]
 800817a:	1961      	adds	r1, r4, r5
 800817c:	428b      	cmp	r3, r1
 800817e:	bf04      	itt	eq
 8008180:	6819      	ldreq	r1, [r3, #0]
 8008182:	685b      	ldreq	r3, [r3, #4]
 8008184:	6063      	str	r3, [r4, #4]
 8008186:	bf04      	itt	eq
 8008188:	1949      	addeq	r1, r1, r5
 800818a:	6021      	streq	r1, [r4, #0]
 800818c:	6054      	str	r4, [r2, #4]
 800818e:	e7ca      	b.n	8008126 <_free_r+0x26>
 8008190:	b003      	add	sp, #12
 8008192:	bd30      	pop	{r4, r5, pc}
 8008194:	20003a78 	.word	0x20003a78

08008198 <__malloc_lock>:
 8008198:	4801      	ldr	r0, [pc, #4]	; (80081a0 <__malloc_lock+0x8>)
 800819a:	f7ff bfa1 	b.w	80080e0 <__retarget_lock_acquire_recursive>
 800819e:	bf00      	nop
 80081a0:	20003a74 	.word	0x20003a74

080081a4 <__malloc_unlock>:
 80081a4:	4801      	ldr	r0, [pc, #4]	; (80081ac <__malloc_unlock+0x8>)
 80081a6:	f7ff bf9c 	b.w	80080e2 <__retarget_lock_release_recursive>
 80081aa:	bf00      	nop
 80081ac:	20003a74 	.word	0x20003a74

080081b0 <_init>:
 80081b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b2:	bf00      	nop
 80081b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081b6:	bc08      	pop	{r3}
 80081b8:	469e      	mov	lr, r3
 80081ba:	4770      	bx	lr

080081bc <_fini>:
 80081bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081be:	bf00      	nop
 80081c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081c2:	bc08      	pop	{r3}
 80081c4:	469e      	mov	lr, r3
 80081c6:	4770      	bx	lr
