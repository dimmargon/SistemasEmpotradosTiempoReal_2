
Practica4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a470  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800a600  0800a600  0001a600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a700  0800a700  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a700  0800a700  0001a700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a708  0800a708  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a708  0800a708  0001a708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a70c  0800a70c  0001a70c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800a710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003a34  2000006c  0800a77c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003aa0  0800a77c  00023aa0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a597  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000054d8  00000000  00000000  0004a676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002528  00000000  00000000  0004fb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ce5  00000000  00000000  00052078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cadc  00000000  00000000  00053d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b484  00000000  00000000  00080839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010adbd  00000000  00000000  000abcbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a770  00000000  00000000  001b6a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  001c11ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a5e8 	.word	0x0800a5e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800a5e8 	.word	0x0800a5e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <CreateSerialObjects>:
QueueHandle_t xQueue;

char receivedChar; //buffer para el caracter

void CreateSerialObjects()
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
    xSemaphore = xSemaphoreCreateBinary();
 8000570:	2203      	movs	r2, #3
 8000572:	2100      	movs	r1, #0
 8000574:	2001      	movs	r0, #1
 8000576:	f006 fa9d 	bl	8006ab4 <xQueueGenericCreate>
 800057a:	4603      	mov	r3, r0
 800057c:	4a09      	ldr	r2, [pc, #36]	; (80005a4 <CreateSerialObjects+0x38>)
 800057e:	6013      	str	r3, [r2, #0]
    xSemaphoreGive(xSemaphore); //disponible inicialmente
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <CreateSerialObjects+0x38>)
 8000582:	6818      	ldr	r0, [r3, #0]
 8000584:	2300      	movs	r3, #0
 8000586:	2200      	movs	r2, #0
 8000588:	2100      	movs	r1, #0
 800058a:	f006 faf1 	bl	8006b70 <xQueueGenericSend>
    xQueue = xQueueCreate(16, sizeof(char)); //almaceno hasta 16 caracteres
 800058e:	2200      	movs	r2, #0
 8000590:	2101      	movs	r1, #1
 8000592:	2010      	movs	r0, #16
 8000594:	f006 fa8e 	bl	8006ab4 <xQueueGenericCreate>
 8000598:	4603      	mov	r3, r0
 800059a:	4a03      	ldr	r2, [pc, #12]	; (80005a8 <CreateSerialObjects+0x3c>)
 800059c:	6013      	str	r3, [r2, #0]
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000088 	.word	0x20000088
 80005a8:	2000008c 	.word	0x2000008c

080005ac <CreateTasks>:

void CreateTasks()
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af02      	add	r7, sp, #8
    xTaskCreate(serialRxTask, "SerialRxTask", 128, NULL, 1, NULL);
 80005b2:	2300      	movs	r3, #0
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	2301      	movs	r3, #1
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2300      	movs	r3, #0
 80005bc:	2280      	movs	r2, #128	; 0x80
 80005be:	4906      	ldr	r1, [pc, #24]	; (80005d8 <CreateTasks+0x2c>)
 80005c0:	4806      	ldr	r0, [pc, #24]	; (80005dc <CreateTasks+0x30>)
 80005c2:	f007 f8ca 	bl	800775a <xTaskCreate>

    //inicio la recepcion del primer caracter
    HAL_UART_Receive_IT(&huart1, (uint8_t*)&receivedChar, 1);
 80005c6:	2201      	movs	r2, #1
 80005c8:	4905      	ldr	r1, [pc, #20]	; (80005e0 <CreateTasks+0x34>)
 80005ca:	4806      	ldr	r0, [pc, #24]	; (80005e4 <CreateTasks+0x38>)
 80005cc:	f004 f8fe 	bl	80047cc <HAL_UART_Receive_IT>
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	0800a600 	.word	0x0800a600
 80005dc:	0800067d 	.word	0x0800067d
 80005e0:	20000090 	.word	0x20000090
 80005e4:	200001d0 	.word	0x200001d0

080005e8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
    static signed long xHigherPriorityTaskWoken = pdFALSE;
    //libero el semaforo
    xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <HAL_UART_TxCpltCallback+0x34>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	490a      	ldr	r1, [pc, #40]	; (8000620 <HAL_UART_TxCpltCallback+0x38>)
 80005f6:	4618      	mov	r0, r3
 80005f8:	f006 fc53 	bl	8006ea2 <xQueueGiveFromISR>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken); //solo en caso de prioridades mayores
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <HAL_UART_TxCpltCallback+0x38>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d007      	beq.n	8000614 <HAL_UART_TxCpltCallback+0x2c>
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <HAL_UART_TxCpltCallback+0x3c>)
 8000606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	f3bf 8f4f 	dsb	sy
 8000610:	f3bf 8f6f 	isb	sy
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000088 	.word	0x20000088
 8000620:	20000094 	.word	0x20000094
 8000624:	e000ed04 	.word	0xe000ed04

08000628 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
    static signed long xHigherPriorityTaskWoken = pdFALSE;
    //envio el caracter recibido a la cola
    xQueueSendFromISR(xQueue, &receivedChar, &xHigherPriorityTaskWoken);
 8000630:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <HAL_UART_RxCpltCallback+0x40>)
 8000632:	6818      	ldr	r0, [r3, #0]
 8000634:	2300      	movs	r3, #0
 8000636:	4a0d      	ldr	r2, [pc, #52]	; (800066c <HAL_UART_RxCpltCallback+0x44>)
 8000638:	490d      	ldr	r1, [pc, #52]	; (8000670 <HAL_UART_RxCpltCallback+0x48>)
 800063a:	f006 fb97 	bl	8006d6c <xQueueGenericSendFromISR>

    //inicio la recepcion del siguiente caracter
    HAL_UART_Receive_IT(&huart1, (uint8_t*)&receivedChar, 1);
 800063e:	2201      	movs	r2, #1
 8000640:	490b      	ldr	r1, [pc, #44]	; (8000670 <HAL_UART_RxCpltCallback+0x48>)
 8000642:	480c      	ldr	r0, [pc, #48]	; (8000674 <HAL_UART_RxCpltCallback+0x4c>)
 8000644:	f004 f8c2 	bl	80047cc <HAL_UART_Receive_IT>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken); //solo en caso de prioridades mayores
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <HAL_UART_RxCpltCallback+0x44>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d007      	beq.n	8000660 <HAL_UART_RxCpltCallback+0x38>
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <HAL_UART_RxCpltCallback+0x50>)
 8000652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	f3bf 8f4f 	dsb	sy
 800065c:	f3bf 8f6f 	isb	sy
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	2000008c 	.word	0x2000008c
 800066c:	20000098 	.word	0x20000098
 8000670:	20000090 	.word	0x20000090
 8000674:	200001d0 	.word	0x200001d0
 8000678:	e000ed04 	.word	0xe000ed04

0800067c <serialRxTask>:

void serialRxTask(void *pvParameters)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
    char receivedChar;

    printf("Hola, Mundo!\r\n");
 8000684:	480a      	ldr	r0, [pc, #40]	; (80006b0 <serialRxTask+0x34>)
 8000686:	f009 f8e1 	bl	800984c <puts>

    while (1)
    {
    	//espero hasta que haya un caracter en la cola
        if (xQueueReceive(xQueue, &receivedChar, portMAX_DELAY) == pdTRUE)
 800068a:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <serialRxTask+0x38>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f107 010f 	add.w	r1, r7, #15
 8000692:	f04f 32ff 	mov.w	r2, #4294967295
 8000696:	4618      	mov	r0, r3
 8000698:	f006 fc90 	bl	8006fbc <xQueueReceive>
 800069c:	4603      	mov	r3, r0
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d1f3      	bne.n	800068a <serialRxTask+0xe>
        {
            printf("Nuevo dato recibido: %c\r\n", receivedChar);
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	4619      	mov	r1, r3
 80006a6:	4804      	ldr	r0, [pc, #16]	; (80006b8 <serialRxTask+0x3c>)
 80006a8:	f009 f86a 	bl	8009780 <iprintf>
        if (xQueueReceive(xQueue, &receivedChar, portMAX_DELAY) == pdTRUE)
 80006ac:	e7ed      	b.n	800068a <serialRxTask+0xe>
 80006ae:	bf00      	nop
 80006b0:	0800a610 	.word	0x0800a610
 80006b4:	2000008c 	.word	0x2000008c
 80006b8:	0800a620 	.word	0x0800a620

080006bc <__io_putchar>:
        }
    }
}

int __io_putchar(int ch)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
    BaseType_t status = xSemaphoreTake(xSemaphore, portMAX_DELAY);
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <__io_putchar+0x34>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f04f 31ff 	mov.w	r1, #4294967295
 80006cc:	4618      	mov	r0, r3
 80006ce:	f006 fd55 	bl	800717c <xQueueSemaphoreTake>
 80006d2:	60f8      	str	r0, [r7, #12]

    if (status == pdTRUE) //espero al semaforo
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d105      	bne.n	80006e6 <__io_putchar+0x2a>
    {
    	//transmito el caracter por UART
        HAL_UART_Transmit_IT(&huart1, (uint8_t*)&ch, 1);
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2201      	movs	r2, #1
 80006de:	4619      	mov	r1, r3
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <__io_putchar+0x38>)
 80006e2:	f004 f815 	bl	8004710 <HAL_UART_Transmit_IT>
    }
    return ch;
 80006e6:	687b      	ldr	r3, [r7, #4]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000088 	.word	0x20000088
 80006f4:	200001d0 	.word	0x200001d0

080006f8 <__io_getchar>:

int __io_getchar(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
    uint8_t ch = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	71fb      	strb	r3, [r7, #7]
    //recibo el caracter
    HAL_UART_Receive(&huart1, &ch, 1, HAL_MAX_DELAY);
 8000702:	1df9      	adds	r1, r7, #7
 8000704:	f04f 33ff 	mov.w	r3, #4294967295
 8000708:	2201      	movs	r2, #1
 800070a:	4804      	ldr	r0, [pc, #16]	; (800071c <__io_getchar+0x24>)
 800070c:	f003 ff36 	bl	800457c <HAL_UART_Receive>
    return ch;
 8000710:	79fb      	ldrb	r3, [r7, #7]
}
 8000712:	4618      	mov	r0, r3
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200001d0 	.word	0x200001d0

08000720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000724:	f001 f821 	bl	800176a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000728:	f000 f828 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072c:	f000 f9f0 	bl	8000b10 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000730:	f000 f886 	bl	8000840 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000734:	f000 f8bc 	bl	80008b0 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000738:	f000 f8f8 	bl	800092c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800073c:	f000 f91c 	bl	8000978 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000740:	f000 f958 	bl	80009f4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000744:	f000 f986 	bl	8000a54 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000748:	f000 f9b4 	bl	8000ab4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800074c:	f005 fef2 	bl	8006534 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000750:	4a07      	ldr	r2, [pc, #28]	; (8000770 <main+0x50>)
 8000752:	2100      	movs	r1, #0
 8000754:	4807      	ldr	r0, [pc, #28]	; (8000774 <main+0x54>)
 8000756:	f005 ff37 	bl	80065c8 <osThreadNew>
 800075a:	4603      	mov	r3, r0
 800075c:	4a06      	ldr	r2, [pc, #24]	; (8000778 <main+0x58>)
 800075e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  CreateSerialObjects();
 8000760:	f7ff ff04 	bl	800056c <CreateSerialObjects>
  CreateTasks();
 8000764:	f7ff ff22 	bl	80005ac <CreateTasks>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000768:	f005 ff08 	bl	800657c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800076c:	e7fe      	b.n	800076c <main+0x4c>
 800076e:	bf00      	nop
 8000770:	0800a660 	.word	0x0800a660
 8000774:	08000e75 	.word	0x08000e75
 8000778:	200007c4 	.word	0x200007c4

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b096      	sub	sp, #88	; 0x58
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	2244      	movs	r2, #68	; 0x44
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f009 f93e 	bl	8009a0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	463b      	mov	r3, r7
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800079e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007a2:	f001 ff15 	bl	80025d0 <HAL_PWREx_ControlVoltageScaling>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007ac:	f000 fb7c 	bl	8000ea8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007b0:	f001 fef0 	bl	8002594 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007b4:	4b21      	ldr	r3, [pc, #132]	; (800083c <SystemClock_Config+0xc0>)
 80007b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007ba:	4a20      	ldr	r2, [pc, #128]	; (800083c <SystemClock_Config+0xc0>)
 80007bc:	f023 0318 	bic.w	r3, r3, #24
 80007c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80007c4:	2314      	movs	r3, #20
 80007c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007c8:	2301      	movs	r3, #1
 80007ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007cc:	2301      	movs	r3, #1
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007d4:	2360      	movs	r3, #96	; 0x60
 80007d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d8:	2302      	movs	r3, #2
 80007da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007dc:	2301      	movs	r3, #1
 80007de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007e4:	2328      	movs	r3, #40	; 0x28
 80007e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007e8:	2307      	movs	r3, #7
 80007ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4618      	mov	r0, r3
 80007fa:	f002 f80b 	bl	8002814 <HAL_RCC_OscConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000804:	f000 fb50 	bl	8000ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000808:	230f      	movs	r3, #15
 800080a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080c:	2303      	movs	r3, #3
 800080e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800081c:	463b      	mov	r3, r7
 800081e:	2104      	movs	r1, #4
 8000820:	4618      	mov	r0, r3
 8000822:	f002 fbd3 	bl	8002fcc <HAL_RCC_ClockConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800082c:	f000 fb3c 	bl	8000ea8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000830:	f003 f90c 	bl	8003a4c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000834:	bf00      	nop
 8000836:	3758      	adds	r7, #88	; 0x58
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40021000 	.word	0x40021000

08000840 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_DFSDM1_Init+0x68>)
 8000846:	4a19      	ldr	r2, [pc, #100]	; (80008ac <MX_DFSDM1_Init+0x6c>)
 8000848:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_DFSDM1_Init+0x68>)
 800084c:	2201      	movs	r2, #1
 800084e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_DFSDM1_Init+0x68>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_DFSDM1_Init+0x68>)
 8000858:	2202      	movs	r2, #2
 800085a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_DFSDM1_Init+0x68>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_DFSDM1_Init+0x68>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_DFSDM1_Init+0x68>)
 800086a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800086e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000870:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <MX_DFSDM1_Init+0x68>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_DFSDM1_Init+0x68>)
 8000878:	2204      	movs	r2, #4
 800087a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <MX_DFSDM1_Init+0x68>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_DFSDM1_Init+0x68>)
 8000884:	2201      	movs	r2, #1
 8000886:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <MX_DFSDM1_Init+0x68>)
 800088a:	2200      	movs	r2, #0
 800088c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_DFSDM1_Init+0x68>)
 8000890:	2200      	movs	r2, #0
 8000892:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_DFSDM1_Init+0x68>)
 8000896:	f001 f8a7 	bl	80019e8 <HAL_DFSDM_ChannelInit>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80008a0:	f000 fb02 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	2000009c 	.word	0x2000009c
 80008ac:	40016020 	.word	0x40016020

080008b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <MX_I2C2_Init+0x74>)
 80008b6:	4a1c      	ldr	r2, [pc, #112]	; (8000928 <MX_I2C2_Init+0x78>)
 80008b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_I2C2_Init+0x74>)
 80008bc:	f640 6214 	movw	r2, #3604	; 0xe14
 80008c0:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008c2:	4b18      	ldr	r3, [pc, #96]	; (8000924 <MX_I2C2_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <MX_I2C2_Init+0x74>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <MX_I2C2_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008d4:	4b13      	ldr	r3, [pc, #76]	; (8000924 <MX_I2C2_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008da:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_I2C2_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e0:	4b10      	ldr	r3, [pc, #64]	; (8000924 <MX_I2C2_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e6:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_I2C2_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008ec:	480d      	ldr	r0, [pc, #52]	; (8000924 <MX_I2C2_Init+0x74>)
 80008ee:	f001 fbec 	bl	80020ca <HAL_I2C_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008f8:	f000 fad6 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008fc:	2100      	movs	r1, #0
 80008fe:	4809      	ldr	r0, [pc, #36]	; (8000924 <MX_I2C2_Init+0x74>)
 8000900:	f001 fc7e 	bl	8002200 <HAL_I2CEx_ConfigAnalogFilter>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800090a:	f000 facd 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800090e:	2100      	movs	r1, #0
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_I2C2_Init+0x74>)
 8000912:	f001 fcc0 	bl	8002296 <HAL_I2CEx_ConfigDigitalFilter>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800091c:	f000 fac4 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	200000d4 	.word	0x200000d4
 8000928:	40005800 	.word	0x40005800

0800092c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_QUADSPI_Init+0x44>)
 8000932:	4a10      	ldr	r2, [pc, #64]	; (8000974 <MX_QUADSPI_Init+0x48>)
 8000934:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_QUADSPI_Init+0x44>)
 8000938:	2202      	movs	r2, #2
 800093a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_QUADSPI_Init+0x44>)
 800093e:	2204      	movs	r2, #4
 8000940:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_QUADSPI_Init+0x44>)
 8000944:	2210      	movs	r2, #16
 8000946:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_QUADSPI_Init+0x44>)
 800094a:	2217      	movs	r2, #23
 800094c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_QUADSPI_Init+0x44>)
 8000950:	2200      	movs	r2, #0
 8000952:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_QUADSPI_Init+0x44>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_QUADSPI_Init+0x44>)
 800095c:	f001 fe9e 	bl	800269c <HAL_QSPI_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000966:	f000 fa9f 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000128 	.word	0x20000128
 8000974:	a0001000 	.word	0xa0001000

08000978 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_SPI3_Init+0x74>)
 800097e:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <MX_SPI3_Init+0x78>)
 8000980:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <MX_SPI3_Init+0x74>)
 8000984:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000988:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_SPI3_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_SPI3_Init+0x74>)
 8000992:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000996:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_SPI3_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <MX_SPI3_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_SPI3_Init+0x74>)
 80009a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009aa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_SPI3_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_SPI3_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_SPI3_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_SPI3_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_SPI3_Init+0x74>)
 80009c6:	2207      	movs	r2, #7
 80009c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_SPI3_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_SPI3_Init+0x74>)
 80009d2:	2208      	movs	r2, #8
 80009d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_SPI3_Init+0x74>)
 80009d8:	f003 fa1a 	bl	8003e10 <HAL_SPI_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80009e2:	f000 fa61 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2000016c 	.word	0x2000016c
 80009f0:	40003c00 	.word	0x40003c00

080009f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_USART1_UART_Init+0x58>)
 80009fa:	4a15      	ldr	r2, [pc, #84]	; (8000a50 <MX_USART1_UART_Init+0x5c>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a38:	f003 fd52 	bl	80044e0 <HAL_UART_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a42:	f000 fa31 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200001d0 	.word	0x200001d0
 8000a50:	40013800 	.word	0x40013800

08000a54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a5a:	4a15      	ldr	r2, [pc, #84]	; (8000ab0 <MX_USART3_UART_Init+0x5c>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a98:	f003 fd22 	bl	80044e0 <HAL_UART_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000aa2:	f000 fa01 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000258 	.word	0x20000258
 8000ab0:	40004800 	.word	0x40004800

08000ab4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000abe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac2:	2206      	movs	r2, #6
 8000ac4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac8:	2202      	movs	r2, #2
 8000aca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ace:	2202      	movs	r2, #2
 8000ad0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af8:	f001 fc19 	bl	800232e <HAL_PCD_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b02:	f000 f9d1 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200002e0 	.word	0x200002e0

08000b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b26:	4bbd      	ldr	r3, [pc, #756]	; (8000e1c <MX_GPIO_Init+0x30c>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	4abc      	ldr	r2, [pc, #752]	; (8000e1c <MX_GPIO_Init+0x30c>)
 8000b2c:	f043 0310 	orr.w	r3, r3, #16
 8000b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b32:	4bba      	ldr	r3, [pc, #744]	; (8000e1c <MX_GPIO_Init+0x30c>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	f003 0310 	and.w	r3, r3, #16
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3e:	4bb7      	ldr	r3, [pc, #732]	; (8000e1c <MX_GPIO_Init+0x30c>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	4ab6      	ldr	r2, [pc, #728]	; (8000e1c <MX_GPIO_Init+0x30c>)
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4a:	4bb4      	ldr	r3, [pc, #720]	; (8000e1c <MX_GPIO_Init+0x30c>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	f003 0304 	and.w	r3, r3, #4
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	4bb1      	ldr	r3, [pc, #708]	; (8000e1c <MX_GPIO_Init+0x30c>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	4ab0      	ldr	r2, [pc, #704]	; (8000e1c <MX_GPIO_Init+0x30c>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b62:	4bae      	ldr	r3, [pc, #696]	; (8000e1c <MX_GPIO_Init+0x30c>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	4bab      	ldr	r3, [pc, #684]	; (8000e1c <MX_GPIO_Init+0x30c>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	4aaa      	ldr	r2, [pc, #680]	; (8000e1c <MX_GPIO_Init+0x30c>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7a:	4ba8      	ldr	r3, [pc, #672]	; (8000e1c <MX_GPIO_Init+0x30c>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b86:	4ba5      	ldr	r3, [pc, #660]	; (8000e1c <MX_GPIO_Init+0x30c>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	4aa4      	ldr	r2, [pc, #656]	; (8000e1c <MX_GPIO_Init+0x30c>)
 8000b8c:	f043 0308 	orr.w	r3, r3, #8
 8000b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b92:	4ba2      	ldr	r3, [pc, #648]	; (8000e1c <MX_GPIO_Init+0x30c>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	f003 0308 	and.w	r3, r3, #8
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000ba4:	489e      	ldr	r0, [pc, #632]	; (8000e20 <MX_GPIO_Init+0x310>)
 8000ba6:	f001 fa55 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f248 1104 	movw	r1, #33028	; 0x8104
 8000bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb4:	f001 fa4e 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000bbe:	4899      	ldr	r0, [pc, #612]	; (8000e24 <MX_GPIO_Init+0x314>)
 8000bc0:	f001 fa48 	bl	8002054 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f241 0181 	movw	r1, #4225	; 0x1081
 8000bca:	4897      	ldr	r0, [pc, #604]	; (8000e28 <MX_GPIO_Init+0x318>)
 8000bcc:	f001 fa42 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bd6:	4894      	ldr	r0, [pc, #592]	; (8000e28 <MX_GPIO_Init+0x318>)
 8000bd8:	f001 fa3c 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000be2:	4892      	ldr	r0, [pc, #584]	; (8000e2c <MX_GPIO_Init+0x31c>)
 8000be4:	f001 fa36 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	2120      	movs	r1, #32
 8000bec:	488d      	ldr	r0, [pc, #564]	; (8000e24 <MX_GPIO_Init+0x314>)
 8000bee:	f001 fa31 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	488a      	ldr	r0, [pc, #552]	; (8000e20 <MX_GPIO_Init+0x310>)
 8000bf8:	f001 fa2c 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000bfc:	f240 1315 	movw	r3, #277	; 0x115
 8000c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4882      	ldr	r0, [pc, #520]	; (8000e20 <MX_GPIO_Init+0x310>)
 8000c16:	f001 f873 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000c1a:	236a      	movs	r3, #106	; 0x6a
 8000c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c1e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	487c      	ldr	r0, [pc, #496]	; (8000e20 <MX_GPIO_Init+0x310>)
 8000c30:	f001 f866 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000c34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c3a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4878      	ldr	r0, [pc, #480]	; (8000e2c <MX_GPIO_Init+0x31c>)
 8000c4c:	f001 f858 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000c50:	233f      	movs	r3, #63	; 0x3f
 8000c52:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c54:	230b      	movs	r3, #11
 8000c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4619      	mov	r1, r3
 8000c62:	4872      	ldr	r0, [pc, #456]	; (8000e2c <MX_GPIO_Init+0x31c>)
 8000c64:	f001 f84c 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c78:	2308      	movs	r3, #8
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c86:	f001 f83b 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000c8a:	f248 1304 	movw	r3, #33028	; 0x8104
 8000c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca6:	f001 f82b 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000caa:	2308      	movs	r3, #8
 8000cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc8:	f001 f81a 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000ccc:	2310      	movs	r3, #16
 8000cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cd0:	230b      	movs	r3, #11
 8000cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce2:	f001 f80d 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000ce6:	23e0      	movs	r3, #224	; 0xe0
 8000ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d04:	f000 fffc 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d0c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4841      	ldr	r0, [pc, #260]	; (8000e24 <MX_GPIO_Init+0x314>)
 8000d1e:	f000 ffef 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000d22:	2302      	movs	r3, #2
 8000d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d26:	230b      	movs	r3, #11
 8000d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	483b      	ldr	r0, [pc, #236]	; (8000e24 <MX_GPIO_Init+0x314>)
 8000d36:	f000 ffe3 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000d3a:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000d3e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	4834      	ldr	r0, [pc, #208]	; (8000e24 <MX_GPIO_Init+0x314>)
 8000d54:	f000 ffd4 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000d58:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000d5c:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d5e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	482e      	ldr	r0, [pc, #184]	; (8000e28 <MX_GPIO_Init+0x318>)
 8000d70:	f000 ffc6 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000d74:	f243 0381 	movw	r3, #12417	; 0x3081
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4826      	ldr	r0, [pc, #152]	; (8000e28 <MX_GPIO_Init+0x318>)
 8000d8e:	f000 ffb7 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000d92:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	4820      	ldr	r0, [pc, #128]	; (8000e2c <MX_GPIO_Init+0x31c>)
 8000dac:	f000 ffa8 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000db0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000db6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4819      	ldr	r0, [pc, #100]	; (8000e2c <MX_GPIO_Init+0x31c>)
 8000dc8:	f000 ff9a 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ddc:	2305      	movs	r3, #5
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	4810      	ldr	r0, [pc, #64]	; (8000e28 <MX_GPIO_Init+0x318>)
 8000de8:	f000 ff8a 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000dec:	2378      	movs	r3, #120	; 0x78
 8000dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dfc:	2307      	movs	r3, #7
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	4808      	ldr	r0, [pc, #32]	; (8000e28 <MX_GPIO_Init+0x318>)
 8000e08:	f000 ff7a 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000e0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e12:	2312      	movs	r3, #18
 8000e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	e00a      	b.n	8000e30 <MX_GPIO_Init+0x320>
 8000e1a:	bf00      	nop
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	48001000 	.word	0x48001000
 8000e24:	48000400 	.word	0x48000400
 8000e28:	48000c00 	.word	0x48000c00
 8000e2c:	48000800 	.word	0x48000800
 8000e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e32:	2303      	movs	r3, #3
 8000e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e36:	2304      	movs	r3, #4
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480b      	ldr	r0, [pc, #44]	; (8000e70 <MX_GPIO_Init+0x360>)
 8000e42:	f000 ff5d 	bl	8001d00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2105      	movs	r1, #5
 8000e4a:	2017      	movs	r0, #23
 8000e4c:	f000 fda2 	bl	8001994 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e50:	2017      	movs	r0, #23
 8000e52:	f000 fdbb 	bl	80019cc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2105      	movs	r1, #5
 8000e5a:	2028      	movs	r0, #40	; 0x28
 8000e5c:	f000 fd9a 	bl	8001994 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e60:	2028      	movs	r0, #40	; 0x28
 8000e62:	f000 fdb3 	bl	80019cc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e66:	bf00      	nop
 8000e68:	3728      	adds	r7, #40	; 0x28
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	48000400 	.word	0x48000400

08000e74 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f005 fc35 	bl	80066ec <osDelay>
 8000e82:	e7fb      	b.n	8000e7c <StartDefaultTask+0x8>

08000e84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d101      	bne.n	8000e9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e96:	f000 fc81 	bl	800179c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40014800 	.word	0x40014800

08000ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <Error_Handler+0x8>
	...

08000eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <HAL_MspInit+0x4c>)
 8000ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ebe:	4a10      	ldr	r2, [pc, #64]	; (8000f00 <HAL_MspInit+0x4c>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <HAL_MspInit+0x4c>)
 8000ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <HAL_MspInit+0x4c>)
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <HAL_MspInit+0x4c>)
 8000ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000edc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_MspInit+0x4c>)
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	210f      	movs	r1, #15
 8000eee:	f06f 0001 	mvn.w	r0, #1
 8000ef2:	f000 fd4f 	bl	8001994 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000

08000f04 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b0ac      	sub	sp, #176	; 0xb0
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2288      	movs	r2, #136	; 0x88
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f008 fd71 	bl	8009a0c <memset>
  if(DFSDM1_Init == 0)
 8000f2a:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d142      	bne.n	8000fb8 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000f32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f36:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4618      	mov	r0, r3
 8000f44:	f002 fa98 	bl	8003478 <HAL_RCCEx_PeriphCLKConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000f4e:	f7ff ffab 	bl	8000ea8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000f52:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f56:	4a1b      	ldr	r2, [pc, #108]	; (8000fc4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f5e:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f6a:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6e:	4a15      	ldr	r2, [pc, #84]	; (8000fc4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f70:	f043 0310 	orr.w	r3, r3, #16
 8000f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f76:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	f003 0310 	and.w	r3, r3, #16
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000f82:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000f86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f9c:	2306      	movs	r3, #6
 8000f9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000faa:	f000 fea9 	bl	8001d00 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	4a02      	ldr	r2, [pc, #8]	; (8000fc0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000fb6:	6013      	str	r3, [r2, #0]
  }

}
 8000fb8:	bf00      	nop
 8000fba:	37b0      	adds	r7, #176	; 0xb0
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200007c8 	.word	0x200007c8
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	48001000 	.word	0x48001000

08000fcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b0ac      	sub	sp, #176	; 0xb0
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2288      	movs	r2, #136	; 0x88
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f008 fd0d 	bl	8009a0c <memset>
  if(hi2c->Instance==I2C2)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a21      	ldr	r2, [pc, #132]	; (800107c <HAL_I2C_MspInit+0xb0>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d13b      	bne.n	8001074 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001000:	2300      	movs	r3, #0
 8001002:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4618      	mov	r0, r3
 800100a:	f002 fa35 	bl	8003478 <HAL_RCCEx_PeriphCLKConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001014:	f7ff ff48 	bl	8000ea8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <HAL_I2C_MspInit+0xb4>)
 800101a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101c:	4a18      	ldr	r2, [pc, #96]	; (8001080 <HAL_I2C_MspInit+0xb4>)
 800101e:	f043 0302 	orr.w	r3, r3, #2
 8001022:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001024:	4b16      	ldr	r3, [pc, #88]	; (8001080 <HAL_I2C_MspInit+0xb4>)
 8001026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001030:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001034:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001038:	2312      	movs	r3, #18
 800103a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800103e:	2301      	movs	r3, #1
 8001040:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800104a:	2304      	movs	r3, #4
 800104c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001050:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001054:	4619      	mov	r1, r3
 8001056:	480b      	ldr	r0, [pc, #44]	; (8001084 <HAL_I2C_MspInit+0xb8>)
 8001058:	f000 fe52 	bl	8001d00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HAL_I2C_MspInit+0xb4>)
 800105e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001060:	4a07      	ldr	r2, [pc, #28]	; (8001080 <HAL_I2C_MspInit+0xb4>)
 8001062:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001066:	6593      	str	r3, [r2, #88]	; 0x58
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_I2C_MspInit+0xb4>)
 800106a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001074:	bf00      	nop
 8001076:	37b0      	adds	r7, #176	; 0xb0
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40005800 	.word	0x40005800
 8001080:	40021000 	.word	0x40021000
 8001084:	48000400 	.word	0x48000400

08001088 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a17      	ldr	r2, [pc, #92]	; (8001104 <HAL_QSPI_MspInit+0x7c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d128      	bne.n	80010fc <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <HAL_QSPI_MspInit+0x80>)
 80010ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010ae:	4a16      	ldr	r2, [pc, #88]	; (8001108 <HAL_QSPI_MspInit+0x80>)
 80010b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b4:	6513      	str	r3, [r2, #80]	; 0x50
 80010b6:	4b14      	ldr	r3, [pc, #80]	; (8001108 <HAL_QSPI_MspInit+0x80>)
 80010b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <HAL_QSPI_MspInit+0x80>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	4a10      	ldr	r2, [pc, #64]	; (8001108 <HAL_QSPI_MspInit+0x80>)
 80010c8:	f043 0310 	orr.w	r3, r3, #16
 80010cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <HAL_QSPI_MspInit+0x80>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	f003 0310 	and.w	r3, r3, #16
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80010da:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80010de:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80010ec:	230a      	movs	r3, #10
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4619      	mov	r1, r3
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <HAL_QSPI_MspInit+0x84>)
 80010f8:	f000 fe02 	bl	8001d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80010fc:	bf00      	nop
 80010fe:	3728      	adds	r7, #40	; 0x28
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	a0001000 	.word	0xa0001000
 8001108:	40021000 	.word	0x40021000
 800110c:	48001000 	.word	0x48001000

08001110 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a17      	ldr	r2, [pc, #92]	; (800118c <HAL_SPI_MspInit+0x7c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d128      	bne.n	8001184 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <HAL_SPI_MspInit+0x80>)
 8001134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001136:	4a16      	ldr	r2, [pc, #88]	; (8001190 <HAL_SPI_MspInit+0x80>)
 8001138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800113c:	6593      	str	r3, [r2, #88]	; 0x58
 800113e:	4b14      	ldr	r3, [pc, #80]	; (8001190 <HAL_SPI_MspInit+0x80>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001142:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <HAL_SPI_MspInit+0x80>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	4a10      	ldr	r2, [pc, #64]	; (8001190 <HAL_SPI_MspInit+0x80>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <HAL_SPI_MspInit+0x80>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001162:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001174:	2306      	movs	r3, #6
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	4619      	mov	r1, r3
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <HAL_SPI_MspInit+0x84>)
 8001180:	f000 fdbe 	bl	8001d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001184:	bf00      	nop
 8001186:	3728      	adds	r7, #40	; 0x28
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40003c00 	.word	0x40003c00
 8001190:	40021000 	.word	0x40021000
 8001194:	48000800 	.word	0x48000800

08001198 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b0ae      	sub	sp, #184	; 0xb8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	2288      	movs	r2, #136	; 0x88
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f008 fc27 	bl	8009a0c <memset>
  if(huart->Instance==USART1)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a46      	ldr	r2, [pc, #280]	; (80012dc <HAL_UART_MspInit+0x144>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d143      	bne.n	8001250 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011c8:	2301      	movs	r3, #1
 80011ca:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011cc:	2300      	movs	r3, #0
 80011ce:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d0:	f107 031c 	add.w	r3, r7, #28
 80011d4:	4618      	mov	r0, r3
 80011d6:	f002 f94f 	bl	8003478 <HAL_RCCEx_PeriphCLKConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011e0:	f7ff fe62 	bl	8000ea8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011e4:	4b3e      	ldr	r3, [pc, #248]	; (80012e0 <HAL_UART_MspInit+0x148>)
 80011e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e8:	4a3d      	ldr	r2, [pc, #244]	; (80012e0 <HAL_UART_MspInit+0x148>)
 80011ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ee:	6613      	str	r3, [r2, #96]	; 0x60
 80011f0:	4b3b      	ldr	r3, [pc, #236]	; (80012e0 <HAL_UART_MspInit+0x148>)
 80011f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f8:	61bb      	str	r3, [r7, #24]
 80011fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fc:	4b38      	ldr	r3, [pc, #224]	; (80012e0 <HAL_UART_MspInit+0x148>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001200:	4a37      	ldr	r2, [pc, #220]	; (80012e0 <HAL_UART_MspInit+0x148>)
 8001202:	f043 0302 	orr.w	r3, r3, #2
 8001206:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001208:	4b35      	ldr	r3, [pc, #212]	; (80012e0 <HAL_UART_MspInit+0x148>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001214:	23c0      	movs	r3, #192	; 0xc0
 8001216:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800122c:	2307      	movs	r3, #7
 800122e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001232:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001236:	4619      	mov	r1, r3
 8001238:	482a      	ldr	r0, [pc, #168]	; (80012e4 <HAL_UART_MspInit+0x14c>)
 800123a:	f000 fd61 	bl	8001d00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2105      	movs	r1, #5
 8001242:	2025      	movs	r0, #37	; 0x25
 8001244:	f000 fba6 	bl	8001994 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001248:	2025      	movs	r0, #37	; 0x25
 800124a:	f000 fbbf 	bl	80019cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800124e:	e040      	b.n	80012d2 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART3)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a24      	ldr	r2, [pc, #144]	; (80012e8 <HAL_UART_MspInit+0x150>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d13b      	bne.n	80012d2 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800125a:	2304      	movs	r3, #4
 800125c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800125e:	2300      	movs	r3, #0
 8001260:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4618      	mov	r0, r3
 8001268:	f002 f906 	bl	8003478 <HAL_RCCEx_PeriphCLKConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_UART_MspInit+0xde>
      Error_Handler();
 8001272:	f7ff fe19 	bl	8000ea8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <HAL_UART_MspInit+0x148>)
 8001278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127a:	4a19      	ldr	r2, [pc, #100]	; (80012e0 <HAL_UART_MspInit+0x148>)
 800127c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001280:	6593      	str	r3, [r2, #88]	; 0x58
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <HAL_UART_MspInit+0x148>)
 8001284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_UART_MspInit+0x148>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	4a13      	ldr	r2, [pc, #76]	; (80012e0 <HAL_UART_MspInit+0x148>)
 8001294:	f043 0308 	orr.w	r3, r3, #8
 8001298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <HAL_UART_MspInit+0x148>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80012a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012c0:	2307      	movs	r3, #7
 80012c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012ca:	4619      	mov	r1, r3
 80012cc:	4807      	ldr	r0, [pc, #28]	; (80012ec <HAL_UART_MspInit+0x154>)
 80012ce:	f000 fd17 	bl	8001d00 <HAL_GPIO_Init>
}
 80012d2:	bf00      	nop
 80012d4:	37b8      	adds	r7, #184	; 0xb8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40013800 	.word	0x40013800
 80012e0:	40021000 	.word	0x40021000
 80012e4:	48000400 	.word	0x48000400
 80012e8:	40004800 	.word	0x40004800
 80012ec:	48000c00 	.word	0x48000c00

080012f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b0ac      	sub	sp, #176	; 0xb0
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	2288      	movs	r2, #136	; 0x88
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f008 fb7b 	bl	8009a0c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800131e:	d17c      	bne.n	800141a <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001324:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001326:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800132a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800132e:	2301      	movs	r3, #1
 8001330:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001332:	2301      	movs	r3, #1
 8001334:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001336:	2318      	movs	r3, #24
 8001338:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800133a:	2307      	movs	r3, #7
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800133e:	2302      	movs	r3, #2
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001342:	2302      	movs	r3, #2
 8001344:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001346:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800134a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4618      	mov	r0, r3
 8001352:	f002 f891 	bl	8003478 <HAL_RCCEx_PeriphCLKConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800135c:	f7ff fda4 	bl	8000ea8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001360:	4b30      	ldr	r3, [pc, #192]	; (8001424 <HAL_PCD_MspInit+0x134>)
 8001362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001364:	4a2f      	ldr	r2, [pc, #188]	; (8001424 <HAL_PCD_MspInit+0x134>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136c:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <HAL_PCD_MspInit+0x134>)
 800136e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800137c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001380:	2300      	movs	r3, #0
 8001382:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800138c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001390:	4619      	mov	r1, r3
 8001392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001396:	f000 fcb3 	bl	8001d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800139a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800139e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ae:	2303      	movs	r3, #3
 80013b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013b4:	230a      	movs	r3, #10
 80013b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013be:	4619      	mov	r1, r3
 80013c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c4:	f000 fc9c 	bl	8001d00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <HAL_PCD_MspInit+0x134>)
 80013ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013cc:	4a15      	ldr	r2, [pc, #84]	; (8001424 <HAL_PCD_MspInit+0x134>)
 80013ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d4:	4b13      	ldr	r3, [pc, #76]	; (8001424 <HAL_PCD_MspInit+0x134>)
 80013d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013e0:	4b10      	ldr	r3, [pc, #64]	; (8001424 <HAL_PCD_MspInit+0x134>)
 80013e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d114      	bne.n	8001416 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ec:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <HAL_PCD_MspInit+0x134>)
 80013ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f0:	4a0c      	ldr	r2, [pc, #48]	; (8001424 <HAL_PCD_MspInit+0x134>)
 80013f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f6:	6593      	str	r3, [r2, #88]	; 0x58
 80013f8:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <HAL_PCD_MspInit+0x134>)
 80013fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001404:	f001 f93a 	bl	800267c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_PCD_MspInit+0x134>)
 800140a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140c:	4a05      	ldr	r2, [pc, #20]	; (8001424 <HAL_PCD_MspInit+0x134>)
 800140e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001412:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001414:	e001      	b.n	800141a <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001416:	f001 f931 	bl	800267c <HAL_PWREx_EnableVddUSB>
}
 800141a:	bf00      	nop
 800141c:	37b0      	adds	r7, #176	; 0xb0
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000

08001428 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08c      	sub	sp, #48	; 0x30
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001430:	2300      	movs	r3, #0
 8001432:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001436:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <HAL_InitTick+0xc8>)
 8001438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143a:	4a2d      	ldr	r2, [pc, #180]	; (80014f0 <HAL_InitTick+0xc8>)
 800143c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001440:	6613      	str	r3, [r2, #96]	; 0x60
 8001442:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <HAL_InitTick+0xc8>)
 8001444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800144e:	f107 020c 	add.w	r2, r7, #12
 8001452:	f107 0310 	add.w	r3, r7, #16
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f001 ff7b 	bl	8003354 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800145e:	f001 ff63 	bl	8003328 <HAL_RCC_GetPCLK2Freq>
 8001462:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001466:	4a23      	ldr	r2, [pc, #140]	; (80014f4 <HAL_InitTick+0xcc>)
 8001468:	fba2 2303 	umull	r2, r3, r2, r3
 800146c:	0c9b      	lsrs	r3, r3, #18
 800146e:	3b01      	subs	r3, #1
 8001470:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001472:	4b21      	ldr	r3, [pc, #132]	; (80014f8 <HAL_InitTick+0xd0>)
 8001474:	4a21      	ldr	r2, [pc, #132]	; (80014fc <HAL_InitTick+0xd4>)
 8001476:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001478:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <HAL_InitTick+0xd0>)
 800147a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800147e:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001480:	4a1d      	ldr	r2, [pc, #116]	; (80014f8 <HAL_InitTick+0xd0>)
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001486:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <HAL_InitTick+0xd0>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148c:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <HAL_InitTick+0xd0>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001492:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <HAL_InitTick+0xd0>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8001498:	4817      	ldr	r0, [pc, #92]	; (80014f8 <HAL_InitTick+0xd0>)
 800149a:	f002 fd5c 	bl	8003f56 <HAL_TIM_Base_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80014a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d11b      	bne.n	80014e4 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 80014ac:	4812      	ldr	r0, [pc, #72]	; (80014f8 <HAL_InitTick+0xd0>)
 80014ae:	f002 fdb3 	bl	8004018 <HAL_TIM_Base_Start_IT>
 80014b2:	4603      	mov	r3, r0
 80014b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80014b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d111      	bne.n	80014e4 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80014c0:	201a      	movs	r0, #26
 80014c2:	f000 fa83 	bl	80019cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b0f      	cmp	r3, #15
 80014ca:	d808      	bhi.n	80014de <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 80014cc:	2200      	movs	r2, #0
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	201a      	movs	r0, #26
 80014d2:	f000 fa5f 	bl	8001994 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <HAL_InitTick+0xd8>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	e002      	b.n	80014e4 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80014e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3730      	adds	r7, #48	; 0x30
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40021000 	.word	0x40021000
 80014f4:	431bde83 	.word	0x431bde83
 80014f8:	200007cc 	.word	0x200007cc
 80014fc:	40014800 	.word	0x40014800
 8001500:	20000004 	.word	0x20000004

08001504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001508:	e7fe      	b.n	8001508 <NMI_Handler+0x4>

0800150a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150e:	e7fe      	b.n	800150e <HardFault_Handler+0x4>

08001510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <MemManage_Handler+0x4>

08001516 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151a:	e7fe      	b.n	800151a <BusFault_Handler+0x4>

0800151c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <UsageFault_Handler+0x4>

08001522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001534:	2020      	movs	r0, #32
 8001536:	f000 fda5 	bl	8002084 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800153a:	2040      	movs	r0, #64	; 0x40
 800153c:	f000 fda2 	bl	8002084 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001540:	2080      	movs	r0, #128	; 0x80
 8001542:	f000 fd9f 	bl	8002084 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001546:	f44f 7080 	mov.w	r0, #256	; 0x100
 800154a:	f000 fd9b 	bl	8002084 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800155a:	f002 fdcd 	bl	80040f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200007cc 	.word	0x200007cc

08001568 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <USART1_IRQHandler+0x10>)
 800156e:	f003 f979 	bl	8004864 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200001d0 	.word	0x200001d0

0800157c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001580:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001584:	f000 fd7e 	bl	8002084 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001588:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800158c:	f000 fd7a 	bl	8002084 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001590:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001594:	f000 fd76 	bl	8002084 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001598:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800159c:	f000 fd72 	bl	8002084 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80015a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80015a4:	f000 fd6e 	bl	8002084 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}

080015ac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	e00a      	b.n	80015d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015be:	f7ff f89b 	bl	80006f8 <__io_getchar>
 80015c2:	4601      	mov	r1, r0
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	60ba      	str	r2, [r7, #8]
 80015ca:	b2ca      	uxtb	r2, r1
 80015cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	3301      	adds	r3, #1
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	429a      	cmp	r2, r3
 80015da:	dbf0      	blt.n	80015be <_read+0x12>
  }

  return len;
 80015dc:	687b      	ldr	r3, [r7, #4]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b086      	sub	sp, #24
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	e009      	b.n	800160c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	60ba      	str	r2, [r7, #8]
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff f85b 	bl	80006bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3301      	adds	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	429a      	cmp	r2, r3
 8001612:	dbf1      	blt.n	80015f8 <_write+0x12>
  }
  return len;
 8001614:	687b      	ldr	r3, [r7, #4]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <_close>:

int _close(int file)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
}
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001646:	605a      	str	r2, [r3, #4]
  return 0;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <_isatty>:

int _isatty(int file)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800165e:	2301      	movs	r3, #1
}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001690:	4a14      	ldr	r2, [pc, #80]	; (80016e4 <_sbrk+0x5c>)
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <_sbrk+0x60>)
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d102      	bne.n	80016aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <_sbrk+0x64>)
 80016a6:	4a12      	ldr	r2, [pc, #72]	; (80016f0 <_sbrk+0x68>)
 80016a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <_sbrk+0x64>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d207      	bcs.n	80016c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b8:	f008 fa4c 	bl	8009b54 <__errno>
 80016bc:	4603      	mov	r3, r0
 80016be:	220c      	movs	r2, #12
 80016c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
 80016c6:	e009      	b.n	80016dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <_sbrk+0x64>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <_sbrk+0x64>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	4a05      	ldr	r2, [pc, #20]	; (80016ec <_sbrk+0x64>)
 80016d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016da:	68fb      	ldr	r3, [r7, #12]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20018000 	.word	0x20018000
 80016e8:	00000400 	.word	0x00000400
 80016ec:	20000818 	.word	0x20000818
 80016f0:	20003aa0 	.word	0x20003aa0

080016f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <SystemInit+0x20>)
 80016fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016fe:	4a05      	ldr	r2, [pc, #20]	; (8001714 <SystemInit+0x20>)
 8001700:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001704:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001718:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001750 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800171c:	f7ff ffea 	bl	80016f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001720:	480c      	ldr	r0, [pc, #48]	; (8001754 <LoopForever+0x6>)
  ldr r1, =_edata
 8001722:	490d      	ldr	r1, [pc, #52]	; (8001758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001724:	4a0d      	ldr	r2, [pc, #52]	; (800175c <LoopForever+0xe>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001728:	e002      	b.n	8001730 <LoopCopyDataInit>

0800172a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800172c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172e:	3304      	adds	r3, #4

08001730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001734:	d3f9      	bcc.n	800172a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001736:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001738:	4c0a      	ldr	r4, [pc, #40]	; (8001764 <LoopForever+0x16>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800173c:	e001      	b.n	8001742 <LoopFillZerobss>

0800173e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001740:	3204      	adds	r2, #4

08001742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001744:	d3fb      	bcc.n	800173e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001746:	f008 fa0b 	bl	8009b60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800174a:	f7fe ffe9 	bl	8000720 <main>

0800174e <LoopForever>:

LoopForever:
    b LoopForever
 800174e:	e7fe      	b.n	800174e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001750:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001758:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800175c:	0800a710 	.word	0x0800a710
  ldr r2, =_sbss
 8001760:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001764:	20003aa0 	.word	0x20003aa0

08001768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001768:	e7fe      	b.n	8001768 <ADC1_2_IRQHandler>

0800176a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001774:	2003      	movs	r0, #3
 8001776:	f000 f902 	bl	800197e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800177a:	200f      	movs	r0, #15
 800177c:	f7ff fe54 	bl	8001428 <HAL_InitTick>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d002      	beq.n	800178c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	71fb      	strb	r3, [r7, #7]
 800178a:	e001      	b.n	8001790 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800178c:	f7ff fb92 	bl	8000eb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001790:	79fb      	ldrb	r3, [r7, #7]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_IncTick+0x20>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_IncTick+0x24>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <HAL_IncTick+0x24>)
 80017ae:	6013      	str	r3, [r2, #0]
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	20000008 	.word	0x20000008
 80017c0:	2000081c 	.word	0x2000081c

080017c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return uwTick;
 80017c8:	4b03      	ldr	r3, [pc, #12]	; (80017d8 <HAL_GetTick+0x14>)
 80017ca:	681b      	ldr	r3, [r3, #0]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	2000081c 	.word	0x2000081c

080017dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e4:	f7ff ffee 	bl	80017c4 <HAL_GetTick>
 80017e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f4:	d005      	beq.n	8001802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017f6:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <HAL_Delay+0x44>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4413      	add	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001802:	bf00      	nop
 8001804:	f7ff ffde 	bl	80017c4 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	429a      	cmp	r2, r3
 8001812:	d8f7      	bhi.n	8001804 <HAL_Delay+0x28>
  {
  }
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000008 	.word	0x20000008

08001824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001840:	4013      	ands	r3, r2
 8001842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800184c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001856:	4a04      	ldr	r2, [pc, #16]	; (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	60d3      	str	r3, [r2, #12]
}
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <__NVIC_GetPriorityGrouping+0x18>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	0a1b      	lsrs	r3, r3, #8
 8001876:	f003 0307 	and.w	r3, r3, #7
}
 800187a:	4618      	mov	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	2b00      	cmp	r3, #0
 8001898:	db0b      	blt.n	80018b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	f003 021f 	and.w	r2, r3, #31
 80018a0:	4907      	ldr	r1, [pc, #28]	; (80018c0 <__NVIC_EnableIRQ+0x38>)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	095b      	lsrs	r3, r3, #5
 80018a8:	2001      	movs	r0, #1
 80018aa:	fa00 f202 	lsl.w	r2, r0, r2
 80018ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000e100 	.word	0xe000e100

080018c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	db0a      	blt.n	80018ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	490c      	ldr	r1, [pc, #48]	; (8001910 <__NVIC_SetPriority+0x4c>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	0112      	lsls	r2, r2, #4
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	440b      	add	r3, r1
 80018e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ec:	e00a      	b.n	8001904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4908      	ldr	r1, [pc, #32]	; (8001914 <__NVIC_SetPriority+0x50>)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	3b04      	subs	r3, #4
 80018fc:	0112      	lsls	r2, r2, #4
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	440b      	add	r3, r1
 8001902:	761a      	strb	r2, [r3, #24]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000e100 	.word	0xe000e100
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f1c3 0307 	rsb	r3, r3, #7
 8001932:	2b04      	cmp	r3, #4
 8001934:	bf28      	it	cs
 8001936:	2304      	movcs	r3, #4
 8001938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3304      	adds	r3, #4
 800193e:	2b06      	cmp	r3, #6
 8001940:	d902      	bls.n	8001948 <NVIC_EncodePriority+0x30>
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3b03      	subs	r3, #3
 8001946:	e000      	b.n	800194a <NVIC_EncodePriority+0x32>
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	f04f 32ff 	mov.w	r2, #4294967295
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	401a      	ands	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001960:	f04f 31ff 	mov.w	r1, #4294967295
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	43d9      	mvns	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	4313      	orrs	r3, r2
         );
}
 8001972:	4618      	mov	r0, r3
 8001974:	3724      	adds	r7, #36	; 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ff4c 	bl	8001824 <__NVIC_SetPriorityGrouping>
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
 80019a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019a6:	f7ff ff61 	bl	800186c <__NVIC_GetPriorityGrouping>
 80019aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	68b9      	ldr	r1, [r7, #8]
 80019b0:	6978      	ldr	r0, [r7, #20]
 80019b2:	f7ff ffb1 	bl	8001918 <NVIC_EncodePriority>
 80019b6:	4602      	mov	r2, r0
 80019b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019bc:	4611      	mov	r1, r2
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff ff80 	bl	80018c4 <__NVIC_SetPriority>
}
 80019c4:	bf00      	nop
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff ff54 	bl	8001888 <__NVIC_EnableIRQ>
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e0ac      	b.n	8001b54 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 f8b2 	bl	8001b68 <DFSDM_GetChannelFromInstance>
 8001a04:	4603      	mov	r3, r0
 8001a06:	4a55      	ldr	r2, [pc, #340]	; (8001b5c <HAL_DFSDM_ChannelInit+0x174>)
 8001a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e09f      	b.n	8001b54 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff fa75 	bl	8000f04 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001a1a:	4b51      	ldr	r3, [pc, #324]	; (8001b60 <HAL_DFSDM_ChannelInit+0x178>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	4a4f      	ldr	r2, [pc, #316]	; (8001b60 <HAL_DFSDM_ChannelInit+0x178>)
 8001a22:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001a24:	4b4e      	ldr	r3, [pc, #312]	; (8001b60 <HAL_DFSDM_ChannelInit+0x178>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d125      	bne.n	8001a78 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001a2c:	4b4d      	ldr	r3, [pc, #308]	; (8001b64 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a4c      	ldr	r2, [pc, #304]	; (8001b64 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001a36:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001a38:	4b4a      	ldr	r3, [pc, #296]	; (8001b64 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	4948      	ldr	r1, [pc, #288]	; (8001b64 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001a46:	4b47      	ldr	r3, [pc, #284]	; (8001b64 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a46      	ldr	r2, [pc, #280]	; (8001b64 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a4c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001a50:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	791b      	ldrb	r3, [r3, #4]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d108      	bne.n	8001a6c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001a5a:	4b42      	ldr	r3, [pc, #264]	; (8001b64 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	041b      	lsls	r3, r3, #16
 8001a66:	493f      	ldr	r1, [pc, #252]	; (8001b64 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001a6c:	4b3d      	ldr	r3, [pc, #244]	; (8001b64 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a3c      	ldr	r2, [pc, #240]	; (8001b64 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a76:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001a86:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6819      	ldr	r1, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a96:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001a9c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 020f 	bic.w	r2, r2, #15
 8001ab4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6819      	ldr	r1, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001adc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6899      	ldr	r1, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aec:	3b01      	subs	r3, #1
 8001aee:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001af0:	431a      	orrs	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f002 0207 	and.w	r2, r2, #7
 8001b08:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6859      	ldr	r1, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b34:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f810 	bl	8001b68 <DFSDM_GetChannelFromInstance>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	4904      	ldr	r1, [pc, #16]	; (8001b5c <HAL_DFSDM_ChannelInit+0x174>)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000824 	.word	0x20000824
 8001b60:	20000820 	.word	0x20000820
 8001b64:	40016000 	.word	0x40016000

08001b68 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a1c      	ldr	r2, [pc, #112]	; (8001be4 <DFSDM_GetChannelFromInstance+0x7c>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d102      	bne.n	8001b7e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	e02b      	b.n	8001bd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a19      	ldr	r2, [pc, #100]	; (8001be8 <DFSDM_GetChannelFromInstance+0x80>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d102      	bne.n	8001b8c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001b86:	2301      	movs	r3, #1
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	e024      	b.n	8001bd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a17      	ldr	r2, [pc, #92]	; (8001bec <DFSDM_GetChannelFromInstance+0x84>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d102      	bne.n	8001b9a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001b94:	2302      	movs	r3, #2
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	e01d      	b.n	8001bd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a14      	ldr	r2, [pc, #80]	; (8001bf0 <DFSDM_GetChannelFromInstance+0x88>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d102      	bne.n	8001ba8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	e016      	b.n	8001bd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a12      	ldr	r2, [pc, #72]	; (8001bf4 <DFSDM_GetChannelFromInstance+0x8c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d102      	bne.n	8001bb6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001bb0:	2305      	movs	r3, #5
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	e00f      	b.n	8001bd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a0f      	ldr	r2, [pc, #60]	; (8001bf8 <DFSDM_GetChannelFromInstance+0x90>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d102      	bne.n	8001bc4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001bbe:	2306      	movs	r3, #6
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	e008      	b.n	8001bd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a0d      	ldr	r2, [pc, #52]	; (8001bfc <DFSDM_GetChannelFromInstance+0x94>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d102      	bne.n	8001bd2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001bcc:	2307      	movs	r3, #7
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	e001      	b.n	8001bd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	40016000 	.word	0x40016000
 8001be8:	40016020 	.word	0x40016020
 8001bec:	40016040 	.word	0x40016040
 8001bf0:	40016080 	.word	0x40016080
 8001bf4:	400160a0 	.word	0x400160a0
 8001bf8:	400160c0 	.word	0x400160c0
 8001bfc:	400160e0 	.word	0x400160e0

08001c00 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d008      	beq.n	8001c2a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e022      	b.n	8001c70 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 020e 	bic.w	r2, r2, #14
 8001c38:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0201 	bic.w	r2, r2, #1
 8001c48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f003 021c 	and.w	r2, r3, #28
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	2101      	movs	r1, #1
 8001c58:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d005      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2204      	movs	r2, #4
 8001c98:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	73fb      	strb	r3, [r7, #15]
 8001c9e:	e029      	b.n	8001cf4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 020e 	bic.w	r2, r2, #14
 8001cae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0201 	bic.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc4:	f003 021c 	and.w	r2, r3, #28
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	2101      	movs	r1, #1
 8001cce:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	4798      	blx	r3
    }
  }
  return status;
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b087      	sub	sp, #28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d0e:	e17f      	b.n	8002010 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	2101      	movs	r1, #1
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 8171 	beq.w	800200a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d005      	beq.n	8001d40 <HAL_GPIO_Init+0x40>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d130      	bne.n	8001da2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d76:	2201      	movs	r2, #1
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	091b      	lsrs	r3, r3, #4
 8001d8c:	f003 0201 	and.w	r2, r3, #1
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	2b03      	cmp	r3, #3
 8001dac:	d118      	bne.n	8001de0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001db4:	2201      	movs	r2, #1
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	08db      	lsrs	r3, r3, #3
 8001dca:	f003 0201 	and.w	r2, r3, #1
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b03      	cmp	r3, #3
 8001dea:	d017      	beq.n	8001e1c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	2203      	movs	r2, #3
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d123      	bne.n	8001e70 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	08da      	lsrs	r2, r3, #3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3208      	adds	r2, #8
 8001e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e34:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	220f      	movs	r2, #15
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	08da      	lsrs	r2, r3, #3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3208      	adds	r2, #8
 8001e6a:	6939      	ldr	r1, [r7, #16]
 8001e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0203 	and.w	r2, r3, #3
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 80ac 	beq.w	800200a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb2:	4b5f      	ldr	r3, [pc, #380]	; (8002030 <HAL_GPIO_Init+0x330>)
 8001eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb6:	4a5e      	ldr	r2, [pc, #376]	; (8002030 <HAL_GPIO_Init+0x330>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6613      	str	r3, [r2, #96]	; 0x60
 8001ebe:	4b5c      	ldr	r3, [pc, #368]	; (8002030 <HAL_GPIO_Init+0x330>)
 8001ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001eca:	4a5a      	ldr	r2, [pc, #360]	; (8002034 <HAL_GPIO_Init+0x334>)
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	089b      	lsrs	r3, r3, #2
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	220f      	movs	r2, #15
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4013      	ands	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ef4:	d025      	beq.n	8001f42 <HAL_GPIO_Init+0x242>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4f      	ldr	r2, [pc, #316]	; (8002038 <HAL_GPIO_Init+0x338>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d01f      	beq.n	8001f3e <HAL_GPIO_Init+0x23e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a4e      	ldr	r2, [pc, #312]	; (800203c <HAL_GPIO_Init+0x33c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d019      	beq.n	8001f3a <HAL_GPIO_Init+0x23a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a4d      	ldr	r2, [pc, #308]	; (8002040 <HAL_GPIO_Init+0x340>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d013      	beq.n	8001f36 <HAL_GPIO_Init+0x236>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4c      	ldr	r2, [pc, #304]	; (8002044 <HAL_GPIO_Init+0x344>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d00d      	beq.n	8001f32 <HAL_GPIO_Init+0x232>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4b      	ldr	r2, [pc, #300]	; (8002048 <HAL_GPIO_Init+0x348>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d007      	beq.n	8001f2e <HAL_GPIO_Init+0x22e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a4a      	ldr	r2, [pc, #296]	; (800204c <HAL_GPIO_Init+0x34c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d101      	bne.n	8001f2a <HAL_GPIO_Init+0x22a>
 8001f26:	2306      	movs	r3, #6
 8001f28:	e00c      	b.n	8001f44 <HAL_GPIO_Init+0x244>
 8001f2a:	2307      	movs	r3, #7
 8001f2c:	e00a      	b.n	8001f44 <HAL_GPIO_Init+0x244>
 8001f2e:	2305      	movs	r3, #5
 8001f30:	e008      	b.n	8001f44 <HAL_GPIO_Init+0x244>
 8001f32:	2304      	movs	r3, #4
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x244>
 8001f36:	2303      	movs	r3, #3
 8001f38:	e004      	b.n	8001f44 <HAL_GPIO_Init+0x244>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e002      	b.n	8001f44 <HAL_GPIO_Init+0x244>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <HAL_GPIO_Init+0x244>
 8001f42:	2300      	movs	r3, #0
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	f002 0203 	and.w	r2, r2, #3
 8001f4a:	0092      	lsls	r2, r2, #2
 8001f4c:	4093      	lsls	r3, r2
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f54:	4937      	ldr	r1, [pc, #220]	; (8002034 <HAL_GPIO_Init+0x334>)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f62:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <HAL_GPIO_Init+0x350>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f86:	4a32      	ldr	r2, [pc, #200]	; (8002050 <HAL_GPIO_Init+0x350>)
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f8c:	4b30      	ldr	r3, [pc, #192]	; (8002050 <HAL_GPIO_Init+0x350>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fb0:	4a27      	ldr	r2, [pc, #156]	; (8002050 <HAL_GPIO_Init+0x350>)
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fb6:	4b26      	ldr	r3, [pc, #152]	; (8002050 <HAL_GPIO_Init+0x350>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fda:	4a1d      	ldr	r2, [pc, #116]	; (8002050 <HAL_GPIO_Init+0x350>)
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <HAL_GPIO_Init+0x350>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002004:	4a12      	ldr	r2, [pc, #72]	; (8002050 <HAL_GPIO_Init+0x350>)
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	3301      	adds	r3, #1
 800200e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	fa22 f303 	lsr.w	r3, r2, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	f47f ae78 	bne.w	8001d10 <HAL_GPIO_Init+0x10>
  }
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	371c      	adds	r7, #28
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
 8002034:	40010000 	.word	0x40010000
 8002038:	48000400 	.word	0x48000400
 800203c:	48000800 	.word	0x48000800
 8002040:	48000c00 	.word	0x48000c00
 8002044:	48001000 	.word	0x48001000
 8002048:	48001400 	.word	0x48001400
 800204c:	48001800 	.word	0x48001800
 8002050:	40010400 	.word	0x40010400

08002054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	807b      	strh	r3, [r7, #2]
 8002060:	4613      	mov	r3, r2
 8002062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002064:	787b      	ldrb	r3, [r7, #1]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800206a:	887a      	ldrh	r2, [r7, #2]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002070:	e002      	b.n	8002078 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002072:	887a      	ldrh	r2, [r7, #2]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800208e:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002090:	695a      	ldr	r2, [r3, #20]
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	4013      	ands	r3, r2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d006      	beq.n	80020a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800209a:	4a05      	ldr	r2, [pc, #20]	; (80020b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020a0:	88fb      	ldrh	r3, [r7, #6]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 f806 	bl	80020b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40010400 	.word	0x40010400

080020b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e08d      	b.n	80021f8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d106      	bne.n	80020f6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7fe ff6b 	bl	8000fcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2224      	movs	r2, #36	; 0x24
 80020fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0201 	bic.w	r2, r2, #1
 800210c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800211a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800212a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d107      	bne.n	8002144 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	e006      	b.n	8002152 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002150:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d108      	bne.n	800216c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	e007      	b.n	800217c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800217a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800218a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800218e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800219e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69d9      	ldr	r1, [r3, #28]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1a      	ldr	r2, [r3, #32]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 0201 	orr.w	r2, r2, #1
 80021d8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2220      	movs	r2, #32
 80021e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b20      	cmp	r3, #32
 8002214:	d138      	bne.n	8002288 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002220:	2302      	movs	r3, #2
 8002222:	e032      	b.n	800228a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2224      	movs	r2, #36	; 0x24
 8002230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0201 	bic.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002252:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6819      	ldr	r1, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0201 	orr.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	e000      	b.n	800228a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002288:	2302      	movs	r3, #2
  }
}
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002296:	b480      	push	{r7}
 8002298:	b085      	sub	sp, #20
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b20      	cmp	r3, #32
 80022aa:	d139      	bne.n	8002320 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e033      	b.n	8002322 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2224      	movs	r2, #36	; 0x24
 80022c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0201 	bic.w	r2, r2, #1
 80022d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	021b      	lsls	r3, r3, #8
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2220      	movs	r2, #32
 8002310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800231c:	2300      	movs	r3, #0
 800231e:	e000      	b.n	8002322 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002320:	2302      	movs	r3, #2
  }
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b086      	sub	sp, #24
 8002332:	af02      	add	r7, sp, #8
 8002334:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e101      	b.n	8002544 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d106      	bne.n	800235a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7fe ffcb 	bl	80012f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2203      	movs	r2, #3
 800235e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f003 fe1e 	bl	8005fae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	7c1a      	ldrb	r2, [r3, #16]
 800237a:	f88d 2000 	strb.w	r2, [sp]
 800237e:	3304      	adds	r3, #4
 8002380:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002382:	f003 fde7 	bl	8005f54 <USB_CoreInit>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2202      	movs	r2, #2
 8002390:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0d5      	b.n	8002544 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2100      	movs	r1, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	f003 fe16 	bl	8005fd0 <USB_SetCurrentMode>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2202      	movs	r2, #2
 80023ae:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e0c6      	b.n	8002544 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b6:	2300      	movs	r3, #0
 80023b8:	73fb      	strb	r3, [r7, #15]
 80023ba:	e04a      	b.n	8002452 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023bc:	7bfa      	ldrb	r2, [r7, #15]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4413      	add	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	3315      	adds	r3, #21
 80023cc:	2201      	movs	r2, #1
 80023ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	3314      	adds	r3, #20
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023e4:	7bfa      	ldrb	r2, [r7, #15]
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	b298      	uxth	r0, r3
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4413      	add	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	332e      	adds	r3, #46	; 0x2e
 80023f8:	4602      	mov	r2, r0
 80023fa:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023fc:	7bfa      	ldrb	r2, [r7, #15]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4413      	add	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	3318      	adds	r3, #24
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4413      	add	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	331c      	adds	r3, #28
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	3320      	adds	r3, #32
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002438:	7bfa      	ldrb	r2, [r7, #15]
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	3324      	adds	r3, #36	; 0x24
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	3301      	adds	r3, #1
 8002450:	73fb      	strb	r3, [r7, #15]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	791b      	ldrb	r3, [r3, #4]
 8002456:	7bfa      	ldrb	r2, [r7, #15]
 8002458:	429a      	cmp	r2, r3
 800245a:	d3af      	bcc.n	80023bc <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800245c:	2300      	movs	r3, #0
 800245e:	73fb      	strb	r3, [r7, #15]
 8002460:	e044      	b.n	80024ec <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002462:	7bfa      	ldrb	r2, [r7, #15]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002478:	7bfa      	ldrb	r2, [r7, #15]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800248a:	7bfa      	ldrb	r2, [r7, #15]
 800248c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800248e:	7bfa      	ldrb	r2, [r7, #15]
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80024a0:	2200      	movs	r2, #0
 80024a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024a4:	7bfa      	ldrb	r2, [r7, #15]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	4413      	add	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024ba:	7bfa      	ldrb	r2, [r7, #15]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	4413      	add	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024d0:	7bfa      	ldrb	r2, [r7, #15]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4413      	add	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	3301      	adds	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	791b      	ldrb	r3, [r3, #4]
 80024f0:	7bfa      	ldrb	r2, [r7, #15]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d3b5      	bcc.n	8002462 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6818      	ldr	r0, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	7c1a      	ldrb	r2, [r3, #16]
 80024fe:	f88d 2000 	strb.w	r2, [sp]
 8002502:	3304      	adds	r3, #4
 8002504:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002506:	f003 fdaf 	bl	8006068 <USB_DevInit>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e013      	b.n	8002544 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	7b1b      	ldrb	r3, [r3, #12]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d102      	bne.n	8002538 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f80a 	bl	800254c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f003 ff54 	bl	80063ea <USB_DevDisconnect>

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257e:	f043 0303 	orr.w	r3, r3, #3
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800259e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a2:	6013      	str	r3, [r2, #0]
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40007000 	.word	0x40007000

080025b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025b8:	4b04      	ldr	r3, [pc, #16]	; (80025cc <HAL_PWREx_GetVoltageRange+0x18>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40007000 	.word	0x40007000

080025d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025de:	d130      	bne.n	8002642 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80025e0:	4b23      	ldr	r3, [pc, #140]	; (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ec:	d038      	beq.n	8002660 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025ee:	4b20      	ldr	r3, [pc, #128]	; (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025f6:	4a1e      	ldr	r2, [pc, #120]	; (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025fe:	4b1d      	ldr	r3, [pc, #116]	; (8002674 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2232      	movs	r2, #50	; 0x32
 8002604:	fb02 f303 	mul.w	r3, r2, r3
 8002608:	4a1b      	ldr	r2, [pc, #108]	; (8002678 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	0c9b      	lsrs	r3, r3, #18
 8002610:	3301      	adds	r3, #1
 8002612:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002614:	e002      	b.n	800261c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	3b01      	subs	r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800261c:	4b14      	ldr	r3, [pc, #80]	; (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002628:	d102      	bne.n	8002630 <HAL_PWREx_ControlVoltageScaling+0x60>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f2      	bne.n	8002616 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002630:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800263c:	d110      	bne.n	8002660 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e00f      	b.n	8002662 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002642:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800264a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800264e:	d007      	beq.n	8002660 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002650:	4b07      	ldr	r3, [pc, #28]	; (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002658:	4a05      	ldr	r2, [pc, #20]	; (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800265a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800265e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40007000 	.word	0x40007000
 8002674:	20000000 	.word	0x20000000
 8002678:	431bde83 	.word	0x431bde83

0800267c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	4a04      	ldr	r2, [pc, #16]	; (8002698 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800268a:	6053      	str	r3, [r2, #4]
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40007000 	.word	0x40007000

0800269c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af02      	add	r7, sp, #8
 80026a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80026a4:	f7ff f88e 	bl	80017c4 <HAL_GetTick>
 80026a8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e063      	b.n	800277c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10b      	bne.n	80026d8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7fe fcdd 	bl	8001088 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80026ce:	f241 3188 	movw	r1, #5000	; 0x1388
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f858 	bl	8002788 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	021a      	lsls	r2, r3, #8
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	2120      	movs	r1, #32
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f850 	bl	80027a4 <QSPI_WaitFlagStateUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002708:	7afb      	ldrb	r3, [r7, #11]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d131      	bne.n	8002772 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002718:	f023 0310 	bic.w	r3, r3, #16
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6852      	ldr	r2, [r2, #4]
 8002720:	0611      	lsls	r1, r2, #24
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68d2      	ldr	r2, [r2, #12]
 8002726:	4311      	orrs	r1, r2
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	430b      	orrs	r3, r1
 800272e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	4b13      	ldr	r3, [pc, #76]	; (8002784 <HAL_QSPI_Init+0xe8>)
 8002738:	4013      	ands	r3, r2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6912      	ldr	r2, [r2, #16]
 800273e:	0411      	lsls	r1, r2, #16
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6952      	ldr	r2, [r2, #20]
 8002744:	4311      	orrs	r1, r2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6992      	ldr	r2, [r2, #24]
 800274a:	4311      	orrs	r1, r2
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	430b      	orrs	r3, r1
 8002752:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800277a:	7afb      	ldrb	r3, [r7, #11]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	ffe0f8fe 	.word	0xffe0f8fe

08002788 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	4613      	mov	r3, r2
 80027b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80027b4:	e01a      	b.n	80027ec <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027bc:	d016      	beq.n	80027ec <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027be:	f7ff f801 	bl	80017c4 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d302      	bcc.n	80027d4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10b      	bne.n	80027ec <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2204      	movs	r2, #4
 80027d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e0:	f043 0201 	orr.w	r2, r3, #1
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e00e      	b.n	800280a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	bf14      	ite	ne
 80027fa:	2301      	movne	r3, #1
 80027fc:	2300      	moveq	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	429a      	cmp	r2, r3
 8002806:	d1d6      	bne.n	80027b6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e3ca      	b.n	8002fbc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002826:	4b97      	ldr	r3, [pc, #604]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002830:	4b94      	ldr	r3, [pc, #592]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 80e4 	beq.w	8002a10 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d007      	beq.n	800285e <HAL_RCC_OscConfig+0x4a>
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	2b0c      	cmp	r3, #12
 8002852:	f040 808b 	bne.w	800296c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2b01      	cmp	r3, #1
 800285a:	f040 8087 	bne.w	800296c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800285e:	4b89      	ldr	r3, [pc, #548]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d005      	beq.n	8002876 <HAL_RCC_OscConfig+0x62>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e3a2      	b.n	8002fbc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1a      	ldr	r2, [r3, #32]
 800287a:	4b82      	ldr	r3, [pc, #520]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b00      	cmp	r3, #0
 8002884:	d004      	beq.n	8002890 <HAL_RCC_OscConfig+0x7c>
 8002886:	4b7f      	ldr	r3, [pc, #508]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800288e:	e005      	b.n	800289c <HAL_RCC_OscConfig+0x88>
 8002890:	4b7c      	ldr	r3, [pc, #496]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 8002892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002896:	091b      	lsrs	r3, r3, #4
 8002898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800289c:	4293      	cmp	r3, r2
 800289e:	d223      	bcs.n	80028e8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 fd87 	bl	80033b8 <RCC_SetFlashLatencyFromMSIRange>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e383      	b.n	8002fbc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028b4:	4b73      	ldr	r3, [pc, #460]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a72      	ldr	r2, [pc, #456]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 80028ba:	f043 0308 	orr.w	r3, r3, #8
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	4b70      	ldr	r3, [pc, #448]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	496d      	ldr	r1, [pc, #436]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028d2:	4b6c      	ldr	r3, [pc, #432]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	4968      	ldr	r1, [pc, #416]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	604b      	str	r3, [r1, #4]
 80028e6:	e025      	b.n	8002934 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028e8:	4b66      	ldr	r3, [pc, #408]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a65      	ldr	r2, [pc, #404]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 80028ee:	f043 0308 	orr.w	r3, r3, #8
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	4b63      	ldr	r3, [pc, #396]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	4960      	ldr	r1, [pc, #384]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 8002902:	4313      	orrs	r3, r2
 8002904:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002906:	4b5f      	ldr	r3, [pc, #380]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	021b      	lsls	r3, r3, #8
 8002914:	495b      	ldr	r1, [pc, #364]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 8002916:	4313      	orrs	r3, r2
 8002918:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d109      	bne.n	8002934 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	4618      	mov	r0, r3
 8002926:	f000 fd47 	bl	80033b8 <RCC_SetFlashLatencyFromMSIRange>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e343      	b.n	8002fbc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002934:	f000 fc4a 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 8002938:	4602      	mov	r2, r0
 800293a:	4b52      	ldr	r3, [pc, #328]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	091b      	lsrs	r3, r3, #4
 8002940:	f003 030f 	and.w	r3, r3, #15
 8002944:	4950      	ldr	r1, [pc, #320]	; (8002a88 <HAL_RCC_OscConfig+0x274>)
 8002946:	5ccb      	ldrb	r3, [r1, r3]
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	fa22 f303 	lsr.w	r3, r2, r3
 8002950:	4a4e      	ldr	r2, [pc, #312]	; (8002a8c <HAL_RCC_OscConfig+0x278>)
 8002952:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002954:	4b4e      	ldr	r3, [pc, #312]	; (8002a90 <HAL_RCC_OscConfig+0x27c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f7fe fd65 	bl	8001428 <HAL_InitTick>
 800295e:	4603      	mov	r3, r0
 8002960:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d052      	beq.n	8002a0e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	e327      	b.n	8002fbc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d032      	beq.n	80029da <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002974:	4b43      	ldr	r3, [pc, #268]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a42      	ldr	r2, [pc, #264]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002980:	f7fe ff20 	bl	80017c4 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002988:	f7fe ff1c 	bl	80017c4 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e310      	b.n	8002fbc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800299a:	4b3a      	ldr	r3, [pc, #232]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029a6:	4b37      	ldr	r3, [pc, #220]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a36      	ldr	r2, [pc, #216]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 80029ac:	f043 0308 	orr.w	r3, r3, #8
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	4b34      	ldr	r3, [pc, #208]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	4931      	ldr	r1, [pc, #196]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029c4:	4b2f      	ldr	r3, [pc, #188]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	021b      	lsls	r3, r3, #8
 80029d2:	492c      	ldr	r1, [pc, #176]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]
 80029d8:	e01a      	b.n	8002a10 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029da:	4b2a      	ldr	r3, [pc, #168]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a29      	ldr	r2, [pc, #164]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 80029e0:	f023 0301 	bic.w	r3, r3, #1
 80029e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029e6:	f7fe feed 	bl	80017c4 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029ee:	f7fe fee9 	bl	80017c4 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e2dd      	b.n	8002fbc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a00:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1f0      	bne.n	80029ee <HAL_RCC_OscConfig+0x1da>
 8002a0c:	e000      	b.n	8002a10 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a0e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d074      	beq.n	8002b06 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d005      	beq.n	8002a2e <HAL_RCC_OscConfig+0x21a>
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	2b0c      	cmp	r3, #12
 8002a26:	d10e      	bne.n	8002a46 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d10b      	bne.n	8002a46 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a2e:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d064      	beq.n	8002b04 <HAL_RCC_OscConfig+0x2f0>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d160      	bne.n	8002b04 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e2ba      	b.n	8002fbc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a4e:	d106      	bne.n	8002a5e <HAL_RCC_OscConfig+0x24a>
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a0b      	ldr	r2, [pc, #44]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 8002a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	e026      	b.n	8002aac <HAL_RCC_OscConfig+0x298>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a66:	d115      	bne.n	8002a94 <HAL_RCC_OscConfig+0x280>
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a05      	ldr	r2, [pc, #20]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 8002a6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	4b03      	ldr	r3, [pc, #12]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a02      	ldr	r2, [pc, #8]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 8002a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	e014      	b.n	8002aac <HAL_RCC_OscConfig+0x298>
 8002a82:	bf00      	nop
 8002a84:	40021000 	.word	0x40021000
 8002a88:	0800a684 	.word	0x0800a684
 8002a8c:	20000000 	.word	0x20000000
 8002a90:	20000004 	.word	0x20000004
 8002a94:	4ba0      	ldr	r3, [pc, #640]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a9f      	ldr	r2, [pc, #636]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	4b9d      	ldr	r3, [pc, #628]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a9c      	ldr	r2, [pc, #624]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d013      	beq.n	8002adc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab4:	f7fe fe86 	bl	80017c4 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002abc:	f7fe fe82 	bl	80017c4 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b64      	cmp	r3, #100	; 0x64
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e276      	b.n	8002fbc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ace:	4b92      	ldr	r3, [pc, #584]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0x2a8>
 8002ada:	e014      	b.n	8002b06 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe fe72 	bl	80017c4 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae4:	f7fe fe6e 	bl	80017c4 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b64      	cmp	r3, #100	; 0x64
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e262      	b.n	8002fbc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002af6:	4b88      	ldr	r3, [pc, #544]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x2d0>
 8002b02:	e000      	b.n	8002b06 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d060      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	d005      	beq.n	8002b24 <HAL_RCC_OscConfig+0x310>
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	2b0c      	cmp	r3, #12
 8002b1c:	d119      	bne.n	8002b52 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d116      	bne.n	8002b52 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b24:	4b7c      	ldr	r3, [pc, #496]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_RCC_OscConfig+0x328>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e23f      	b.n	8002fbc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3c:	4b76      	ldr	r3, [pc, #472]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	061b      	lsls	r3, r3, #24
 8002b4a:	4973      	ldr	r1, [pc, #460]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b50:	e040      	b.n	8002bd4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d023      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b5a:	4b6f      	ldr	r3, [pc, #444]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a6e      	ldr	r2, [pc, #440]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b66:	f7fe fe2d 	bl	80017c4 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b6e:	f7fe fe29 	bl	80017c4 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e21d      	b.n	8002fbc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b80:	4b65      	ldr	r3, [pc, #404]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8c:	4b62      	ldr	r3, [pc, #392]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	061b      	lsls	r3, r3, #24
 8002b9a:	495f      	ldr	r1, [pc, #380]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	604b      	str	r3, [r1, #4]
 8002ba0:	e018      	b.n	8002bd4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ba2:	4b5d      	ldr	r3, [pc, #372]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a5c      	ldr	r2, [pc, #368]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bae:	f7fe fe09 	bl	80017c4 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb6:	f7fe fe05 	bl	80017c4 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e1f9      	b.n	8002fbc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bc8:	4b53      	ldr	r3, [pc, #332]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f0      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d03c      	beq.n	8002c5a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d01c      	beq.n	8002c22 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002be8:	4b4b      	ldr	r3, [pc, #300]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bee:	4a4a      	ldr	r2, [pc, #296]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf8:	f7fe fde4 	bl	80017c4 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c00:	f7fe fde0 	bl	80017c4 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e1d4      	b.n	8002fbc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c12:	4b41      	ldr	r3, [pc, #260]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0ef      	beq.n	8002c00 <HAL_RCC_OscConfig+0x3ec>
 8002c20:	e01b      	b.n	8002c5a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c22:	4b3d      	ldr	r3, [pc, #244]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c28:	4a3b      	ldr	r2, [pc, #236]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002c2a:	f023 0301 	bic.w	r3, r3, #1
 8002c2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c32:	f7fe fdc7 	bl	80017c4 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c3a:	f7fe fdc3 	bl	80017c4 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e1b7      	b.n	8002fbc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c4c:	4b32      	ldr	r3, [pc, #200]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1ef      	bne.n	8002c3a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 80a6 	beq.w	8002db4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c6c:	4b2a      	ldr	r3, [pc, #168]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10d      	bne.n	8002c94 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c78:	4b27      	ldr	r3, [pc, #156]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7c:	4a26      	ldr	r2, [pc, #152]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c82:	6593      	str	r3, [r2, #88]	; 0x58
 8002c84:	4b24      	ldr	r3, [pc, #144]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c90:	2301      	movs	r3, #1
 8002c92:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c94:	4b21      	ldr	r3, [pc, #132]	; (8002d1c <HAL_RCC_OscConfig+0x508>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d118      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ca0:	4b1e      	ldr	r3, [pc, #120]	; (8002d1c <HAL_RCC_OscConfig+0x508>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a1d      	ldr	r2, [pc, #116]	; (8002d1c <HAL_RCC_OscConfig+0x508>)
 8002ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002caa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cac:	f7fe fd8a 	bl	80017c4 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb4:	f7fe fd86 	bl	80017c4 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e17a      	b.n	8002fbc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cc6:	4b15      	ldr	r3, [pc, #84]	; (8002d1c <HAL_RCC_OscConfig+0x508>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0f0      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d108      	bne.n	8002cec <HAL_RCC_OscConfig+0x4d8>
 8002cda:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce0:	4a0d      	ldr	r2, [pc, #52]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cea:	e029      	b.n	8002d40 <HAL_RCC_OscConfig+0x52c>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2b05      	cmp	r3, #5
 8002cf2:	d115      	bne.n	8002d20 <HAL_RCC_OscConfig+0x50c>
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfa:	4a07      	ldr	r2, [pc, #28]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002cfc:	f043 0304 	orr.w	r3, r3, #4
 8002d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d04:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0a:	4a03      	ldr	r2, [pc, #12]	; (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d14:	e014      	b.n	8002d40 <HAL_RCC_OscConfig+0x52c>
 8002d16:	bf00      	nop
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40007000 	.word	0x40007000
 8002d20:	4b9c      	ldr	r3, [pc, #624]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d26:	4a9b      	ldr	r2, [pc, #620]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002d28:	f023 0301 	bic.w	r3, r3, #1
 8002d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d30:	4b98      	ldr	r3, [pc, #608]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d36:	4a97      	ldr	r2, [pc, #604]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002d38:	f023 0304 	bic.w	r3, r3, #4
 8002d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d016      	beq.n	8002d76 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d48:	f7fe fd3c 	bl	80017c4 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d4e:	e00a      	b.n	8002d66 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d50:	f7fe fd38 	bl	80017c4 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e12a      	b.n	8002fbc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d66:	4b8b      	ldr	r3, [pc, #556]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0ed      	beq.n	8002d50 <HAL_RCC_OscConfig+0x53c>
 8002d74:	e015      	b.n	8002da2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d76:	f7fe fd25 	bl	80017c4 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d7c:	e00a      	b.n	8002d94 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d7e:	f7fe fd21 	bl	80017c4 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e113      	b.n	8002fbc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d94:	4b7f      	ldr	r3, [pc, #508]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1ed      	bne.n	8002d7e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002da2:	7ffb      	ldrb	r3, [r7, #31]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d105      	bne.n	8002db4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da8:	4b7a      	ldr	r3, [pc, #488]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dac:	4a79      	ldr	r2, [pc, #484]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 80fe 	beq.w	8002fba <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	f040 80d0 	bne.w	8002f68 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002dc8:	4b72      	ldr	r3, [pc, #456]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f003 0203 	and.w	r2, r3, #3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d130      	bne.n	8002e3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	3b01      	subs	r3, #1
 8002de8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d127      	bne.n	8002e3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d11f      	bne.n	8002e3e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e08:	2a07      	cmp	r2, #7
 8002e0a:	bf14      	ite	ne
 8002e0c:	2201      	movne	r2, #1
 8002e0e:	2200      	moveq	r2, #0
 8002e10:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d113      	bne.n	8002e3e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e20:	085b      	lsrs	r3, r3, #1
 8002e22:	3b01      	subs	r3, #1
 8002e24:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d109      	bne.n	8002e3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	085b      	lsrs	r3, r3, #1
 8002e36:	3b01      	subs	r3, #1
 8002e38:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d06e      	beq.n	8002f1c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	2b0c      	cmp	r3, #12
 8002e42:	d069      	beq.n	8002f18 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e44:	4b53      	ldr	r3, [pc, #332]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d105      	bne.n	8002e5c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e50:	4b50      	ldr	r3, [pc, #320]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0ad      	b.n	8002fbc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e60:	4b4c      	ldr	r3, [pc, #304]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a4b      	ldr	r2, [pc, #300]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002e66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e6a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e6c:	f7fe fcaa 	bl	80017c4 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e74:	f7fe fca6 	bl	80017c4 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e09a      	b.n	8002fbc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e86:	4b43      	ldr	r3, [pc, #268]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f0      	bne.n	8002e74 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e92:	4b40      	ldr	r3, [pc, #256]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	4b40      	ldr	r3, [pc, #256]	; (8002f98 <HAL_RCC_OscConfig+0x784>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ea2:	3a01      	subs	r2, #1
 8002ea4:	0112      	lsls	r2, r2, #4
 8002ea6:	4311      	orrs	r1, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002eac:	0212      	lsls	r2, r2, #8
 8002eae:	4311      	orrs	r1, r2
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002eb4:	0852      	lsrs	r2, r2, #1
 8002eb6:	3a01      	subs	r2, #1
 8002eb8:	0552      	lsls	r2, r2, #21
 8002eba:	4311      	orrs	r1, r2
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ec0:	0852      	lsrs	r2, r2, #1
 8002ec2:	3a01      	subs	r2, #1
 8002ec4:	0652      	lsls	r2, r2, #25
 8002ec6:	4311      	orrs	r1, r2
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ecc:	0912      	lsrs	r2, r2, #4
 8002ece:	0452      	lsls	r2, r2, #17
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	4930      	ldr	r1, [pc, #192]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ed8:	4b2e      	ldr	r3, [pc, #184]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a2d      	ldr	r2, [pc, #180]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002ede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ee2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ee4:	4b2b      	ldr	r3, [pc, #172]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4a2a      	ldr	r2, [pc, #168]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ef0:	f7fe fc68 	bl	80017c4 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef8:	f7fe fc64 	bl	80017c4 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e058      	b.n	8002fbc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0a:	4b22      	ldr	r3, [pc, #136]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f0      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f16:	e050      	b.n	8002fba <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e04f      	b.n	8002fbc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f1c:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d148      	bne.n	8002fba <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f28:	4b1a      	ldr	r3, [pc, #104]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a19      	ldr	r2, [pc, #100]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f34:	4b17      	ldr	r3, [pc, #92]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	4a16      	ldr	r2, [pc, #88]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f40:	f7fe fc40 	bl	80017c4 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f48:	f7fe fc3c 	bl	80017c4 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e030      	b.n	8002fbc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f5a:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f0      	beq.n	8002f48 <HAL_RCC_OscConfig+0x734>
 8002f66:	e028      	b.n	8002fba <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	2b0c      	cmp	r3, #12
 8002f6c:	d023      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6e:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a08      	ldr	r2, [pc, #32]	; (8002f94 <HAL_RCC_OscConfig+0x780>)
 8002f74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7a:	f7fe fc23 	bl	80017c4 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f80:	e00c      	b.n	8002f9c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f82:	f7fe fc1f 	bl	80017c4 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d905      	bls.n	8002f9c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e013      	b.n	8002fbc <HAL_RCC_OscConfig+0x7a8>
 8002f94:	40021000 	.word	0x40021000
 8002f98:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f9c:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <HAL_RCC_OscConfig+0x7b0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1ec      	bne.n	8002f82 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_RCC_OscConfig+0x7b0>)
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	4905      	ldr	r1, [pc, #20]	; (8002fc4 <HAL_RCC_OscConfig+0x7b0>)
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_RCC_OscConfig+0x7b4>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	60cb      	str	r3, [r1, #12]
 8002fb4:	e001      	b.n	8002fba <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3720      	adds	r7, #32
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	feeefffc 	.word	0xfeeefffc

08002fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0e7      	b.n	80031b0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe0:	4b75      	ldr	r3, [pc, #468]	; (80031b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d910      	bls.n	8003010 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fee:	4b72      	ldr	r3, [pc, #456]	; (80031b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f023 0207 	bic.w	r2, r3, #7
 8002ff6:	4970      	ldr	r1, [pc, #448]	; (80031b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffe:	4b6e      	ldr	r3, [pc, #440]	; (80031b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d001      	beq.n	8003010 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0cf      	b.n	80031b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d010      	beq.n	800303e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	4b66      	ldr	r3, [pc, #408]	; (80031bc <HAL_RCC_ClockConfig+0x1f0>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003028:	429a      	cmp	r2, r3
 800302a:	d908      	bls.n	800303e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800302c:	4b63      	ldr	r3, [pc, #396]	; (80031bc <HAL_RCC_ClockConfig+0x1f0>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	4960      	ldr	r1, [pc, #384]	; (80031bc <HAL_RCC_ClockConfig+0x1f0>)
 800303a:	4313      	orrs	r3, r2
 800303c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d04c      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b03      	cmp	r3, #3
 8003050:	d107      	bne.n	8003062 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003052:	4b5a      	ldr	r3, [pc, #360]	; (80031bc <HAL_RCC_ClockConfig+0x1f0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d121      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e0a6      	b.n	80031b0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d107      	bne.n	800307a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800306a:	4b54      	ldr	r3, [pc, #336]	; (80031bc <HAL_RCC_ClockConfig+0x1f0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d115      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e09a      	b.n	80031b0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d107      	bne.n	8003092 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003082:	4b4e      	ldr	r3, [pc, #312]	; (80031bc <HAL_RCC_ClockConfig+0x1f0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d109      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e08e      	b.n	80031b0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003092:	4b4a      	ldr	r3, [pc, #296]	; (80031bc <HAL_RCC_ClockConfig+0x1f0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e086      	b.n	80031b0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030a2:	4b46      	ldr	r3, [pc, #280]	; (80031bc <HAL_RCC_ClockConfig+0x1f0>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f023 0203 	bic.w	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4943      	ldr	r1, [pc, #268]	; (80031bc <HAL_RCC_ClockConfig+0x1f0>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030b4:	f7fe fb86 	bl	80017c4 <HAL_GetTick>
 80030b8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030bc:	f7fe fb82 	bl	80017c4 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e06e      	b.n	80031b0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d2:	4b3a      	ldr	r3, [pc, #232]	; (80031bc <HAL_RCC_ClockConfig+0x1f0>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 020c 	and.w	r2, r3, #12
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d1eb      	bne.n	80030bc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d010      	beq.n	8003112 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	4b31      	ldr	r3, [pc, #196]	; (80031bc <HAL_RCC_ClockConfig+0x1f0>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d208      	bcs.n	8003112 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003100:	4b2e      	ldr	r3, [pc, #184]	; (80031bc <HAL_RCC_ClockConfig+0x1f0>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	492b      	ldr	r1, [pc, #172]	; (80031bc <HAL_RCC_ClockConfig+0x1f0>)
 800310e:	4313      	orrs	r3, r2
 8003110:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003112:	4b29      	ldr	r3, [pc, #164]	; (80031b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	d210      	bcs.n	8003142 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003120:	4b25      	ldr	r3, [pc, #148]	; (80031b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f023 0207 	bic.w	r2, r3, #7
 8003128:	4923      	ldr	r1, [pc, #140]	; (80031b8 <HAL_RCC_ClockConfig+0x1ec>)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	4313      	orrs	r3, r2
 800312e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003130:	4b21      	ldr	r3, [pc, #132]	; (80031b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d001      	beq.n	8003142 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e036      	b.n	80031b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b00      	cmp	r3, #0
 800314c:	d008      	beq.n	8003160 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800314e:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <HAL_RCC_ClockConfig+0x1f0>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	4918      	ldr	r1, [pc, #96]	; (80031bc <HAL_RCC_ClockConfig+0x1f0>)
 800315c:	4313      	orrs	r3, r2
 800315e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b00      	cmp	r3, #0
 800316a:	d009      	beq.n	8003180 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800316c:	4b13      	ldr	r3, [pc, #76]	; (80031bc <HAL_RCC_ClockConfig+0x1f0>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4910      	ldr	r1, [pc, #64]	; (80031bc <HAL_RCC_ClockConfig+0x1f0>)
 800317c:	4313      	orrs	r3, r2
 800317e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003180:	f000 f824 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 8003184:	4602      	mov	r2, r0
 8003186:	4b0d      	ldr	r3, [pc, #52]	; (80031bc <HAL_RCC_ClockConfig+0x1f0>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	091b      	lsrs	r3, r3, #4
 800318c:	f003 030f 	and.w	r3, r3, #15
 8003190:	490b      	ldr	r1, [pc, #44]	; (80031c0 <HAL_RCC_ClockConfig+0x1f4>)
 8003192:	5ccb      	ldrb	r3, [r1, r3]
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
 800319c:	4a09      	ldr	r2, [pc, #36]	; (80031c4 <HAL_RCC_ClockConfig+0x1f8>)
 800319e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031a0:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <HAL_RCC_ClockConfig+0x1fc>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fe f93f 	bl	8001428 <HAL_InitTick>
 80031aa:	4603      	mov	r3, r0
 80031ac:	72fb      	strb	r3, [r7, #11]

  return status;
 80031ae:	7afb      	ldrb	r3, [r7, #11]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40022000 	.word	0x40022000
 80031bc:	40021000 	.word	0x40021000
 80031c0:	0800a684 	.word	0x0800a684
 80031c4:	20000000 	.word	0x20000000
 80031c8:	20000004 	.word	0x20000004

080031cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b089      	sub	sp, #36	; 0x24
 80031d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
 80031d6:	2300      	movs	r3, #0
 80031d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031da:	4b3e      	ldr	r3, [pc, #248]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031e4:	4b3b      	ldr	r3, [pc, #236]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_RCC_GetSysClockFreq+0x34>
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d121      	bne.n	800323e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d11e      	bne.n	800323e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003200:	4b34      	ldr	r3, [pc, #208]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0308 	and.w	r3, r3, #8
 8003208:	2b00      	cmp	r3, #0
 800320a:	d107      	bne.n	800321c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800320c:	4b31      	ldr	r3, [pc, #196]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800320e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003212:	0a1b      	lsrs	r3, r3, #8
 8003214:	f003 030f 	and.w	r3, r3, #15
 8003218:	61fb      	str	r3, [r7, #28]
 800321a:	e005      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800321c:	4b2d      	ldr	r3, [pc, #180]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	091b      	lsrs	r3, r3, #4
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003228:	4a2b      	ldr	r2, [pc, #172]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003230:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10d      	bne.n	8003254 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800323c:	e00a      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	2b04      	cmp	r3, #4
 8003242:	d102      	bne.n	800324a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003244:	4b25      	ldr	r3, [pc, #148]	; (80032dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003246:	61bb      	str	r3, [r7, #24]
 8003248:	e004      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	2b08      	cmp	r3, #8
 800324e:	d101      	bne.n	8003254 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003250:	4b23      	ldr	r3, [pc, #140]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003252:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	2b0c      	cmp	r3, #12
 8003258:	d134      	bne.n	80032c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800325a:	4b1e      	ldr	r3, [pc, #120]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d003      	beq.n	8003272 <HAL_RCC_GetSysClockFreq+0xa6>
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b03      	cmp	r3, #3
 800326e:	d003      	beq.n	8003278 <HAL_RCC_GetSysClockFreq+0xac>
 8003270:	e005      	b.n	800327e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003272:	4b1a      	ldr	r3, [pc, #104]	; (80032dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003274:	617b      	str	r3, [r7, #20]
      break;
 8003276:	e005      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003278:	4b19      	ldr	r3, [pc, #100]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800327a:	617b      	str	r3, [r7, #20]
      break;
 800327c:	e002      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	617b      	str	r3, [r7, #20]
      break;
 8003282:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003284:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	091b      	lsrs	r3, r3, #4
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	3301      	adds	r3, #1
 8003290:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003292:	4b10      	ldr	r3, [pc, #64]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	0a1b      	lsrs	r3, r3, #8
 8003298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	fb03 f202 	mul.w	r2, r3, r2
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032aa:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	0e5b      	lsrs	r3, r3, #25
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	3301      	adds	r3, #1
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032c4:	69bb      	ldr	r3, [r7, #24]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3724      	adds	r7, #36	; 0x24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40021000 	.word	0x40021000
 80032d8:	0800a69c 	.word	0x0800a69c
 80032dc:	00f42400 	.word	0x00f42400
 80032e0:	007a1200 	.word	0x007a1200

080032e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e8:	4b03      	ldr	r3, [pc, #12]	; (80032f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032ea:	681b      	ldr	r3, [r3, #0]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	20000000 	.word	0x20000000

080032fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003300:	f7ff fff0 	bl	80032e4 <HAL_RCC_GetHCLKFreq>
 8003304:	4602      	mov	r2, r0
 8003306:	4b06      	ldr	r3, [pc, #24]	; (8003320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	0a1b      	lsrs	r3, r3, #8
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	4904      	ldr	r1, [pc, #16]	; (8003324 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003312:	5ccb      	ldrb	r3, [r1, r3]
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800331c:	4618      	mov	r0, r3
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40021000 	.word	0x40021000
 8003324:	0800a694 	.word	0x0800a694

08003328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800332c:	f7ff ffda 	bl	80032e4 <HAL_RCC_GetHCLKFreq>
 8003330:	4602      	mov	r2, r0
 8003332:	4b06      	ldr	r3, [pc, #24]	; (800334c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	0adb      	lsrs	r3, r3, #11
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	4904      	ldr	r1, [pc, #16]	; (8003350 <HAL_RCC_GetPCLK2Freq+0x28>)
 800333e:	5ccb      	ldrb	r3, [r1, r3]
 8003340:	f003 031f 	and.w	r3, r3, #31
 8003344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003348:	4618      	mov	r0, r3
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40021000 	.word	0x40021000
 8003350:	0800a694 	.word	0x0800a694

08003354 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	220f      	movs	r2, #15
 8003362:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003364:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 0203 	and.w	r2, r3, #3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003370:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800337c:	4b0c      	ldr	r3, [pc, #48]	; (80033b0 <HAL_RCC_GetClockConfig+0x5c>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003388:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <HAL_RCC_GetClockConfig+0x5c>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	08db      	lsrs	r3, r3, #3
 800338e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003396:	4b07      	ldr	r3, [pc, #28]	; (80033b4 <HAL_RCC_GetClockConfig+0x60>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0207 	and.w	r2, r3, #7
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	601a      	str	r2, [r3, #0]
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40021000 	.word	0x40021000
 80033b4:	40022000 	.word	0x40022000

080033b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033c0:	2300      	movs	r3, #0
 80033c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033c4:	4b2a      	ldr	r3, [pc, #168]	; (8003470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033d0:	f7ff f8f0 	bl	80025b4 <HAL_PWREx_GetVoltageRange>
 80033d4:	6178      	str	r0, [r7, #20]
 80033d6:	e014      	b.n	8003402 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033d8:	4b25      	ldr	r3, [pc, #148]	; (8003470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033dc:	4a24      	ldr	r2, [pc, #144]	; (8003470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e2:	6593      	str	r3, [r2, #88]	; 0x58
 80033e4:	4b22      	ldr	r3, [pc, #136]	; (8003470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033f0:	f7ff f8e0 	bl	80025b4 <HAL_PWREx_GetVoltageRange>
 80033f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033f6:	4b1e      	ldr	r3, [pc, #120]	; (8003470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fa:	4a1d      	ldr	r2, [pc, #116]	; (8003470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003400:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003408:	d10b      	bne.n	8003422 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b80      	cmp	r3, #128	; 0x80
 800340e:	d919      	bls.n	8003444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2ba0      	cmp	r3, #160	; 0xa0
 8003414:	d902      	bls.n	800341c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003416:	2302      	movs	r3, #2
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	e013      	b.n	8003444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800341c:	2301      	movs	r3, #1
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	e010      	b.n	8003444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b80      	cmp	r3, #128	; 0x80
 8003426:	d902      	bls.n	800342e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003428:	2303      	movs	r3, #3
 800342a:	613b      	str	r3, [r7, #16]
 800342c:	e00a      	b.n	8003444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b80      	cmp	r3, #128	; 0x80
 8003432:	d102      	bne.n	800343a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003434:	2302      	movs	r3, #2
 8003436:	613b      	str	r3, [r7, #16]
 8003438:	e004      	b.n	8003444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b70      	cmp	r3, #112	; 0x70
 800343e:	d101      	bne.n	8003444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003440:	2301      	movs	r3, #1
 8003442:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003444:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f023 0207 	bic.w	r2, r3, #7
 800344c:	4909      	ldr	r1, [pc, #36]	; (8003474 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003454:	4b07      	ldr	r3, [pc, #28]	; (8003474 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	429a      	cmp	r2, r3
 8003460:	d001      	beq.n	8003466 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40021000 	.word	0x40021000
 8003474:	40022000 	.word	0x40022000

08003478 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003480:	2300      	movs	r3, #0
 8003482:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003484:	2300      	movs	r3, #0
 8003486:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003490:	2b00      	cmp	r3, #0
 8003492:	d041      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003498:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800349c:	d02a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800349e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034a2:	d824      	bhi.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034a8:	d008      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034ae:	d81e      	bhi.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00a      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80034b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034b8:	d010      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034ba:	e018      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034bc:	4b86      	ldr	r3, [pc, #536]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	4a85      	ldr	r2, [pc, #532]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034c8:	e015      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3304      	adds	r3, #4
 80034ce:	2100      	movs	r1, #0
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 facb 	bl	8003a6c <RCCEx_PLLSAI1_Config>
 80034d6:	4603      	mov	r3, r0
 80034d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034da:	e00c      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3320      	adds	r3, #32
 80034e0:	2100      	movs	r1, #0
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fbb6 	bl	8003c54 <RCCEx_PLLSAI2_Config>
 80034e8:	4603      	mov	r3, r0
 80034ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034ec:	e003      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	74fb      	strb	r3, [r7, #19]
      break;
 80034f2:	e000      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80034f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034f6:	7cfb      	ldrb	r3, [r7, #19]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10b      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034fc:	4b76      	ldr	r3, [pc, #472]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003502:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800350a:	4973      	ldr	r1, [pc, #460]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003512:	e001      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003514:	7cfb      	ldrb	r3, [r7, #19]
 8003516:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d041      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003528:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800352c:	d02a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800352e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003532:	d824      	bhi.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003534:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003538:	d008      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800353a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800353e:	d81e      	bhi.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003548:	d010      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800354a:	e018      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800354c:	4b62      	ldr	r3, [pc, #392]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	4a61      	ldr	r2, [pc, #388]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003556:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003558:	e015      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3304      	adds	r3, #4
 800355e:	2100      	movs	r1, #0
 8003560:	4618      	mov	r0, r3
 8003562:	f000 fa83 	bl	8003a6c <RCCEx_PLLSAI1_Config>
 8003566:	4603      	mov	r3, r0
 8003568:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800356a:	e00c      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3320      	adds	r3, #32
 8003570:	2100      	movs	r1, #0
 8003572:	4618      	mov	r0, r3
 8003574:	f000 fb6e 	bl	8003c54 <RCCEx_PLLSAI2_Config>
 8003578:	4603      	mov	r3, r0
 800357a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800357c:	e003      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	74fb      	strb	r3, [r7, #19]
      break;
 8003582:	e000      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003584:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003586:	7cfb      	ldrb	r3, [r7, #19]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10b      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800358c:	4b52      	ldr	r3, [pc, #328]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003592:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800359a:	494f      	ldr	r1, [pc, #316]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035a2:	e001      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a4:	7cfb      	ldrb	r3, [r7, #19]
 80035a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 80a0 	beq.w	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035b6:	2300      	movs	r3, #0
 80035b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035ba:	4b47      	ldr	r3, [pc, #284]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x152>
 80035c6:	2301      	movs	r3, #1
 80035c8:	e000      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80035ca:	2300      	movs	r3, #0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00d      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d0:	4b41      	ldr	r3, [pc, #260]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d4:	4a40      	ldr	r2, [pc, #256]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035da:	6593      	str	r3, [r2, #88]	; 0x58
 80035dc:	4b3e      	ldr	r3, [pc, #248]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035e8:	2301      	movs	r3, #1
 80035ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035ec:	4b3b      	ldr	r3, [pc, #236]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a3a      	ldr	r2, [pc, #232]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035f8:	f7fe f8e4 	bl	80017c4 <HAL_GetTick>
 80035fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035fe:	e009      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003600:	f7fe f8e0 	bl	80017c4 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d902      	bls.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	74fb      	strb	r3, [r7, #19]
        break;
 8003612:	e005      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003614:	4b31      	ldr	r3, [pc, #196]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0ef      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003620:	7cfb      	ldrb	r3, [r7, #19]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d15c      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003626:	4b2c      	ldr	r3, [pc, #176]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003630:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d01f      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	429a      	cmp	r2, r3
 8003642:	d019      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003644:	4b24      	ldr	r3, [pc, #144]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800364e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003650:	4b21      	ldr	r3, [pc, #132]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003656:	4a20      	ldr	r2, [pc, #128]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800365c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003660:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003666:	4a1c      	ldr	r2, [pc, #112]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800366c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003670:	4a19      	ldr	r2, [pc, #100]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d016      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003682:	f7fe f89f 	bl	80017c4 <HAL_GetTick>
 8003686:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003688:	e00b      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800368a:	f7fe f89b 	bl	80017c4 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	f241 3288 	movw	r2, #5000	; 0x1388
 8003698:	4293      	cmp	r3, r2
 800369a:	d902      	bls.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	74fb      	strb	r3, [r7, #19]
            break;
 80036a0:	e006      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a2:	4b0d      	ldr	r3, [pc, #52]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0ec      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80036b0:	7cfb      	ldrb	r3, [r7, #19]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036b6:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036c6:	4904      	ldr	r1, [pc, #16]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80036ce:	e009      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036d0:	7cfb      	ldrb	r3, [r7, #19]
 80036d2:	74bb      	strb	r3, [r7, #18]
 80036d4:	e006      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80036d6:	bf00      	nop
 80036d8:	40021000 	.word	0x40021000
 80036dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e0:	7cfb      	ldrb	r3, [r7, #19]
 80036e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036e4:	7c7b      	ldrb	r3, [r7, #17]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d105      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ea:	4b9e      	ldr	r3, [pc, #632]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ee:	4a9d      	ldr	r2, [pc, #628]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00a      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003702:	4b98      	ldr	r3, [pc, #608]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003708:	f023 0203 	bic.w	r2, r3, #3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003710:	4994      	ldr	r1, [pc, #592]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00a      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003724:	4b8f      	ldr	r3, [pc, #572]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372a:	f023 020c 	bic.w	r2, r3, #12
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003732:	498c      	ldr	r1, [pc, #560]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003746:	4b87      	ldr	r3, [pc, #540]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	4983      	ldr	r1, [pc, #524]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0308 	and.w	r3, r3, #8
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003768:	4b7e      	ldr	r3, [pc, #504]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003776:	497b      	ldr	r1, [pc, #492]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003778:	4313      	orrs	r3, r2
 800377a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800378a:	4b76      	ldr	r3, [pc, #472]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003790:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003798:	4972      	ldr	r1, [pc, #456]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0320 	and.w	r3, r3, #32
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00a      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037ac:	4b6d      	ldr	r3, [pc, #436]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ba:	496a      	ldr	r1, [pc, #424]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037ce:	4b65      	ldr	r3, [pc, #404]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037dc:	4961      	ldr	r1, [pc, #388]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00a      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037f0:	4b5c      	ldr	r3, [pc, #368]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037fe:	4959      	ldr	r1, [pc, #356]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003812:	4b54      	ldr	r3, [pc, #336]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003818:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003820:	4950      	ldr	r1, [pc, #320]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003822:	4313      	orrs	r3, r2
 8003824:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00a      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003834:	4b4b      	ldr	r3, [pc, #300]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003842:	4948      	ldr	r1, [pc, #288]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003856:	4b43      	ldr	r3, [pc, #268]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003864:	493f      	ldr	r1, [pc, #252]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d028      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003878:	4b3a      	ldr	r3, [pc, #232]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003886:	4937      	ldr	r1, [pc, #220]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003892:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003896:	d106      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003898:	4b32      	ldr	r3, [pc, #200]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	4a31      	ldr	r2, [pc, #196]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038a2:	60d3      	str	r3, [r2, #12]
 80038a4:	e011      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038ae:	d10c      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3304      	adds	r3, #4
 80038b4:	2101      	movs	r1, #1
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 f8d8 	bl	8003a6c <RCCEx_PLLSAI1_Config>
 80038bc:	4603      	mov	r3, r0
 80038be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038c0:	7cfb      	ldrb	r3, [r7, #19]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80038c6:	7cfb      	ldrb	r3, [r7, #19]
 80038c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d028      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038d6:	4b23      	ldr	r3, [pc, #140]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e4:	491f      	ldr	r1, [pc, #124]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038f4:	d106      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038f6:	4b1b      	ldr	r3, [pc, #108]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	4a1a      	ldr	r2, [pc, #104]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003900:	60d3      	str	r3, [r2, #12]
 8003902:	e011      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800390c:	d10c      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3304      	adds	r3, #4
 8003912:	2101      	movs	r1, #1
 8003914:	4618      	mov	r0, r3
 8003916:	f000 f8a9 	bl	8003a6c <RCCEx_PLLSAI1_Config>
 800391a:	4603      	mov	r3, r0
 800391c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800391e:	7cfb      	ldrb	r3, [r7, #19]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003924:	7cfb      	ldrb	r3, [r7, #19]
 8003926:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d02b      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003934:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003942:	4908      	ldr	r1, [pc, #32]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003952:	d109      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003954:	4b03      	ldr	r3, [pc, #12]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4a02      	ldr	r2, [pc, #8]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800395a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800395e:	60d3      	str	r3, [r2, #12]
 8003960:	e014      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003962:	bf00      	nop
 8003964:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800396c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003970:	d10c      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3304      	adds	r3, #4
 8003976:	2101      	movs	r1, #1
 8003978:	4618      	mov	r0, r3
 800397a:	f000 f877 	bl	8003a6c <RCCEx_PLLSAI1_Config>
 800397e:	4603      	mov	r3, r0
 8003980:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003982:	7cfb      	ldrb	r3, [r7, #19]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003988:	7cfb      	ldrb	r3, [r7, #19]
 800398a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d02f      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003998:	4b2b      	ldr	r3, [pc, #172]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039a6:	4928      	ldr	r1, [pc, #160]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039b6:	d10d      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3304      	adds	r3, #4
 80039bc:	2102      	movs	r1, #2
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 f854 	bl	8003a6c <RCCEx_PLLSAI1_Config>
 80039c4:	4603      	mov	r3, r0
 80039c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039c8:	7cfb      	ldrb	r3, [r7, #19]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d014      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80039ce:	7cfb      	ldrb	r3, [r7, #19]
 80039d0:	74bb      	strb	r3, [r7, #18]
 80039d2:	e011      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039dc:	d10c      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3320      	adds	r3, #32
 80039e2:	2102      	movs	r1, #2
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 f935 	bl	8003c54 <RCCEx_PLLSAI2_Config>
 80039ea:	4603      	mov	r3, r0
 80039ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039ee:	7cfb      	ldrb	r3, [r7, #19]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80039f4:	7cfb      	ldrb	r3, [r7, #19]
 80039f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00a      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a04:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a12:	490d      	ldr	r1, [pc, #52]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00b      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a26:	4b08      	ldr	r3, [pc, #32]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a36:	4904      	ldr	r1, [pc, #16]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a3e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40021000 	.word	0x40021000

08003a4c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003a50:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a04      	ldr	r2, [pc, #16]	; (8003a68 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a56:	f043 0304 	orr.w	r3, r3, #4
 8003a5a:	6013      	str	r3, [r2, #0]
}
 8003a5c:	bf00      	nop
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	40021000 	.word	0x40021000

08003a6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a7a:	4b75      	ldr	r3, [pc, #468]	; (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d018      	beq.n	8003ab8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a86:	4b72      	ldr	r3, [pc, #456]	; (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f003 0203 	and.w	r2, r3, #3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d10d      	bne.n	8003ab2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
       ||
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d009      	beq.n	8003ab2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a9e:	4b6c      	ldr	r3, [pc, #432]	; (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	091b      	lsrs	r3, r3, #4
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
       ||
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d047      	beq.n	8003b42 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	73fb      	strb	r3, [r7, #15]
 8003ab6:	e044      	b.n	8003b42 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b03      	cmp	r3, #3
 8003abe:	d018      	beq.n	8003af2 <RCCEx_PLLSAI1_Config+0x86>
 8003ac0:	2b03      	cmp	r3, #3
 8003ac2:	d825      	bhi.n	8003b10 <RCCEx_PLLSAI1_Config+0xa4>
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d002      	beq.n	8003ace <RCCEx_PLLSAI1_Config+0x62>
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d009      	beq.n	8003ae0 <RCCEx_PLLSAI1_Config+0x74>
 8003acc:	e020      	b.n	8003b10 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ace:	4b60      	ldr	r3, [pc, #384]	; (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d11d      	bne.n	8003b16 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ade:	e01a      	b.n	8003b16 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ae0:	4b5b      	ldr	r3, [pc, #364]	; (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d116      	bne.n	8003b1a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af0:	e013      	b.n	8003b1a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003af2:	4b57      	ldr	r3, [pc, #348]	; (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10f      	bne.n	8003b1e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003afe:	4b54      	ldr	r3, [pc, #336]	; (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d109      	bne.n	8003b1e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b0e:	e006      	b.n	8003b1e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	73fb      	strb	r3, [r7, #15]
      break;
 8003b14:	e004      	b.n	8003b20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b16:	bf00      	nop
 8003b18:	e002      	b.n	8003b20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b1a:	bf00      	nop
 8003b1c:	e000      	b.n	8003b20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10d      	bne.n	8003b42 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b26:	4b4a      	ldr	r3, [pc, #296]	; (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6819      	ldr	r1, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	430b      	orrs	r3, r1
 8003b3c:	4944      	ldr	r1, [pc, #272]	; (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d17d      	bne.n	8003c44 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b48:	4b41      	ldr	r3, [pc, #260]	; (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a40      	ldr	r2, [pc, #256]	; (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b54:	f7fd fe36 	bl	80017c4 <HAL_GetTick>
 8003b58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b5a:	e009      	b.n	8003b70 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b5c:	f7fd fe32 	bl	80017c4 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d902      	bls.n	8003b70 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	73fb      	strb	r3, [r7, #15]
        break;
 8003b6e:	e005      	b.n	8003b7c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b70:	4b37      	ldr	r3, [pc, #220]	; (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1ef      	bne.n	8003b5c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d160      	bne.n	8003c44 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d111      	bne.n	8003bac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b88:	4b31      	ldr	r3, [pc, #196]	; (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6892      	ldr	r2, [r2, #8]
 8003b98:	0211      	lsls	r1, r2, #8
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	68d2      	ldr	r2, [r2, #12]
 8003b9e:	0912      	lsrs	r2, r2, #4
 8003ba0:	0452      	lsls	r2, r2, #17
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	492a      	ldr	r1, [pc, #168]	; (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	610b      	str	r3, [r1, #16]
 8003baa:	e027      	b.n	8003bfc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d112      	bne.n	8003bd8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bb2:	4b27      	ldr	r3, [pc, #156]	; (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003bba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6892      	ldr	r2, [r2, #8]
 8003bc2:	0211      	lsls	r1, r2, #8
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6912      	ldr	r2, [r2, #16]
 8003bc8:	0852      	lsrs	r2, r2, #1
 8003bca:	3a01      	subs	r2, #1
 8003bcc:	0552      	lsls	r2, r2, #21
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	491f      	ldr	r1, [pc, #124]	; (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	610b      	str	r3, [r1, #16]
 8003bd6:	e011      	b.n	8003bfc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bd8:	4b1d      	ldr	r3, [pc, #116]	; (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003be0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6892      	ldr	r2, [r2, #8]
 8003be8:	0211      	lsls	r1, r2, #8
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6952      	ldr	r2, [r2, #20]
 8003bee:	0852      	lsrs	r2, r2, #1
 8003bf0:	3a01      	subs	r2, #1
 8003bf2:	0652      	lsls	r2, r2, #25
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	4916      	ldr	r1, [pc, #88]	; (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003bfc:	4b14      	ldr	r3, [pc, #80]	; (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a13      	ldr	r2, [pc, #76]	; (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c08:	f7fd fddc 	bl	80017c4 <HAL_GetTick>
 8003c0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c0e:	e009      	b.n	8003c24 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c10:	f7fd fdd8 	bl	80017c4 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d902      	bls.n	8003c24 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	73fb      	strb	r3, [r7, #15]
          break;
 8003c22:	e005      	b.n	8003c30 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c24:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0ef      	beq.n	8003c10 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c36:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	4904      	ldr	r1, [pc, #16]	; (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40021000 	.word	0x40021000

08003c54 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c62:	4b6a      	ldr	r3, [pc, #424]	; (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d018      	beq.n	8003ca0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c6e:	4b67      	ldr	r3, [pc, #412]	; (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f003 0203 	and.w	r2, r3, #3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d10d      	bne.n	8003c9a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
       ||
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d009      	beq.n	8003c9a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c86:	4b61      	ldr	r3, [pc, #388]	; (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	091b      	lsrs	r3, r3, #4
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	1c5a      	adds	r2, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
       ||
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d047      	beq.n	8003d2a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	73fb      	strb	r3, [r7, #15]
 8003c9e:	e044      	b.n	8003d2a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	d018      	beq.n	8003cda <RCCEx_PLLSAI2_Config+0x86>
 8003ca8:	2b03      	cmp	r3, #3
 8003caa:	d825      	bhi.n	8003cf8 <RCCEx_PLLSAI2_Config+0xa4>
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d002      	beq.n	8003cb6 <RCCEx_PLLSAI2_Config+0x62>
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d009      	beq.n	8003cc8 <RCCEx_PLLSAI2_Config+0x74>
 8003cb4:	e020      	b.n	8003cf8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cb6:	4b55      	ldr	r3, [pc, #340]	; (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d11d      	bne.n	8003cfe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cc6:	e01a      	b.n	8003cfe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cc8:	4b50      	ldr	r3, [pc, #320]	; (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d116      	bne.n	8003d02 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cd8:	e013      	b.n	8003d02 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cda:	4b4c      	ldr	r3, [pc, #304]	; (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10f      	bne.n	8003d06 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ce6:	4b49      	ldr	r3, [pc, #292]	; (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d109      	bne.n	8003d06 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cf6:	e006      	b.n	8003d06 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8003cfc:	e004      	b.n	8003d08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cfe:	bf00      	nop
 8003d00:	e002      	b.n	8003d08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d02:	bf00      	nop
 8003d04:	e000      	b.n	8003d08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d06:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10d      	bne.n	8003d2a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d0e:	4b3f      	ldr	r3, [pc, #252]	; (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6819      	ldr	r1, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	430b      	orrs	r3, r1
 8003d24:	4939      	ldr	r1, [pc, #228]	; (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d167      	bne.n	8003e00 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d30:	4b36      	ldr	r3, [pc, #216]	; (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a35      	ldr	r2, [pc, #212]	; (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d3c:	f7fd fd42 	bl	80017c4 <HAL_GetTick>
 8003d40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d42:	e009      	b.n	8003d58 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d44:	f7fd fd3e 	bl	80017c4 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d902      	bls.n	8003d58 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	73fb      	strb	r3, [r7, #15]
        break;
 8003d56:	e005      	b.n	8003d64 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d58:	4b2c      	ldr	r3, [pc, #176]	; (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1ef      	bne.n	8003d44 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d14a      	bne.n	8003e00 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d111      	bne.n	8003d94 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d70:	4b26      	ldr	r3, [pc, #152]	; (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6892      	ldr	r2, [r2, #8]
 8003d80:	0211      	lsls	r1, r2, #8
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	68d2      	ldr	r2, [r2, #12]
 8003d86:	0912      	lsrs	r2, r2, #4
 8003d88:	0452      	lsls	r2, r2, #17
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	491f      	ldr	r1, [pc, #124]	; (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	614b      	str	r3, [r1, #20]
 8003d92:	e011      	b.n	8003db8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d94:	4b1d      	ldr	r3, [pc, #116]	; (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6892      	ldr	r2, [r2, #8]
 8003da4:	0211      	lsls	r1, r2, #8
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6912      	ldr	r2, [r2, #16]
 8003daa:	0852      	lsrs	r2, r2, #1
 8003dac:	3a01      	subs	r2, #1
 8003dae:	0652      	lsls	r2, r2, #25
 8003db0:	430a      	orrs	r2, r1
 8003db2:	4916      	ldr	r1, [pc, #88]	; (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003db8:	4b14      	ldr	r3, [pc, #80]	; (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a13      	ldr	r2, [pc, #76]	; (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc4:	f7fd fcfe 	bl	80017c4 <HAL_GetTick>
 8003dc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003dca:	e009      	b.n	8003de0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003dcc:	f7fd fcfa 	bl	80017c4 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d902      	bls.n	8003de0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	73fb      	strb	r3, [r7, #15]
          break;
 8003dde:	e005      	b.n	8003dec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003de0:	4b0a      	ldr	r3, [pc, #40]	; (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0ef      	beq.n	8003dcc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003df2:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df4:	695a      	ldr	r2, [r3, #20]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	4904      	ldr	r1, [pc, #16]	; (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40021000 	.word	0x40021000

08003e10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e095      	b.n	8003f4e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d108      	bne.n	8003e3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e32:	d009      	beq.n	8003e48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	61da      	str	r2, [r3, #28]
 8003e3a:	e005      	b.n	8003e48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fd f954 	bl	8001110 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e88:	d902      	bls.n	8003e90 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	e002      	b.n	8003e96 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e9e:	d007      	beq.n	8003eb0 <HAL_SPI_Init+0xa0>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ea8:	d002      	beq.n	8003eb0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef2:	ea42 0103 	orr.w	r1, r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	0c1b      	lsrs	r3, r3, #16
 8003f0c:	f003 0204 	and.w	r2, r3, #4
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f2c:	ea42 0103 	orr.w	r1, r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b082      	sub	sp, #8
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e049      	b.n	8003ffc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d106      	bne.n	8003f82 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f841 	bl	8004004 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2202      	movs	r2, #2
 8003f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3304      	adds	r3, #4
 8003f92:	4619      	mov	r1, r3
 8003f94:	4610      	mov	r0, r2
 8003f96:	f000 f9df 	bl	8004358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b01      	cmp	r3, #1
 800402a:	d001      	beq.n	8004030 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e04f      	b.n	80040d0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0201 	orr.w	r2, r2, #1
 8004046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a23      	ldr	r2, [pc, #140]	; (80040dc <HAL_TIM_Base_Start_IT+0xc4>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d01d      	beq.n	800408e <HAL_TIM_Base_Start_IT+0x76>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800405a:	d018      	beq.n	800408e <HAL_TIM_Base_Start_IT+0x76>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a1f      	ldr	r2, [pc, #124]	; (80040e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d013      	beq.n	800408e <HAL_TIM_Base_Start_IT+0x76>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1e      	ldr	r2, [pc, #120]	; (80040e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d00e      	beq.n	800408e <HAL_TIM_Base_Start_IT+0x76>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a1c      	ldr	r2, [pc, #112]	; (80040e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d009      	beq.n	800408e <HAL_TIM_Base_Start_IT+0x76>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a1b      	ldr	r2, [pc, #108]	; (80040ec <HAL_TIM_Base_Start_IT+0xd4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d004      	beq.n	800408e <HAL_TIM_Base_Start_IT+0x76>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a19      	ldr	r2, [pc, #100]	; (80040f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d115      	bne.n	80040ba <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	4b17      	ldr	r3, [pc, #92]	; (80040f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004096:	4013      	ands	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2b06      	cmp	r3, #6
 800409e:	d015      	beq.n	80040cc <HAL_TIM_Base_Start_IT+0xb4>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a6:	d011      	beq.n	80040cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0201 	orr.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b8:	e008      	b.n	80040cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0201 	orr.w	r2, r2, #1
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	e000      	b.n	80040ce <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	40012c00 	.word	0x40012c00
 80040e0:	40000400 	.word	0x40000400
 80040e4:	40000800 	.word	0x40000800
 80040e8:	40000c00 	.word	0x40000c00
 80040ec:	40013400 	.word	0x40013400
 80040f0:	40014000 	.word	0x40014000
 80040f4:	00010007 	.word	0x00010007

080040f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d020      	beq.n	800415c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d01b      	beq.n	800415c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f06f 0202 	mvn.w	r2, #2
 800412c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f8e9 	bl	800431a <HAL_TIM_IC_CaptureCallback>
 8004148:	e005      	b.n	8004156 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f8db 	bl	8004306 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f8ec 	bl	800432e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	2b00      	cmp	r3, #0
 8004164:	d020      	beq.n	80041a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01b      	beq.n	80041a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f06f 0204 	mvn.w	r2, #4
 8004178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2202      	movs	r2, #2
 800417e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f8c3 	bl	800431a <HAL_TIM_IC_CaptureCallback>
 8004194:	e005      	b.n	80041a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f8b5 	bl	8004306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f8c6 	bl	800432e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d020      	beq.n	80041f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d01b      	beq.n	80041f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f06f 0208 	mvn.w	r2, #8
 80041c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2204      	movs	r2, #4
 80041ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f89d 	bl	800431a <HAL_TIM_IC_CaptureCallback>
 80041e0:	e005      	b.n	80041ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f88f 	bl	8004306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f8a0 	bl	800432e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f003 0310 	and.w	r3, r3, #16
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d020      	beq.n	8004240 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	2b00      	cmp	r3, #0
 8004206:	d01b      	beq.n	8004240 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0210 	mvn.w	r2, #16
 8004210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2208      	movs	r2, #8
 8004216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f877 	bl	800431a <HAL_TIM_IC_CaptureCallback>
 800422c:	e005      	b.n	800423a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f869 	bl	8004306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f87a 	bl	800432e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00c      	beq.n	8004264 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d007      	beq.n	8004264 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f06f 0201 	mvn.w	r2, #1
 800425c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7fc fe10 	bl	8000e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426a:	2b00      	cmp	r3, #0
 800426c:	d104      	bne.n	8004278 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00c      	beq.n	8004292 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427e:	2b00      	cmp	r3, #0
 8004280:	d007      	beq.n	8004292 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800428a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f913 	bl	80044b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00c      	beq.n	80042b6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d007      	beq.n	80042b6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f90b 	bl	80044cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00c      	beq.n	80042da <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d007      	beq.n	80042da <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f834 	bl	8004342 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	f003 0320 	and.w	r3, r3, #32
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00c      	beq.n	80042fe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d007      	beq.n	80042fe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f06f 0220 	mvn.w	r2, #32
 80042f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f8d3 	bl	80044a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042fe:	bf00      	nop
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800431a:	b480      	push	{r7}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
	...

08004358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a46      	ldr	r2, [pc, #280]	; (8004484 <TIM_Base_SetConfig+0x12c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d013      	beq.n	8004398 <TIM_Base_SetConfig+0x40>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004376:	d00f      	beq.n	8004398 <TIM_Base_SetConfig+0x40>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a43      	ldr	r2, [pc, #268]	; (8004488 <TIM_Base_SetConfig+0x130>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d00b      	beq.n	8004398 <TIM_Base_SetConfig+0x40>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a42      	ldr	r2, [pc, #264]	; (800448c <TIM_Base_SetConfig+0x134>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d007      	beq.n	8004398 <TIM_Base_SetConfig+0x40>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a41      	ldr	r2, [pc, #260]	; (8004490 <TIM_Base_SetConfig+0x138>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d003      	beq.n	8004398 <TIM_Base_SetConfig+0x40>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a40      	ldr	r2, [pc, #256]	; (8004494 <TIM_Base_SetConfig+0x13c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d108      	bne.n	80043aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a35      	ldr	r2, [pc, #212]	; (8004484 <TIM_Base_SetConfig+0x12c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d01f      	beq.n	80043f2 <TIM_Base_SetConfig+0x9a>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b8:	d01b      	beq.n	80043f2 <TIM_Base_SetConfig+0x9a>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a32      	ldr	r2, [pc, #200]	; (8004488 <TIM_Base_SetConfig+0x130>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d017      	beq.n	80043f2 <TIM_Base_SetConfig+0x9a>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a31      	ldr	r2, [pc, #196]	; (800448c <TIM_Base_SetConfig+0x134>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d013      	beq.n	80043f2 <TIM_Base_SetConfig+0x9a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a30      	ldr	r2, [pc, #192]	; (8004490 <TIM_Base_SetConfig+0x138>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00f      	beq.n	80043f2 <TIM_Base_SetConfig+0x9a>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a2f      	ldr	r2, [pc, #188]	; (8004494 <TIM_Base_SetConfig+0x13c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00b      	beq.n	80043f2 <TIM_Base_SetConfig+0x9a>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a2e      	ldr	r2, [pc, #184]	; (8004498 <TIM_Base_SetConfig+0x140>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d007      	beq.n	80043f2 <TIM_Base_SetConfig+0x9a>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a2d      	ldr	r2, [pc, #180]	; (800449c <TIM_Base_SetConfig+0x144>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d003      	beq.n	80043f2 <TIM_Base_SetConfig+0x9a>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a2c      	ldr	r2, [pc, #176]	; (80044a0 <TIM_Base_SetConfig+0x148>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d108      	bne.n	8004404 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4313      	orrs	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	4313      	orrs	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a16      	ldr	r2, [pc, #88]	; (8004484 <TIM_Base_SetConfig+0x12c>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d00f      	beq.n	8004450 <TIM_Base_SetConfig+0xf8>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a18      	ldr	r2, [pc, #96]	; (8004494 <TIM_Base_SetConfig+0x13c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d00b      	beq.n	8004450 <TIM_Base_SetConfig+0xf8>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a17      	ldr	r2, [pc, #92]	; (8004498 <TIM_Base_SetConfig+0x140>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d007      	beq.n	8004450 <TIM_Base_SetConfig+0xf8>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a16      	ldr	r2, [pc, #88]	; (800449c <TIM_Base_SetConfig+0x144>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d003      	beq.n	8004450 <TIM_Base_SetConfig+0xf8>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a15      	ldr	r2, [pc, #84]	; (80044a0 <TIM_Base_SetConfig+0x148>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d103      	bne.n	8004458 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	691a      	ldr	r2, [r3, #16]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b01      	cmp	r3, #1
 8004468:	d105      	bne.n	8004476 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f023 0201 	bic.w	r2, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	611a      	str	r2, [r3, #16]
  }
}
 8004476:	bf00      	nop
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	40012c00 	.word	0x40012c00
 8004488:	40000400 	.word	0x40000400
 800448c:	40000800 	.word	0x40000800
 8004490:	40000c00 	.word	0x40000c00
 8004494:	40013400 	.word	0x40013400
 8004498:	40014000 	.word	0x40014000
 800449c:	40014400 	.word	0x40014400
 80044a0:	40014800 	.word	0x40014800

080044a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e040      	b.n	8004574 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d106      	bne.n	8004508 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7fc fe48 	bl	8001198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2224      	movs	r2, #36	; 0x24
 800450c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0201 	bic.w	r2, r2, #1
 800451c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	2b00      	cmp	r3, #0
 8004524:	d002      	beq.n	800452c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 ff70 	bl	800540c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fcb5 	bl	8004e9c <UART_SetConfig>
 8004532:	4603      	mov	r3, r0
 8004534:	2b01      	cmp	r3, #1
 8004536:	d101      	bne.n	800453c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e01b      	b.n	8004574 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800454a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689a      	ldr	r2, [r3, #8]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800455a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0201 	orr.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 ffef 	bl	8005550 <UART_CheckIdleState>
 8004572:	4603      	mov	r3, r0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08a      	sub	sp, #40	; 0x28
 8004580:	af02      	add	r7, sp, #8
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	603b      	str	r3, [r7, #0]
 8004588:	4613      	mov	r3, r2
 800458a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004592:	2b20      	cmp	r3, #32
 8004594:	f040 80b6 	bne.w	8004704 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <HAL_UART_Receive+0x28>
 800459e:	88fb      	ldrh	r3, [r7, #6]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e0ae      	b.n	8004706 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2222      	movs	r2, #34	; 0x22
 80045b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045be:	f7fd f901 	bl	80017c4 <HAL_GetTick>
 80045c2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	88fa      	ldrh	r2, [r7, #6]
 80045c8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	88fa      	ldrh	r2, [r7, #6]
 80045d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045dc:	d10e      	bne.n	80045fc <HAL_UART_Receive+0x80>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d105      	bne.n	80045f2 <HAL_UART_Receive+0x76>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80045ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045f0:	e02d      	b.n	800464e <HAL_UART_Receive+0xd2>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	22ff      	movs	r2, #255	; 0xff
 80045f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045fa:	e028      	b.n	800464e <HAL_UART_Receive+0xd2>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10d      	bne.n	8004620 <HAL_UART_Receive+0xa4>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d104      	bne.n	8004616 <HAL_UART_Receive+0x9a>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	22ff      	movs	r2, #255	; 0xff
 8004610:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004614:	e01b      	b.n	800464e <HAL_UART_Receive+0xd2>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	227f      	movs	r2, #127	; 0x7f
 800461a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800461e:	e016      	b.n	800464e <HAL_UART_Receive+0xd2>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004628:	d10d      	bne.n	8004646 <HAL_UART_Receive+0xca>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d104      	bne.n	800463c <HAL_UART_Receive+0xc0>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	227f      	movs	r2, #127	; 0x7f
 8004636:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800463a:	e008      	b.n	800464e <HAL_UART_Receive+0xd2>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	223f      	movs	r2, #63	; 0x3f
 8004640:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004644:	e003      	b.n	800464e <HAL_UART_Receive+0xd2>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004654:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465e:	d108      	bne.n	8004672 <HAL_UART_Receive+0xf6>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d104      	bne.n	8004672 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004668:	2300      	movs	r3, #0
 800466a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	61bb      	str	r3, [r7, #24]
 8004670:	e003      	b.n	800467a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004676:	2300      	movs	r3, #0
 8004678:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800467a:	e037      	b.n	80046ec <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2200      	movs	r2, #0
 8004684:	2120      	movs	r1, #32
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f001 f80a 	bl	80056a0 <UART_WaitOnFlagUntilTimeout>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d005      	beq.n	800469e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2220      	movs	r2, #32
 8004696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e033      	b.n	8004706 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10c      	bne.n	80046be <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	8a7b      	ldrh	r3, [r7, #18]
 80046ae:	4013      	ands	r3, r2
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	3302      	adds	r3, #2
 80046ba:	61bb      	str	r3, [r7, #24]
 80046bc:	e00d      	b.n	80046da <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	8a7b      	ldrh	r3, [r7, #18]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	4013      	ands	r3, r2
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	3301      	adds	r3, #1
 80046d8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1c1      	bne.n	800467c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	e000      	b.n	8004706 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004704:	2302      	movs	r3, #2
  }
}
 8004706:	4618      	mov	r0, r3
 8004708:	3720      	adds	r7, #32
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004710:	b480      	push	{r7}
 8004712:	b08b      	sub	sp, #44	; 0x2c
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	4613      	mov	r3, r2
 800471c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004722:	2b20      	cmp	r3, #32
 8004724:	d147      	bne.n	80047b6 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <HAL_UART_Transmit_IT+0x22>
 800472c:	88fb      	ldrh	r3, [r7, #6]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e040      	b.n	80047b8 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	88fa      	ldrh	r2, [r7, #6]
 8004740:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	88fa      	ldrh	r2, [r7, #6]
 8004748:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2221      	movs	r2, #33	; 0x21
 800475e:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004768:	d107      	bne.n	800477a <HAL_UART_Transmit_IT+0x6a>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d103      	bne.n	800477a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4a13      	ldr	r2, [pc, #76]	; (80047c4 <HAL_UART_Transmit_IT+0xb4>)
 8004776:	66da      	str	r2, [r3, #108]	; 0x6c
 8004778:	e002      	b.n	8004780 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4a12      	ldr	r2, [pc, #72]	; (80047c8 <HAL_UART_Transmit_IT+0xb8>)
 800477e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	e853 3f00 	ldrex	r3, [r3]
 800478c:	613b      	str	r3, [r7, #16]
   return(result);
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	623b      	str	r3, [r7, #32]
 80047a0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a2:	69f9      	ldr	r1, [r7, #28]
 80047a4:	6a3a      	ldr	r2, [r7, #32]
 80047a6:	e841 2300 	strex	r3, r2, [r1]
 80047aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1e6      	bne.n	8004780 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	e000      	b.n	80047b8 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80047b6:	2302      	movs	r3, #2
  }
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	372c      	adds	r7, #44	; 0x2c
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	08005ab5 	.word	0x08005ab5
 80047c8:	080059fd 	.word	0x080059fd

080047cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08a      	sub	sp, #40	; 0x28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	4613      	mov	r3, r2
 80047d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047e0:	2b20      	cmp	r3, #32
 80047e2:	d137      	bne.n	8004854 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <HAL_UART_Receive_IT+0x24>
 80047ea:	88fb      	ldrh	r3, [r7, #6]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e030      	b.n	8004856 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a18      	ldr	r2, [pc, #96]	; (8004860 <HAL_UART_Receive_IT+0x94>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d01f      	beq.n	8004844 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d018      	beq.n	8004844 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	e853 3f00 	ldrex	r3, [r3]
 800481e:	613b      	str	r3, [r7, #16]
   return(result);
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	461a      	mov	r2, r3
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	623b      	str	r3, [r7, #32]
 8004832:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004834:	69f9      	ldr	r1, [r7, #28]
 8004836:	6a3a      	ldr	r2, [r7, #32]
 8004838:	e841 2300 	strex	r3, r2, [r1]
 800483c:	61bb      	str	r3, [r7, #24]
   return(result);
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1e6      	bne.n	8004812 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004844:	88fb      	ldrh	r3, [r7, #6]
 8004846:	461a      	mov	r2, r3
 8004848:	68b9      	ldr	r1, [r7, #8]
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 ff96 	bl	800577c <UART_Start_Receive_IT>
 8004850:	4603      	mov	r3, r0
 8004852:	e000      	b.n	8004856 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004854:	2302      	movs	r3, #2
  }
}
 8004856:	4618      	mov	r0, r3
 8004858:	3728      	adds	r7, #40	; 0x28
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40008000 	.word	0x40008000

08004864 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b0ba      	sub	sp, #232	; 0xe8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800488a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800488e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004892:	4013      	ands	r3, r2
 8004894:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004898:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800489c:	2b00      	cmp	r3, #0
 800489e:	d115      	bne.n	80048cc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80048a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a4:	f003 0320 	and.w	r3, r3, #32
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00f      	beq.n	80048cc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b0:	f003 0320 	and.w	r3, r3, #32
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d009      	beq.n	80048cc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 82ca 	beq.w	8004e56 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	4798      	blx	r3
      }
      return;
 80048ca:	e2c4      	b.n	8004e56 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80048cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 8117 	beq.w	8004b04 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80048d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80048e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80048e6:	4b85      	ldr	r3, [pc, #532]	; (8004afc <HAL_UART_IRQHandler+0x298>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 810a 	beq.w	8004b04 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d011      	beq.n	8004920 <HAL_UART_IRQHandler+0xbc>
 80048fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00b      	beq.n	8004920 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2201      	movs	r2, #1
 800490e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004916:	f043 0201 	orr.w	r2, r3, #1
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d011      	beq.n	8004950 <HAL_UART_IRQHandler+0xec>
 800492c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00b      	beq.n	8004950 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2202      	movs	r2, #2
 800493e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004946:	f043 0204 	orr.w	r2, r3, #4
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b00      	cmp	r3, #0
 800495a:	d011      	beq.n	8004980 <HAL_UART_IRQHandler+0x11c>
 800495c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00b      	beq.n	8004980 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2204      	movs	r2, #4
 800496e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004976:	f043 0202 	orr.w	r2, r3, #2
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	2b00      	cmp	r3, #0
 800498a:	d017      	beq.n	80049bc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800498c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004990:	f003 0320 	and.w	r3, r3, #32
 8004994:	2b00      	cmp	r3, #0
 8004996:	d105      	bne.n	80049a4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800499c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00b      	beq.n	80049bc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2208      	movs	r2, #8
 80049aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049b2:	f043 0208 	orr.w	r2, r3, #8
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d012      	beq.n	80049ee <HAL_UART_IRQHandler+0x18a>
 80049c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00c      	beq.n	80049ee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e4:	f043 0220 	orr.w	r2, r3, #32
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 8230 	beq.w	8004e5a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80049fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049fe:	f003 0320 	and.w	r3, r3, #32
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00d      	beq.n	8004a22 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a0a:	f003 0320 	and.w	r3, r3, #32
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d007      	beq.n	8004a22 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a36:	2b40      	cmp	r3, #64	; 0x40
 8004a38:	d005      	beq.n	8004a46 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d04f      	beq.n	8004ae6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 ff5e 	bl	8005908 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a56:	2b40      	cmp	r3, #64	; 0x40
 8004a58:	d141      	bne.n	8004ade <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3308      	adds	r3, #8
 8004a60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a68:	e853 3f00 	ldrex	r3, [r3]
 8004a6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3308      	adds	r3, #8
 8004a82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a96:	e841 2300 	strex	r3, r2, [r1]
 8004a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1d9      	bne.n	8004a5a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d013      	beq.n	8004ad6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab2:	4a13      	ldr	r2, [pc, #76]	; (8004b00 <HAL_UART_IRQHandler+0x29c>)
 8004ab4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fd f8de 	bl	8001c7c <HAL_DMA_Abort_IT>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d017      	beq.n	8004af6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad4:	e00f      	b.n	8004af6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f9ca 	bl	8004e70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004adc:	e00b      	b.n	8004af6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f9c6 	bl	8004e70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae4:	e007      	b.n	8004af6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f9c2 	bl	8004e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004af4:	e1b1      	b.n	8004e5a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af6:	bf00      	nop
    return;
 8004af8:	e1af      	b.n	8004e5a <HAL_UART_IRQHandler+0x5f6>
 8004afa:	bf00      	nop
 8004afc:	04000120 	.word	0x04000120
 8004b00:	080059d1 	.word	0x080059d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	f040 816a 	bne.w	8004de2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b12:	f003 0310 	and.w	r3, r3, #16
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 8163 	beq.w	8004de2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b20:	f003 0310 	and.w	r3, r3, #16
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 815c 	beq.w	8004de2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2210      	movs	r2, #16
 8004b30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3c:	2b40      	cmp	r3, #64	; 0x40
 8004b3e:	f040 80d4 	bne.w	8004cea <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b4e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 80ad 	beq.w	8004cb2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b62:	429a      	cmp	r2, r3
 8004b64:	f080 80a5 	bcs.w	8004cb2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f040 8086 	bne.w	8004c90 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b90:	e853 3f00 	ldrex	r3, [r3]
 8004b94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ba0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004bae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004bb2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004bba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004bbe:	e841 2300 	strex	r3, r2, [r1]
 8004bc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1da      	bne.n	8004b84 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3308      	adds	r3, #8
 8004bd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004bde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004be0:	f023 0301 	bic.w	r3, r3, #1
 8004be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3308      	adds	r3, #8
 8004bee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bf2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004bf6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004bfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004bfe:	e841 2300 	strex	r3, r2, [r1]
 8004c02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1e1      	bne.n	8004bce <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3308      	adds	r3, #8
 8004c10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c14:	e853 3f00 	ldrex	r3, [r3]
 8004c18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3308      	adds	r3, #8
 8004c2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c36:	e841 2300 	strex	r3, r2, [r1]
 8004c3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1e3      	bne.n	8004c0a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c58:	e853 3f00 	ldrex	r3, [r3]
 8004c5c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c60:	f023 0310 	bic.w	r3, r3, #16
 8004c64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c72:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c74:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c7a:	e841 2300 	strex	r3, r2, [r1]
 8004c7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1e4      	bne.n	8004c50 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fc ffb8 	bl	8001c00 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	4619      	mov	r1, r3
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f8ea 	bl	8004e84 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004cb0:	e0d5      	b.n	8004e5e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004cb8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	f040 80ce 	bne.w	8004e5e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0320 	and.w	r3, r3, #32
 8004cce:	2b20      	cmp	r3, #32
 8004cd0:	f040 80c5 	bne.w	8004e5e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	665a      	str	r2, [r3, #100]	; 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f8ce 	bl	8004e84 <HAL_UARTEx_RxEventCallback>
      return;
 8004ce8:	e0b9      	b.n	8004e5e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 80ab 	beq.w	8004e62 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004d0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 80a6 	beq.w	8004e62 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1e:	e853 3f00 	ldrex	r3, [r3]
 8004d22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	461a      	mov	r2, r3
 8004d34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d38:	647b      	str	r3, [r7, #68]	; 0x44
 8004d3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d40:	e841 2300 	strex	r3, r2, [r1]
 8004d44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1e4      	bne.n	8004d16 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3308      	adds	r3, #8
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	e853 3f00 	ldrex	r3, [r3]
 8004d5a:	623b      	str	r3, [r7, #32]
   return(result);
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	f023 0301 	bic.w	r3, r3, #1
 8004d62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3308      	adds	r3, #8
 8004d6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d70:	633a      	str	r2, [r7, #48]	; 0x30
 8004d72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d78:	e841 2300 	strex	r3, r2, [r1]
 8004d7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e3      	bne.n	8004d4c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2220      	movs	r2, #32
 8004d88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	e853 3f00 	ldrex	r3, [r3]
 8004da4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f023 0310 	bic.w	r3, r3, #16
 8004dac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	461a      	mov	r2, r3
 8004db6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004dba:	61fb      	str	r3, [r7, #28]
 8004dbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbe:	69b9      	ldr	r1, [r7, #24]
 8004dc0:	69fa      	ldr	r2, [r7, #28]
 8004dc2:	e841 2300 	strex	r3, r2, [r1]
 8004dc6:	617b      	str	r3, [r7, #20]
   return(result);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1e4      	bne.n	8004d98 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004dd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dd8:	4619      	mov	r1, r3
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f852 	bl	8004e84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004de0:	e03f      	b.n	8004e62 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00e      	beq.n	8004e0c <HAL_UART_IRQHandler+0x5a8>
 8004dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d008      	beq.n	8004e0c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f001 f89b 	bl	8005f40 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e0a:	e02d      	b.n	8004e68 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00e      	beq.n	8004e36 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d008      	beq.n	8004e36 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d01c      	beq.n	8004e66 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	4798      	blx	r3
    }
    return;
 8004e34:	e017      	b.n	8004e66 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d012      	beq.n	8004e68 <HAL_UART_IRQHandler+0x604>
 8004e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00c      	beq.n	8004e68 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fe90 	bl	8005b74 <UART_EndTransmit_IT>
    return;
 8004e54:	e008      	b.n	8004e68 <HAL_UART_IRQHandler+0x604>
      return;
 8004e56:	bf00      	nop
 8004e58:	e006      	b.n	8004e68 <HAL_UART_IRQHandler+0x604>
    return;
 8004e5a:	bf00      	nop
 8004e5c:	e004      	b.n	8004e68 <HAL_UART_IRQHandler+0x604>
      return;
 8004e5e:	bf00      	nop
 8004e60:	e002      	b.n	8004e68 <HAL_UART_IRQHandler+0x604>
      return;
 8004e62:	bf00      	nop
 8004e64:	e000      	b.n	8004e68 <HAL_UART_IRQHandler+0x604>
    return;
 8004e66:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004e68:	37e8      	adds	r7, #232	; 0xe8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop

08004e70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ea0:	b08a      	sub	sp, #40	; 0x28
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	69db      	ldr	r3, [r3, #28]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	4ba4      	ldr	r3, [pc, #656]	; (800515c <UART_SetConfig+0x2c0>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	6812      	ldr	r2, [r2, #0]
 8004ed2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ed4:	430b      	orrs	r3, r1
 8004ed6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a99      	ldr	r2, [pc, #612]	; (8005160 <UART_SetConfig+0x2c4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d004      	beq.n	8004f08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f04:	4313      	orrs	r3, r2
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a90      	ldr	r2, [pc, #576]	; (8005164 <UART_SetConfig+0x2c8>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d126      	bne.n	8004f74 <UART_SetConfig+0xd8>
 8004f26:	4b90      	ldr	r3, [pc, #576]	; (8005168 <UART_SetConfig+0x2cc>)
 8004f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2c:	f003 0303 	and.w	r3, r3, #3
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d81b      	bhi.n	8004f6c <UART_SetConfig+0xd0>
 8004f34:	a201      	add	r2, pc, #4	; (adr r2, 8004f3c <UART_SetConfig+0xa0>)
 8004f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3a:	bf00      	nop
 8004f3c:	08004f4d 	.word	0x08004f4d
 8004f40:	08004f5d 	.word	0x08004f5d
 8004f44:	08004f55 	.word	0x08004f55
 8004f48:	08004f65 	.word	0x08004f65
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f52:	e116      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004f54:	2302      	movs	r3, #2
 8004f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f5a:	e112      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004f5c:	2304      	movs	r3, #4
 8004f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f62:	e10e      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004f64:	2308      	movs	r3, #8
 8004f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f6a:	e10a      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004f6c:	2310      	movs	r3, #16
 8004f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f72:	e106      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a7c      	ldr	r2, [pc, #496]	; (800516c <UART_SetConfig+0x2d0>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d138      	bne.n	8004ff0 <UART_SetConfig+0x154>
 8004f7e:	4b7a      	ldr	r3, [pc, #488]	; (8005168 <UART_SetConfig+0x2cc>)
 8004f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f84:	f003 030c 	and.w	r3, r3, #12
 8004f88:	2b0c      	cmp	r3, #12
 8004f8a:	d82d      	bhi.n	8004fe8 <UART_SetConfig+0x14c>
 8004f8c:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <UART_SetConfig+0xf8>)
 8004f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f92:	bf00      	nop
 8004f94:	08004fc9 	.word	0x08004fc9
 8004f98:	08004fe9 	.word	0x08004fe9
 8004f9c:	08004fe9 	.word	0x08004fe9
 8004fa0:	08004fe9 	.word	0x08004fe9
 8004fa4:	08004fd9 	.word	0x08004fd9
 8004fa8:	08004fe9 	.word	0x08004fe9
 8004fac:	08004fe9 	.word	0x08004fe9
 8004fb0:	08004fe9 	.word	0x08004fe9
 8004fb4:	08004fd1 	.word	0x08004fd1
 8004fb8:	08004fe9 	.word	0x08004fe9
 8004fbc:	08004fe9 	.word	0x08004fe9
 8004fc0:	08004fe9 	.word	0x08004fe9
 8004fc4:	08004fe1 	.word	0x08004fe1
 8004fc8:	2300      	movs	r3, #0
 8004fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fce:	e0d8      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fd6:	e0d4      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fde:	e0d0      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004fe0:	2308      	movs	r3, #8
 8004fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe6:	e0cc      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004fe8:	2310      	movs	r3, #16
 8004fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fee:	e0c8      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a5e      	ldr	r2, [pc, #376]	; (8005170 <UART_SetConfig+0x2d4>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d125      	bne.n	8005046 <UART_SetConfig+0x1aa>
 8004ffa:	4b5b      	ldr	r3, [pc, #364]	; (8005168 <UART_SetConfig+0x2cc>)
 8004ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005000:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005004:	2b30      	cmp	r3, #48	; 0x30
 8005006:	d016      	beq.n	8005036 <UART_SetConfig+0x19a>
 8005008:	2b30      	cmp	r3, #48	; 0x30
 800500a:	d818      	bhi.n	800503e <UART_SetConfig+0x1a2>
 800500c:	2b20      	cmp	r3, #32
 800500e:	d00a      	beq.n	8005026 <UART_SetConfig+0x18a>
 8005010:	2b20      	cmp	r3, #32
 8005012:	d814      	bhi.n	800503e <UART_SetConfig+0x1a2>
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <UART_SetConfig+0x182>
 8005018:	2b10      	cmp	r3, #16
 800501a:	d008      	beq.n	800502e <UART_SetConfig+0x192>
 800501c:	e00f      	b.n	800503e <UART_SetConfig+0x1a2>
 800501e:	2300      	movs	r3, #0
 8005020:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005024:	e0ad      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005026:	2302      	movs	r3, #2
 8005028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800502c:	e0a9      	b.n	8005182 <UART_SetConfig+0x2e6>
 800502e:	2304      	movs	r3, #4
 8005030:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005034:	e0a5      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005036:	2308      	movs	r3, #8
 8005038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800503c:	e0a1      	b.n	8005182 <UART_SetConfig+0x2e6>
 800503e:	2310      	movs	r3, #16
 8005040:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005044:	e09d      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a4a      	ldr	r2, [pc, #296]	; (8005174 <UART_SetConfig+0x2d8>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d125      	bne.n	800509c <UART_SetConfig+0x200>
 8005050:	4b45      	ldr	r3, [pc, #276]	; (8005168 <UART_SetConfig+0x2cc>)
 8005052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005056:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800505a:	2bc0      	cmp	r3, #192	; 0xc0
 800505c:	d016      	beq.n	800508c <UART_SetConfig+0x1f0>
 800505e:	2bc0      	cmp	r3, #192	; 0xc0
 8005060:	d818      	bhi.n	8005094 <UART_SetConfig+0x1f8>
 8005062:	2b80      	cmp	r3, #128	; 0x80
 8005064:	d00a      	beq.n	800507c <UART_SetConfig+0x1e0>
 8005066:	2b80      	cmp	r3, #128	; 0x80
 8005068:	d814      	bhi.n	8005094 <UART_SetConfig+0x1f8>
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <UART_SetConfig+0x1d8>
 800506e:	2b40      	cmp	r3, #64	; 0x40
 8005070:	d008      	beq.n	8005084 <UART_SetConfig+0x1e8>
 8005072:	e00f      	b.n	8005094 <UART_SetConfig+0x1f8>
 8005074:	2300      	movs	r3, #0
 8005076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800507a:	e082      	b.n	8005182 <UART_SetConfig+0x2e6>
 800507c:	2302      	movs	r3, #2
 800507e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005082:	e07e      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005084:	2304      	movs	r3, #4
 8005086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800508a:	e07a      	b.n	8005182 <UART_SetConfig+0x2e6>
 800508c:	2308      	movs	r3, #8
 800508e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005092:	e076      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005094:	2310      	movs	r3, #16
 8005096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800509a:	e072      	b.n	8005182 <UART_SetConfig+0x2e6>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a35      	ldr	r2, [pc, #212]	; (8005178 <UART_SetConfig+0x2dc>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d12a      	bne.n	80050fc <UART_SetConfig+0x260>
 80050a6:	4b30      	ldr	r3, [pc, #192]	; (8005168 <UART_SetConfig+0x2cc>)
 80050a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050b4:	d01a      	beq.n	80050ec <UART_SetConfig+0x250>
 80050b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ba:	d81b      	bhi.n	80050f4 <UART_SetConfig+0x258>
 80050bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c0:	d00c      	beq.n	80050dc <UART_SetConfig+0x240>
 80050c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c6:	d815      	bhi.n	80050f4 <UART_SetConfig+0x258>
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <UART_SetConfig+0x238>
 80050cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d0:	d008      	beq.n	80050e4 <UART_SetConfig+0x248>
 80050d2:	e00f      	b.n	80050f4 <UART_SetConfig+0x258>
 80050d4:	2300      	movs	r3, #0
 80050d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050da:	e052      	b.n	8005182 <UART_SetConfig+0x2e6>
 80050dc:	2302      	movs	r3, #2
 80050de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050e2:	e04e      	b.n	8005182 <UART_SetConfig+0x2e6>
 80050e4:	2304      	movs	r3, #4
 80050e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ea:	e04a      	b.n	8005182 <UART_SetConfig+0x2e6>
 80050ec:	2308      	movs	r3, #8
 80050ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050f2:	e046      	b.n	8005182 <UART_SetConfig+0x2e6>
 80050f4:	2310      	movs	r3, #16
 80050f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050fa:	e042      	b.n	8005182 <UART_SetConfig+0x2e6>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a17      	ldr	r2, [pc, #92]	; (8005160 <UART_SetConfig+0x2c4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d13a      	bne.n	800517c <UART_SetConfig+0x2e0>
 8005106:	4b18      	ldr	r3, [pc, #96]	; (8005168 <UART_SetConfig+0x2cc>)
 8005108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005110:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005114:	d01a      	beq.n	800514c <UART_SetConfig+0x2b0>
 8005116:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800511a:	d81b      	bhi.n	8005154 <UART_SetConfig+0x2b8>
 800511c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005120:	d00c      	beq.n	800513c <UART_SetConfig+0x2a0>
 8005122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005126:	d815      	bhi.n	8005154 <UART_SetConfig+0x2b8>
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <UART_SetConfig+0x298>
 800512c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005130:	d008      	beq.n	8005144 <UART_SetConfig+0x2a8>
 8005132:	e00f      	b.n	8005154 <UART_SetConfig+0x2b8>
 8005134:	2300      	movs	r3, #0
 8005136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800513a:	e022      	b.n	8005182 <UART_SetConfig+0x2e6>
 800513c:	2302      	movs	r3, #2
 800513e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005142:	e01e      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005144:	2304      	movs	r3, #4
 8005146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800514a:	e01a      	b.n	8005182 <UART_SetConfig+0x2e6>
 800514c:	2308      	movs	r3, #8
 800514e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005152:	e016      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005154:	2310      	movs	r3, #16
 8005156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800515a:	e012      	b.n	8005182 <UART_SetConfig+0x2e6>
 800515c:	efff69f3 	.word	0xefff69f3
 8005160:	40008000 	.word	0x40008000
 8005164:	40013800 	.word	0x40013800
 8005168:	40021000 	.word	0x40021000
 800516c:	40004400 	.word	0x40004400
 8005170:	40004800 	.word	0x40004800
 8005174:	40004c00 	.word	0x40004c00
 8005178:	40005000 	.word	0x40005000
 800517c:	2310      	movs	r3, #16
 800517e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a9f      	ldr	r2, [pc, #636]	; (8005404 <UART_SetConfig+0x568>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d17a      	bne.n	8005282 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800518c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005190:	2b08      	cmp	r3, #8
 8005192:	d824      	bhi.n	80051de <UART_SetConfig+0x342>
 8005194:	a201      	add	r2, pc, #4	; (adr r2, 800519c <UART_SetConfig+0x300>)
 8005196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519a:	bf00      	nop
 800519c:	080051c1 	.word	0x080051c1
 80051a0:	080051df 	.word	0x080051df
 80051a4:	080051c9 	.word	0x080051c9
 80051a8:	080051df 	.word	0x080051df
 80051ac:	080051cf 	.word	0x080051cf
 80051b0:	080051df 	.word	0x080051df
 80051b4:	080051df 	.word	0x080051df
 80051b8:	080051df 	.word	0x080051df
 80051bc:	080051d7 	.word	0x080051d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051c0:	f7fe f89c 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 80051c4:	61f8      	str	r0, [r7, #28]
        break;
 80051c6:	e010      	b.n	80051ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051c8:	4b8f      	ldr	r3, [pc, #572]	; (8005408 <UART_SetConfig+0x56c>)
 80051ca:	61fb      	str	r3, [r7, #28]
        break;
 80051cc:	e00d      	b.n	80051ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ce:	f7fd fffd 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 80051d2:	61f8      	str	r0, [r7, #28]
        break;
 80051d4:	e009      	b.n	80051ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051da:	61fb      	str	r3, [r7, #28]
        break;
 80051dc:	e005      	b.n	80051ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80051e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 80fb 	beq.w	80053e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	4613      	mov	r3, r2
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	4413      	add	r3, r2
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d305      	bcc.n	800520e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	429a      	cmp	r2, r3
 800520c:	d903      	bls.n	8005216 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005214:	e0e8      	b.n	80053e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	2200      	movs	r2, #0
 800521a:	461c      	mov	r4, r3
 800521c:	4615      	mov	r5, r2
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	f04f 0300 	mov.w	r3, #0
 8005226:	022b      	lsls	r3, r5, #8
 8005228:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800522c:	0222      	lsls	r2, r4, #8
 800522e:	68f9      	ldr	r1, [r7, #12]
 8005230:	6849      	ldr	r1, [r1, #4]
 8005232:	0849      	lsrs	r1, r1, #1
 8005234:	2000      	movs	r0, #0
 8005236:	4688      	mov	r8, r1
 8005238:	4681      	mov	r9, r0
 800523a:	eb12 0a08 	adds.w	sl, r2, r8
 800523e:	eb43 0b09 	adc.w	fp, r3, r9
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	603b      	str	r3, [r7, #0]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005250:	4650      	mov	r0, sl
 8005252:	4659      	mov	r1, fp
 8005254:	f7fb f80c 	bl	8000270 <__aeabi_uldivmod>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4613      	mov	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005266:	d308      	bcc.n	800527a <UART_SetConfig+0x3de>
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800526e:	d204      	bcs.n	800527a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	60da      	str	r2, [r3, #12]
 8005278:	e0b6      	b.n	80053e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005280:	e0b2      	b.n	80053e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800528a:	d15e      	bne.n	800534a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800528c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005290:	2b08      	cmp	r3, #8
 8005292:	d828      	bhi.n	80052e6 <UART_SetConfig+0x44a>
 8005294:	a201      	add	r2, pc, #4	; (adr r2, 800529c <UART_SetConfig+0x400>)
 8005296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529a:	bf00      	nop
 800529c:	080052c1 	.word	0x080052c1
 80052a0:	080052c9 	.word	0x080052c9
 80052a4:	080052d1 	.word	0x080052d1
 80052a8:	080052e7 	.word	0x080052e7
 80052ac:	080052d7 	.word	0x080052d7
 80052b0:	080052e7 	.word	0x080052e7
 80052b4:	080052e7 	.word	0x080052e7
 80052b8:	080052e7 	.word	0x080052e7
 80052bc:	080052df 	.word	0x080052df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052c0:	f7fe f81c 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 80052c4:	61f8      	str	r0, [r7, #28]
        break;
 80052c6:	e014      	b.n	80052f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052c8:	f7fe f82e 	bl	8003328 <HAL_RCC_GetPCLK2Freq>
 80052cc:	61f8      	str	r0, [r7, #28]
        break;
 80052ce:	e010      	b.n	80052f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052d0:	4b4d      	ldr	r3, [pc, #308]	; (8005408 <UART_SetConfig+0x56c>)
 80052d2:	61fb      	str	r3, [r7, #28]
        break;
 80052d4:	e00d      	b.n	80052f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052d6:	f7fd ff79 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 80052da:	61f8      	str	r0, [r7, #28]
        break;
 80052dc:	e009      	b.n	80052f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052e2:	61fb      	str	r3, [r7, #28]
        break;
 80052e4:	e005      	b.n	80052f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80052f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d077      	beq.n	80053e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	005a      	lsls	r2, r3, #1
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	085b      	lsrs	r3, r3, #1
 8005302:	441a      	add	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	fbb2 f3f3 	udiv	r3, r2, r3
 800530c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	2b0f      	cmp	r3, #15
 8005312:	d916      	bls.n	8005342 <UART_SetConfig+0x4a6>
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800531a:	d212      	bcs.n	8005342 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	b29b      	uxth	r3, r3
 8005320:	f023 030f 	bic.w	r3, r3, #15
 8005324:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	085b      	lsrs	r3, r3, #1
 800532a:	b29b      	uxth	r3, r3
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	b29a      	uxth	r2, r3
 8005332:	8afb      	ldrh	r3, [r7, #22]
 8005334:	4313      	orrs	r3, r2
 8005336:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	8afa      	ldrh	r2, [r7, #22]
 800533e:	60da      	str	r2, [r3, #12]
 8005340:	e052      	b.n	80053e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005348:	e04e      	b.n	80053e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800534a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800534e:	2b08      	cmp	r3, #8
 8005350:	d827      	bhi.n	80053a2 <UART_SetConfig+0x506>
 8005352:	a201      	add	r2, pc, #4	; (adr r2, 8005358 <UART_SetConfig+0x4bc>)
 8005354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005358:	0800537d 	.word	0x0800537d
 800535c:	08005385 	.word	0x08005385
 8005360:	0800538d 	.word	0x0800538d
 8005364:	080053a3 	.word	0x080053a3
 8005368:	08005393 	.word	0x08005393
 800536c:	080053a3 	.word	0x080053a3
 8005370:	080053a3 	.word	0x080053a3
 8005374:	080053a3 	.word	0x080053a3
 8005378:	0800539b 	.word	0x0800539b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800537c:	f7fd ffbe 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 8005380:	61f8      	str	r0, [r7, #28]
        break;
 8005382:	e014      	b.n	80053ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005384:	f7fd ffd0 	bl	8003328 <HAL_RCC_GetPCLK2Freq>
 8005388:	61f8      	str	r0, [r7, #28]
        break;
 800538a:	e010      	b.n	80053ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800538c:	4b1e      	ldr	r3, [pc, #120]	; (8005408 <UART_SetConfig+0x56c>)
 800538e:	61fb      	str	r3, [r7, #28]
        break;
 8005390:	e00d      	b.n	80053ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005392:	f7fd ff1b 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 8005396:	61f8      	str	r0, [r7, #28]
        break;
 8005398:	e009      	b.n	80053ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800539a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800539e:	61fb      	str	r3, [r7, #28]
        break;
 80053a0:	e005      	b.n	80053ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053ac:	bf00      	nop
    }

    if (pclk != 0U)
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d019      	beq.n	80053e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	085a      	lsrs	r2, r3, #1
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	441a      	add	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	2b0f      	cmp	r3, #15
 80053cc:	d909      	bls.n	80053e2 <UART_SetConfig+0x546>
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d4:	d205      	bcs.n	80053e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	b29a      	uxth	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60da      	str	r2, [r3, #12]
 80053e0:	e002      	b.n	80053e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80053f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3728      	adds	r7, #40	; 0x28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005402:	bf00      	nop
 8005404:	40008000 	.word	0x40008000
 8005408:	00f42400 	.word	0x00f42400

0800540c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	f003 0308 	and.w	r3, r3, #8
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00a      	beq.n	800547a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	f003 0304 	and.w	r3, r3, #4
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	f003 0310 	and.w	r3, r3, #16
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d01a      	beq.n	8005522 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800550a:	d10a      	bne.n	8005522 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	605a      	str	r2, [r3, #4]
  }
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b098      	sub	sp, #96	; 0x60
 8005554:	af02      	add	r7, sp, #8
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005560:	f7fc f930 	bl	80017c4 <HAL_GetTick>
 8005564:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0308 	and.w	r3, r3, #8
 8005570:	2b08      	cmp	r3, #8
 8005572:	d12e      	bne.n	80055d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005574:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800557c:	2200      	movs	r2, #0
 800557e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f88c 	bl	80056a0 <UART_WaitOnFlagUntilTimeout>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d021      	beq.n	80055d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005596:	e853 3f00 	ldrex	r3, [r3]
 800559a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800559c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055a2:	653b      	str	r3, [r7, #80]	; 0x50
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	461a      	mov	r2, r3
 80055aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ac:	647b      	str	r3, [r7, #68]	; 0x44
 80055ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055b4:	e841 2300 	strex	r3, r2, [r1]
 80055b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1e6      	bne.n	800558e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e062      	b.n	8005698 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d149      	bne.n	8005674 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055e8:	2200      	movs	r2, #0
 80055ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f856 	bl	80056a0 <UART_WaitOnFlagUntilTimeout>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d03c      	beq.n	8005674 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	e853 3f00 	ldrex	r3, [r3]
 8005606:	623b      	str	r3, [r7, #32]
   return(result);
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800560e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005618:	633b      	str	r3, [r7, #48]	; 0x30
 800561a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800561e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005620:	e841 2300 	strex	r3, r2, [r1]
 8005624:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1e6      	bne.n	80055fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3308      	adds	r3, #8
 8005632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	e853 3f00 	ldrex	r3, [r3]
 800563a:	60fb      	str	r3, [r7, #12]
   return(result);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 0301 	bic.w	r3, r3, #1
 8005642:	64bb      	str	r3, [r7, #72]	; 0x48
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3308      	adds	r3, #8
 800564a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800564c:	61fa      	str	r2, [r7, #28]
 800564e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005650:	69b9      	ldr	r1, [r7, #24]
 8005652:	69fa      	ldr	r2, [r7, #28]
 8005654:	e841 2300 	strex	r3, r2, [r1]
 8005658:	617b      	str	r3, [r7, #20]
   return(result);
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1e5      	bne.n	800562c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2220      	movs	r2, #32
 8005664:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e011      	b.n	8005698 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2220      	movs	r2, #32
 8005678:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2220      	movs	r2, #32
 800567e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3758      	adds	r7, #88	; 0x58
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	603b      	str	r3, [r7, #0]
 80056ac:	4613      	mov	r3, r2
 80056ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056b0:	e04f      	b.n	8005752 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b8:	d04b      	beq.n	8005752 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ba:	f7fc f883 	bl	80017c4 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d302      	bcc.n	80056d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e04e      	b.n	8005772 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0304 	and.w	r3, r3, #4
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d037      	beq.n	8005752 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	2b80      	cmp	r3, #128	; 0x80
 80056e6:	d034      	beq.n	8005752 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2b40      	cmp	r3, #64	; 0x40
 80056ec:	d031      	beq.n	8005752 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	69db      	ldr	r3, [r3, #28]
 80056f4:	f003 0308 	and.w	r3, r3, #8
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d110      	bne.n	800571e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2208      	movs	r2, #8
 8005702:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 f8ff 	bl	8005908 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2208      	movs	r2, #8
 800570e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e029      	b.n	8005772 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800572c:	d111      	bne.n	8005752 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005736:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f000 f8e5 	bl	8005908 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2220      	movs	r2, #32
 8005742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e00f      	b.n	8005772 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69da      	ldr	r2, [r3, #28]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4013      	ands	r3, r2
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	429a      	cmp	r2, r3
 8005760:	bf0c      	ite	eq
 8005762:	2301      	moveq	r3, #1
 8005764:	2300      	movne	r3, #0
 8005766:	b2db      	uxtb	r3, r3
 8005768:	461a      	mov	r2, r3
 800576a:	79fb      	ldrb	r3, [r7, #7]
 800576c:	429a      	cmp	r2, r3
 800576e:	d0a0      	beq.n	80056b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
	...

0800577c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800577c:	b480      	push	{r7}
 800577e:	b097      	sub	sp, #92	; 0x5c
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	4613      	mov	r3, r2
 8005788:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	88fa      	ldrh	r2, [r7, #6]
 8005794:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	88fa      	ldrh	r2, [r7, #6]
 800579c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ae:	d10e      	bne.n	80057ce <UART_Start_Receive_IT+0x52>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d105      	bne.n	80057c4 <UART_Start_Receive_IT+0x48>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 80057be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057c2:	e02d      	b.n	8005820 <UART_Start_Receive_IT+0xa4>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	22ff      	movs	r2, #255	; 0xff
 80057c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057cc:	e028      	b.n	8005820 <UART_Start_Receive_IT+0xa4>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10d      	bne.n	80057f2 <UART_Start_Receive_IT+0x76>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d104      	bne.n	80057e8 <UART_Start_Receive_IT+0x6c>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	22ff      	movs	r2, #255	; 0xff
 80057e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057e6:	e01b      	b.n	8005820 <UART_Start_Receive_IT+0xa4>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	227f      	movs	r2, #127	; 0x7f
 80057ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057f0:	e016      	b.n	8005820 <UART_Start_Receive_IT+0xa4>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057fa:	d10d      	bne.n	8005818 <UART_Start_Receive_IT+0x9c>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d104      	bne.n	800580e <UART_Start_Receive_IT+0x92>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	227f      	movs	r2, #127	; 0x7f
 8005808:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800580c:	e008      	b.n	8005820 <UART_Start_Receive_IT+0xa4>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	223f      	movs	r2, #63	; 0x3f
 8005812:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005816:	e003      	b.n	8005820 <UART_Start_Receive_IT+0xa4>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2222      	movs	r2, #34	; 0x22
 800582c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3308      	adds	r3, #8
 8005836:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800583a:	e853 3f00 	ldrex	r3, [r3]
 800583e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005842:	f043 0301 	orr.w	r3, r3, #1
 8005846:	657b      	str	r3, [r7, #84]	; 0x54
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	3308      	adds	r3, #8
 800584e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005850:	64ba      	str	r2, [r7, #72]	; 0x48
 8005852:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005854:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005856:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005858:	e841 2300 	strex	r3, r2, [r1]
 800585c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800585e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1e5      	bne.n	8005830 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800586c:	d107      	bne.n	800587e <UART_Start_Receive_IT+0x102>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d103      	bne.n	800587e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4a21      	ldr	r2, [pc, #132]	; (8005900 <UART_Start_Receive_IT+0x184>)
 800587a:	669a      	str	r2, [r3, #104]	; 0x68
 800587c:	e002      	b.n	8005884 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4a20      	ldr	r2, [pc, #128]	; (8005904 <UART_Start_Receive_IT+0x188>)
 8005882:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d019      	beq.n	80058c0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005894:	e853 3f00 	ldrex	r3, [r3]
 8005898:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80058a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	461a      	mov	r2, r3
 80058a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058aa:	637b      	str	r3, [r7, #52]	; 0x34
 80058ac:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058b2:	e841 2300 	strex	r3, r2, [r1]
 80058b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1e6      	bne.n	800588c <UART_Start_Receive_IT+0x110>
 80058be:	e018      	b.n	80058f2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	e853 3f00 	ldrex	r3, [r3]
 80058cc:	613b      	str	r3, [r7, #16]
   return(result);
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f043 0320 	orr.w	r3, r3, #32
 80058d4:	653b      	str	r3, [r7, #80]	; 0x50
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	461a      	mov	r2, r3
 80058dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058de:	623b      	str	r3, [r7, #32]
 80058e0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e2:	69f9      	ldr	r1, [r7, #28]
 80058e4:	6a3a      	ldr	r2, [r7, #32]
 80058e6:	e841 2300 	strex	r3, r2, [r1]
 80058ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1e6      	bne.n	80058c0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	375c      	adds	r7, #92	; 0x5c
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	08005d85 	.word	0x08005d85
 8005904:	08005bc9 	.word	0x08005bc9

08005908 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005908:	b480      	push	{r7}
 800590a:	b095      	sub	sp, #84	; 0x54
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005918:	e853 3f00 	ldrex	r3, [r3]
 800591c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800591e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005920:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005924:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800592e:	643b      	str	r3, [r7, #64]	; 0x40
 8005930:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005932:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005934:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005936:	e841 2300 	strex	r3, r2, [r1]
 800593a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800593c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1e6      	bne.n	8005910 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3308      	adds	r3, #8
 8005948:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	e853 3f00 	ldrex	r3, [r3]
 8005950:	61fb      	str	r3, [r7, #28]
   return(result);
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	f023 0301 	bic.w	r3, r3, #1
 8005958:	64bb      	str	r3, [r7, #72]	; 0x48
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3308      	adds	r3, #8
 8005960:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005962:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005964:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005966:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800596a:	e841 2300 	strex	r3, r2, [r1]
 800596e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1e5      	bne.n	8005942 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800597a:	2b01      	cmp	r3, #1
 800597c:	d118      	bne.n	80059b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	e853 3f00 	ldrex	r3, [r3]
 800598a:	60bb      	str	r3, [r7, #8]
   return(result);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f023 0310 	bic.w	r3, r3, #16
 8005992:	647b      	str	r3, [r7, #68]	; 0x44
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	461a      	mov	r2, r3
 800599a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800599c:	61bb      	str	r3, [r7, #24]
 800599e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a0:	6979      	ldr	r1, [r7, #20]
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	e841 2300 	strex	r3, r2, [r1]
 80059a8:	613b      	str	r3, [r7, #16]
   return(result);
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1e6      	bne.n	800597e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2220      	movs	r2, #32
 80059b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80059c4:	bf00      	nop
 80059c6:	3754      	adds	r7, #84	; 0x54
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f7ff fa3e 	bl	8004e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059f4:	bf00      	nop
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b08f      	sub	sp, #60	; 0x3c
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a08:	2b21      	cmp	r3, #33	; 0x21
 8005a0a:	d14d      	bne.n	8005aa8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d132      	bne.n	8005a7e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	e853 3f00 	ldrex	r3, [r3]
 8005a24:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a2c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a38:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a3e:	e841 2300 	strex	r3, r2, [r1]
 8005a42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1e6      	bne.n	8005a18 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	e853 3f00 	ldrex	r3, [r3]
 8005a56:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a5e:	633b      	str	r3, [r7, #48]	; 0x30
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	461a      	mov	r2, r3
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	61bb      	str	r3, [r7, #24]
 8005a6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6c:	6979      	ldr	r1, [r7, #20]
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	e841 2300 	strex	r3, r2, [r1]
 8005a74:	613b      	str	r3, [r7, #16]
   return(result);
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1e6      	bne.n	8005a4a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005a7c:	e014      	b.n	8005aa8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a82:	781a      	ldrb	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	b292      	uxth	r2, r2
 8005a8a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a90:	1c5a      	adds	r2, r3, #1
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005aa8:	bf00      	nop
 8005aaa:	373c      	adds	r7, #60	; 0x3c
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b091      	sub	sp, #68	; 0x44
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ac0:	2b21      	cmp	r3, #33	; 0x21
 8005ac2:	d151      	bne.n	8005b68 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d132      	bne.n	8005b36 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	e853 3f00 	ldrex	r3, [r3]
 8005adc:	623b      	str	r3, [r7, #32]
   return(result);
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ae4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aee:	633b      	str	r3, [r7, #48]	; 0x30
 8005af0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1e6      	bne.n	8005ad0 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	e853 3f00 	ldrex	r3, [r3]
 8005b0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b16:	637b      	str	r3, [r7, #52]	; 0x34
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b20:	61fb      	str	r3, [r7, #28]
 8005b22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b24:	69b9      	ldr	r1, [r7, #24]
 8005b26:	69fa      	ldr	r2, [r7, #28]
 8005b28:	e841 2300 	strex	r3, r2, [r1]
 8005b2c:	617b      	str	r3, [r7, #20]
   return(result);
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1e6      	bne.n	8005b02 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005b34:	e018      	b.n	8005b68 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b3e:	881a      	ldrh	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b48:	b292      	uxth	r2, r2
 8005b4a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b50:	1c9a      	adds	r2, r3, #2
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005b68:	bf00      	nop
 8005b6a:	3744      	adds	r7, #68	; 0x44
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b088      	sub	sp, #32
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	e853 3f00 	ldrex	r3, [r3]
 8005b88:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b90:	61fb      	str	r3, [r7, #28]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	61bb      	str	r3, [r7, #24]
 8005b9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9e:	6979      	ldr	r1, [r7, #20]
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	e841 2300 	strex	r3, r2, [r1]
 8005ba6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1e6      	bne.n	8005b7c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7fa fd14 	bl	80005e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bc0:	bf00      	nop
 8005bc2:	3720      	adds	r7, #32
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b09c      	sub	sp, #112	; 0x70
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005bd6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005be0:	2b22      	cmp	r3, #34	; 0x22
 8005be2:	f040 80be 	bne.w	8005d62 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005bec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005bf0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005bf4:	b2d9      	uxtb	r1, r3
 8005bf6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c00:	400a      	ands	r2, r1
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0a:	1c5a      	adds	r2, r3, #1
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f040 80a3 	bne.w	8005d76 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c38:	e853 3f00 	ldrex	r3, [r3]
 8005c3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c44:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c50:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c56:	e841 2300 	strex	r3, r2, [r1]
 8005c5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1e6      	bne.n	8005c30 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3308      	adds	r3, #8
 8005c68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6c:	e853 3f00 	ldrex	r3, [r3]
 8005c70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c74:	f023 0301 	bic.w	r3, r3, #1
 8005c78:	667b      	str	r3, [r7, #100]	; 0x64
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3308      	adds	r3, #8
 8005c80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005c82:	647a      	str	r2, [r7, #68]	; 0x44
 8005c84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c8a:	e841 2300 	strex	r3, r2, [r1]
 8005c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1e5      	bne.n	8005c62 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a34      	ldr	r2, [pc, #208]	; (8005d80 <UART_RxISR_8BIT+0x1b8>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d01f      	beq.n	8005cf4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d018      	beq.n	8005cf4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	e853 3f00 	ldrex	r3, [r3]
 8005cce:	623b      	str	r3, [r7, #32]
   return(result);
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005cd6:	663b      	str	r3, [r7, #96]	; 0x60
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ce0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ce2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ce6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ce8:	e841 2300 	strex	r3, r2, [r1]
 8005cec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1e6      	bne.n	8005cc2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d12e      	bne.n	8005d5a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	e853 3f00 	ldrex	r3, [r3]
 8005d0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 0310 	bic.w	r3, r3, #16
 8005d16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d20:	61fb      	str	r3, [r7, #28]
 8005d22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d24:	69b9      	ldr	r1, [r7, #24]
 8005d26:	69fa      	ldr	r2, [r7, #28]
 8005d28:	e841 2300 	strex	r3, r2, [r1]
 8005d2c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1e6      	bne.n	8005d02 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	f003 0310 	and.w	r3, r3, #16
 8005d3e:	2b10      	cmp	r3, #16
 8005d40:	d103      	bne.n	8005d4a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2210      	movs	r2, #16
 8005d48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d50:	4619      	mov	r1, r3
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7ff f896 	bl	8004e84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d58:	e00d      	b.n	8005d76 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7fa fc64 	bl	8000628 <HAL_UART_RxCpltCallback>
}
 8005d60:	e009      	b.n	8005d76 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	8b1b      	ldrh	r3, [r3, #24]
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f042 0208 	orr.w	r2, r2, #8
 8005d72:	b292      	uxth	r2, r2
 8005d74:	831a      	strh	r2, [r3, #24]
}
 8005d76:	bf00      	nop
 8005d78:	3770      	adds	r7, #112	; 0x70
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	40008000 	.word	0x40008000

08005d84 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b09c      	sub	sp, #112	; 0x70
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d92:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d9c:	2b22      	cmp	r3, #34	; 0x22
 8005d9e:	f040 80be 	bne.w	8005f1e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005da8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005db2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005db6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005dba:	4013      	ands	r3, r2
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dc0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc6:	1c9a      	adds	r2, r3, #2
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f040 80a3 	bne.w	8005f32 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005df4:	e853 3f00 	ldrex	r3, [r3]
 8005df8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e00:	667b      	str	r3, [r7, #100]	; 0x64
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	461a      	mov	r2, r3
 8005e08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e0a:	657b      	str	r3, [r7, #84]	; 0x54
 8005e0c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e12:	e841 2300 	strex	r3, r2, [r1]
 8005e16:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1e6      	bne.n	8005dec <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	3308      	adds	r3, #8
 8005e24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e30:	f023 0301 	bic.w	r3, r3, #1
 8005e34:	663b      	str	r3, [r7, #96]	; 0x60
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3308      	adds	r3, #8
 8005e3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e3e:	643a      	str	r2, [r7, #64]	; 0x40
 8005e40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e46:	e841 2300 	strex	r3, r2, [r1]
 8005e4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1e5      	bne.n	8005e1e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2220      	movs	r2, #32
 8005e56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a34      	ldr	r2, [pc, #208]	; (8005f3c <UART_RxISR_16BIT+0x1b8>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d01f      	beq.n	8005eb0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d018      	beq.n	8005eb0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	e853 3f00 	ldrex	r3, [r3]
 8005e8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	461a      	mov	r2, r3
 8005e9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e9e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ea4:	e841 2300 	strex	r3, r2, [r1]
 8005ea8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e6      	bne.n	8005e7e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d12e      	bne.n	8005f16 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	e853 3f00 	ldrex	r3, [r3]
 8005eca:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f023 0310 	bic.w	r3, r3, #16
 8005ed2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005edc:	61bb      	str	r3, [r7, #24]
 8005ede:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee0:	6979      	ldr	r1, [r7, #20]
 8005ee2:	69ba      	ldr	r2, [r7, #24]
 8005ee4:	e841 2300 	strex	r3, r2, [r1]
 8005ee8:	613b      	str	r3, [r7, #16]
   return(result);
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1e6      	bne.n	8005ebe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	f003 0310 	and.w	r3, r3, #16
 8005efa:	2b10      	cmp	r3, #16
 8005efc:	d103      	bne.n	8005f06 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2210      	movs	r2, #16
 8005f04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f7fe ffb8 	bl	8004e84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f14:	e00d      	b.n	8005f32 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7fa fb86 	bl	8000628 <HAL_UART_RxCpltCallback>
}
 8005f1c:	e009      	b.n	8005f32 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	8b1b      	ldrh	r3, [r3, #24]
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f042 0208 	orr.w	r2, r2, #8
 8005f2e:	b292      	uxth	r2, r2
 8005f30:	831a      	strh	r2, [r3, #24]
}
 8005f32:	bf00      	nop
 8005f34:	3770      	adds	r7, #112	; 0x70
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	40008000 	.word	0x40008000

08005f40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f54:	b084      	sub	sp, #16
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b084      	sub	sp, #16
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	f107 001c 	add.w	r0, r7, #28
 8005f62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 fa68 	bl	8006448 <USB_CoreReset>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005f7c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d106      	bne.n	8005f92 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f88:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	639a      	str	r2, [r3, #56]	; 0x38
 8005f90:	e005      	b.n	8005f9e <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005faa:	b004      	add	sp, #16
 8005fac:	4770      	bx	lr

08005fae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f023 0201 	bic.w	r2, r3, #1
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	460b      	mov	r3, r1
 8005fda:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005fec:	78fb      	ldrb	r3, [r7, #3]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d115      	bne.n	800601e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ffe:	200a      	movs	r0, #10
 8006000:	f7fb fbec 	bl	80017dc <HAL_Delay>
      ms += 10U;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	330a      	adds	r3, #10
 8006008:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fa0e 	bl	800642c <USB_GetMode>
 8006010:	4603      	mov	r3, r0
 8006012:	2b01      	cmp	r3, #1
 8006014:	d01e      	beq.n	8006054 <USB_SetCurrentMode+0x84>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2bc7      	cmp	r3, #199	; 0xc7
 800601a:	d9f0      	bls.n	8005ffe <USB_SetCurrentMode+0x2e>
 800601c:	e01a      	b.n	8006054 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800601e:	78fb      	ldrb	r3, [r7, #3]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d115      	bne.n	8006050 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006030:	200a      	movs	r0, #10
 8006032:	f7fb fbd3 	bl	80017dc <HAL_Delay>
      ms += 10U;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	330a      	adds	r3, #10
 800603a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f9f5 	bl	800642c <USB_GetMode>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d005      	beq.n	8006054 <USB_SetCurrentMode+0x84>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2bc7      	cmp	r3, #199	; 0xc7
 800604c:	d9f0      	bls.n	8006030 <USB_SetCurrentMode+0x60>
 800604e:	e001      	b.n	8006054 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e005      	b.n	8006060 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2bc8      	cmp	r3, #200	; 0xc8
 8006058:	d101      	bne.n	800605e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e000      	b.n	8006060 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006068:	b084      	sub	sp, #16
 800606a:	b580      	push	{r7, lr}
 800606c:	b086      	sub	sp, #24
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
 8006072:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800607a:	2300      	movs	r3, #0
 800607c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006082:	2300      	movs	r3, #0
 8006084:	613b      	str	r3, [r7, #16]
 8006086:	e009      	b.n	800609c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	3340      	adds	r3, #64	; 0x40
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	2200      	movs	r2, #0
 8006094:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	3301      	adds	r3, #1
 800609a:	613b      	str	r3, [r7, #16]
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	2b0e      	cmp	r3, #14
 80060a0:	d9f2      	bls.n	8006088 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80060a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d11c      	bne.n	80060e4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060b8:	f043 0302 	orr.w	r3, r3, #2
 80060bc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	e005      	b.n	80060f0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060f6:	461a      	mov	r2, r3
 80060f8:	2300      	movs	r3, #0
 80060fa:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060fc:	2103      	movs	r1, #3
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f95a 	bl	80063b8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006104:	2110      	movs	r1, #16
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f8f6 	bl	80062f8 <USB_FlushTxFifo>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f920 	bl	800635c <USB_FlushRxFifo>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612c:	461a      	mov	r2, r3
 800612e:	2300      	movs	r3, #0
 8006130:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006138:	461a      	mov	r2, r3
 800613a:	2300      	movs	r3, #0
 800613c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006144:	461a      	mov	r2, r3
 8006146:	2300      	movs	r3, #0
 8006148:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800614a:	2300      	movs	r3, #0
 800614c:	613b      	str	r3, [r7, #16]
 800614e:	e043      	b.n	80061d8 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006162:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006166:	d118      	bne.n	800619a <USB_DevInit+0x132>
    {
      if (i == 0U)
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10a      	bne.n	8006184 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4413      	add	r3, r2
 8006176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617a:	461a      	mov	r2, r3
 800617c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006180:	6013      	str	r3, [r2, #0]
 8006182:	e013      	b.n	80061ac <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	4413      	add	r3, r2
 800618c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006190:	461a      	mov	r2, r3
 8006192:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006196:	6013      	str	r3, [r2, #0]
 8006198:	e008      	b.n	80061ac <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a6:	461a      	mov	r2, r3
 80061a8:	2300      	movs	r3, #0
 80061aa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b8:	461a      	mov	r2, r3
 80061ba:	2300      	movs	r3, #0
 80061bc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ca:	461a      	mov	r2, r3
 80061cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	3301      	adds	r3, #1
 80061d6:	613b      	str	r3, [r7, #16]
 80061d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80061dc:	461a      	mov	r2, r3
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d3b5      	bcc.n	8006150 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061e4:	2300      	movs	r3, #0
 80061e6:	613b      	str	r3, [r7, #16]
 80061e8:	e043      	b.n	8006272 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006200:	d118      	bne.n	8006234 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10a      	bne.n	800621e <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4413      	add	r3, r2
 8006210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006214:	461a      	mov	r2, r3
 8006216:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800621a:	6013      	str	r3, [r2, #0]
 800621c:	e013      	b.n	8006246 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	4413      	add	r3, r2
 8006226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800622a:	461a      	mov	r2, r3
 800622c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	e008      	b.n	8006246 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006240:	461a      	mov	r2, r3
 8006242:	2300      	movs	r3, #0
 8006244:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4413      	add	r3, r2
 800624e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006252:	461a      	mov	r2, r3
 8006254:	2300      	movs	r3, #0
 8006256:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006264:	461a      	mov	r2, r3
 8006266:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800626a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	3301      	adds	r3, #1
 8006270:	613b      	str	r3, [r7, #16]
 8006272:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006276:	461a      	mov	r2, r3
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	4293      	cmp	r3, r2
 800627c:	d3b5      	bcc.n	80061ea <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800628c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006290:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800629e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	f043 0210 	orr.w	r2, r3, #16
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	699a      	ldr	r2, [r3, #24]
 80062b0:	4b10      	ldr	r3, [pc, #64]	; (80062f4 <USB_DevInit+0x28c>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80062b8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d005      	beq.n	80062cc <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	f043 0208 	orr.w	r2, r3, #8
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80062cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d107      	bne.n	80062e4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062dc:	f043 0304 	orr.w	r3, r3, #4
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80062e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062f0:	b004      	add	sp, #16
 80062f2:	4770      	bx	lr
 80062f4:	803c3800 	.word	0x803c3800

080062f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	3301      	adds	r3, #1
 800630a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006312:	d901      	bls.n	8006318 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e01b      	b.n	8006350 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	daf2      	bge.n	8006306 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	019b      	lsls	r3, r3, #6
 8006328:	f043 0220 	orr.w	r2, r3, #32
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	3301      	adds	r3, #1
 8006334:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800633c:	d901      	bls.n	8006342 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e006      	b.n	8006350 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f003 0320 	and.w	r3, r3, #32
 800634a:	2b20      	cmp	r3, #32
 800634c:	d0f0      	beq.n	8006330 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3714      	adds	r7, #20
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006364:	2300      	movs	r3, #0
 8006366:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	3301      	adds	r3, #1
 800636c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006374:	d901      	bls.n	800637a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e018      	b.n	80063ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	daf2      	bge.n	8006368 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006382:	2300      	movs	r3, #0
 8006384:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2210      	movs	r2, #16
 800638a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	3301      	adds	r3, #1
 8006390:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006398:	d901      	bls.n	800639e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e006      	b.n	80063ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	f003 0310 	and.w	r3, r3, #16
 80063a6:	2b10      	cmp	r3, #16
 80063a8:	d0f0      	beq.n	800638c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	460b      	mov	r3, r1
 80063c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	78fb      	ldrb	r3, [r7, #3]
 80063d2:	68f9      	ldr	r1, [r7, #12]
 80063d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063d8:	4313      	orrs	r3, r2
 80063da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b085      	sub	sp, #20
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006404:	f023 0303 	bic.w	r3, r3, #3
 8006408:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006418:	f043 0302 	orr.w	r3, r3, #2
 800641c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	f003 0301 	and.w	r3, r3, #1
}
 800643c:	4618      	mov	r0, r3
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	3301      	adds	r3, #1
 8006458:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006460:	d901      	bls.n	8006466 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e01b      	b.n	800649e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	2b00      	cmp	r3, #0
 800646c:	daf2      	bge.n	8006454 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f043 0201 	orr.w	r2, r3, #1
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	3301      	adds	r3, #1
 8006482:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800648a:	d901      	bls.n	8006490 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e006      	b.n	800649e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	f003 0301 	and.w	r3, r3, #1
 8006498:	2b01      	cmp	r3, #1
 800649a:	d0f0      	beq.n	800647e <USB_CoreReset+0x36>

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
	...

080064ac <__NVIC_SetPriority>:
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	4603      	mov	r3, r0
 80064b4:	6039      	str	r1, [r7, #0]
 80064b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	db0a      	blt.n	80064d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	490c      	ldr	r1, [pc, #48]	; (80064f8 <__NVIC_SetPriority+0x4c>)
 80064c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ca:	0112      	lsls	r2, r2, #4
 80064cc:	b2d2      	uxtb	r2, r2
 80064ce:	440b      	add	r3, r1
 80064d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80064d4:	e00a      	b.n	80064ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	4908      	ldr	r1, [pc, #32]	; (80064fc <__NVIC_SetPriority+0x50>)
 80064dc:	79fb      	ldrb	r3, [r7, #7]
 80064de:	f003 030f 	and.w	r3, r3, #15
 80064e2:	3b04      	subs	r3, #4
 80064e4:	0112      	lsls	r2, r2, #4
 80064e6:	b2d2      	uxtb	r2, r2
 80064e8:	440b      	add	r3, r1
 80064ea:	761a      	strb	r2, [r3, #24]
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	e000e100 	.word	0xe000e100
 80064fc:	e000ed00 	.word	0xe000ed00

08006500 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006500:	b580      	push	{r7, lr}
 8006502:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006504:	4b05      	ldr	r3, [pc, #20]	; (800651c <SysTick_Handler+0x1c>)
 8006506:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006508:	f001 ff12 	bl	8008330 <xTaskGetSchedulerState>
 800650c:	4603      	mov	r3, r0
 800650e:	2b01      	cmp	r3, #1
 8006510:	d001      	beq.n	8006516 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006512:	f002 fdf9 	bl	8009108 <xPortSysTickHandler>
  }
}
 8006516:	bf00      	nop
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	e000e010 	.word	0xe000e010

08006520 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006520:	b580      	push	{r7, lr}
 8006522:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006524:	2100      	movs	r1, #0
 8006526:	f06f 0004 	mvn.w	r0, #4
 800652a:	f7ff ffbf 	bl	80064ac <__NVIC_SetPriority>
#endif
}
 800652e:	bf00      	nop
 8006530:	bd80      	pop	{r7, pc}
	...

08006534 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800653a:	f3ef 8305 	mrs	r3, IPSR
 800653e:	603b      	str	r3, [r7, #0]
  return(result);
 8006540:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006546:	f06f 0305 	mvn.w	r3, #5
 800654a:	607b      	str	r3, [r7, #4]
 800654c:	e00c      	b.n	8006568 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800654e:	4b0a      	ldr	r3, [pc, #40]	; (8006578 <osKernelInitialize+0x44>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d105      	bne.n	8006562 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006556:	4b08      	ldr	r3, [pc, #32]	; (8006578 <osKernelInitialize+0x44>)
 8006558:	2201      	movs	r2, #1
 800655a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800655c:	2300      	movs	r3, #0
 800655e:	607b      	str	r3, [r7, #4]
 8006560:	e002      	b.n	8006568 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006562:	f04f 33ff 	mov.w	r3, #4294967295
 8006566:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006568:	687b      	ldr	r3, [r7, #4]
}
 800656a:	4618      	mov	r0, r3
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	20000844 	.word	0x20000844

0800657c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006582:	f3ef 8305 	mrs	r3, IPSR
 8006586:	603b      	str	r3, [r7, #0]
  return(result);
 8006588:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <osKernelStart+0x1a>
    stat = osErrorISR;
 800658e:	f06f 0305 	mvn.w	r3, #5
 8006592:	607b      	str	r3, [r7, #4]
 8006594:	e010      	b.n	80065b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006596:	4b0b      	ldr	r3, [pc, #44]	; (80065c4 <osKernelStart+0x48>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d109      	bne.n	80065b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800659e:	f7ff ffbf 	bl	8006520 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80065a2:	4b08      	ldr	r3, [pc, #32]	; (80065c4 <osKernelStart+0x48>)
 80065a4:	2202      	movs	r2, #2
 80065a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80065a8:	f001 fa66 	bl	8007a78 <vTaskStartScheduler>
      stat = osOK;
 80065ac:	2300      	movs	r3, #0
 80065ae:	607b      	str	r3, [r7, #4]
 80065b0:	e002      	b.n	80065b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80065b2:	f04f 33ff 	mov.w	r3, #4294967295
 80065b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80065b8:	687b      	ldr	r3, [r7, #4]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	20000844 	.word	0x20000844

080065c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08e      	sub	sp, #56	; 0x38
 80065cc:	af04      	add	r7, sp, #16
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80065d4:	2300      	movs	r3, #0
 80065d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065d8:	f3ef 8305 	mrs	r3, IPSR
 80065dc:	617b      	str	r3, [r7, #20]
  return(result);
 80065de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d17e      	bne.n	80066e2 <osThreadNew+0x11a>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d07b      	beq.n	80066e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80065ea:	2380      	movs	r3, #128	; 0x80
 80065ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80065ee:	2318      	movs	r3, #24
 80065f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80065f2:	2300      	movs	r3, #0
 80065f4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80065f6:	f04f 33ff 	mov.w	r3, #4294967295
 80065fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d045      	beq.n	800668e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d002      	beq.n	8006610 <osThreadNew+0x48>
        name = attr->name;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d008      	beq.n	8006636 <osThreadNew+0x6e>
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	2b38      	cmp	r3, #56	; 0x38
 8006628:	d805      	bhi.n	8006636 <osThreadNew+0x6e>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <osThreadNew+0x72>
        return (NULL);
 8006636:	2300      	movs	r3, #0
 8006638:	e054      	b.n	80066e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	089b      	lsrs	r3, r3, #2
 8006648:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00e      	beq.n	8006670 <osThreadNew+0xa8>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	2ba7      	cmp	r3, #167	; 0xa7
 8006658:	d90a      	bls.n	8006670 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800665e:	2b00      	cmp	r3, #0
 8006660:	d006      	beq.n	8006670 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d002      	beq.n	8006670 <osThreadNew+0xa8>
        mem = 1;
 800666a:	2301      	movs	r3, #1
 800666c:	61bb      	str	r3, [r7, #24]
 800666e:	e010      	b.n	8006692 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10c      	bne.n	8006692 <osThreadNew+0xca>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d108      	bne.n	8006692 <osThreadNew+0xca>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d104      	bne.n	8006692 <osThreadNew+0xca>
          mem = 0;
 8006688:	2300      	movs	r3, #0
 800668a:	61bb      	str	r3, [r7, #24]
 800668c:	e001      	b.n	8006692 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800668e:	2300      	movs	r3, #0
 8006690:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d110      	bne.n	80066ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80066a0:	9202      	str	r2, [sp, #8]
 80066a2:	9301      	str	r3, [sp, #4]
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	6a3a      	ldr	r2, [r7, #32]
 80066ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 fff6 	bl	80076a0 <xTaskCreateStatic>
 80066b4:	4603      	mov	r3, r0
 80066b6:	613b      	str	r3, [r7, #16]
 80066b8:	e013      	b.n	80066e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d110      	bne.n	80066e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	f107 0310 	add.w	r3, r7, #16
 80066c8:	9301      	str	r3, [sp, #4]
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f001 f841 	bl	800775a <xTaskCreate>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d001      	beq.n	80066e2 <osThreadNew+0x11a>
            hTask = NULL;
 80066de:	2300      	movs	r3, #0
 80066e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80066e2:	693b      	ldr	r3, [r7, #16]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3728      	adds	r7, #40	; 0x28
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066f4:	f3ef 8305 	mrs	r3, IPSR
 80066f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80066fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <osDelay+0x1c>
    stat = osErrorISR;
 8006700:	f06f 0305 	mvn.w	r3, #5
 8006704:	60fb      	str	r3, [r7, #12]
 8006706:	e007      	b.n	8006718 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006708:	2300      	movs	r3, #0
 800670a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f001 f97c 	bl	8007a10 <vTaskDelay>
    }
  }

  return (stat);
 8006718:	68fb      	ldr	r3, [r7, #12]
}
 800671a:	4618      	mov	r0, r3
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
	...

08006724 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4a07      	ldr	r2, [pc, #28]	; (8006750 <vApplicationGetIdleTaskMemory+0x2c>)
 8006734:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	4a06      	ldr	r2, [pc, #24]	; (8006754 <vApplicationGetIdleTaskMemory+0x30>)
 800673a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2280      	movs	r2, #128	; 0x80
 8006740:	601a      	str	r2, [r3, #0]
}
 8006742:	bf00      	nop
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	20000848 	.word	0x20000848
 8006754:	200008f0 	.word	0x200008f0

08006758 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	4a07      	ldr	r2, [pc, #28]	; (8006784 <vApplicationGetTimerTaskMemory+0x2c>)
 8006768:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	4a06      	ldr	r2, [pc, #24]	; (8006788 <vApplicationGetTimerTaskMemory+0x30>)
 800676e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006776:	601a      	str	r2, [r3, #0]
}
 8006778:	bf00      	nop
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr
 8006784:	20000af0 	.word	0x20000af0
 8006788:	20000b98 	.word	0x20000b98

0800678c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f103 0208 	add.w	r2, r3, #8
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f04f 32ff 	mov.w	r2, #4294967295
 80067a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f103 0208 	add.w	r2, r3, #8
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f103 0208 	add.w	r2, r3, #8
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067da:	bf00      	nop
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067e6:	b480      	push	{r7}
 80067e8:	b085      	sub	sp, #20
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	601a      	str	r2, [r3, #0]
}
 8006822:	bf00      	nop
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800682e:	b480      	push	{r7}
 8006830:	b085      	sub	sp, #20
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006844:	d103      	bne.n	800684e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	e00c      	b.n	8006868 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	3308      	adds	r3, #8
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	e002      	b.n	800685c <vListInsert+0x2e>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	60fb      	str	r3, [r7, #12]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	429a      	cmp	r2, r3
 8006866:	d2f6      	bcs.n	8006856 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	601a      	str	r2, [r3, #0]
}
 8006894:	bf00      	nop
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	6892      	ldr	r2, [r2, #8]
 80068b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	6852      	ldr	r2, [r2, #4]
 80068c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d103      	bne.n	80068d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	689a      	ldr	r2, [r3, #8]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	1e5a      	subs	r2, r3, #1
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3714      	adds	r7, #20
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10a      	bne.n	800691e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690c:	f383 8811 	msr	BASEPRI, r3
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800691a:	bf00      	nop
 800691c:	e7fe      	b.n	800691c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800691e:	f002 fb61 	bl	8008fe4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800692a:	68f9      	ldr	r1, [r7, #12]
 800692c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800692e:	fb01 f303 	mul.w	r3, r1, r3
 8006932:	441a      	add	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800694e:	3b01      	subs	r3, #1
 8006950:	68f9      	ldr	r1, [r7, #12]
 8006952:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006954:	fb01 f303 	mul.w	r3, r1, r3
 8006958:	441a      	add	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	22ff      	movs	r2, #255	; 0xff
 8006962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	22ff      	movs	r2, #255	; 0xff
 800696a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d114      	bne.n	800699e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d01a      	beq.n	80069b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	3310      	adds	r3, #16
 8006980:	4618      	mov	r0, r3
 8006982:	f001 fb13 	bl	8007fac <xTaskRemoveFromEventList>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d012      	beq.n	80069b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800698c:	4b0c      	ldr	r3, [pc, #48]	; (80069c0 <xQueueGenericReset+0xcc>)
 800698e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	e009      	b.n	80069b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	3310      	adds	r3, #16
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7ff fef2 	bl	800678c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	3324      	adds	r3, #36	; 0x24
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7ff feed 	bl	800678c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80069b2:	f002 fb47 	bl	8009044 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069b6:	2301      	movs	r3, #1
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	e000ed04 	.word	0xe000ed04

080069c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b08e      	sub	sp, #56	; 0x38
 80069c8:	af02      	add	r7, sp, #8
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
 80069d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10a      	bne.n	80069ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80069d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069ea:	bf00      	nop
 80069ec:	e7fe      	b.n	80069ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10a      	bne.n	8006a0a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80069f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a06:	bf00      	nop
 8006a08:	e7fe      	b.n	8006a08 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <xQueueGenericCreateStatic+0x52>
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <xQueueGenericCreateStatic+0x56>
 8006a16:	2301      	movs	r3, #1
 8006a18:	e000      	b.n	8006a1c <xQueueGenericCreateStatic+0x58>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10a      	bne.n	8006a36 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	623b      	str	r3, [r7, #32]
}
 8006a32:	bf00      	nop
 8006a34:	e7fe      	b.n	8006a34 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d102      	bne.n	8006a42 <xQueueGenericCreateStatic+0x7e>
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <xQueueGenericCreateStatic+0x82>
 8006a42:	2301      	movs	r3, #1
 8006a44:	e000      	b.n	8006a48 <xQueueGenericCreateStatic+0x84>
 8006a46:	2300      	movs	r3, #0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10a      	bne.n	8006a62 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	61fb      	str	r3, [r7, #28]
}
 8006a5e:	bf00      	nop
 8006a60:	e7fe      	b.n	8006a60 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a62:	2350      	movs	r3, #80	; 0x50
 8006a64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	2b50      	cmp	r3, #80	; 0x50
 8006a6a:	d00a      	beq.n	8006a82 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a70:	f383 8811 	msr	BASEPRI, r3
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	61bb      	str	r3, [r7, #24]
}
 8006a7e:	bf00      	nop
 8006a80:	e7fe      	b.n	8006a80 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a82:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00d      	beq.n	8006aaa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a96:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	68b9      	ldr	r1, [r7, #8]
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 f83f 	bl	8006b28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3730      	adds	r7, #48	; 0x30
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b08a      	sub	sp, #40	; 0x28
 8006ab8:	af02      	add	r7, sp, #8
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10a      	bne.n	8006ade <xQueueGenericCreate+0x2a>
	__asm volatile
 8006ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006acc:	f383 8811 	msr	BASEPRI, r3
 8006ad0:	f3bf 8f6f 	isb	sy
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	613b      	str	r3, [r7, #16]
}
 8006ada:	bf00      	nop
 8006adc:	e7fe      	b.n	8006adc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	fb02 f303 	mul.w	r3, r2, r3
 8006ae6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	3350      	adds	r3, #80	; 0x50
 8006aec:	4618      	mov	r0, r3
 8006aee:	f002 fb9b 	bl	8009228 <pvPortMalloc>
 8006af2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d011      	beq.n	8006b1e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	3350      	adds	r3, #80	; 0x50
 8006b02:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b0c:	79fa      	ldrb	r2, [r7, #7]
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	4613      	mov	r3, r2
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	68b9      	ldr	r1, [r7, #8]
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f000 f805 	bl	8006b28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b1e:	69bb      	ldr	r3, [r7, #24]
	}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3720      	adds	r7, #32
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
 8006b34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d103      	bne.n	8006b44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	69ba      	ldr	r2, [r7, #24]
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	e002      	b.n	8006b4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b56:	2101      	movs	r1, #1
 8006b58:	69b8      	ldr	r0, [r7, #24]
 8006b5a:	f7ff fecb 	bl	80068f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	78fa      	ldrb	r2, [r7, #3]
 8006b62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b66:	bf00      	nop
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
	...

08006b70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b08e      	sub	sp, #56	; 0x38
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
 8006b7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10a      	bne.n	8006ba2 <xQueueGenericSend+0x32>
	__asm volatile
 8006b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b9e:	bf00      	nop
 8006ba0:	e7fe      	b.n	8006ba0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d103      	bne.n	8006bb0 <xQueueGenericSend+0x40>
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d101      	bne.n	8006bb4 <xQueueGenericSend+0x44>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e000      	b.n	8006bb6 <xQueueGenericSend+0x46>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10a      	bne.n	8006bd0 <xQueueGenericSend+0x60>
	__asm volatile
 8006bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bcc:	bf00      	nop
 8006bce:	e7fe      	b.n	8006bce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d103      	bne.n	8006bde <xQueueGenericSend+0x6e>
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d101      	bne.n	8006be2 <xQueueGenericSend+0x72>
 8006bde:	2301      	movs	r3, #1
 8006be0:	e000      	b.n	8006be4 <xQueueGenericSend+0x74>
 8006be2:	2300      	movs	r3, #0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10a      	bne.n	8006bfe <xQueueGenericSend+0x8e>
	__asm volatile
 8006be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bec:	f383 8811 	msr	BASEPRI, r3
 8006bf0:	f3bf 8f6f 	isb	sy
 8006bf4:	f3bf 8f4f 	dsb	sy
 8006bf8:	623b      	str	r3, [r7, #32]
}
 8006bfa:	bf00      	nop
 8006bfc:	e7fe      	b.n	8006bfc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bfe:	f001 fb97 	bl	8008330 <xTaskGetSchedulerState>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d102      	bne.n	8006c0e <xQueueGenericSend+0x9e>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <xQueueGenericSend+0xa2>
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e000      	b.n	8006c14 <xQueueGenericSend+0xa4>
 8006c12:	2300      	movs	r3, #0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10a      	bne.n	8006c2e <xQueueGenericSend+0xbe>
	__asm volatile
 8006c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1c:	f383 8811 	msr	BASEPRI, r3
 8006c20:	f3bf 8f6f 	isb	sy
 8006c24:	f3bf 8f4f 	dsb	sy
 8006c28:	61fb      	str	r3, [r7, #28]
}
 8006c2a:	bf00      	nop
 8006c2c:	e7fe      	b.n	8006c2c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c2e:	f002 f9d9 	bl	8008fe4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d302      	bcc.n	8006c44 <xQueueGenericSend+0xd4>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d129      	bne.n	8006c98 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	68b9      	ldr	r1, [r7, #8]
 8006c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c4a:	f000 fbbb 	bl	80073c4 <prvCopyDataToQueue>
 8006c4e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d010      	beq.n	8006c7a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5a:	3324      	adds	r3, #36	; 0x24
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f001 f9a5 	bl	8007fac <xTaskRemoveFromEventList>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d013      	beq.n	8006c90 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c68:	4b3f      	ldr	r3, [pc, #252]	; (8006d68 <xQueueGenericSend+0x1f8>)
 8006c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	e00a      	b.n	8006c90 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d007      	beq.n	8006c90 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c80:	4b39      	ldr	r3, [pc, #228]	; (8006d68 <xQueueGenericSend+0x1f8>)
 8006c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c90:	f002 f9d8 	bl	8009044 <vPortExitCritical>
				return pdPASS;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e063      	b.n	8006d60 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d103      	bne.n	8006ca6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c9e:	f002 f9d1 	bl	8009044 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	e05c      	b.n	8006d60 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d106      	bne.n	8006cba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cac:	f107 0314 	add.w	r3, r7, #20
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f001 f9df 	bl	8008074 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cba:	f002 f9c3 	bl	8009044 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cbe:	f000 ff4b 	bl	8007b58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cc2:	f002 f98f 	bl	8008fe4 <vPortEnterCritical>
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ccc:	b25b      	sxtb	r3, r3
 8006cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd2:	d103      	bne.n	8006cdc <xQueueGenericSend+0x16c>
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ce2:	b25b      	sxtb	r3, r3
 8006ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce8:	d103      	bne.n	8006cf2 <xQueueGenericSend+0x182>
 8006cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cf2:	f002 f9a7 	bl	8009044 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cf6:	1d3a      	adds	r2, r7, #4
 8006cf8:	f107 0314 	add.w	r3, r7, #20
 8006cfc:	4611      	mov	r1, r2
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f001 f9ce 	bl	80080a0 <xTaskCheckForTimeOut>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d124      	bne.n	8006d54 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d0c:	f000 fc52 	bl	80075b4 <prvIsQueueFull>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d018      	beq.n	8006d48 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	3310      	adds	r3, #16
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	4611      	mov	r1, r2
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f001 f8f4 	bl	8007f0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d26:	f000 fbdd 	bl	80074e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d2a:	f000 ff23 	bl	8007b74 <xTaskResumeAll>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f47f af7c 	bne.w	8006c2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006d36:	4b0c      	ldr	r3, [pc, #48]	; (8006d68 <xQueueGenericSend+0x1f8>)
 8006d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	e772      	b.n	8006c2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d4a:	f000 fbcb 	bl	80074e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d4e:	f000 ff11 	bl	8007b74 <xTaskResumeAll>
 8006d52:	e76c      	b.n	8006c2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d56:	f000 fbc5 	bl	80074e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d5a:	f000 ff0b 	bl	8007b74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3738      	adds	r7, #56	; 0x38
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	e000ed04 	.word	0xe000ed04

08006d6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b090      	sub	sp, #64	; 0x40
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
 8006d78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10a      	bne.n	8006d9a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d88:	f383 8811 	msr	BASEPRI, r3
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d96:	bf00      	nop
 8006d98:	e7fe      	b.n	8006d98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d103      	bne.n	8006da8 <xQueueGenericSendFromISR+0x3c>
 8006da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d101      	bne.n	8006dac <xQueueGenericSendFromISR+0x40>
 8006da8:	2301      	movs	r3, #1
 8006daa:	e000      	b.n	8006dae <xQueueGenericSendFromISR+0x42>
 8006dac:	2300      	movs	r3, #0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10a      	bne.n	8006dc8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db6:	f383 8811 	msr	BASEPRI, r3
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006dc4:	bf00      	nop
 8006dc6:	e7fe      	b.n	8006dc6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d103      	bne.n	8006dd6 <xQueueGenericSendFromISR+0x6a>
 8006dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d101      	bne.n	8006dda <xQueueGenericSendFromISR+0x6e>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e000      	b.n	8006ddc <xQueueGenericSendFromISR+0x70>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10a      	bne.n	8006df6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	623b      	str	r3, [r7, #32]
}
 8006df2:	bf00      	nop
 8006df4:	e7fe      	b.n	8006df4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006df6:	f002 f9d7 	bl	80091a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006dfa:	f3ef 8211 	mrs	r2, BASEPRI
 8006dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e02:	f383 8811 	msr	BASEPRI, r3
 8006e06:	f3bf 8f6f 	isb	sy
 8006e0a:	f3bf 8f4f 	dsb	sy
 8006e0e:	61fa      	str	r2, [r7, #28]
 8006e10:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e12:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e14:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d302      	bcc.n	8006e28 <xQueueGenericSendFromISR+0xbc>
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d12f      	bne.n	8006e88 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e36:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	68b9      	ldr	r1, [r7, #8]
 8006e3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e3e:	f000 fac1 	bl	80073c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e42:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4a:	d112      	bne.n	8006e72 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d016      	beq.n	8006e82 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e56:	3324      	adds	r3, #36	; 0x24
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f001 f8a7 	bl	8007fac <xTaskRemoveFromEventList>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00e      	beq.n	8006e82 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00b      	beq.n	8006e82 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	e007      	b.n	8006e82 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006e76:	3301      	adds	r3, #1
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	b25a      	sxtb	r2, r3
 8006e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006e82:	2301      	movs	r3, #1
 8006e84:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006e86:	e001      	b.n	8006e8c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e8e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e96:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3740      	adds	r7, #64	; 0x40
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b08e      	sub	sp, #56	; 0x38
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10a      	bne.n	8006ecc <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	623b      	str	r3, [r7, #32]
}
 8006ec8:	bf00      	nop
 8006eca:	e7fe      	b.n	8006eca <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00a      	beq.n	8006eea <xQueueGiveFromISR+0x48>
	__asm volatile
 8006ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed8:	f383 8811 	msr	BASEPRI, r3
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	61fb      	str	r3, [r7, #28]
}
 8006ee6:	bf00      	nop
 8006ee8:	e7fe      	b.n	8006ee8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d103      	bne.n	8006efa <xQueueGiveFromISR+0x58>
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <xQueueGiveFromISR+0x5c>
 8006efa:	2301      	movs	r3, #1
 8006efc:	e000      	b.n	8006f00 <xQueueGiveFromISR+0x5e>
 8006efe:	2300      	movs	r3, #0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10a      	bne.n	8006f1a <xQueueGiveFromISR+0x78>
	__asm volatile
 8006f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	61bb      	str	r3, [r7, #24]
}
 8006f16:	bf00      	nop
 8006f18:	e7fe      	b.n	8006f18 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f1a:	f002 f945 	bl	80091a8 <vPortValidateInterruptPriority>
	__asm volatile
 8006f1e:	f3ef 8211 	mrs	r2, BASEPRI
 8006f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	617a      	str	r2, [r7, #20]
 8006f34:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006f36:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d22b      	bcs.n	8006fa2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f56:	1c5a      	adds	r2, r3, #1
 8006f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f64:	d112      	bne.n	8006f8c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d016      	beq.n	8006f9c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f70:	3324      	adds	r3, #36	; 0x24
 8006f72:	4618      	mov	r0, r3
 8006f74:	f001 f81a 	bl	8007fac <xTaskRemoveFromEventList>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00e      	beq.n	8006f9c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00b      	beq.n	8006f9c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	2201      	movs	r2, #1
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	e007      	b.n	8006f9c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f90:	3301      	adds	r3, #1
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	b25a      	sxtb	r2, r3
 8006f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8006fa0:	e001      	b.n	8006fa6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	637b      	str	r3, [r7, #52]	; 0x34
 8006fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f383 8811 	msr	BASEPRI, r3
}
 8006fb0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3738      	adds	r7, #56	; 0x38
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b08c      	sub	sp, #48	; 0x30
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10a      	bne.n	8006fec <xQueueReceive+0x30>
	__asm volatile
 8006fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	623b      	str	r3, [r7, #32]
}
 8006fe8:	bf00      	nop
 8006fea:	e7fe      	b.n	8006fea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d103      	bne.n	8006ffa <xQueueReceive+0x3e>
 8006ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <xQueueReceive+0x42>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e000      	b.n	8007000 <xQueueReceive+0x44>
 8006ffe:	2300      	movs	r3, #0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10a      	bne.n	800701a <xQueueReceive+0x5e>
	__asm volatile
 8007004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007008:	f383 8811 	msr	BASEPRI, r3
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	61fb      	str	r3, [r7, #28]
}
 8007016:	bf00      	nop
 8007018:	e7fe      	b.n	8007018 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800701a:	f001 f989 	bl	8008330 <xTaskGetSchedulerState>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d102      	bne.n	800702a <xQueueReceive+0x6e>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <xQueueReceive+0x72>
 800702a:	2301      	movs	r3, #1
 800702c:	e000      	b.n	8007030 <xQueueReceive+0x74>
 800702e:	2300      	movs	r3, #0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10a      	bne.n	800704a <xQueueReceive+0x8e>
	__asm volatile
 8007034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007038:	f383 8811 	msr	BASEPRI, r3
 800703c:	f3bf 8f6f 	isb	sy
 8007040:	f3bf 8f4f 	dsb	sy
 8007044:	61bb      	str	r3, [r7, #24]
}
 8007046:	bf00      	nop
 8007048:	e7fe      	b.n	8007048 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800704a:	f001 ffcb 	bl	8008fe4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800704e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007052:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	2b00      	cmp	r3, #0
 8007058:	d01f      	beq.n	800709a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800705a:	68b9      	ldr	r1, [r7, #8]
 800705c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800705e:	f000 fa1b 	bl	8007498 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007064:	1e5a      	subs	r2, r3, #1
 8007066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007068:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800706a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00f      	beq.n	8007092 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007074:	3310      	adds	r3, #16
 8007076:	4618      	mov	r0, r3
 8007078:	f000 ff98 	bl	8007fac <xTaskRemoveFromEventList>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d007      	beq.n	8007092 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007082:	4b3d      	ldr	r3, [pc, #244]	; (8007178 <xQueueReceive+0x1bc>)
 8007084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007088:	601a      	str	r2, [r3, #0]
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007092:	f001 ffd7 	bl	8009044 <vPortExitCritical>
				return pdPASS;
 8007096:	2301      	movs	r3, #1
 8007098:	e069      	b.n	800716e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d103      	bne.n	80070a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070a0:	f001 ffd0 	bl	8009044 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070a4:	2300      	movs	r3, #0
 80070a6:	e062      	b.n	800716e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d106      	bne.n	80070bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070ae:	f107 0310 	add.w	r3, r7, #16
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 ffde 	bl	8008074 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070b8:	2301      	movs	r3, #1
 80070ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070bc:	f001 ffc2 	bl	8009044 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070c0:	f000 fd4a 	bl	8007b58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070c4:	f001 ff8e 	bl	8008fe4 <vPortEnterCritical>
 80070c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070ce:	b25b      	sxtb	r3, r3
 80070d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d4:	d103      	bne.n	80070de <xQueueReceive+0x122>
 80070d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070e4:	b25b      	sxtb	r3, r3
 80070e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ea:	d103      	bne.n	80070f4 <xQueueReceive+0x138>
 80070ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070f4:	f001 ffa6 	bl	8009044 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070f8:	1d3a      	adds	r2, r7, #4
 80070fa:	f107 0310 	add.w	r3, r7, #16
 80070fe:	4611      	mov	r1, r2
 8007100:	4618      	mov	r0, r3
 8007102:	f000 ffcd 	bl	80080a0 <xTaskCheckForTimeOut>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d123      	bne.n	8007154 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800710c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800710e:	f000 fa3b 	bl	8007588 <prvIsQueueEmpty>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d017      	beq.n	8007148 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711a:	3324      	adds	r3, #36	; 0x24
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	4611      	mov	r1, r2
 8007120:	4618      	mov	r0, r3
 8007122:	f000 fef3 	bl	8007f0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007128:	f000 f9dc 	bl	80074e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800712c:	f000 fd22 	bl	8007b74 <xTaskResumeAll>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d189      	bne.n	800704a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007136:	4b10      	ldr	r3, [pc, #64]	; (8007178 <xQueueReceive+0x1bc>)
 8007138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800713c:	601a      	str	r2, [r3, #0]
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	e780      	b.n	800704a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800714a:	f000 f9cb 	bl	80074e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800714e:	f000 fd11 	bl	8007b74 <xTaskResumeAll>
 8007152:	e77a      	b.n	800704a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007156:	f000 f9c5 	bl	80074e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800715a:	f000 fd0b 	bl	8007b74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800715e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007160:	f000 fa12 	bl	8007588 <prvIsQueueEmpty>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	f43f af6f 	beq.w	800704a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800716c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800716e:	4618      	mov	r0, r3
 8007170:	3730      	adds	r7, #48	; 0x30
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	e000ed04 	.word	0xe000ed04

0800717c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b08e      	sub	sp, #56	; 0x38
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007186:	2300      	movs	r3, #0
 8007188:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800718e:	2300      	movs	r3, #0
 8007190:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10a      	bne.n	80071ae <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719c:	f383 8811 	msr	BASEPRI, r3
 80071a0:	f3bf 8f6f 	isb	sy
 80071a4:	f3bf 8f4f 	dsb	sy
 80071a8:	623b      	str	r3, [r7, #32]
}
 80071aa:	bf00      	nop
 80071ac:	e7fe      	b.n	80071ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80071ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00a      	beq.n	80071cc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80071b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	61fb      	str	r3, [r7, #28]
}
 80071c8:	bf00      	nop
 80071ca:	e7fe      	b.n	80071ca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071cc:	f001 f8b0 	bl	8008330 <xTaskGetSchedulerState>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d102      	bne.n	80071dc <xQueueSemaphoreTake+0x60>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <xQueueSemaphoreTake+0x64>
 80071dc:	2301      	movs	r3, #1
 80071de:	e000      	b.n	80071e2 <xQueueSemaphoreTake+0x66>
 80071e0:	2300      	movs	r3, #0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10a      	bne.n	80071fc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80071e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	61bb      	str	r3, [r7, #24]
}
 80071f8:	bf00      	nop
 80071fa:	e7fe      	b.n	80071fa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071fc:	f001 fef2 	bl	8008fe4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007204:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007208:	2b00      	cmp	r3, #0
 800720a:	d024      	beq.n	8007256 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800720c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720e:	1e5a      	subs	r2, r3, #1
 8007210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007212:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d104      	bne.n	8007226 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800721c:	f001 f9fe 	bl	800861c <pvTaskIncrementMutexHeldCount>
 8007220:	4602      	mov	r2, r0
 8007222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007224:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00f      	beq.n	800724e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800722e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007230:	3310      	adds	r3, #16
 8007232:	4618      	mov	r0, r3
 8007234:	f000 feba 	bl	8007fac <xTaskRemoveFromEventList>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d007      	beq.n	800724e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800723e:	4b54      	ldr	r3, [pc, #336]	; (8007390 <xQueueSemaphoreTake+0x214>)
 8007240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800724e:	f001 fef9 	bl	8009044 <vPortExitCritical>
				return pdPASS;
 8007252:	2301      	movs	r3, #1
 8007254:	e097      	b.n	8007386 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d111      	bne.n	8007280 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800725c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00a      	beq.n	8007278 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	617b      	str	r3, [r7, #20]
}
 8007274:	bf00      	nop
 8007276:	e7fe      	b.n	8007276 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007278:	f001 fee4 	bl	8009044 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800727c:	2300      	movs	r3, #0
 800727e:	e082      	b.n	8007386 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007282:	2b00      	cmp	r3, #0
 8007284:	d106      	bne.n	8007294 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007286:	f107 030c 	add.w	r3, r7, #12
 800728a:	4618      	mov	r0, r3
 800728c:	f000 fef2 	bl	8008074 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007290:	2301      	movs	r3, #1
 8007292:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007294:	f001 fed6 	bl	8009044 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007298:	f000 fc5e 	bl	8007b58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800729c:	f001 fea2 	bl	8008fe4 <vPortEnterCritical>
 80072a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072a6:	b25b      	sxtb	r3, r3
 80072a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ac:	d103      	bne.n	80072b6 <xQueueSemaphoreTake+0x13a>
 80072ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072bc:	b25b      	sxtb	r3, r3
 80072be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c2:	d103      	bne.n	80072cc <xQueueSemaphoreTake+0x150>
 80072c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072cc:	f001 feba 	bl	8009044 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072d0:	463a      	mov	r2, r7
 80072d2:	f107 030c 	add.w	r3, r7, #12
 80072d6:	4611      	mov	r1, r2
 80072d8:	4618      	mov	r0, r3
 80072da:	f000 fee1 	bl	80080a0 <xTaskCheckForTimeOut>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d132      	bne.n	800734a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072e6:	f000 f94f 	bl	8007588 <prvIsQueueEmpty>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d026      	beq.n	800733e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d109      	bne.n	800730c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80072f8:	f001 fe74 	bl	8008fe4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80072fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	4618      	mov	r0, r3
 8007302:	f001 f833 	bl	800836c <xTaskPriorityInherit>
 8007306:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007308:	f001 fe9c 	bl	8009044 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800730c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730e:	3324      	adds	r3, #36	; 0x24
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	4611      	mov	r1, r2
 8007314:	4618      	mov	r0, r3
 8007316:	f000 fdf9 	bl	8007f0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800731a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800731c:	f000 f8e2 	bl	80074e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007320:	f000 fc28 	bl	8007b74 <xTaskResumeAll>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	f47f af68 	bne.w	80071fc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800732c:	4b18      	ldr	r3, [pc, #96]	; (8007390 <xQueueSemaphoreTake+0x214>)
 800732e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	e75e      	b.n	80071fc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800733e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007340:	f000 f8d0 	bl	80074e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007344:	f000 fc16 	bl	8007b74 <xTaskResumeAll>
 8007348:	e758      	b.n	80071fc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800734a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800734c:	f000 f8ca 	bl	80074e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007350:	f000 fc10 	bl	8007b74 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007354:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007356:	f000 f917 	bl	8007588 <prvIsQueueEmpty>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	f43f af4d 	beq.w	80071fc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00d      	beq.n	8007384 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007368:	f001 fe3c 	bl	8008fe4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800736c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800736e:	f000 f811 	bl	8007394 <prvGetDisinheritPriorityAfterTimeout>
 8007372:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800737a:	4618      	mov	r0, r3
 800737c:	f001 f8cc 	bl	8008518 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007380:	f001 fe60 	bl	8009044 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007384:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007386:	4618      	mov	r0, r3
 8007388:	3738      	adds	r7, #56	; 0x38
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	e000ed04 	.word	0xe000ed04

08007394 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d006      	beq.n	80073b2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80073ae:	60fb      	str	r3, [r7, #12]
 80073b0:	e001      	b.n	80073b6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80073b2:	2300      	movs	r3, #0
 80073b4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80073b6:	68fb      	ldr	r3, [r7, #12]
	}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80073d0:	2300      	movs	r3, #0
 80073d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10d      	bne.n	80073fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d14d      	bne.n	8007486 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f001 f824 	bl	800843c <xTaskPriorityDisinherit>
 80073f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	609a      	str	r2, [r3, #8]
 80073fc:	e043      	b.n	8007486 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d119      	bne.n	8007438 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6858      	ldr	r0, [r3, #4]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740c:	461a      	mov	r2, r3
 800740e:	68b9      	ldr	r1, [r7, #8]
 8007410:	f002 fbcd 	bl	8009bae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	685a      	ldr	r2, [r3, #4]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741c:	441a      	add	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	429a      	cmp	r2, r3
 800742c:	d32b      	bcc.n	8007486 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	605a      	str	r2, [r3, #4]
 8007436:	e026      	b.n	8007486 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	68d8      	ldr	r0, [r3, #12]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007440:	461a      	mov	r2, r3
 8007442:	68b9      	ldr	r1, [r7, #8]
 8007444:	f002 fbb3 	bl	8009bae <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	68da      	ldr	r2, [r3, #12]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007450:	425b      	negs	r3, r3
 8007452:	441a      	add	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	68da      	ldr	r2, [r3, #12]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	429a      	cmp	r2, r3
 8007462:	d207      	bcs.n	8007474 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	689a      	ldr	r2, [r3, #8]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746c:	425b      	negs	r3, r3
 800746e:	441a      	add	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b02      	cmp	r3, #2
 8007478:	d105      	bne.n	8007486 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d002      	beq.n	8007486 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	3b01      	subs	r3, #1
 8007484:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	1c5a      	adds	r2, r3, #1
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800748e:	697b      	ldr	r3, [r7, #20]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d018      	beq.n	80074dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	68da      	ldr	r2, [r3, #12]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b2:	441a      	add	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68da      	ldr	r2, [r3, #12]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d303      	bcc.n	80074cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	68d9      	ldr	r1, [r3, #12]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d4:	461a      	mov	r2, r3
 80074d6:	6838      	ldr	r0, [r7, #0]
 80074d8:	f002 fb69 	bl	8009bae <memcpy>
	}
}
 80074dc:	bf00      	nop
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80074ec:	f001 fd7a 	bl	8008fe4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074f8:	e011      	b.n	800751e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d012      	beq.n	8007528 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	3324      	adds	r3, #36	; 0x24
 8007506:	4618      	mov	r0, r3
 8007508:	f000 fd50 	bl	8007fac <xTaskRemoveFromEventList>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d001      	beq.n	8007516 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007512:	f000 fe27 	bl	8008164 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007516:	7bfb      	ldrb	r3, [r7, #15]
 8007518:	3b01      	subs	r3, #1
 800751a:	b2db      	uxtb	r3, r3
 800751c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800751e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007522:	2b00      	cmp	r3, #0
 8007524:	dce9      	bgt.n	80074fa <prvUnlockQueue+0x16>
 8007526:	e000      	b.n	800752a <prvUnlockQueue+0x46>
					break;
 8007528:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	22ff      	movs	r2, #255	; 0xff
 800752e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007532:	f001 fd87 	bl	8009044 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007536:	f001 fd55 	bl	8008fe4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007540:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007542:	e011      	b.n	8007568 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d012      	beq.n	8007572 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	3310      	adds	r3, #16
 8007550:	4618      	mov	r0, r3
 8007552:	f000 fd2b 	bl	8007fac <xTaskRemoveFromEventList>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800755c:	f000 fe02 	bl	8008164 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	3b01      	subs	r3, #1
 8007564:	b2db      	uxtb	r3, r3
 8007566:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007568:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800756c:	2b00      	cmp	r3, #0
 800756e:	dce9      	bgt.n	8007544 <prvUnlockQueue+0x60>
 8007570:	e000      	b.n	8007574 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007572:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	22ff      	movs	r2, #255	; 0xff
 8007578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800757c:	f001 fd62 	bl	8009044 <vPortExitCritical>
}
 8007580:	bf00      	nop
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007590:	f001 fd28 	bl	8008fe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007598:	2b00      	cmp	r3, #0
 800759a:	d102      	bne.n	80075a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800759c:	2301      	movs	r3, #1
 800759e:	60fb      	str	r3, [r7, #12]
 80075a0:	e001      	b.n	80075a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80075a2:	2300      	movs	r3, #0
 80075a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075a6:	f001 fd4d 	bl	8009044 <vPortExitCritical>

	return xReturn;
 80075aa:	68fb      	ldr	r3, [r7, #12]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075bc:	f001 fd12 	bl	8008fe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d102      	bne.n	80075d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80075cc:	2301      	movs	r3, #1
 80075ce:	60fb      	str	r3, [r7, #12]
 80075d0:	e001      	b.n	80075d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80075d2:	2300      	movs	r3, #0
 80075d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075d6:	f001 fd35 	bl	8009044 <vPortExitCritical>

	return xReturn;
 80075da:	68fb      	ldr	r3, [r7, #12]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075ee:	2300      	movs	r3, #0
 80075f0:	60fb      	str	r3, [r7, #12]
 80075f2:	e014      	b.n	800761e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80075f4:	4a0f      	ldr	r2, [pc, #60]	; (8007634 <vQueueAddToRegistry+0x50>)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10b      	bne.n	8007618 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007600:	490c      	ldr	r1, [pc, #48]	; (8007634 <vQueueAddToRegistry+0x50>)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	683a      	ldr	r2, [r7, #0]
 8007606:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800760a:	4a0a      	ldr	r2, [pc, #40]	; (8007634 <vQueueAddToRegistry+0x50>)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	00db      	lsls	r3, r3, #3
 8007610:	4413      	add	r3, r2
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007616:	e006      	b.n	8007626 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	3301      	adds	r3, #1
 800761c:	60fb      	str	r3, [r7, #12]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2b07      	cmp	r3, #7
 8007622:	d9e7      	bls.n	80075f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007624:	bf00      	nop
 8007626:	bf00      	nop
 8007628:	3714      	adds	r7, #20
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	20000f98 	.word	0x20000f98

08007638 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007648:	f001 fccc 	bl	8008fe4 <vPortEnterCritical>
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007652:	b25b      	sxtb	r3, r3
 8007654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007658:	d103      	bne.n	8007662 <vQueueWaitForMessageRestricted+0x2a>
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007668:	b25b      	sxtb	r3, r3
 800766a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800766e:	d103      	bne.n	8007678 <vQueueWaitForMessageRestricted+0x40>
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007678:	f001 fce4 	bl	8009044 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007680:	2b00      	cmp	r3, #0
 8007682:	d106      	bne.n	8007692 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	3324      	adds	r3, #36	; 0x24
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	68b9      	ldr	r1, [r7, #8]
 800768c:	4618      	mov	r0, r3
 800768e:	f000 fc61 	bl	8007f54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007692:	6978      	ldr	r0, [r7, #20]
 8007694:	f7ff ff26 	bl	80074e4 <prvUnlockQueue>
	}
 8007698:	bf00      	nop
 800769a:	3718      	adds	r7, #24
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b08e      	sub	sp, #56	; 0x38
 80076a4:	af04      	add	r7, sp, #16
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
 80076ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80076ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10a      	bne.n	80076ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	623b      	str	r3, [r7, #32]
}
 80076c6:	bf00      	nop
 80076c8:	e7fe      	b.n	80076c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80076ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10a      	bne.n	80076e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	61fb      	str	r3, [r7, #28]
}
 80076e2:	bf00      	nop
 80076e4:	e7fe      	b.n	80076e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80076e6:	23a8      	movs	r3, #168	; 0xa8
 80076e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	2ba8      	cmp	r3, #168	; 0xa8
 80076ee:	d00a      	beq.n	8007706 <xTaskCreateStatic+0x66>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	61bb      	str	r3, [r7, #24]
}
 8007702:	bf00      	nop
 8007704:	e7fe      	b.n	8007704 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007706:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770a:	2b00      	cmp	r3, #0
 800770c:	d01e      	beq.n	800774c <xTaskCreateStatic+0xac>
 800770e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007710:	2b00      	cmp	r3, #0
 8007712:	d01b      	beq.n	800774c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007716:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800771c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800771e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007720:	2202      	movs	r2, #2
 8007722:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007726:	2300      	movs	r3, #0
 8007728:	9303      	str	r3, [sp, #12]
 800772a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772c:	9302      	str	r3, [sp, #8]
 800772e:	f107 0314 	add.w	r3, r7, #20
 8007732:	9301      	str	r3, [sp, #4]
 8007734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	68b9      	ldr	r1, [r7, #8]
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 f850 	bl	80077e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007744:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007746:	f000 f8f3 	bl	8007930 <prvAddNewTaskToReadyList>
 800774a:	e001      	b.n	8007750 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800774c:	2300      	movs	r3, #0
 800774e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007750:	697b      	ldr	r3, [r7, #20]
	}
 8007752:	4618      	mov	r0, r3
 8007754:	3728      	adds	r7, #40	; 0x28
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800775a:	b580      	push	{r7, lr}
 800775c:	b08c      	sub	sp, #48	; 0x30
 800775e:	af04      	add	r7, sp, #16
 8007760:	60f8      	str	r0, [r7, #12]
 8007762:	60b9      	str	r1, [r7, #8]
 8007764:	603b      	str	r3, [r7, #0]
 8007766:	4613      	mov	r3, r2
 8007768:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800776a:	88fb      	ldrh	r3, [r7, #6]
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4618      	mov	r0, r3
 8007770:	f001 fd5a 	bl	8009228 <pvPortMalloc>
 8007774:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00e      	beq.n	800779a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800777c:	20a8      	movs	r0, #168	; 0xa8
 800777e:	f001 fd53 	bl	8009228 <pvPortMalloc>
 8007782:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d003      	beq.n	8007792 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	697a      	ldr	r2, [r7, #20]
 800778e:	631a      	str	r2, [r3, #48]	; 0x30
 8007790:	e005      	b.n	800779e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007792:	6978      	ldr	r0, [r7, #20]
 8007794:	f001 fe14 	bl	80093c0 <vPortFree>
 8007798:	e001      	b.n	800779e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800779a:	2300      	movs	r3, #0
 800779c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d017      	beq.n	80077d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80077ac:	88fa      	ldrh	r2, [r7, #6]
 80077ae:	2300      	movs	r3, #0
 80077b0:	9303      	str	r3, [sp, #12]
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	9302      	str	r3, [sp, #8]
 80077b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b8:	9301      	str	r3, [sp, #4]
 80077ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	68b9      	ldr	r1, [r7, #8]
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f000 f80e 	bl	80077e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077c8:	69f8      	ldr	r0, [r7, #28]
 80077ca:	f000 f8b1 	bl	8007930 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80077ce:	2301      	movs	r3, #1
 80077d0:	61bb      	str	r3, [r7, #24]
 80077d2:	e002      	b.n	80077da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80077d4:	f04f 33ff 	mov.w	r3, #4294967295
 80077d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80077da:	69bb      	ldr	r3, [r7, #24]
	}
 80077dc:	4618      	mov	r0, r3
 80077de:	3720      	adds	r7, #32
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b088      	sub	sp, #32
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
 80077f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80077f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	461a      	mov	r2, r3
 80077fc:	21a5      	movs	r1, #165	; 0xa5
 80077fe:	f002 f905 	bl	8009a0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800780c:	3b01      	subs	r3, #1
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4413      	add	r3, r2
 8007812:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	f023 0307 	bic.w	r3, r3, #7
 800781a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	f003 0307 	and.w	r3, r3, #7
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00a      	beq.n	800783c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782a:	f383 8811 	msr	BASEPRI, r3
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	617b      	str	r3, [r7, #20]
}
 8007838:	bf00      	nop
 800783a:	e7fe      	b.n	800783a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d01f      	beq.n	8007882 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007842:	2300      	movs	r3, #0
 8007844:	61fb      	str	r3, [r7, #28]
 8007846:	e012      	b.n	800786e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007848:	68ba      	ldr	r2, [r7, #8]
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	4413      	add	r3, r2
 800784e:	7819      	ldrb	r1, [r3, #0]
 8007850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	4413      	add	r3, r2
 8007856:	3334      	adds	r3, #52	; 0x34
 8007858:	460a      	mov	r2, r1
 800785a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	4413      	add	r3, r2
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d006      	beq.n	8007876 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	3301      	adds	r3, #1
 800786c:	61fb      	str	r3, [r7, #28]
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	2b0f      	cmp	r3, #15
 8007872:	d9e9      	bls.n	8007848 <prvInitialiseNewTask+0x64>
 8007874:	e000      	b.n	8007878 <prvInitialiseNewTask+0x94>
			{
				break;
 8007876:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787a:	2200      	movs	r2, #0
 800787c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007880:	e003      	b.n	800788a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	2200      	movs	r2, #0
 8007886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800788a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788c:	2b37      	cmp	r3, #55	; 0x37
 800788e:	d901      	bls.n	8007894 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007890:	2337      	movs	r3, #55	; 0x37
 8007892:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007898:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800789a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800789e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80078a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a2:	2200      	movs	r2, #0
 80078a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80078a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a8:	3304      	adds	r3, #4
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fe ff8e 	bl	80067cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80078b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b2:	3318      	adds	r3, #24
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7fe ff89 	bl	80067cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80078ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80078c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80078ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80078d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d2:	2200      	movs	r2, #0
 80078d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80078d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80078e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e2:	3354      	adds	r3, #84	; 0x54
 80078e4:	224c      	movs	r2, #76	; 0x4c
 80078e6:	2100      	movs	r1, #0
 80078e8:	4618      	mov	r0, r3
 80078ea:	f002 f88f 	bl	8009a0c <memset>
 80078ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f0:	4a0c      	ldr	r2, [pc, #48]	; (8007924 <prvInitialiseNewTask+0x140>)
 80078f2:	659a      	str	r2, [r3, #88]	; 0x58
 80078f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f6:	4a0c      	ldr	r2, [pc, #48]	; (8007928 <prvInitialiseNewTask+0x144>)
 80078f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80078fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fc:	4a0b      	ldr	r2, [pc, #44]	; (800792c <prvInitialiseNewTask+0x148>)
 80078fe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007900:	683a      	ldr	r2, [r7, #0]
 8007902:	68f9      	ldr	r1, [r7, #12]
 8007904:	69b8      	ldr	r0, [r7, #24]
 8007906:	f001 fa3f 	bl	8008d88 <pxPortInitialiseStack>
 800790a:	4602      	mov	r2, r0
 800790c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007912:	2b00      	cmp	r3, #0
 8007914:	d002      	beq.n	800791c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800791a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800791c:	bf00      	nop
 800791e:	3720      	adds	r7, #32
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	20003954 	.word	0x20003954
 8007928:	200039bc 	.word	0x200039bc
 800792c:	20003a24 	.word	0x20003a24

08007930 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007938:	f001 fb54 	bl	8008fe4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800793c:	4b2d      	ldr	r3, [pc, #180]	; (80079f4 <prvAddNewTaskToReadyList+0xc4>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	3301      	adds	r3, #1
 8007942:	4a2c      	ldr	r2, [pc, #176]	; (80079f4 <prvAddNewTaskToReadyList+0xc4>)
 8007944:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007946:	4b2c      	ldr	r3, [pc, #176]	; (80079f8 <prvAddNewTaskToReadyList+0xc8>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d109      	bne.n	8007962 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800794e:	4a2a      	ldr	r2, [pc, #168]	; (80079f8 <prvAddNewTaskToReadyList+0xc8>)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007954:	4b27      	ldr	r3, [pc, #156]	; (80079f4 <prvAddNewTaskToReadyList+0xc4>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d110      	bne.n	800797e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800795c:	f000 fc26 	bl	80081ac <prvInitialiseTaskLists>
 8007960:	e00d      	b.n	800797e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007962:	4b26      	ldr	r3, [pc, #152]	; (80079fc <prvAddNewTaskToReadyList+0xcc>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d109      	bne.n	800797e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800796a:	4b23      	ldr	r3, [pc, #140]	; (80079f8 <prvAddNewTaskToReadyList+0xc8>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007974:	429a      	cmp	r2, r3
 8007976:	d802      	bhi.n	800797e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007978:	4a1f      	ldr	r2, [pc, #124]	; (80079f8 <prvAddNewTaskToReadyList+0xc8>)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800797e:	4b20      	ldr	r3, [pc, #128]	; (8007a00 <prvAddNewTaskToReadyList+0xd0>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	3301      	adds	r3, #1
 8007984:	4a1e      	ldr	r2, [pc, #120]	; (8007a00 <prvAddNewTaskToReadyList+0xd0>)
 8007986:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007988:	4b1d      	ldr	r3, [pc, #116]	; (8007a00 <prvAddNewTaskToReadyList+0xd0>)
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007994:	4b1b      	ldr	r3, [pc, #108]	; (8007a04 <prvAddNewTaskToReadyList+0xd4>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	429a      	cmp	r2, r3
 800799a:	d903      	bls.n	80079a4 <prvAddNewTaskToReadyList+0x74>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a0:	4a18      	ldr	r2, [pc, #96]	; (8007a04 <prvAddNewTaskToReadyList+0xd4>)
 80079a2:	6013      	str	r3, [r2, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a8:	4613      	mov	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4a15      	ldr	r2, [pc, #84]	; (8007a08 <prvAddNewTaskToReadyList+0xd8>)
 80079b2:	441a      	add	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	3304      	adds	r3, #4
 80079b8:	4619      	mov	r1, r3
 80079ba:	4610      	mov	r0, r2
 80079bc:	f7fe ff13 	bl	80067e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80079c0:	f001 fb40 	bl	8009044 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80079c4:	4b0d      	ldr	r3, [pc, #52]	; (80079fc <prvAddNewTaskToReadyList+0xcc>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00e      	beq.n	80079ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80079cc:	4b0a      	ldr	r3, [pc, #40]	; (80079f8 <prvAddNewTaskToReadyList+0xc8>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d207      	bcs.n	80079ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80079da:	4b0c      	ldr	r3, [pc, #48]	; (8007a0c <prvAddNewTaskToReadyList+0xdc>)
 80079dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079e0:	601a      	str	r2, [r3, #0]
 80079e2:	f3bf 8f4f 	dsb	sy
 80079e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079ea:	bf00      	nop
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	200014ac 	.word	0x200014ac
 80079f8:	20000fd8 	.word	0x20000fd8
 80079fc:	200014b8 	.word	0x200014b8
 8007a00:	200014c8 	.word	0x200014c8
 8007a04:	200014b4 	.word	0x200014b4
 8007a08:	20000fdc 	.word	0x20000fdc
 8007a0c:	e000ed04 	.word	0xe000ed04

08007a10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d017      	beq.n	8007a52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007a22:	4b13      	ldr	r3, [pc, #76]	; (8007a70 <vTaskDelay+0x60>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00a      	beq.n	8007a40 <vTaskDelay+0x30>
	__asm volatile
 8007a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	60bb      	str	r3, [r7, #8]
}
 8007a3c:	bf00      	nop
 8007a3e:	e7fe      	b.n	8007a3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007a40:	f000 f88a 	bl	8007b58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a44:	2100      	movs	r1, #0
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fdfc 	bl	8008644 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a4c:	f000 f892 	bl	8007b74 <xTaskResumeAll>
 8007a50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d107      	bne.n	8007a68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007a58:	4b06      	ldr	r3, [pc, #24]	; (8007a74 <vTaskDelay+0x64>)
 8007a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a5e:	601a      	str	r2, [r3, #0]
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a68:	bf00      	nop
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	200014d4 	.word	0x200014d4
 8007a74:	e000ed04 	.word	0xe000ed04

08007a78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b08a      	sub	sp, #40	; 0x28
 8007a7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a82:	2300      	movs	r3, #0
 8007a84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a86:	463a      	mov	r2, r7
 8007a88:	1d39      	adds	r1, r7, #4
 8007a8a:	f107 0308 	add.w	r3, r7, #8
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7fe fe48 	bl	8006724 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a94:	6839      	ldr	r1, [r7, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	9202      	str	r2, [sp, #8]
 8007a9c:	9301      	str	r3, [sp, #4]
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	460a      	mov	r2, r1
 8007aa6:	4924      	ldr	r1, [pc, #144]	; (8007b38 <vTaskStartScheduler+0xc0>)
 8007aa8:	4824      	ldr	r0, [pc, #144]	; (8007b3c <vTaskStartScheduler+0xc4>)
 8007aaa:	f7ff fdf9 	bl	80076a0 <xTaskCreateStatic>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	4a23      	ldr	r2, [pc, #140]	; (8007b40 <vTaskStartScheduler+0xc8>)
 8007ab2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ab4:	4b22      	ldr	r3, [pc, #136]	; (8007b40 <vTaskStartScheduler+0xc8>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007abc:	2301      	movs	r3, #1
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	e001      	b.n	8007ac6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d102      	bne.n	8007ad2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007acc:	f000 fe0e 	bl	80086ec <xTimerCreateTimerTask>
 8007ad0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d11b      	bne.n	8007b10 <vTaskStartScheduler+0x98>
	__asm volatile
 8007ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007adc:	f383 8811 	msr	BASEPRI, r3
 8007ae0:	f3bf 8f6f 	isb	sy
 8007ae4:	f3bf 8f4f 	dsb	sy
 8007ae8:	613b      	str	r3, [r7, #16]
}
 8007aea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007aec:	4b15      	ldr	r3, [pc, #84]	; (8007b44 <vTaskStartScheduler+0xcc>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3354      	adds	r3, #84	; 0x54
 8007af2:	4a15      	ldr	r2, [pc, #84]	; (8007b48 <vTaskStartScheduler+0xd0>)
 8007af4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007af6:	4b15      	ldr	r3, [pc, #84]	; (8007b4c <vTaskStartScheduler+0xd4>)
 8007af8:	f04f 32ff 	mov.w	r2, #4294967295
 8007afc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007afe:	4b14      	ldr	r3, [pc, #80]	; (8007b50 <vTaskStartScheduler+0xd8>)
 8007b00:	2201      	movs	r2, #1
 8007b02:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007b04:	4b13      	ldr	r3, [pc, #76]	; (8007b54 <vTaskStartScheduler+0xdc>)
 8007b06:	2200      	movs	r2, #0
 8007b08:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007b0a:	f001 f9c9 	bl	8008ea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007b0e:	e00e      	b.n	8007b2e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b16:	d10a      	bne.n	8007b2e <vTaskStartScheduler+0xb6>
	__asm volatile
 8007b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1c:	f383 8811 	msr	BASEPRI, r3
 8007b20:	f3bf 8f6f 	isb	sy
 8007b24:	f3bf 8f4f 	dsb	sy
 8007b28:	60fb      	str	r3, [r7, #12]
}
 8007b2a:	bf00      	nop
 8007b2c:	e7fe      	b.n	8007b2c <vTaskStartScheduler+0xb4>
}
 8007b2e:	bf00      	nop
 8007b30:	3718      	adds	r7, #24
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	0800a648 	.word	0x0800a648
 8007b3c:	0800817d 	.word	0x0800817d
 8007b40:	200014d0 	.word	0x200014d0
 8007b44:	20000fd8 	.word	0x20000fd8
 8007b48:	20000068 	.word	0x20000068
 8007b4c:	200014cc 	.word	0x200014cc
 8007b50:	200014b8 	.word	0x200014b8
 8007b54:	200014b0 	.word	0x200014b0

08007b58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b58:	b480      	push	{r7}
 8007b5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007b5c:	4b04      	ldr	r3, [pc, #16]	; (8007b70 <vTaskSuspendAll+0x18>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	3301      	adds	r3, #1
 8007b62:	4a03      	ldr	r2, [pc, #12]	; (8007b70 <vTaskSuspendAll+0x18>)
 8007b64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007b66:	bf00      	nop
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	200014d4 	.word	0x200014d4

08007b74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b82:	4b42      	ldr	r3, [pc, #264]	; (8007c8c <xTaskResumeAll+0x118>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10a      	bne.n	8007ba0 <xTaskResumeAll+0x2c>
	__asm volatile
 8007b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	603b      	str	r3, [r7, #0]
}
 8007b9c:	bf00      	nop
 8007b9e:	e7fe      	b.n	8007b9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007ba0:	f001 fa20 	bl	8008fe4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007ba4:	4b39      	ldr	r3, [pc, #228]	; (8007c8c <xTaskResumeAll+0x118>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	4a38      	ldr	r2, [pc, #224]	; (8007c8c <xTaskResumeAll+0x118>)
 8007bac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bae:	4b37      	ldr	r3, [pc, #220]	; (8007c8c <xTaskResumeAll+0x118>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d162      	bne.n	8007c7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007bb6:	4b36      	ldr	r3, [pc, #216]	; (8007c90 <xTaskResumeAll+0x11c>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d05e      	beq.n	8007c7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bbe:	e02f      	b.n	8007c20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bc0:	4b34      	ldr	r3, [pc, #208]	; (8007c94 <xTaskResumeAll+0x120>)
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	3318      	adds	r3, #24
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7fe fe67 	bl	80068a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fe fe62 	bl	80068a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be0:	4b2d      	ldr	r3, [pc, #180]	; (8007c98 <xTaskResumeAll+0x124>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d903      	bls.n	8007bf0 <xTaskResumeAll+0x7c>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bec:	4a2a      	ldr	r2, [pc, #168]	; (8007c98 <xTaskResumeAll+0x124>)
 8007bee:	6013      	str	r3, [r2, #0]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4a27      	ldr	r2, [pc, #156]	; (8007c9c <xTaskResumeAll+0x128>)
 8007bfe:	441a      	add	r2, r3
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	3304      	adds	r3, #4
 8007c04:	4619      	mov	r1, r3
 8007c06:	4610      	mov	r0, r2
 8007c08:	f7fe fded 	bl	80067e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c10:	4b23      	ldr	r3, [pc, #140]	; (8007ca0 <xTaskResumeAll+0x12c>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d302      	bcc.n	8007c20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007c1a:	4b22      	ldr	r3, [pc, #136]	; (8007ca4 <xTaskResumeAll+0x130>)
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c20:	4b1c      	ldr	r3, [pc, #112]	; (8007c94 <xTaskResumeAll+0x120>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1cb      	bne.n	8007bc0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d001      	beq.n	8007c32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007c2e:	f000 fb5f 	bl	80082f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007c32:	4b1d      	ldr	r3, [pc, #116]	; (8007ca8 <xTaskResumeAll+0x134>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d010      	beq.n	8007c60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007c3e:	f000 f847 	bl	8007cd0 <xTaskIncrementTick>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d002      	beq.n	8007c4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007c48:	4b16      	ldr	r3, [pc, #88]	; (8007ca4 <xTaskResumeAll+0x130>)
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	3b01      	subs	r3, #1
 8007c52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1f1      	bne.n	8007c3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007c5a:	4b13      	ldr	r3, [pc, #76]	; (8007ca8 <xTaskResumeAll+0x134>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c60:	4b10      	ldr	r3, [pc, #64]	; (8007ca4 <xTaskResumeAll+0x130>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d009      	beq.n	8007c7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c6c:	4b0f      	ldr	r3, [pc, #60]	; (8007cac <xTaskResumeAll+0x138>)
 8007c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c7c:	f001 f9e2 	bl	8009044 <vPortExitCritical>

	return xAlreadyYielded;
 8007c80:	68bb      	ldr	r3, [r7, #8]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	200014d4 	.word	0x200014d4
 8007c90:	200014ac 	.word	0x200014ac
 8007c94:	2000146c 	.word	0x2000146c
 8007c98:	200014b4 	.word	0x200014b4
 8007c9c:	20000fdc 	.word	0x20000fdc
 8007ca0:	20000fd8 	.word	0x20000fd8
 8007ca4:	200014c0 	.word	0x200014c0
 8007ca8:	200014bc 	.word	0x200014bc
 8007cac:	e000ed04 	.word	0xe000ed04

08007cb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007cb6:	4b05      	ldr	r3, [pc, #20]	; (8007ccc <xTaskGetTickCount+0x1c>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007cbc:	687b      	ldr	r3, [r7, #4]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	200014b0 	.word	0x200014b0

08007cd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cda:	4b4f      	ldr	r3, [pc, #316]	; (8007e18 <xTaskIncrementTick+0x148>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f040 808f 	bne.w	8007e02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ce4:	4b4d      	ldr	r3, [pc, #308]	; (8007e1c <xTaskIncrementTick+0x14c>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007cec:	4a4b      	ldr	r2, [pc, #300]	; (8007e1c <xTaskIncrementTick+0x14c>)
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d120      	bne.n	8007d3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007cf8:	4b49      	ldr	r3, [pc, #292]	; (8007e20 <xTaskIncrementTick+0x150>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00a      	beq.n	8007d18 <xTaskIncrementTick+0x48>
	__asm volatile
 8007d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d06:	f383 8811 	msr	BASEPRI, r3
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	603b      	str	r3, [r7, #0]
}
 8007d14:	bf00      	nop
 8007d16:	e7fe      	b.n	8007d16 <xTaskIncrementTick+0x46>
 8007d18:	4b41      	ldr	r3, [pc, #260]	; (8007e20 <xTaskIncrementTick+0x150>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	60fb      	str	r3, [r7, #12]
 8007d1e:	4b41      	ldr	r3, [pc, #260]	; (8007e24 <xTaskIncrementTick+0x154>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a3f      	ldr	r2, [pc, #252]	; (8007e20 <xTaskIncrementTick+0x150>)
 8007d24:	6013      	str	r3, [r2, #0]
 8007d26:	4a3f      	ldr	r2, [pc, #252]	; (8007e24 <xTaskIncrementTick+0x154>)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	4b3e      	ldr	r3, [pc, #248]	; (8007e28 <xTaskIncrementTick+0x158>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	3301      	adds	r3, #1
 8007d32:	4a3d      	ldr	r2, [pc, #244]	; (8007e28 <xTaskIncrementTick+0x158>)
 8007d34:	6013      	str	r3, [r2, #0]
 8007d36:	f000 fadb 	bl	80082f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d3a:	4b3c      	ldr	r3, [pc, #240]	; (8007e2c <xTaskIncrementTick+0x15c>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d349      	bcc.n	8007dd8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d44:	4b36      	ldr	r3, [pc, #216]	; (8007e20 <xTaskIncrementTick+0x150>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d104      	bne.n	8007d58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d4e:	4b37      	ldr	r3, [pc, #220]	; (8007e2c <xTaskIncrementTick+0x15c>)
 8007d50:	f04f 32ff 	mov.w	r2, #4294967295
 8007d54:	601a      	str	r2, [r3, #0]
					break;
 8007d56:	e03f      	b.n	8007dd8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d58:	4b31      	ldr	r3, [pc, #196]	; (8007e20 <xTaskIncrementTick+0x150>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d203      	bcs.n	8007d78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d70:	4a2e      	ldr	r2, [pc, #184]	; (8007e2c <xTaskIncrementTick+0x15c>)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d76:	e02f      	b.n	8007dd8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7fe fd8f 	bl	80068a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d004      	beq.n	8007d94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	3318      	adds	r3, #24
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7fe fd86 	bl	80068a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d98:	4b25      	ldr	r3, [pc, #148]	; (8007e30 <xTaskIncrementTick+0x160>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d903      	bls.n	8007da8 <xTaskIncrementTick+0xd8>
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da4:	4a22      	ldr	r2, [pc, #136]	; (8007e30 <xTaskIncrementTick+0x160>)
 8007da6:	6013      	str	r3, [r2, #0]
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dac:	4613      	mov	r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	4413      	add	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4a1f      	ldr	r2, [pc, #124]	; (8007e34 <xTaskIncrementTick+0x164>)
 8007db6:	441a      	add	r2, r3
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	3304      	adds	r3, #4
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	4610      	mov	r0, r2
 8007dc0:	f7fe fd11 	bl	80067e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc8:	4b1b      	ldr	r3, [pc, #108]	; (8007e38 <xTaskIncrementTick+0x168>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d3b8      	bcc.n	8007d44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dd6:	e7b5      	b.n	8007d44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007dd8:	4b17      	ldr	r3, [pc, #92]	; (8007e38 <xTaskIncrementTick+0x168>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dde:	4915      	ldr	r1, [pc, #84]	; (8007e34 <xTaskIncrementTick+0x164>)
 8007de0:	4613      	mov	r3, r2
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4413      	add	r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	440b      	add	r3, r1
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d901      	bls.n	8007df4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007df0:	2301      	movs	r3, #1
 8007df2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007df4:	4b11      	ldr	r3, [pc, #68]	; (8007e3c <xTaskIncrementTick+0x16c>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d007      	beq.n	8007e0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	617b      	str	r3, [r7, #20]
 8007e00:	e004      	b.n	8007e0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007e02:	4b0f      	ldr	r3, [pc, #60]	; (8007e40 <xTaskIncrementTick+0x170>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	3301      	adds	r3, #1
 8007e08:	4a0d      	ldr	r2, [pc, #52]	; (8007e40 <xTaskIncrementTick+0x170>)
 8007e0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007e0c:	697b      	ldr	r3, [r7, #20]
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3718      	adds	r7, #24
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	200014d4 	.word	0x200014d4
 8007e1c:	200014b0 	.word	0x200014b0
 8007e20:	20001464 	.word	0x20001464
 8007e24:	20001468 	.word	0x20001468
 8007e28:	200014c4 	.word	0x200014c4
 8007e2c:	200014cc 	.word	0x200014cc
 8007e30:	200014b4 	.word	0x200014b4
 8007e34:	20000fdc 	.word	0x20000fdc
 8007e38:	20000fd8 	.word	0x20000fd8
 8007e3c:	200014c0 	.word	0x200014c0
 8007e40:	200014bc 	.word	0x200014bc

08007e44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e4a:	4b2a      	ldr	r3, [pc, #168]	; (8007ef4 <vTaskSwitchContext+0xb0>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d003      	beq.n	8007e5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e52:	4b29      	ldr	r3, [pc, #164]	; (8007ef8 <vTaskSwitchContext+0xb4>)
 8007e54:	2201      	movs	r2, #1
 8007e56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e58:	e046      	b.n	8007ee8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007e5a:	4b27      	ldr	r3, [pc, #156]	; (8007ef8 <vTaskSwitchContext+0xb4>)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e60:	4b26      	ldr	r3, [pc, #152]	; (8007efc <vTaskSwitchContext+0xb8>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	60fb      	str	r3, [r7, #12]
 8007e66:	e010      	b.n	8007e8a <vTaskSwitchContext+0x46>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10a      	bne.n	8007e84 <vTaskSwitchContext+0x40>
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	607b      	str	r3, [r7, #4]
}
 8007e80:	bf00      	nop
 8007e82:	e7fe      	b.n	8007e82 <vTaskSwitchContext+0x3e>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3b01      	subs	r3, #1
 8007e88:	60fb      	str	r3, [r7, #12]
 8007e8a:	491d      	ldr	r1, [pc, #116]	; (8007f00 <vTaskSwitchContext+0xbc>)
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4413      	add	r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	440b      	add	r3, r1
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d0e4      	beq.n	8007e68 <vTaskSwitchContext+0x24>
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	4413      	add	r3, r2
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4a15      	ldr	r2, [pc, #84]	; (8007f00 <vTaskSwitchContext+0xbc>)
 8007eaa:	4413      	add	r3, r2
 8007eac:	60bb      	str	r3, [r7, #8]
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	685a      	ldr	r2, [r3, #4]
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	605a      	str	r2, [r3, #4]
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	3308      	adds	r3, #8
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d104      	bne.n	8007ece <vTaskSwitchContext+0x8a>
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	685a      	ldr	r2, [r3, #4]
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	605a      	str	r2, [r3, #4]
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	4a0b      	ldr	r2, [pc, #44]	; (8007f04 <vTaskSwitchContext+0xc0>)
 8007ed6:	6013      	str	r3, [r2, #0]
 8007ed8:	4a08      	ldr	r2, [pc, #32]	; (8007efc <vTaskSwitchContext+0xb8>)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ede:	4b09      	ldr	r3, [pc, #36]	; (8007f04 <vTaskSwitchContext+0xc0>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	3354      	adds	r3, #84	; 0x54
 8007ee4:	4a08      	ldr	r2, [pc, #32]	; (8007f08 <vTaskSwitchContext+0xc4>)
 8007ee6:	6013      	str	r3, [r2, #0]
}
 8007ee8:	bf00      	nop
 8007eea:	3714      	adds	r7, #20
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	200014d4 	.word	0x200014d4
 8007ef8:	200014c0 	.word	0x200014c0
 8007efc:	200014b4 	.word	0x200014b4
 8007f00:	20000fdc 	.word	0x20000fdc
 8007f04:	20000fd8 	.word	0x20000fd8
 8007f08:	20000068 	.word	0x20000068

08007f0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10a      	bne.n	8007f32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f20:	f383 8811 	msr	BASEPRI, r3
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	60fb      	str	r3, [r7, #12]
}
 8007f2e:	bf00      	nop
 8007f30:	e7fe      	b.n	8007f30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f32:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <vTaskPlaceOnEventList+0x44>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	3318      	adds	r3, #24
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7fe fc77 	bl	800682e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f40:	2101      	movs	r1, #1
 8007f42:	6838      	ldr	r0, [r7, #0]
 8007f44:	f000 fb7e 	bl	8008644 <prvAddCurrentTaskToDelayedList>
}
 8007f48:	bf00      	nop
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	20000fd8 	.word	0x20000fd8

08007f54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10a      	bne.n	8007f7c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6a:	f383 8811 	msr	BASEPRI, r3
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	617b      	str	r3, [r7, #20]
}
 8007f78:	bf00      	nop
 8007f7a:	e7fe      	b.n	8007f7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f7c:	4b0a      	ldr	r3, [pc, #40]	; (8007fa8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	3318      	adds	r3, #24
 8007f82:	4619      	mov	r1, r3
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f7fe fc2e 	bl	80067e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d002      	beq.n	8007f96 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007f90:	f04f 33ff 	mov.w	r3, #4294967295
 8007f94:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007f96:	6879      	ldr	r1, [r7, #4]
 8007f98:	68b8      	ldr	r0, [r7, #8]
 8007f9a:	f000 fb53 	bl	8008644 <prvAddCurrentTaskToDelayedList>
	}
 8007f9e:	bf00      	nop
 8007fa0:	3718      	adds	r7, #24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	20000fd8 	.word	0x20000fd8

08007fac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10a      	bne.n	8007fd8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	60fb      	str	r3, [r7, #12]
}
 8007fd4:	bf00      	nop
 8007fd6:	e7fe      	b.n	8007fd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	3318      	adds	r3, #24
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7fe fc5f 	bl	80068a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fe2:	4b1e      	ldr	r3, [pc, #120]	; (800805c <xTaskRemoveFromEventList+0xb0>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d11d      	bne.n	8008026 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	3304      	adds	r3, #4
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fe fc56 	bl	80068a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff8:	4b19      	ldr	r3, [pc, #100]	; (8008060 <xTaskRemoveFromEventList+0xb4>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d903      	bls.n	8008008 <xTaskRemoveFromEventList+0x5c>
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008004:	4a16      	ldr	r2, [pc, #88]	; (8008060 <xTaskRemoveFromEventList+0xb4>)
 8008006:	6013      	str	r3, [r2, #0]
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800800c:	4613      	mov	r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	4413      	add	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4a13      	ldr	r2, [pc, #76]	; (8008064 <xTaskRemoveFromEventList+0xb8>)
 8008016:	441a      	add	r2, r3
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	3304      	adds	r3, #4
 800801c:	4619      	mov	r1, r3
 800801e:	4610      	mov	r0, r2
 8008020:	f7fe fbe1 	bl	80067e6 <vListInsertEnd>
 8008024:	e005      	b.n	8008032 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	3318      	adds	r3, #24
 800802a:	4619      	mov	r1, r3
 800802c:	480e      	ldr	r0, [pc, #56]	; (8008068 <xTaskRemoveFromEventList+0xbc>)
 800802e:	f7fe fbda 	bl	80067e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008036:	4b0d      	ldr	r3, [pc, #52]	; (800806c <xTaskRemoveFromEventList+0xc0>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803c:	429a      	cmp	r2, r3
 800803e:	d905      	bls.n	800804c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008040:	2301      	movs	r3, #1
 8008042:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008044:	4b0a      	ldr	r3, [pc, #40]	; (8008070 <xTaskRemoveFromEventList+0xc4>)
 8008046:	2201      	movs	r2, #1
 8008048:	601a      	str	r2, [r3, #0]
 800804a:	e001      	b.n	8008050 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800804c:	2300      	movs	r3, #0
 800804e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008050:	697b      	ldr	r3, [r7, #20]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3718      	adds	r7, #24
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	200014d4 	.word	0x200014d4
 8008060:	200014b4 	.word	0x200014b4
 8008064:	20000fdc 	.word	0x20000fdc
 8008068:	2000146c 	.word	0x2000146c
 800806c:	20000fd8 	.word	0x20000fd8
 8008070:	200014c0 	.word	0x200014c0

08008074 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800807c:	4b06      	ldr	r3, [pc, #24]	; (8008098 <vTaskInternalSetTimeOutState+0x24>)
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008084:	4b05      	ldr	r3, [pc, #20]	; (800809c <vTaskInternalSetTimeOutState+0x28>)
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	605a      	str	r2, [r3, #4]
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr
 8008098:	200014c4 	.word	0x200014c4
 800809c:	200014b0 	.word	0x200014b0

080080a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b088      	sub	sp, #32
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10a      	bne.n	80080c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80080b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	613b      	str	r3, [r7, #16]
}
 80080c2:	bf00      	nop
 80080c4:	e7fe      	b.n	80080c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10a      	bne.n	80080e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80080cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	60fb      	str	r3, [r7, #12]
}
 80080de:	bf00      	nop
 80080e0:	e7fe      	b.n	80080e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80080e2:	f000 ff7f 	bl	8008fe4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80080e6:	4b1d      	ldr	r3, [pc, #116]	; (800815c <xTaskCheckForTimeOut+0xbc>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	69ba      	ldr	r2, [r7, #24]
 80080f2:	1ad3      	subs	r3, r2, r3
 80080f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080fe:	d102      	bne.n	8008106 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008100:	2300      	movs	r3, #0
 8008102:	61fb      	str	r3, [r7, #28]
 8008104:	e023      	b.n	800814e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	4b15      	ldr	r3, [pc, #84]	; (8008160 <xTaskCheckForTimeOut+0xc0>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	429a      	cmp	r2, r3
 8008110:	d007      	beq.n	8008122 <xTaskCheckForTimeOut+0x82>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	69ba      	ldr	r2, [r7, #24]
 8008118:	429a      	cmp	r2, r3
 800811a:	d302      	bcc.n	8008122 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800811c:	2301      	movs	r3, #1
 800811e:	61fb      	str	r3, [r7, #28]
 8008120:	e015      	b.n	800814e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	429a      	cmp	r2, r3
 800812a:	d20b      	bcs.n	8008144 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	1ad2      	subs	r2, r2, r3
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f7ff ff9b 	bl	8008074 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800813e:	2300      	movs	r3, #0
 8008140:	61fb      	str	r3, [r7, #28]
 8008142:	e004      	b.n	800814e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	2200      	movs	r2, #0
 8008148:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800814a:	2301      	movs	r3, #1
 800814c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800814e:	f000 ff79 	bl	8009044 <vPortExitCritical>

	return xReturn;
 8008152:	69fb      	ldr	r3, [r7, #28]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3720      	adds	r7, #32
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	200014b0 	.word	0x200014b0
 8008160:	200014c4 	.word	0x200014c4

08008164 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008164:	b480      	push	{r7}
 8008166:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008168:	4b03      	ldr	r3, [pc, #12]	; (8008178 <vTaskMissedYield+0x14>)
 800816a:	2201      	movs	r2, #1
 800816c:	601a      	str	r2, [r3, #0]
}
 800816e:	bf00      	nop
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr
 8008178:	200014c0 	.word	0x200014c0

0800817c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008184:	f000 f852 	bl	800822c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008188:	4b06      	ldr	r3, [pc, #24]	; (80081a4 <prvIdleTask+0x28>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d9f9      	bls.n	8008184 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008190:	4b05      	ldr	r3, [pc, #20]	; (80081a8 <prvIdleTask+0x2c>)
 8008192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008196:	601a      	str	r2, [r3, #0]
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80081a0:	e7f0      	b.n	8008184 <prvIdleTask+0x8>
 80081a2:	bf00      	nop
 80081a4:	20000fdc 	.word	0x20000fdc
 80081a8:	e000ed04 	.word	0xe000ed04

080081ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081b2:	2300      	movs	r3, #0
 80081b4:	607b      	str	r3, [r7, #4]
 80081b6:	e00c      	b.n	80081d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	4613      	mov	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4413      	add	r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4a12      	ldr	r2, [pc, #72]	; (800820c <prvInitialiseTaskLists+0x60>)
 80081c4:	4413      	add	r3, r2
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fe fae0 	bl	800678c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	3301      	adds	r3, #1
 80081d0:	607b      	str	r3, [r7, #4]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b37      	cmp	r3, #55	; 0x37
 80081d6:	d9ef      	bls.n	80081b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80081d8:	480d      	ldr	r0, [pc, #52]	; (8008210 <prvInitialiseTaskLists+0x64>)
 80081da:	f7fe fad7 	bl	800678c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80081de:	480d      	ldr	r0, [pc, #52]	; (8008214 <prvInitialiseTaskLists+0x68>)
 80081e0:	f7fe fad4 	bl	800678c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80081e4:	480c      	ldr	r0, [pc, #48]	; (8008218 <prvInitialiseTaskLists+0x6c>)
 80081e6:	f7fe fad1 	bl	800678c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80081ea:	480c      	ldr	r0, [pc, #48]	; (800821c <prvInitialiseTaskLists+0x70>)
 80081ec:	f7fe face 	bl	800678c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80081f0:	480b      	ldr	r0, [pc, #44]	; (8008220 <prvInitialiseTaskLists+0x74>)
 80081f2:	f7fe facb 	bl	800678c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80081f6:	4b0b      	ldr	r3, [pc, #44]	; (8008224 <prvInitialiseTaskLists+0x78>)
 80081f8:	4a05      	ldr	r2, [pc, #20]	; (8008210 <prvInitialiseTaskLists+0x64>)
 80081fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80081fc:	4b0a      	ldr	r3, [pc, #40]	; (8008228 <prvInitialiseTaskLists+0x7c>)
 80081fe:	4a05      	ldr	r2, [pc, #20]	; (8008214 <prvInitialiseTaskLists+0x68>)
 8008200:	601a      	str	r2, [r3, #0]
}
 8008202:	bf00      	nop
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	20000fdc 	.word	0x20000fdc
 8008210:	2000143c 	.word	0x2000143c
 8008214:	20001450 	.word	0x20001450
 8008218:	2000146c 	.word	0x2000146c
 800821c:	20001480 	.word	0x20001480
 8008220:	20001498 	.word	0x20001498
 8008224:	20001464 	.word	0x20001464
 8008228:	20001468 	.word	0x20001468

0800822c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008232:	e019      	b.n	8008268 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008234:	f000 fed6 	bl	8008fe4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008238:	4b10      	ldr	r3, [pc, #64]	; (800827c <prvCheckTasksWaitingTermination+0x50>)
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	3304      	adds	r3, #4
 8008244:	4618      	mov	r0, r3
 8008246:	f7fe fb2b 	bl	80068a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800824a:	4b0d      	ldr	r3, [pc, #52]	; (8008280 <prvCheckTasksWaitingTermination+0x54>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	3b01      	subs	r3, #1
 8008250:	4a0b      	ldr	r2, [pc, #44]	; (8008280 <prvCheckTasksWaitingTermination+0x54>)
 8008252:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008254:	4b0b      	ldr	r3, [pc, #44]	; (8008284 <prvCheckTasksWaitingTermination+0x58>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	3b01      	subs	r3, #1
 800825a:	4a0a      	ldr	r2, [pc, #40]	; (8008284 <prvCheckTasksWaitingTermination+0x58>)
 800825c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800825e:	f000 fef1 	bl	8009044 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f810 	bl	8008288 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008268:	4b06      	ldr	r3, [pc, #24]	; (8008284 <prvCheckTasksWaitingTermination+0x58>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1e1      	bne.n	8008234 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008270:	bf00      	nop
 8008272:	bf00      	nop
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	20001480 	.word	0x20001480
 8008280:	200014ac 	.word	0x200014ac
 8008284:	20001494 	.word	0x20001494

08008288 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	3354      	adds	r3, #84	; 0x54
 8008294:	4618      	mov	r0, r3
 8008296:	f001 fbd1 	bl	8009a3c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d108      	bne.n	80082b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a8:	4618      	mov	r0, r3
 80082aa:	f001 f889 	bl	80093c0 <vPortFree>
				vPortFree( pxTCB );
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f001 f886 	bl	80093c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80082b4:	e018      	b.n	80082e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d103      	bne.n	80082c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f001 f87d 	bl	80093c0 <vPortFree>
	}
 80082c6:	e00f      	b.n	80082e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d00a      	beq.n	80082e8 <prvDeleteTCB+0x60>
	__asm volatile
 80082d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d6:	f383 8811 	msr	BASEPRI, r3
 80082da:	f3bf 8f6f 	isb	sy
 80082de:	f3bf 8f4f 	dsb	sy
 80082e2:	60fb      	str	r3, [r7, #12]
}
 80082e4:	bf00      	nop
 80082e6:	e7fe      	b.n	80082e6 <prvDeleteTCB+0x5e>
	}
 80082e8:	bf00      	nop
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082f6:	4b0c      	ldr	r3, [pc, #48]	; (8008328 <prvResetNextTaskUnblockTime+0x38>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d104      	bne.n	800830a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008300:	4b0a      	ldr	r3, [pc, #40]	; (800832c <prvResetNextTaskUnblockTime+0x3c>)
 8008302:	f04f 32ff 	mov.w	r2, #4294967295
 8008306:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008308:	e008      	b.n	800831c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800830a:	4b07      	ldr	r3, [pc, #28]	; (8008328 <prvResetNextTaskUnblockTime+0x38>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	4a04      	ldr	r2, [pc, #16]	; (800832c <prvResetNextTaskUnblockTime+0x3c>)
 800831a:	6013      	str	r3, [r2, #0]
}
 800831c:	bf00      	nop
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr
 8008328:	20001464 	.word	0x20001464
 800832c:	200014cc 	.word	0x200014cc

08008330 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008336:	4b0b      	ldr	r3, [pc, #44]	; (8008364 <xTaskGetSchedulerState+0x34>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d102      	bne.n	8008344 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800833e:	2301      	movs	r3, #1
 8008340:	607b      	str	r3, [r7, #4]
 8008342:	e008      	b.n	8008356 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008344:	4b08      	ldr	r3, [pc, #32]	; (8008368 <xTaskGetSchedulerState+0x38>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d102      	bne.n	8008352 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800834c:	2302      	movs	r3, #2
 800834e:	607b      	str	r3, [r7, #4]
 8008350:	e001      	b.n	8008356 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008352:	2300      	movs	r3, #0
 8008354:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008356:	687b      	ldr	r3, [r7, #4]
	}
 8008358:	4618      	mov	r0, r3
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr
 8008364:	200014b8 	.word	0x200014b8
 8008368:	200014d4 	.word	0x200014d4

0800836c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008378:	2300      	movs	r3, #0
 800837a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d051      	beq.n	8008426 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008386:	4b2a      	ldr	r3, [pc, #168]	; (8008430 <xTaskPriorityInherit+0xc4>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838c:	429a      	cmp	r2, r3
 800838e:	d241      	bcs.n	8008414 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	2b00      	cmp	r3, #0
 8008396:	db06      	blt.n	80083a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008398:	4b25      	ldr	r3, [pc, #148]	; (8008430 <xTaskPriorityInherit+0xc4>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	6959      	ldr	r1, [r3, #20]
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ae:	4613      	mov	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4413      	add	r3, r2
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4a1f      	ldr	r2, [pc, #124]	; (8008434 <xTaskPriorityInherit+0xc8>)
 80083b8:	4413      	add	r3, r2
 80083ba:	4299      	cmp	r1, r3
 80083bc:	d122      	bne.n	8008404 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	3304      	adds	r3, #4
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fe fa6c 	bl	80068a0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80083c8:	4b19      	ldr	r3, [pc, #100]	; (8008430 <xTaskPriorityInherit+0xc4>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d6:	4b18      	ldr	r3, [pc, #96]	; (8008438 <xTaskPriorityInherit+0xcc>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d903      	bls.n	80083e6 <xTaskPriorityInherit+0x7a>
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e2:	4a15      	ldr	r2, [pc, #84]	; (8008438 <xTaskPriorityInherit+0xcc>)
 80083e4:	6013      	str	r3, [r2, #0]
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ea:	4613      	mov	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	4a10      	ldr	r2, [pc, #64]	; (8008434 <xTaskPriorityInherit+0xc8>)
 80083f4:	441a      	add	r2, r3
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	3304      	adds	r3, #4
 80083fa:	4619      	mov	r1, r3
 80083fc:	4610      	mov	r0, r2
 80083fe:	f7fe f9f2 	bl	80067e6 <vListInsertEnd>
 8008402:	e004      	b.n	800840e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008404:	4b0a      	ldr	r3, [pc, #40]	; (8008430 <xTaskPriorityInherit+0xc4>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800840e:	2301      	movs	r3, #1
 8008410:	60fb      	str	r3, [r7, #12]
 8008412:	e008      	b.n	8008426 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008418:	4b05      	ldr	r3, [pc, #20]	; (8008430 <xTaskPriorityInherit+0xc4>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841e:	429a      	cmp	r2, r3
 8008420:	d201      	bcs.n	8008426 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008422:	2301      	movs	r3, #1
 8008424:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008426:	68fb      	ldr	r3, [r7, #12]
	}
 8008428:	4618      	mov	r0, r3
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	20000fd8 	.word	0x20000fd8
 8008434:	20000fdc 	.word	0x20000fdc
 8008438:	200014b4 	.word	0x200014b4

0800843c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800843c:	b580      	push	{r7, lr}
 800843e:	b086      	sub	sp, #24
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008448:	2300      	movs	r3, #0
 800844a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d056      	beq.n	8008500 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008452:	4b2e      	ldr	r3, [pc, #184]	; (800850c <xTaskPriorityDisinherit+0xd0>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	693a      	ldr	r2, [r7, #16]
 8008458:	429a      	cmp	r2, r3
 800845a:	d00a      	beq.n	8008472 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800845c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008460:	f383 8811 	msr	BASEPRI, r3
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	60fb      	str	r3, [r7, #12]
}
 800846e:	bf00      	nop
 8008470:	e7fe      	b.n	8008470 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10a      	bne.n	8008490 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	60bb      	str	r3, [r7, #8]
}
 800848c:	bf00      	nop
 800848e:	e7fe      	b.n	800848e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008494:	1e5a      	subs	r2, r3, #1
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d02c      	beq.n	8008500 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d128      	bne.n	8008500 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	3304      	adds	r3, #4
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7fe f9f4 	bl	80068a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d0:	4b0f      	ldr	r3, [pc, #60]	; (8008510 <xTaskPriorityDisinherit+0xd4>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d903      	bls.n	80084e0 <xTaskPriorityDisinherit+0xa4>
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084dc:	4a0c      	ldr	r2, [pc, #48]	; (8008510 <xTaskPriorityDisinherit+0xd4>)
 80084de:	6013      	str	r3, [r2, #0]
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e4:	4613      	mov	r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	4413      	add	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4a09      	ldr	r2, [pc, #36]	; (8008514 <xTaskPriorityDisinherit+0xd8>)
 80084ee:	441a      	add	r2, r3
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	3304      	adds	r3, #4
 80084f4:	4619      	mov	r1, r3
 80084f6:	4610      	mov	r0, r2
 80084f8:	f7fe f975 	bl	80067e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80084fc:	2301      	movs	r3, #1
 80084fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008500:	697b      	ldr	r3, [r7, #20]
	}
 8008502:	4618      	mov	r0, r3
 8008504:	3718      	adds	r7, #24
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	20000fd8 	.word	0x20000fd8
 8008510:	200014b4 	.word	0x200014b4
 8008514:	20000fdc 	.word	0x20000fdc

08008518 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008518:	b580      	push	{r7, lr}
 800851a:	b088      	sub	sp, #32
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008526:	2301      	movs	r3, #1
 8008528:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d06a      	beq.n	8008606 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008530:	69bb      	ldr	r3, [r7, #24]
 8008532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008534:	2b00      	cmp	r3, #0
 8008536:	d10a      	bne.n	800854e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853c:	f383 8811 	msr	BASEPRI, r3
 8008540:	f3bf 8f6f 	isb	sy
 8008544:	f3bf 8f4f 	dsb	sy
 8008548:	60fb      	str	r3, [r7, #12]
}
 800854a:	bf00      	nop
 800854c:	e7fe      	b.n	800854c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008552:	683a      	ldr	r2, [r7, #0]
 8008554:	429a      	cmp	r2, r3
 8008556:	d902      	bls.n	800855e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	61fb      	str	r3, [r7, #28]
 800855c:	e002      	b.n	8008564 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008562:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008568:	69fa      	ldr	r2, [r7, #28]
 800856a:	429a      	cmp	r2, r3
 800856c:	d04b      	beq.n	8008606 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008572:	697a      	ldr	r2, [r7, #20]
 8008574:	429a      	cmp	r2, r3
 8008576:	d146      	bne.n	8008606 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008578:	4b25      	ldr	r3, [pc, #148]	; (8008610 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	69ba      	ldr	r2, [r7, #24]
 800857e:	429a      	cmp	r2, r3
 8008580:	d10a      	bne.n	8008598 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	60bb      	str	r3, [r7, #8]
}
 8008594:	bf00      	nop
 8008596:	e7fe      	b.n	8008596 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	69fa      	ldr	r2, [r7, #28]
 80085a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	db04      	blt.n	80085b6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	6959      	ldr	r1, [r3, #20]
 80085ba:	693a      	ldr	r2, [r7, #16]
 80085bc:	4613      	mov	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	4a13      	ldr	r2, [pc, #76]	; (8008614 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80085c6:	4413      	add	r3, r2
 80085c8:	4299      	cmp	r1, r3
 80085ca:	d11c      	bne.n	8008606 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	3304      	adds	r3, #4
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7fe f965 	bl	80068a0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085da:	4b0f      	ldr	r3, [pc, #60]	; (8008618 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d903      	bls.n	80085ea <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e6:	4a0c      	ldr	r2, [pc, #48]	; (8008618 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80085e8:	6013      	str	r3, [r2, #0]
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ee:	4613      	mov	r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	4413      	add	r3, r2
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	4a07      	ldr	r2, [pc, #28]	; (8008614 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80085f8:	441a      	add	r2, r3
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	3304      	adds	r3, #4
 80085fe:	4619      	mov	r1, r3
 8008600:	4610      	mov	r0, r2
 8008602:	f7fe f8f0 	bl	80067e6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008606:	bf00      	nop
 8008608:	3720      	adds	r7, #32
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	20000fd8 	.word	0x20000fd8
 8008614:	20000fdc 	.word	0x20000fdc
 8008618:	200014b4 	.word	0x200014b4

0800861c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800861c:	b480      	push	{r7}
 800861e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008620:	4b07      	ldr	r3, [pc, #28]	; (8008640 <pvTaskIncrementMutexHeldCount+0x24>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d004      	beq.n	8008632 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008628:	4b05      	ldr	r3, [pc, #20]	; (8008640 <pvTaskIncrementMutexHeldCount+0x24>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800862e:	3201      	adds	r2, #1
 8008630:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008632:	4b03      	ldr	r3, [pc, #12]	; (8008640 <pvTaskIncrementMutexHeldCount+0x24>)
 8008634:	681b      	ldr	r3, [r3, #0]
	}
 8008636:	4618      	mov	r0, r3
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	20000fd8 	.word	0x20000fd8

08008644 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800864e:	4b21      	ldr	r3, [pc, #132]	; (80086d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008654:	4b20      	ldr	r3, [pc, #128]	; (80086d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	3304      	adds	r3, #4
 800865a:	4618      	mov	r0, r3
 800865c:	f7fe f920 	bl	80068a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008666:	d10a      	bne.n	800867e <prvAddCurrentTaskToDelayedList+0x3a>
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d007      	beq.n	800867e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800866e:	4b1a      	ldr	r3, [pc, #104]	; (80086d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3304      	adds	r3, #4
 8008674:	4619      	mov	r1, r3
 8008676:	4819      	ldr	r0, [pc, #100]	; (80086dc <prvAddCurrentTaskToDelayedList+0x98>)
 8008678:	f7fe f8b5 	bl	80067e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800867c:	e026      	b.n	80086cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4413      	add	r3, r2
 8008684:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008686:	4b14      	ldr	r3, [pc, #80]	; (80086d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	429a      	cmp	r2, r3
 8008694:	d209      	bcs.n	80086aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008696:	4b12      	ldr	r3, [pc, #72]	; (80086e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	4b0f      	ldr	r3, [pc, #60]	; (80086d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	3304      	adds	r3, #4
 80086a0:	4619      	mov	r1, r3
 80086a2:	4610      	mov	r0, r2
 80086a4:	f7fe f8c3 	bl	800682e <vListInsert>
}
 80086a8:	e010      	b.n	80086cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086aa:	4b0e      	ldr	r3, [pc, #56]	; (80086e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	4b0a      	ldr	r3, [pc, #40]	; (80086d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	3304      	adds	r3, #4
 80086b4:	4619      	mov	r1, r3
 80086b6:	4610      	mov	r0, r2
 80086b8:	f7fe f8b9 	bl	800682e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80086bc:	4b0a      	ldr	r3, [pc, #40]	; (80086e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d202      	bcs.n	80086cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80086c6:	4a08      	ldr	r2, [pc, #32]	; (80086e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	6013      	str	r3, [r2, #0]
}
 80086cc:	bf00      	nop
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	200014b0 	.word	0x200014b0
 80086d8:	20000fd8 	.word	0x20000fd8
 80086dc:	20001498 	.word	0x20001498
 80086e0:	20001468 	.word	0x20001468
 80086e4:	20001464 	.word	0x20001464
 80086e8:	200014cc 	.word	0x200014cc

080086ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b08a      	sub	sp, #40	; 0x28
 80086f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80086f2:	2300      	movs	r3, #0
 80086f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80086f6:	f000 fb07 	bl	8008d08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80086fa:	4b1c      	ldr	r3, [pc, #112]	; (800876c <xTimerCreateTimerTask+0x80>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d021      	beq.n	8008746 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008702:	2300      	movs	r3, #0
 8008704:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008706:	2300      	movs	r3, #0
 8008708:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800870a:	1d3a      	adds	r2, r7, #4
 800870c:	f107 0108 	add.w	r1, r7, #8
 8008710:	f107 030c 	add.w	r3, r7, #12
 8008714:	4618      	mov	r0, r3
 8008716:	f7fe f81f 	bl	8006758 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800871a:	6879      	ldr	r1, [r7, #4]
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	9202      	str	r2, [sp, #8]
 8008722:	9301      	str	r3, [sp, #4]
 8008724:	2302      	movs	r3, #2
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	2300      	movs	r3, #0
 800872a:	460a      	mov	r2, r1
 800872c:	4910      	ldr	r1, [pc, #64]	; (8008770 <xTimerCreateTimerTask+0x84>)
 800872e:	4811      	ldr	r0, [pc, #68]	; (8008774 <xTimerCreateTimerTask+0x88>)
 8008730:	f7fe ffb6 	bl	80076a0 <xTaskCreateStatic>
 8008734:	4603      	mov	r3, r0
 8008736:	4a10      	ldr	r2, [pc, #64]	; (8008778 <xTimerCreateTimerTask+0x8c>)
 8008738:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800873a:	4b0f      	ldr	r3, [pc, #60]	; (8008778 <xTimerCreateTimerTask+0x8c>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d001      	beq.n	8008746 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008742:	2301      	movs	r3, #1
 8008744:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10a      	bne.n	8008762 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	613b      	str	r3, [r7, #16]
}
 800875e:	bf00      	nop
 8008760:	e7fe      	b.n	8008760 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008762:	697b      	ldr	r3, [r7, #20]
}
 8008764:	4618      	mov	r0, r3
 8008766:	3718      	adds	r7, #24
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	20001508 	.word	0x20001508
 8008770:	0800a650 	.word	0x0800a650
 8008774:	080088b1 	.word	0x080088b1
 8008778:	2000150c 	.word	0x2000150c

0800877c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b08a      	sub	sp, #40	; 0x28
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	607a      	str	r2, [r7, #4]
 8008788:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800878a:	2300      	movs	r3, #0
 800878c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d10a      	bne.n	80087aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8008794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	623b      	str	r3, [r7, #32]
}
 80087a6:	bf00      	nop
 80087a8:	e7fe      	b.n	80087a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80087aa:	4b1a      	ldr	r3, [pc, #104]	; (8008814 <xTimerGenericCommand+0x98>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d02a      	beq.n	8008808 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	2b05      	cmp	r3, #5
 80087c2:	dc18      	bgt.n	80087f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80087c4:	f7ff fdb4 	bl	8008330 <xTaskGetSchedulerState>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d109      	bne.n	80087e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80087ce:	4b11      	ldr	r3, [pc, #68]	; (8008814 <xTimerGenericCommand+0x98>)
 80087d0:	6818      	ldr	r0, [r3, #0]
 80087d2:	f107 0110 	add.w	r1, r7, #16
 80087d6:	2300      	movs	r3, #0
 80087d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087da:	f7fe f9c9 	bl	8006b70 <xQueueGenericSend>
 80087de:	6278      	str	r0, [r7, #36]	; 0x24
 80087e0:	e012      	b.n	8008808 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80087e2:	4b0c      	ldr	r3, [pc, #48]	; (8008814 <xTimerGenericCommand+0x98>)
 80087e4:	6818      	ldr	r0, [r3, #0]
 80087e6:	f107 0110 	add.w	r1, r7, #16
 80087ea:	2300      	movs	r3, #0
 80087ec:	2200      	movs	r2, #0
 80087ee:	f7fe f9bf 	bl	8006b70 <xQueueGenericSend>
 80087f2:	6278      	str	r0, [r7, #36]	; 0x24
 80087f4:	e008      	b.n	8008808 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80087f6:	4b07      	ldr	r3, [pc, #28]	; (8008814 <xTimerGenericCommand+0x98>)
 80087f8:	6818      	ldr	r0, [r3, #0]
 80087fa:	f107 0110 	add.w	r1, r7, #16
 80087fe:	2300      	movs	r3, #0
 8008800:	683a      	ldr	r2, [r7, #0]
 8008802:	f7fe fab3 	bl	8006d6c <xQueueGenericSendFromISR>
 8008806:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800880a:	4618      	mov	r0, r3
 800880c:	3728      	adds	r7, #40	; 0x28
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	20001508 	.word	0x20001508

08008818 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b088      	sub	sp, #32
 800881c:	af02      	add	r7, sp, #8
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008822:	4b22      	ldr	r3, [pc, #136]	; (80088ac <prvProcessExpiredTimer+0x94>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	3304      	adds	r3, #4
 8008830:	4618      	mov	r0, r3
 8008832:	f7fe f835 	bl	80068a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800883c:	f003 0304 	and.w	r3, r3, #4
 8008840:	2b00      	cmp	r3, #0
 8008842:	d022      	beq.n	800888a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	699a      	ldr	r2, [r3, #24]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	18d1      	adds	r1, r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	6978      	ldr	r0, [r7, #20]
 8008852:	f000 f8d1 	bl	80089f8 <prvInsertTimerInActiveList>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d01f      	beq.n	800889c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800885c:	2300      	movs	r3, #0
 800885e:	9300      	str	r3, [sp, #0]
 8008860:	2300      	movs	r3, #0
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	2100      	movs	r1, #0
 8008866:	6978      	ldr	r0, [r7, #20]
 8008868:	f7ff ff88 	bl	800877c <xTimerGenericCommand>
 800886c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d113      	bne.n	800889c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	60fb      	str	r3, [r7, #12]
}
 8008886:	bf00      	nop
 8008888:	e7fe      	b.n	8008888 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008890:	f023 0301 	bic.w	r3, r3, #1
 8008894:	b2da      	uxtb	r2, r3
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	6a1b      	ldr	r3, [r3, #32]
 80088a0:	6978      	ldr	r0, [r7, #20]
 80088a2:	4798      	blx	r3
}
 80088a4:	bf00      	nop
 80088a6:	3718      	adds	r7, #24
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	20001500 	.word	0x20001500

080088b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088b8:	f107 0308 	add.w	r3, r7, #8
 80088bc:	4618      	mov	r0, r3
 80088be:	f000 f857 	bl	8008970 <prvGetNextExpireTime>
 80088c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	4619      	mov	r1, r3
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f000 f803 	bl	80088d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80088ce:	f000 f8d5 	bl	8008a7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088d2:	e7f1      	b.n	80088b8 <prvTimerTask+0x8>

080088d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80088de:	f7ff f93b 	bl	8007b58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80088e2:	f107 0308 	add.w	r3, r7, #8
 80088e6:	4618      	mov	r0, r3
 80088e8:	f000 f866 	bl	80089b8 <prvSampleTimeNow>
 80088ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d130      	bne.n	8008956 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10a      	bne.n	8008910 <prvProcessTimerOrBlockTask+0x3c>
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d806      	bhi.n	8008910 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008902:	f7ff f937 	bl	8007b74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008906:	68f9      	ldr	r1, [r7, #12]
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f7ff ff85 	bl	8008818 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800890e:	e024      	b.n	800895a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d008      	beq.n	8008928 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008916:	4b13      	ldr	r3, [pc, #76]	; (8008964 <prvProcessTimerOrBlockTask+0x90>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d101      	bne.n	8008924 <prvProcessTimerOrBlockTask+0x50>
 8008920:	2301      	movs	r3, #1
 8008922:	e000      	b.n	8008926 <prvProcessTimerOrBlockTask+0x52>
 8008924:	2300      	movs	r3, #0
 8008926:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008928:	4b0f      	ldr	r3, [pc, #60]	; (8008968 <prvProcessTimerOrBlockTask+0x94>)
 800892a:	6818      	ldr	r0, [r3, #0]
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	683a      	ldr	r2, [r7, #0]
 8008934:	4619      	mov	r1, r3
 8008936:	f7fe fe7f 	bl	8007638 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800893a:	f7ff f91b 	bl	8007b74 <xTaskResumeAll>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10a      	bne.n	800895a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008944:	4b09      	ldr	r3, [pc, #36]	; (800896c <prvProcessTimerOrBlockTask+0x98>)
 8008946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800894a:	601a      	str	r2, [r3, #0]
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	f3bf 8f6f 	isb	sy
}
 8008954:	e001      	b.n	800895a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008956:	f7ff f90d 	bl	8007b74 <xTaskResumeAll>
}
 800895a:	bf00      	nop
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	20001504 	.word	0x20001504
 8008968:	20001508 	.word	0x20001508
 800896c:	e000ed04 	.word	0xe000ed04

08008970 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008978:	4b0e      	ldr	r3, [pc, #56]	; (80089b4 <prvGetNextExpireTime+0x44>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d101      	bne.n	8008986 <prvGetNextExpireTime+0x16>
 8008982:	2201      	movs	r2, #1
 8008984:	e000      	b.n	8008988 <prvGetNextExpireTime+0x18>
 8008986:	2200      	movs	r2, #0
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d105      	bne.n	80089a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008994:	4b07      	ldr	r3, [pc, #28]	; (80089b4 <prvGetNextExpireTime+0x44>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	60fb      	str	r3, [r7, #12]
 800899e:	e001      	b.n	80089a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80089a0:	2300      	movs	r3, #0
 80089a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80089a4:	68fb      	ldr	r3, [r7, #12]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3714      	adds	r7, #20
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	20001500 	.word	0x20001500

080089b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80089c0:	f7ff f976 	bl	8007cb0 <xTaskGetTickCount>
 80089c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80089c6:	4b0b      	ldr	r3, [pc, #44]	; (80089f4 <prvSampleTimeNow+0x3c>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d205      	bcs.n	80089dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80089d0:	f000 f936 	bl	8008c40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	601a      	str	r2, [r3, #0]
 80089da:	e002      	b.n	80089e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80089e2:	4a04      	ldr	r2, [pc, #16]	; (80089f4 <prvSampleTimeNow+0x3c>)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80089e8:	68fb      	ldr	r3, [r7, #12]
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	20001510 	.word	0x20001510

080089f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b086      	sub	sp, #24
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]
 8008a04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008a06:	2300      	movs	r3, #0
 8008a08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d812      	bhi.n	8008a44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	1ad2      	subs	r2, r2, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d302      	bcc.n	8008a32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	617b      	str	r3, [r7, #20]
 8008a30:	e01b      	b.n	8008a6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a32:	4b10      	ldr	r3, [pc, #64]	; (8008a74 <prvInsertTimerInActiveList+0x7c>)
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	3304      	adds	r3, #4
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	f7fd fef6 	bl	800682e <vListInsert>
 8008a42:	e012      	b.n	8008a6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d206      	bcs.n	8008a5a <prvInsertTimerInActiveList+0x62>
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d302      	bcc.n	8008a5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008a54:	2301      	movs	r3, #1
 8008a56:	617b      	str	r3, [r7, #20]
 8008a58:	e007      	b.n	8008a6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a5a:	4b07      	ldr	r3, [pc, #28]	; (8008a78 <prvInsertTimerInActiveList+0x80>)
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	3304      	adds	r3, #4
 8008a62:	4619      	mov	r1, r3
 8008a64:	4610      	mov	r0, r2
 8008a66:	f7fd fee2 	bl	800682e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008a6a:	697b      	ldr	r3, [r7, #20]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3718      	adds	r7, #24
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	20001504 	.word	0x20001504
 8008a78:	20001500 	.word	0x20001500

08008a7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b08e      	sub	sp, #56	; 0x38
 8008a80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a82:	e0ca      	b.n	8008c1a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	da18      	bge.n	8008abc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008a8a:	1d3b      	adds	r3, r7, #4
 8008a8c:	3304      	adds	r3, #4
 8008a8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d10a      	bne.n	8008aac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9a:	f383 8811 	msr	BASEPRI, r3
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	f3bf 8f4f 	dsb	sy
 8008aa6:	61fb      	str	r3, [r7, #28]
}
 8008aa8:	bf00      	nop
 8008aaa:	e7fe      	b.n	8008aaa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ab2:	6850      	ldr	r0, [r2, #4]
 8008ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ab6:	6892      	ldr	r2, [r2, #8]
 8008ab8:	4611      	mov	r1, r2
 8008aba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	f2c0 80ab 	blt.w	8008c1a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aca:	695b      	ldr	r3, [r3, #20]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d004      	beq.n	8008ada <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad2:	3304      	adds	r3, #4
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7fd fee3 	bl	80068a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ada:	463b      	mov	r3, r7
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7ff ff6b 	bl	80089b8 <prvSampleTimeNow>
 8008ae2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b09      	cmp	r3, #9
 8008ae8:	f200 8096 	bhi.w	8008c18 <prvProcessReceivedCommands+0x19c>
 8008aec:	a201      	add	r2, pc, #4	; (adr r2, 8008af4 <prvProcessReceivedCommands+0x78>)
 8008aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af2:	bf00      	nop
 8008af4:	08008b1d 	.word	0x08008b1d
 8008af8:	08008b1d 	.word	0x08008b1d
 8008afc:	08008b1d 	.word	0x08008b1d
 8008b00:	08008b91 	.word	0x08008b91
 8008b04:	08008ba5 	.word	0x08008ba5
 8008b08:	08008bef 	.word	0x08008bef
 8008b0c:	08008b1d 	.word	0x08008b1d
 8008b10:	08008b1d 	.word	0x08008b1d
 8008b14:	08008b91 	.word	0x08008b91
 8008b18:	08008ba5 	.word	0x08008ba5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b22:	f043 0301 	orr.w	r3, r3, #1
 8008b26:	b2da      	uxtb	r2, r3
 8008b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	18d1      	adds	r1, r2, r3
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b3c:	f7ff ff5c 	bl	80089f8 <prvInsertTimerInActiveList>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d069      	beq.n	8008c1a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b48:	6a1b      	ldr	r3, [r3, #32]
 8008b4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b54:	f003 0304 	and.w	r3, r3, #4
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d05e      	beq.n	8008c1a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	441a      	add	r2, r3
 8008b64:	2300      	movs	r3, #0
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	2300      	movs	r3, #0
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b6e:	f7ff fe05 	bl	800877c <xTimerGenericCommand>
 8008b72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008b74:	6a3b      	ldr	r3, [r7, #32]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d14f      	bne.n	8008c1a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	61bb      	str	r3, [r7, #24]
}
 8008b8c:	bf00      	nop
 8008b8e:	e7fe      	b.n	8008b8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b96:	f023 0301 	bic.w	r3, r3, #1
 8008b9a:	b2da      	uxtb	r2, r3
 8008b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008ba2:	e03a      	b.n	8008c1a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008baa:	f043 0301 	orr.w	r3, r3, #1
 8008bae:	b2da      	uxtb	r2, r3
 8008bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d10a      	bne.n	8008bda <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc8:	f383 8811 	msr	BASEPRI, r3
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	f3bf 8f4f 	dsb	sy
 8008bd4:	617b      	str	r3, [r7, #20]
}
 8008bd6:	bf00      	nop
 8008bd8:	e7fe      	b.n	8008bd8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bdc:	699a      	ldr	r2, [r3, #24]
 8008bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be0:	18d1      	adds	r1, r2, r3
 8008be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008be6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008be8:	f7ff ff06 	bl	80089f8 <prvInsertTimerInActiveList>
					break;
 8008bec:	e015      	b.n	8008c1a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bf4:	f003 0302 	and.w	r3, r3, #2
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d103      	bne.n	8008c04 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bfe:	f000 fbdf 	bl	80093c0 <vPortFree>
 8008c02:	e00a      	b.n	8008c1a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c0a:	f023 0301 	bic.w	r3, r3, #1
 8008c0e:	b2da      	uxtb	r2, r3
 8008c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c16:	e000      	b.n	8008c1a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008c18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c1a:	4b08      	ldr	r3, [pc, #32]	; (8008c3c <prvProcessReceivedCommands+0x1c0>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	1d39      	adds	r1, r7, #4
 8008c20:	2200      	movs	r2, #0
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fe f9ca 	bl	8006fbc <xQueueReceive>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f47f af2a 	bne.w	8008a84 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008c30:	bf00      	nop
 8008c32:	bf00      	nop
 8008c34:	3730      	adds	r7, #48	; 0x30
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	20001508 	.word	0x20001508

08008c40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b088      	sub	sp, #32
 8008c44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c46:	e048      	b.n	8008cda <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c48:	4b2d      	ldr	r3, [pc, #180]	; (8008d00 <prvSwitchTimerLists+0xc0>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c52:	4b2b      	ldr	r3, [pc, #172]	; (8008d00 <prvSwitchTimerLists+0xc0>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	3304      	adds	r3, #4
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7fd fe1d 	bl	80068a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c74:	f003 0304 	and.w	r3, r3, #4
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d02e      	beq.n	8008cda <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	4413      	add	r3, r2
 8008c84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d90e      	bls.n	8008cac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	68ba      	ldr	r2, [r7, #8]
 8008c92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c9a:	4b19      	ldr	r3, [pc, #100]	; (8008d00 <prvSwitchTimerLists+0xc0>)
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	3304      	adds	r3, #4
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	4610      	mov	r0, r2
 8008ca6:	f7fd fdc2 	bl	800682e <vListInsert>
 8008caa:	e016      	b.n	8008cda <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008cac:	2300      	movs	r3, #0
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	693a      	ldr	r2, [r7, #16]
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	f7ff fd60 	bl	800877c <xTimerGenericCommand>
 8008cbc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10a      	bne.n	8008cda <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc8:	f383 8811 	msr	BASEPRI, r3
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f3bf 8f4f 	dsb	sy
 8008cd4:	603b      	str	r3, [r7, #0]
}
 8008cd6:	bf00      	nop
 8008cd8:	e7fe      	b.n	8008cd8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cda:	4b09      	ldr	r3, [pc, #36]	; (8008d00 <prvSwitchTimerLists+0xc0>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1b1      	bne.n	8008c48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008ce4:	4b06      	ldr	r3, [pc, #24]	; (8008d00 <prvSwitchTimerLists+0xc0>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008cea:	4b06      	ldr	r3, [pc, #24]	; (8008d04 <prvSwitchTimerLists+0xc4>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a04      	ldr	r2, [pc, #16]	; (8008d00 <prvSwitchTimerLists+0xc0>)
 8008cf0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008cf2:	4a04      	ldr	r2, [pc, #16]	; (8008d04 <prvSwitchTimerLists+0xc4>)
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	6013      	str	r3, [r2, #0]
}
 8008cf8:	bf00      	nop
 8008cfa:	3718      	adds	r7, #24
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	20001500 	.word	0x20001500
 8008d04:	20001504 	.word	0x20001504

08008d08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d0e:	f000 f969 	bl	8008fe4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d12:	4b15      	ldr	r3, [pc, #84]	; (8008d68 <prvCheckForValidListAndQueue+0x60>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d120      	bne.n	8008d5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d1a:	4814      	ldr	r0, [pc, #80]	; (8008d6c <prvCheckForValidListAndQueue+0x64>)
 8008d1c:	f7fd fd36 	bl	800678c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d20:	4813      	ldr	r0, [pc, #76]	; (8008d70 <prvCheckForValidListAndQueue+0x68>)
 8008d22:	f7fd fd33 	bl	800678c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d26:	4b13      	ldr	r3, [pc, #76]	; (8008d74 <prvCheckForValidListAndQueue+0x6c>)
 8008d28:	4a10      	ldr	r2, [pc, #64]	; (8008d6c <prvCheckForValidListAndQueue+0x64>)
 8008d2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d2c:	4b12      	ldr	r3, [pc, #72]	; (8008d78 <prvCheckForValidListAndQueue+0x70>)
 8008d2e:	4a10      	ldr	r2, [pc, #64]	; (8008d70 <prvCheckForValidListAndQueue+0x68>)
 8008d30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d32:	2300      	movs	r3, #0
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	4b11      	ldr	r3, [pc, #68]	; (8008d7c <prvCheckForValidListAndQueue+0x74>)
 8008d38:	4a11      	ldr	r2, [pc, #68]	; (8008d80 <prvCheckForValidListAndQueue+0x78>)
 8008d3a:	2110      	movs	r1, #16
 8008d3c:	200a      	movs	r0, #10
 8008d3e:	f7fd fe41 	bl	80069c4 <xQueueGenericCreateStatic>
 8008d42:	4603      	mov	r3, r0
 8008d44:	4a08      	ldr	r2, [pc, #32]	; (8008d68 <prvCheckForValidListAndQueue+0x60>)
 8008d46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008d48:	4b07      	ldr	r3, [pc, #28]	; (8008d68 <prvCheckForValidListAndQueue+0x60>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d005      	beq.n	8008d5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d50:	4b05      	ldr	r3, [pc, #20]	; (8008d68 <prvCheckForValidListAndQueue+0x60>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	490b      	ldr	r1, [pc, #44]	; (8008d84 <prvCheckForValidListAndQueue+0x7c>)
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7fe fc44 	bl	80075e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d5c:	f000 f972 	bl	8009044 <vPortExitCritical>
}
 8008d60:	bf00      	nop
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	20001508 	.word	0x20001508
 8008d6c:	200014d8 	.word	0x200014d8
 8008d70:	200014ec 	.word	0x200014ec
 8008d74:	20001500 	.word	0x20001500
 8008d78:	20001504 	.word	0x20001504
 8008d7c:	200015b4 	.word	0x200015b4
 8008d80:	20001514 	.word	0x20001514
 8008d84:	0800a658 	.word	0x0800a658

08008d88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	3b04      	subs	r3, #4
 8008d98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008da0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	3b04      	subs	r3, #4
 8008da6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	f023 0201 	bic.w	r2, r3, #1
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	3b04      	subs	r3, #4
 8008db6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008db8:	4a0c      	ldr	r2, [pc, #48]	; (8008dec <pxPortInitialiseStack+0x64>)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	3b14      	subs	r3, #20
 8008dc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	3b04      	subs	r3, #4
 8008dce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f06f 0202 	mvn.w	r2, #2
 8008dd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	3b20      	subs	r3, #32
 8008ddc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008dde:	68fb      	ldr	r3, [r7, #12]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3714      	adds	r7, #20
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr
 8008dec:	08008df1 	.word	0x08008df1

08008df0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008df6:	2300      	movs	r3, #0
 8008df8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008dfa:	4b12      	ldr	r3, [pc, #72]	; (8008e44 <prvTaskExitError+0x54>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e02:	d00a      	beq.n	8008e1a <prvTaskExitError+0x2a>
	__asm volatile
 8008e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e08:	f383 8811 	msr	BASEPRI, r3
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	60fb      	str	r3, [r7, #12]
}
 8008e16:	bf00      	nop
 8008e18:	e7fe      	b.n	8008e18 <prvTaskExitError+0x28>
	__asm volatile
 8008e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1e:	f383 8811 	msr	BASEPRI, r3
 8008e22:	f3bf 8f6f 	isb	sy
 8008e26:	f3bf 8f4f 	dsb	sy
 8008e2a:	60bb      	str	r3, [r7, #8]
}
 8008e2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e2e:	bf00      	nop
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d0fc      	beq.n	8008e30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e36:	bf00      	nop
 8008e38:	bf00      	nop
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr
 8008e44:	2000000c 	.word	0x2000000c
	...

08008e50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e50:	4b07      	ldr	r3, [pc, #28]	; (8008e70 <pxCurrentTCBConst2>)
 8008e52:	6819      	ldr	r1, [r3, #0]
 8008e54:	6808      	ldr	r0, [r1, #0]
 8008e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e5a:	f380 8809 	msr	PSP, r0
 8008e5e:	f3bf 8f6f 	isb	sy
 8008e62:	f04f 0000 	mov.w	r0, #0
 8008e66:	f380 8811 	msr	BASEPRI, r0
 8008e6a:	4770      	bx	lr
 8008e6c:	f3af 8000 	nop.w

08008e70 <pxCurrentTCBConst2>:
 8008e70:	20000fd8 	.word	0x20000fd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e74:	bf00      	nop
 8008e76:	bf00      	nop

08008e78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008e78:	4808      	ldr	r0, [pc, #32]	; (8008e9c <prvPortStartFirstTask+0x24>)
 8008e7a:	6800      	ldr	r0, [r0, #0]
 8008e7c:	6800      	ldr	r0, [r0, #0]
 8008e7e:	f380 8808 	msr	MSP, r0
 8008e82:	f04f 0000 	mov.w	r0, #0
 8008e86:	f380 8814 	msr	CONTROL, r0
 8008e8a:	b662      	cpsie	i
 8008e8c:	b661      	cpsie	f
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	f3bf 8f6f 	isb	sy
 8008e96:	df00      	svc	0
 8008e98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008e9a:	bf00      	nop
 8008e9c:	e000ed08 	.word	0xe000ed08

08008ea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b086      	sub	sp, #24
 8008ea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ea6:	4b46      	ldr	r3, [pc, #280]	; (8008fc0 <xPortStartScheduler+0x120>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a46      	ldr	r2, [pc, #280]	; (8008fc4 <xPortStartScheduler+0x124>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d10a      	bne.n	8008ec6 <xPortStartScheduler+0x26>
	__asm volatile
 8008eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb4:	f383 8811 	msr	BASEPRI, r3
 8008eb8:	f3bf 8f6f 	isb	sy
 8008ebc:	f3bf 8f4f 	dsb	sy
 8008ec0:	613b      	str	r3, [r7, #16]
}
 8008ec2:	bf00      	nop
 8008ec4:	e7fe      	b.n	8008ec4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ec6:	4b3e      	ldr	r3, [pc, #248]	; (8008fc0 <xPortStartScheduler+0x120>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a3f      	ldr	r2, [pc, #252]	; (8008fc8 <xPortStartScheduler+0x128>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d10a      	bne.n	8008ee6 <xPortStartScheduler+0x46>
	__asm volatile
 8008ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed4:	f383 8811 	msr	BASEPRI, r3
 8008ed8:	f3bf 8f6f 	isb	sy
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	60fb      	str	r3, [r7, #12]
}
 8008ee2:	bf00      	nop
 8008ee4:	e7fe      	b.n	8008ee4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ee6:	4b39      	ldr	r3, [pc, #228]	; (8008fcc <xPortStartScheduler+0x12c>)
 8008ee8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	22ff      	movs	r2, #255	; 0xff
 8008ef6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f00:	78fb      	ldrb	r3, [r7, #3]
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f08:	b2da      	uxtb	r2, r3
 8008f0a:	4b31      	ldr	r3, [pc, #196]	; (8008fd0 <xPortStartScheduler+0x130>)
 8008f0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f0e:	4b31      	ldr	r3, [pc, #196]	; (8008fd4 <xPortStartScheduler+0x134>)
 8008f10:	2207      	movs	r2, #7
 8008f12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f14:	e009      	b.n	8008f2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008f16:	4b2f      	ldr	r3, [pc, #188]	; (8008fd4 <xPortStartScheduler+0x134>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	4a2d      	ldr	r2, [pc, #180]	; (8008fd4 <xPortStartScheduler+0x134>)
 8008f1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f20:	78fb      	ldrb	r3, [r7, #3]
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	005b      	lsls	r3, r3, #1
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f2a:	78fb      	ldrb	r3, [r7, #3]
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f32:	2b80      	cmp	r3, #128	; 0x80
 8008f34:	d0ef      	beq.n	8008f16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f36:	4b27      	ldr	r3, [pc, #156]	; (8008fd4 <xPortStartScheduler+0x134>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f1c3 0307 	rsb	r3, r3, #7
 8008f3e:	2b04      	cmp	r3, #4
 8008f40:	d00a      	beq.n	8008f58 <xPortStartScheduler+0xb8>
	__asm volatile
 8008f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f46:	f383 8811 	msr	BASEPRI, r3
 8008f4a:	f3bf 8f6f 	isb	sy
 8008f4e:	f3bf 8f4f 	dsb	sy
 8008f52:	60bb      	str	r3, [r7, #8]
}
 8008f54:	bf00      	nop
 8008f56:	e7fe      	b.n	8008f56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f58:	4b1e      	ldr	r3, [pc, #120]	; (8008fd4 <xPortStartScheduler+0x134>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	021b      	lsls	r3, r3, #8
 8008f5e:	4a1d      	ldr	r2, [pc, #116]	; (8008fd4 <xPortStartScheduler+0x134>)
 8008f60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f62:	4b1c      	ldr	r3, [pc, #112]	; (8008fd4 <xPortStartScheduler+0x134>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f6a:	4a1a      	ldr	r2, [pc, #104]	; (8008fd4 <xPortStartScheduler+0x134>)
 8008f6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	b2da      	uxtb	r2, r3
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f76:	4b18      	ldr	r3, [pc, #96]	; (8008fd8 <xPortStartScheduler+0x138>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a17      	ldr	r2, [pc, #92]	; (8008fd8 <xPortStartScheduler+0x138>)
 8008f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f82:	4b15      	ldr	r3, [pc, #84]	; (8008fd8 <xPortStartScheduler+0x138>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a14      	ldr	r2, [pc, #80]	; (8008fd8 <xPortStartScheduler+0x138>)
 8008f88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008f8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008f8e:	f000 f8dd 	bl	800914c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008f92:	4b12      	ldr	r3, [pc, #72]	; (8008fdc <xPortStartScheduler+0x13c>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008f98:	f000 f8fc 	bl	8009194 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008f9c:	4b10      	ldr	r3, [pc, #64]	; (8008fe0 <xPortStartScheduler+0x140>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a0f      	ldr	r2, [pc, #60]	; (8008fe0 <xPortStartScheduler+0x140>)
 8008fa2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008fa6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008fa8:	f7ff ff66 	bl	8008e78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008fac:	f7fe ff4a 	bl	8007e44 <vTaskSwitchContext>
	prvTaskExitError();
 8008fb0:	f7ff ff1e 	bl	8008df0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3718      	adds	r7, #24
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	e000ed00 	.word	0xe000ed00
 8008fc4:	410fc271 	.word	0x410fc271
 8008fc8:	410fc270 	.word	0x410fc270
 8008fcc:	e000e400 	.word	0xe000e400
 8008fd0:	20001604 	.word	0x20001604
 8008fd4:	20001608 	.word	0x20001608
 8008fd8:	e000ed20 	.word	0xe000ed20
 8008fdc:	2000000c 	.word	0x2000000c
 8008fe0:	e000ef34 	.word	0xe000ef34

08008fe4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
	__asm volatile
 8008fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fee:	f383 8811 	msr	BASEPRI, r3
 8008ff2:	f3bf 8f6f 	isb	sy
 8008ff6:	f3bf 8f4f 	dsb	sy
 8008ffa:	607b      	str	r3, [r7, #4]
}
 8008ffc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008ffe:	4b0f      	ldr	r3, [pc, #60]	; (800903c <vPortEnterCritical+0x58>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	3301      	adds	r3, #1
 8009004:	4a0d      	ldr	r2, [pc, #52]	; (800903c <vPortEnterCritical+0x58>)
 8009006:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009008:	4b0c      	ldr	r3, [pc, #48]	; (800903c <vPortEnterCritical+0x58>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2b01      	cmp	r3, #1
 800900e:	d10f      	bne.n	8009030 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009010:	4b0b      	ldr	r3, [pc, #44]	; (8009040 <vPortEnterCritical+0x5c>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00a      	beq.n	8009030 <vPortEnterCritical+0x4c>
	__asm volatile
 800901a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901e:	f383 8811 	msr	BASEPRI, r3
 8009022:	f3bf 8f6f 	isb	sy
 8009026:	f3bf 8f4f 	dsb	sy
 800902a:	603b      	str	r3, [r7, #0]
}
 800902c:	bf00      	nop
 800902e:	e7fe      	b.n	800902e <vPortEnterCritical+0x4a>
	}
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	2000000c 	.word	0x2000000c
 8009040:	e000ed04 	.word	0xe000ed04

08009044 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800904a:	4b12      	ldr	r3, [pc, #72]	; (8009094 <vPortExitCritical+0x50>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d10a      	bne.n	8009068 <vPortExitCritical+0x24>
	__asm volatile
 8009052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009056:	f383 8811 	msr	BASEPRI, r3
 800905a:	f3bf 8f6f 	isb	sy
 800905e:	f3bf 8f4f 	dsb	sy
 8009062:	607b      	str	r3, [r7, #4]
}
 8009064:	bf00      	nop
 8009066:	e7fe      	b.n	8009066 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009068:	4b0a      	ldr	r3, [pc, #40]	; (8009094 <vPortExitCritical+0x50>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	3b01      	subs	r3, #1
 800906e:	4a09      	ldr	r2, [pc, #36]	; (8009094 <vPortExitCritical+0x50>)
 8009070:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009072:	4b08      	ldr	r3, [pc, #32]	; (8009094 <vPortExitCritical+0x50>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d105      	bne.n	8009086 <vPortExitCritical+0x42>
 800907a:	2300      	movs	r3, #0
 800907c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	f383 8811 	msr	BASEPRI, r3
}
 8009084:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009086:	bf00      	nop
 8009088:	370c      	adds	r7, #12
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	2000000c 	.word	0x2000000c
	...

080090a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090a0:	f3ef 8009 	mrs	r0, PSP
 80090a4:	f3bf 8f6f 	isb	sy
 80090a8:	4b15      	ldr	r3, [pc, #84]	; (8009100 <pxCurrentTCBConst>)
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	f01e 0f10 	tst.w	lr, #16
 80090b0:	bf08      	it	eq
 80090b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80090b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ba:	6010      	str	r0, [r2, #0]
 80090bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80090c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80090c4:	f380 8811 	msr	BASEPRI, r0
 80090c8:	f3bf 8f4f 	dsb	sy
 80090cc:	f3bf 8f6f 	isb	sy
 80090d0:	f7fe feb8 	bl	8007e44 <vTaskSwitchContext>
 80090d4:	f04f 0000 	mov.w	r0, #0
 80090d8:	f380 8811 	msr	BASEPRI, r0
 80090dc:	bc09      	pop	{r0, r3}
 80090de:	6819      	ldr	r1, [r3, #0]
 80090e0:	6808      	ldr	r0, [r1, #0]
 80090e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e6:	f01e 0f10 	tst.w	lr, #16
 80090ea:	bf08      	it	eq
 80090ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80090f0:	f380 8809 	msr	PSP, r0
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	f3af 8000 	nop.w

08009100 <pxCurrentTCBConst>:
 8009100:	20000fd8 	.word	0x20000fd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009104:	bf00      	nop
 8009106:	bf00      	nop

08009108 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
	__asm volatile
 800910e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009112:	f383 8811 	msr	BASEPRI, r3
 8009116:	f3bf 8f6f 	isb	sy
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	607b      	str	r3, [r7, #4]
}
 8009120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009122:	f7fe fdd5 	bl	8007cd0 <xTaskIncrementTick>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d003      	beq.n	8009134 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800912c:	4b06      	ldr	r3, [pc, #24]	; (8009148 <xPortSysTickHandler+0x40>)
 800912e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	2300      	movs	r3, #0
 8009136:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	f383 8811 	msr	BASEPRI, r3
}
 800913e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009140:	bf00      	nop
 8009142:	3708      	adds	r7, #8
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	e000ed04 	.word	0xe000ed04

0800914c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800914c:	b480      	push	{r7}
 800914e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009150:	4b0b      	ldr	r3, [pc, #44]	; (8009180 <vPortSetupTimerInterrupt+0x34>)
 8009152:	2200      	movs	r2, #0
 8009154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009156:	4b0b      	ldr	r3, [pc, #44]	; (8009184 <vPortSetupTimerInterrupt+0x38>)
 8009158:	2200      	movs	r2, #0
 800915a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800915c:	4b0a      	ldr	r3, [pc, #40]	; (8009188 <vPortSetupTimerInterrupt+0x3c>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a0a      	ldr	r2, [pc, #40]	; (800918c <vPortSetupTimerInterrupt+0x40>)
 8009162:	fba2 2303 	umull	r2, r3, r2, r3
 8009166:	099b      	lsrs	r3, r3, #6
 8009168:	4a09      	ldr	r2, [pc, #36]	; (8009190 <vPortSetupTimerInterrupt+0x44>)
 800916a:	3b01      	subs	r3, #1
 800916c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800916e:	4b04      	ldr	r3, [pc, #16]	; (8009180 <vPortSetupTimerInterrupt+0x34>)
 8009170:	2207      	movs	r2, #7
 8009172:	601a      	str	r2, [r3, #0]
}
 8009174:	bf00      	nop
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	e000e010 	.word	0xe000e010
 8009184:	e000e018 	.word	0xe000e018
 8009188:	20000000 	.word	0x20000000
 800918c:	10624dd3 	.word	0x10624dd3
 8009190:	e000e014 	.word	0xe000e014

08009194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009194:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80091a4 <vPortEnableVFP+0x10>
 8009198:	6801      	ldr	r1, [r0, #0]
 800919a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800919e:	6001      	str	r1, [r0, #0]
 80091a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80091a2:	bf00      	nop
 80091a4:	e000ed88 	.word	0xe000ed88

080091a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80091a8:	b480      	push	{r7}
 80091aa:	b085      	sub	sp, #20
 80091ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80091ae:	f3ef 8305 	mrs	r3, IPSR
 80091b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2b0f      	cmp	r3, #15
 80091b8:	d914      	bls.n	80091e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80091ba:	4a17      	ldr	r2, [pc, #92]	; (8009218 <vPortValidateInterruptPriority+0x70>)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	4413      	add	r3, r2
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80091c4:	4b15      	ldr	r3, [pc, #84]	; (800921c <vPortValidateInterruptPriority+0x74>)
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	7afa      	ldrb	r2, [r7, #11]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d20a      	bcs.n	80091e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80091ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	607b      	str	r3, [r7, #4]
}
 80091e0:	bf00      	nop
 80091e2:	e7fe      	b.n	80091e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80091e4:	4b0e      	ldr	r3, [pc, #56]	; (8009220 <vPortValidateInterruptPriority+0x78>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80091ec:	4b0d      	ldr	r3, [pc, #52]	; (8009224 <vPortValidateInterruptPriority+0x7c>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d90a      	bls.n	800920a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80091f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f8:	f383 8811 	msr	BASEPRI, r3
 80091fc:	f3bf 8f6f 	isb	sy
 8009200:	f3bf 8f4f 	dsb	sy
 8009204:	603b      	str	r3, [r7, #0]
}
 8009206:	bf00      	nop
 8009208:	e7fe      	b.n	8009208 <vPortValidateInterruptPriority+0x60>
	}
 800920a:	bf00      	nop
 800920c:	3714      	adds	r7, #20
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	e000e3f0 	.word	0xe000e3f0
 800921c:	20001604 	.word	0x20001604
 8009220:	e000ed0c 	.word	0xe000ed0c
 8009224:	20001608 	.word	0x20001608

08009228 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b08a      	sub	sp, #40	; 0x28
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009230:	2300      	movs	r3, #0
 8009232:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009234:	f7fe fc90 	bl	8007b58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009238:	4b5b      	ldr	r3, [pc, #364]	; (80093a8 <pvPortMalloc+0x180>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d101      	bne.n	8009244 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009240:	f000 f920 	bl	8009484 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009244:	4b59      	ldr	r3, [pc, #356]	; (80093ac <pvPortMalloc+0x184>)
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4013      	ands	r3, r2
 800924c:	2b00      	cmp	r3, #0
 800924e:	f040 8093 	bne.w	8009378 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d01d      	beq.n	8009294 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009258:	2208      	movs	r2, #8
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4413      	add	r3, r2
 800925e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f003 0307 	and.w	r3, r3, #7
 8009266:	2b00      	cmp	r3, #0
 8009268:	d014      	beq.n	8009294 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f023 0307 	bic.w	r3, r3, #7
 8009270:	3308      	adds	r3, #8
 8009272:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f003 0307 	and.w	r3, r3, #7
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00a      	beq.n	8009294 <pvPortMalloc+0x6c>
	__asm volatile
 800927e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	617b      	str	r3, [r7, #20]
}
 8009290:	bf00      	nop
 8009292:	e7fe      	b.n	8009292 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d06e      	beq.n	8009378 <pvPortMalloc+0x150>
 800929a:	4b45      	ldr	r3, [pc, #276]	; (80093b0 <pvPortMalloc+0x188>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d869      	bhi.n	8009378 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80092a4:	4b43      	ldr	r3, [pc, #268]	; (80093b4 <pvPortMalloc+0x18c>)
 80092a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80092a8:	4b42      	ldr	r3, [pc, #264]	; (80093b4 <pvPortMalloc+0x18c>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092ae:	e004      	b.n	80092ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80092b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80092b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d903      	bls.n	80092cc <pvPortMalloc+0xa4>
 80092c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1f1      	bne.n	80092b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80092cc:	4b36      	ldr	r3, [pc, #216]	; (80093a8 <pvPortMalloc+0x180>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d050      	beq.n	8009378 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80092d6:	6a3b      	ldr	r3, [r7, #32]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2208      	movs	r2, #8
 80092dc:	4413      	add	r3, r2
 80092de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80092e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	6a3b      	ldr	r3, [r7, #32]
 80092e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80092e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ea:	685a      	ldr	r2, [r3, #4]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	1ad2      	subs	r2, r2, r3
 80092f0:	2308      	movs	r3, #8
 80092f2:	005b      	lsls	r3, r3, #1
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d91f      	bls.n	8009338 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80092f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4413      	add	r3, r2
 80092fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	f003 0307 	and.w	r3, r3, #7
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00a      	beq.n	8009320 <pvPortMalloc+0xf8>
	__asm volatile
 800930a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930e:	f383 8811 	msr	BASEPRI, r3
 8009312:	f3bf 8f6f 	isb	sy
 8009316:	f3bf 8f4f 	dsb	sy
 800931a:	613b      	str	r3, [r7, #16]
}
 800931c:	bf00      	nop
 800931e:	e7fe      	b.n	800931e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009322:	685a      	ldr	r2, [r3, #4]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	1ad2      	subs	r2, r2, r3
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800932c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009332:	69b8      	ldr	r0, [r7, #24]
 8009334:	f000 f908 	bl	8009548 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009338:	4b1d      	ldr	r3, [pc, #116]	; (80093b0 <pvPortMalloc+0x188>)
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	4a1b      	ldr	r2, [pc, #108]	; (80093b0 <pvPortMalloc+0x188>)
 8009344:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009346:	4b1a      	ldr	r3, [pc, #104]	; (80093b0 <pvPortMalloc+0x188>)
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	4b1b      	ldr	r3, [pc, #108]	; (80093b8 <pvPortMalloc+0x190>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	429a      	cmp	r2, r3
 8009350:	d203      	bcs.n	800935a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009352:	4b17      	ldr	r3, [pc, #92]	; (80093b0 <pvPortMalloc+0x188>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a18      	ldr	r2, [pc, #96]	; (80093b8 <pvPortMalloc+0x190>)
 8009358:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800935a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935c:	685a      	ldr	r2, [r3, #4]
 800935e:	4b13      	ldr	r3, [pc, #76]	; (80093ac <pvPortMalloc+0x184>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	431a      	orrs	r2, r3
 8009364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009366:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936a:	2200      	movs	r2, #0
 800936c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800936e:	4b13      	ldr	r3, [pc, #76]	; (80093bc <pvPortMalloc+0x194>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	3301      	adds	r3, #1
 8009374:	4a11      	ldr	r2, [pc, #68]	; (80093bc <pvPortMalloc+0x194>)
 8009376:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009378:	f7fe fbfc 	bl	8007b74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	f003 0307 	and.w	r3, r3, #7
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00a      	beq.n	800939c <pvPortMalloc+0x174>
	__asm volatile
 8009386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938a:	f383 8811 	msr	BASEPRI, r3
 800938e:	f3bf 8f6f 	isb	sy
 8009392:	f3bf 8f4f 	dsb	sy
 8009396:	60fb      	str	r3, [r7, #12]
}
 8009398:	bf00      	nop
 800939a:	e7fe      	b.n	800939a <pvPortMalloc+0x172>
	return pvReturn;
 800939c:	69fb      	ldr	r3, [r7, #28]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3728      	adds	r7, #40	; 0x28
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	2000393c 	.word	0x2000393c
 80093ac:	20003950 	.word	0x20003950
 80093b0:	20003940 	.word	0x20003940
 80093b4:	20003934 	.word	0x20003934
 80093b8:	20003944 	.word	0x20003944
 80093bc:	20003948 	.word	0x20003948

080093c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b086      	sub	sp, #24
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d04d      	beq.n	800946e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80093d2:	2308      	movs	r3, #8
 80093d4:	425b      	negs	r3, r3
 80093d6:	697a      	ldr	r2, [r7, #20]
 80093d8:	4413      	add	r3, r2
 80093da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	685a      	ldr	r2, [r3, #4]
 80093e4:	4b24      	ldr	r3, [pc, #144]	; (8009478 <vPortFree+0xb8>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4013      	ands	r3, r2
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d10a      	bne.n	8009404 <vPortFree+0x44>
	__asm volatile
 80093ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f2:	f383 8811 	msr	BASEPRI, r3
 80093f6:	f3bf 8f6f 	isb	sy
 80093fa:	f3bf 8f4f 	dsb	sy
 80093fe:	60fb      	str	r3, [r7, #12]
}
 8009400:	bf00      	nop
 8009402:	e7fe      	b.n	8009402 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00a      	beq.n	8009422 <vPortFree+0x62>
	__asm volatile
 800940c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009410:	f383 8811 	msr	BASEPRI, r3
 8009414:	f3bf 8f6f 	isb	sy
 8009418:	f3bf 8f4f 	dsb	sy
 800941c:	60bb      	str	r3, [r7, #8]
}
 800941e:	bf00      	nop
 8009420:	e7fe      	b.n	8009420 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	685a      	ldr	r2, [r3, #4]
 8009426:	4b14      	ldr	r3, [pc, #80]	; (8009478 <vPortFree+0xb8>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4013      	ands	r3, r2
 800942c:	2b00      	cmp	r3, #0
 800942e:	d01e      	beq.n	800946e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d11a      	bne.n	800946e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	685a      	ldr	r2, [r3, #4]
 800943c:	4b0e      	ldr	r3, [pc, #56]	; (8009478 <vPortFree+0xb8>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	43db      	mvns	r3, r3
 8009442:	401a      	ands	r2, r3
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009448:	f7fe fb86 	bl	8007b58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	685a      	ldr	r2, [r3, #4]
 8009450:	4b0a      	ldr	r3, [pc, #40]	; (800947c <vPortFree+0xbc>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4413      	add	r3, r2
 8009456:	4a09      	ldr	r2, [pc, #36]	; (800947c <vPortFree+0xbc>)
 8009458:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800945a:	6938      	ldr	r0, [r7, #16]
 800945c:	f000 f874 	bl	8009548 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009460:	4b07      	ldr	r3, [pc, #28]	; (8009480 <vPortFree+0xc0>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	3301      	adds	r3, #1
 8009466:	4a06      	ldr	r2, [pc, #24]	; (8009480 <vPortFree+0xc0>)
 8009468:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800946a:	f7fe fb83 	bl	8007b74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800946e:	bf00      	nop
 8009470:	3718      	adds	r7, #24
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	20003950 	.word	0x20003950
 800947c:	20003940 	.word	0x20003940
 8009480:	2000394c 	.word	0x2000394c

08009484 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800948a:	f242 3328 	movw	r3, #9000	; 0x2328
 800948e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009490:	4b27      	ldr	r3, [pc, #156]	; (8009530 <prvHeapInit+0xac>)
 8009492:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f003 0307 	and.w	r3, r3, #7
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00c      	beq.n	80094b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	3307      	adds	r3, #7
 80094a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f023 0307 	bic.w	r3, r3, #7
 80094aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80094ac:	68ba      	ldr	r2, [r7, #8]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	4a1f      	ldr	r2, [pc, #124]	; (8009530 <prvHeapInit+0xac>)
 80094b4:	4413      	add	r3, r2
 80094b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80094bc:	4a1d      	ldr	r2, [pc, #116]	; (8009534 <prvHeapInit+0xb0>)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80094c2:	4b1c      	ldr	r3, [pc, #112]	; (8009534 <prvHeapInit+0xb0>)
 80094c4:	2200      	movs	r2, #0
 80094c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	68ba      	ldr	r2, [r7, #8]
 80094cc:	4413      	add	r3, r2
 80094ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80094d0:	2208      	movs	r2, #8
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	1a9b      	subs	r3, r3, r2
 80094d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f023 0307 	bic.w	r3, r3, #7
 80094de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	4a15      	ldr	r2, [pc, #84]	; (8009538 <prvHeapInit+0xb4>)
 80094e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80094e6:	4b14      	ldr	r3, [pc, #80]	; (8009538 <prvHeapInit+0xb4>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2200      	movs	r2, #0
 80094ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80094ee:	4b12      	ldr	r3, [pc, #72]	; (8009538 <prvHeapInit+0xb4>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2200      	movs	r2, #0
 80094f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	1ad2      	subs	r2, r2, r3
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009504:	4b0c      	ldr	r3, [pc, #48]	; (8009538 <prvHeapInit+0xb4>)
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	4a0a      	ldr	r2, [pc, #40]	; (800953c <prvHeapInit+0xb8>)
 8009512:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	4a09      	ldr	r2, [pc, #36]	; (8009540 <prvHeapInit+0xbc>)
 800951a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800951c:	4b09      	ldr	r3, [pc, #36]	; (8009544 <prvHeapInit+0xc0>)
 800951e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009522:	601a      	str	r2, [r3, #0]
}
 8009524:	bf00      	nop
 8009526:	3714      	adds	r7, #20
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr
 8009530:	2000160c 	.word	0x2000160c
 8009534:	20003934 	.word	0x20003934
 8009538:	2000393c 	.word	0x2000393c
 800953c:	20003944 	.word	0x20003944
 8009540:	20003940 	.word	0x20003940
 8009544:	20003950 	.word	0x20003950

08009548 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009548:	b480      	push	{r7}
 800954a:	b085      	sub	sp, #20
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009550:	4b28      	ldr	r3, [pc, #160]	; (80095f4 <prvInsertBlockIntoFreeList+0xac>)
 8009552:	60fb      	str	r3, [r7, #12]
 8009554:	e002      	b.n	800955c <prvInsertBlockIntoFreeList+0x14>
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	60fb      	str	r3, [r7, #12]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	429a      	cmp	r2, r3
 8009564:	d8f7      	bhi.n	8009556 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	68ba      	ldr	r2, [r7, #8]
 8009570:	4413      	add	r3, r2
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	429a      	cmp	r2, r3
 8009576:	d108      	bne.n	800958a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	685a      	ldr	r2, [r3, #4]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	441a      	add	r2, r3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	441a      	add	r2, r3
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	429a      	cmp	r2, r3
 800959c:	d118      	bne.n	80095d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	4b15      	ldr	r3, [pc, #84]	; (80095f8 <prvInsertBlockIntoFreeList+0xb0>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d00d      	beq.n	80095c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	685a      	ldr	r2, [r3, #4]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	441a      	add	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	601a      	str	r2, [r3, #0]
 80095c4:	e008      	b.n	80095d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80095c6:	4b0c      	ldr	r3, [pc, #48]	; (80095f8 <prvInsertBlockIntoFreeList+0xb0>)
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	601a      	str	r2, [r3, #0]
 80095ce:	e003      	b.n	80095d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80095d8:	68fa      	ldr	r2, [r7, #12]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d002      	beq.n	80095e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095e6:	bf00      	nop
 80095e8:	3714      	adds	r7, #20
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	20003934 	.word	0x20003934
 80095f8:	2000393c 	.word	0x2000393c

080095fc <std>:
 80095fc:	2300      	movs	r3, #0
 80095fe:	b510      	push	{r4, lr}
 8009600:	4604      	mov	r4, r0
 8009602:	e9c0 3300 	strd	r3, r3, [r0]
 8009606:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800960a:	6083      	str	r3, [r0, #8]
 800960c:	8181      	strh	r1, [r0, #12]
 800960e:	6643      	str	r3, [r0, #100]	; 0x64
 8009610:	81c2      	strh	r2, [r0, #14]
 8009612:	6183      	str	r3, [r0, #24]
 8009614:	4619      	mov	r1, r3
 8009616:	2208      	movs	r2, #8
 8009618:	305c      	adds	r0, #92	; 0x5c
 800961a:	f000 f9f7 	bl	8009a0c <memset>
 800961e:	4b0d      	ldr	r3, [pc, #52]	; (8009654 <std+0x58>)
 8009620:	6263      	str	r3, [r4, #36]	; 0x24
 8009622:	4b0d      	ldr	r3, [pc, #52]	; (8009658 <std+0x5c>)
 8009624:	62a3      	str	r3, [r4, #40]	; 0x28
 8009626:	4b0d      	ldr	r3, [pc, #52]	; (800965c <std+0x60>)
 8009628:	62e3      	str	r3, [r4, #44]	; 0x2c
 800962a:	4b0d      	ldr	r3, [pc, #52]	; (8009660 <std+0x64>)
 800962c:	6323      	str	r3, [r4, #48]	; 0x30
 800962e:	4b0d      	ldr	r3, [pc, #52]	; (8009664 <std+0x68>)
 8009630:	6224      	str	r4, [r4, #32]
 8009632:	429c      	cmp	r4, r3
 8009634:	d006      	beq.n	8009644 <std+0x48>
 8009636:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800963a:	4294      	cmp	r4, r2
 800963c:	d002      	beq.n	8009644 <std+0x48>
 800963e:	33d0      	adds	r3, #208	; 0xd0
 8009640:	429c      	cmp	r4, r3
 8009642:	d105      	bne.n	8009650 <std+0x54>
 8009644:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800964c:	f000 baac 	b.w	8009ba8 <__retarget_lock_init_recursive>
 8009650:	bd10      	pop	{r4, pc}
 8009652:	bf00      	nop
 8009654:	0800985d 	.word	0x0800985d
 8009658:	0800987f 	.word	0x0800987f
 800965c:	080098b7 	.word	0x080098b7
 8009660:	080098db 	.word	0x080098db
 8009664:	20003954 	.word	0x20003954

08009668 <stdio_exit_handler>:
 8009668:	4a02      	ldr	r2, [pc, #8]	; (8009674 <stdio_exit_handler+0xc>)
 800966a:	4903      	ldr	r1, [pc, #12]	; (8009678 <stdio_exit_handler+0x10>)
 800966c:	4803      	ldr	r0, [pc, #12]	; (800967c <stdio_exit_handler+0x14>)
 800966e:	f000 b869 	b.w	8009744 <_fwalk_sglue>
 8009672:	bf00      	nop
 8009674:	20000010 	.word	0x20000010
 8009678:	0800a471 	.word	0x0800a471
 800967c:	2000001c 	.word	0x2000001c

08009680 <cleanup_stdio>:
 8009680:	6841      	ldr	r1, [r0, #4]
 8009682:	4b0c      	ldr	r3, [pc, #48]	; (80096b4 <cleanup_stdio+0x34>)
 8009684:	4299      	cmp	r1, r3
 8009686:	b510      	push	{r4, lr}
 8009688:	4604      	mov	r4, r0
 800968a:	d001      	beq.n	8009690 <cleanup_stdio+0x10>
 800968c:	f000 fef0 	bl	800a470 <_fflush_r>
 8009690:	68a1      	ldr	r1, [r4, #8]
 8009692:	4b09      	ldr	r3, [pc, #36]	; (80096b8 <cleanup_stdio+0x38>)
 8009694:	4299      	cmp	r1, r3
 8009696:	d002      	beq.n	800969e <cleanup_stdio+0x1e>
 8009698:	4620      	mov	r0, r4
 800969a:	f000 fee9 	bl	800a470 <_fflush_r>
 800969e:	68e1      	ldr	r1, [r4, #12]
 80096a0:	4b06      	ldr	r3, [pc, #24]	; (80096bc <cleanup_stdio+0x3c>)
 80096a2:	4299      	cmp	r1, r3
 80096a4:	d004      	beq.n	80096b0 <cleanup_stdio+0x30>
 80096a6:	4620      	mov	r0, r4
 80096a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096ac:	f000 bee0 	b.w	800a470 <_fflush_r>
 80096b0:	bd10      	pop	{r4, pc}
 80096b2:	bf00      	nop
 80096b4:	20003954 	.word	0x20003954
 80096b8:	200039bc 	.word	0x200039bc
 80096bc:	20003a24 	.word	0x20003a24

080096c0 <global_stdio_init.part.0>:
 80096c0:	b510      	push	{r4, lr}
 80096c2:	4b0b      	ldr	r3, [pc, #44]	; (80096f0 <global_stdio_init.part.0+0x30>)
 80096c4:	4c0b      	ldr	r4, [pc, #44]	; (80096f4 <global_stdio_init.part.0+0x34>)
 80096c6:	4a0c      	ldr	r2, [pc, #48]	; (80096f8 <global_stdio_init.part.0+0x38>)
 80096c8:	601a      	str	r2, [r3, #0]
 80096ca:	4620      	mov	r0, r4
 80096cc:	2200      	movs	r2, #0
 80096ce:	2104      	movs	r1, #4
 80096d0:	f7ff ff94 	bl	80095fc <std>
 80096d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80096d8:	2201      	movs	r2, #1
 80096da:	2109      	movs	r1, #9
 80096dc:	f7ff ff8e 	bl	80095fc <std>
 80096e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80096e4:	2202      	movs	r2, #2
 80096e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096ea:	2112      	movs	r1, #18
 80096ec:	f7ff bf86 	b.w	80095fc <std>
 80096f0:	20003a8c 	.word	0x20003a8c
 80096f4:	20003954 	.word	0x20003954
 80096f8:	08009669 	.word	0x08009669

080096fc <__sfp_lock_acquire>:
 80096fc:	4801      	ldr	r0, [pc, #4]	; (8009704 <__sfp_lock_acquire+0x8>)
 80096fe:	f000 ba54 	b.w	8009baa <__retarget_lock_acquire_recursive>
 8009702:	bf00      	nop
 8009704:	20003a95 	.word	0x20003a95

08009708 <__sfp_lock_release>:
 8009708:	4801      	ldr	r0, [pc, #4]	; (8009710 <__sfp_lock_release+0x8>)
 800970a:	f000 ba4f 	b.w	8009bac <__retarget_lock_release_recursive>
 800970e:	bf00      	nop
 8009710:	20003a95 	.word	0x20003a95

08009714 <__sinit>:
 8009714:	b510      	push	{r4, lr}
 8009716:	4604      	mov	r4, r0
 8009718:	f7ff fff0 	bl	80096fc <__sfp_lock_acquire>
 800971c:	6a23      	ldr	r3, [r4, #32]
 800971e:	b11b      	cbz	r3, 8009728 <__sinit+0x14>
 8009720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009724:	f7ff bff0 	b.w	8009708 <__sfp_lock_release>
 8009728:	4b04      	ldr	r3, [pc, #16]	; (800973c <__sinit+0x28>)
 800972a:	6223      	str	r3, [r4, #32]
 800972c:	4b04      	ldr	r3, [pc, #16]	; (8009740 <__sinit+0x2c>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1f5      	bne.n	8009720 <__sinit+0xc>
 8009734:	f7ff ffc4 	bl	80096c0 <global_stdio_init.part.0>
 8009738:	e7f2      	b.n	8009720 <__sinit+0xc>
 800973a:	bf00      	nop
 800973c:	08009681 	.word	0x08009681
 8009740:	20003a8c 	.word	0x20003a8c

08009744 <_fwalk_sglue>:
 8009744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009748:	4607      	mov	r7, r0
 800974a:	4688      	mov	r8, r1
 800974c:	4614      	mov	r4, r2
 800974e:	2600      	movs	r6, #0
 8009750:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009754:	f1b9 0901 	subs.w	r9, r9, #1
 8009758:	d505      	bpl.n	8009766 <_fwalk_sglue+0x22>
 800975a:	6824      	ldr	r4, [r4, #0]
 800975c:	2c00      	cmp	r4, #0
 800975e:	d1f7      	bne.n	8009750 <_fwalk_sglue+0xc>
 8009760:	4630      	mov	r0, r6
 8009762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009766:	89ab      	ldrh	r3, [r5, #12]
 8009768:	2b01      	cmp	r3, #1
 800976a:	d907      	bls.n	800977c <_fwalk_sglue+0x38>
 800976c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009770:	3301      	adds	r3, #1
 8009772:	d003      	beq.n	800977c <_fwalk_sglue+0x38>
 8009774:	4629      	mov	r1, r5
 8009776:	4638      	mov	r0, r7
 8009778:	47c0      	blx	r8
 800977a:	4306      	orrs	r6, r0
 800977c:	3568      	adds	r5, #104	; 0x68
 800977e:	e7e9      	b.n	8009754 <_fwalk_sglue+0x10>

08009780 <iprintf>:
 8009780:	b40f      	push	{r0, r1, r2, r3}
 8009782:	b507      	push	{r0, r1, r2, lr}
 8009784:	4906      	ldr	r1, [pc, #24]	; (80097a0 <iprintf+0x20>)
 8009786:	ab04      	add	r3, sp, #16
 8009788:	6808      	ldr	r0, [r1, #0]
 800978a:	f853 2b04 	ldr.w	r2, [r3], #4
 800978e:	6881      	ldr	r1, [r0, #8]
 8009790:	9301      	str	r3, [sp, #4]
 8009792:	f000 fb3d 	bl	8009e10 <_vfiprintf_r>
 8009796:	b003      	add	sp, #12
 8009798:	f85d eb04 	ldr.w	lr, [sp], #4
 800979c:	b004      	add	sp, #16
 800979e:	4770      	bx	lr
 80097a0:	20000068 	.word	0x20000068

080097a4 <_puts_r>:
 80097a4:	6a03      	ldr	r3, [r0, #32]
 80097a6:	b570      	push	{r4, r5, r6, lr}
 80097a8:	6884      	ldr	r4, [r0, #8]
 80097aa:	4605      	mov	r5, r0
 80097ac:	460e      	mov	r6, r1
 80097ae:	b90b      	cbnz	r3, 80097b4 <_puts_r+0x10>
 80097b0:	f7ff ffb0 	bl	8009714 <__sinit>
 80097b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097b6:	07db      	lsls	r3, r3, #31
 80097b8:	d405      	bmi.n	80097c6 <_puts_r+0x22>
 80097ba:	89a3      	ldrh	r3, [r4, #12]
 80097bc:	0598      	lsls	r0, r3, #22
 80097be:	d402      	bmi.n	80097c6 <_puts_r+0x22>
 80097c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097c2:	f000 f9f2 	bl	8009baa <__retarget_lock_acquire_recursive>
 80097c6:	89a3      	ldrh	r3, [r4, #12]
 80097c8:	0719      	lsls	r1, r3, #28
 80097ca:	d513      	bpl.n	80097f4 <_puts_r+0x50>
 80097cc:	6923      	ldr	r3, [r4, #16]
 80097ce:	b18b      	cbz	r3, 80097f4 <_puts_r+0x50>
 80097d0:	3e01      	subs	r6, #1
 80097d2:	68a3      	ldr	r3, [r4, #8]
 80097d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80097d8:	3b01      	subs	r3, #1
 80097da:	60a3      	str	r3, [r4, #8]
 80097dc:	b9e9      	cbnz	r1, 800981a <_puts_r+0x76>
 80097de:	2b00      	cmp	r3, #0
 80097e0:	da2e      	bge.n	8009840 <_puts_r+0x9c>
 80097e2:	4622      	mov	r2, r4
 80097e4:	210a      	movs	r1, #10
 80097e6:	4628      	mov	r0, r5
 80097e8:	f000 f87b 	bl	80098e2 <__swbuf_r>
 80097ec:	3001      	adds	r0, #1
 80097ee:	d007      	beq.n	8009800 <_puts_r+0x5c>
 80097f0:	250a      	movs	r5, #10
 80097f2:	e007      	b.n	8009804 <_puts_r+0x60>
 80097f4:	4621      	mov	r1, r4
 80097f6:	4628      	mov	r0, r5
 80097f8:	f000 f8b0 	bl	800995c <__swsetup_r>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	d0e7      	beq.n	80097d0 <_puts_r+0x2c>
 8009800:	f04f 35ff 	mov.w	r5, #4294967295
 8009804:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009806:	07da      	lsls	r2, r3, #31
 8009808:	d405      	bmi.n	8009816 <_puts_r+0x72>
 800980a:	89a3      	ldrh	r3, [r4, #12]
 800980c:	059b      	lsls	r3, r3, #22
 800980e:	d402      	bmi.n	8009816 <_puts_r+0x72>
 8009810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009812:	f000 f9cb 	bl	8009bac <__retarget_lock_release_recursive>
 8009816:	4628      	mov	r0, r5
 8009818:	bd70      	pop	{r4, r5, r6, pc}
 800981a:	2b00      	cmp	r3, #0
 800981c:	da04      	bge.n	8009828 <_puts_r+0x84>
 800981e:	69a2      	ldr	r2, [r4, #24]
 8009820:	429a      	cmp	r2, r3
 8009822:	dc06      	bgt.n	8009832 <_puts_r+0x8e>
 8009824:	290a      	cmp	r1, #10
 8009826:	d004      	beq.n	8009832 <_puts_r+0x8e>
 8009828:	6823      	ldr	r3, [r4, #0]
 800982a:	1c5a      	adds	r2, r3, #1
 800982c:	6022      	str	r2, [r4, #0]
 800982e:	7019      	strb	r1, [r3, #0]
 8009830:	e7cf      	b.n	80097d2 <_puts_r+0x2e>
 8009832:	4622      	mov	r2, r4
 8009834:	4628      	mov	r0, r5
 8009836:	f000 f854 	bl	80098e2 <__swbuf_r>
 800983a:	3001      	adds	r0, #1
 800983c:	d1c9      	bne.n	80097d2 <_puts_r+0x2e>
 800983e:	e7df      	b.n	8009800 <_puts_r+0x5c>
 8009840:	6823      	ldr	r3, [r4, #0]
 8009842:	250a      	movs	r5, #10
 8009844:	1c5a      	adds	r2, r3, #1
 8009846:	6022      	str	r2, [r4, #0]
 8009848:	701d      	strb	r5, [r3, #0]
 800984a:	e7db      	b.n	8009804 <_puts_r+0x60>

0800984c <puts>:
 800984c:	4b02      	ldr	r3, [pc, #8]	; (8009858 <puts+0xc>)
 800984e:	4601      	mov	r1, r0
 8009850:	6818      	ldr	r0, [r3, #0]
 8009852:	f7ff bfa7 	b.w	80097a4 <_puts_r>
 8009856:	bf00      	nop
 8009858:	20000068 	.word	0x20000068

0800985c <__sread>:
 800985c:	b510      	push	{r4, lr}
 800985e:	460c      	mov	r4, r1
 8009860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009864:	f000 f952 	bl	8009b0c <_read_r>
 8009868:	2800      	cmp	r0, #0
 800986a:	bfab      	itete	ge
 800986c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800986e:	89a3      	ldrhlt	r3, [r4, #12]
 8009870:	181b      	addge	r3, r3, r0
 8009872:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009876:	bfac      	ite	ge
 8009878:	6563      	strge	r3, [r4, #84]	; 0x54
 800987a:	81a3      	strhlt	r3, [r4, #12]
 800987c:	bd10      	pop	{r4, pc}

0800987e <__swrite>:
 800987e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009882:	461f      	mov	r7, r3
 8009884:	898b      	ldrh	r3, [r1, #12]
 8009886:	05db      	lsls	r3, r3, #23
 8009888:	4605      	mov	r5, r0
 800988a:	460c      	mov	r4, r1
 800988c:	4616      	mov	r6, r2
 800988e:	d505      	bpl.n	800989c <__swrite+0x1e>
 8009890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009894:	2302      	movs	r3, #2
 8009896:	2200      	movs	r2, #0
 8009898:	f000 f926 	bl	8009ae8 <_lseek_r>
 800989c:	89a3      	ldrh	r3, [r4, #12]
 800989e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098a6:	81a3      	strh	r3, [r4, #12]
 80098a8:	4632      	mov	r2, r6
 80098aa:	463b      	mov	r3, r7
 80098ac:	4628      	mov	r0, r5
 80098ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098b2:	f000 b93d 	b.w	8009b30 <_write_r>

080098b6 <__sseek>:
 80098b6:	b510      	push	{r4, lr}
 80098b8:	460c      	mov	r4, r1
 80098ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098be:	f000 f913 	bl	8009ae8 <_lseek_r>
 80098c2:	1c43      	adds	r3, r0, #1
 80098c4:	89a3      	ldrh	r3, [r4, #12]
 80098c6:	bf15      	itete	ne
 80098c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80098ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098d2:	81a3      	strheq	r3, [r4, #12]
 80098d4:	bf18      	it	ne
 80098d6:	81a3      	strhne	r3, [r4, #12]
 80098d8:	bd10      	pop	{r4, pc}

080098da <__sclose>:
 80098da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098de:	f000 b89d 	b.w	8009a1c <_close_r>

080098e2 <__swbuf_r>:
 80098e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098e4:	460e      	mov	r6, r1
 80098e6:	4614      	mov	r4, r2
 80098e8:	4605      	mov	r5, r0
 80098ea:	b118      	cbz	r0, 80098f4 <__swbuf_r+0x12>
 80098ec:	6a03      	ldr	r3, [r0, #32]
 80098ee:	b90b      	cbnz	r3, 80098f4 <__swbuf_r+0x12>
 80098f0:	f7ff ff10 	bl	8009714 <__sinit>
 80098f4:	69a3      	ldr	r3, [r4, #24]
 80098f6:	60a3      	str	r3, [r4, #8]
 80098f8:	89a3      	ldrh	r3, [r4, #12]
 80098fa:	071a      	lsls	r2, r3, #28
 80098fc:	d525      	bpl.n	800994a <__swbuf_r+0x68>
 80098fe:	6923      	ldr	r3, [r4, #16]
 8009900:	b31b      	cbz	r3, 800994a <__swbuf_r+0x68>
 8009902:	6823      	ldr	r3, [r4, #0]
 8009904:	6922      	ldr	r2, [r4, #16]
 8009906:	1a98      	subs	r0, r3, r2
 8009908:	6963      	ldr	r3, [r4, #20]
 800990a:	b2f6      	uxtb	r6, r6
 800990c:	4283      	cmp	r3, r0
 800990e:	4637      	mov	r7, r6
 8009910:	dc04      	bgt.n	800991c <__swbuf_r+0x3a>
 8009912:	4621      	mov	r1, r4
 8009914:	4628      	mov	r0, r5
 8009916:	f000 fdab 	bl	800a470 <_fflush_r>
 800991a:	b9e0      	cbnz	r0, 8009956 <__swbuf_r+0x74>
 800991c:	68a3      	ldr	r3, [r4, #8]
 800991e:	3b01      	subs	r3, #1
 8009920:	60a3      	str	r3, [r4, #8]
 8009922:	6823      	ldr	r3, [r4, #0]
 8009924:	1c5a      	adds	r2, r3, #1
 8009926:	6022      	str	r2, [r4, #0]
 8009928:	701e      	strb	r6, [r3, #0]
 800992a:	6962      	ldr	r2, [r4, #20]
 800992c:	1c43      	adds	r3, r0, #1
 800992e:	429a      	cmp	r2, r3
 8009930:	d004      	beq.n	800993c <__swbuf_r+0x5a>
 8009932:	89a3      	ldrh	r3, [r4, #12]
 8009934:	07db      	lsls	r3, r3, #31
 8009936:	d506      	bpl.n	8009946 <__swbuf_r+0x64>
 8009938:	2e0a      	cmp	r6, #10
 800993a:	d104      	bne.n	8009946 <__swbuf_r+0x64>
 800993c:	4621      	mov	r1, r4
 800993e:	4628      	mov	r0, r5
 8009940:	f000 fd96 	bl	800a470 <_fflush_r>
 8009944:	b938      	cbnz	r0, 8009956 <__swbuf_r+0x74>
 8009946:	4638      	mov	r0, r7
 8009948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800994a:	4621      	mov	r1, r4
 800994c:	4628      	mov	r0, r5
 800994e:	f000 f805 	bl	800995c <__swsetup_r>
 8009952:	2800      	cmp	r0, #0
 8009954:	d0d5      	beq.n	8009902 <__swbuf_r+0x20>
 8009956:	f04f 37ff 	mov.w	r7, #4294967295
 800995a:	e7f4      	b.n	8009946 <__swbuf_r+0x64>

0800995c <__swsetup_r>:
 800995c:	b538      	push	{r3, r4, r5, lr}
 800995e:	4b2a      	ldr	r3, [pc, #168]	; (8009a08 <__swsetup_r+0xac>)
 8009960:	4605      	mov	r5, r0
 8009962:	6818      	ldr	r0, [r3, #0]
 8009964:	460c      	mov	r4, r1
 8009966:	b118      	cbz	r0, 8009970 <__swsetup_r+0x14>
 8009968:	6a03      	ldr	r3, [r0, #32]
 800996a:	b90b      	cbnz	r3, 8009970 <__swsetup_r+0x14>
 800996c:	f7ff fed2 	bl	8009714 <__sinit>
 8009970:	89a3      	ldrh	r3, [r4, #12]
 8009972:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009976:	0718      	lsls	r0, r3, #28
 8009978:	d422      	bmi.n	80099c0 <__swsetup_r+0x64>
 800997a:	06d9      	lsls	r1, r3, #27
 800997c:	d407      	bmi.n	800998e <__swsetup_r+0x32>
 800997e:	2309      	movs	r3, #9
 8009980:	602b      	str	r3, [r5, #0]
 8009982:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009986:	81a3      	strh	r3, [r4, #12]
 8009988:	f04f 30ff 	mov.w	r0, #4294967295
 800998c:	e034      	b.n	80099f8 <__swsetup_r+0x9c>
 800998e:	0758      	lsls	r0, r3, #29
 8009990:	d512      	bpl.n	80099b8 <__swsetup_r+0x5c>
 8009992:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009994:	b141      	cbz	r1, 80099a8 <__swsetup_r+0x4c>
 8009996:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800999a:	4299      	cmp	r1, r3
 800999c:	d002      	beq.n	80099a4 <__swsetup_r+0x48>
 800999e:	4628      	mov	r0, r5
 80099a0:	f000 f914 	bl	8009bcc <_free_r>
 80099a4:	2300      	movs	r3, #0
 80099a6:	6363      	str	r3, [r4, #52]	; 0x34
 80099a8:	89a3      	ldrh	r3, [r4, #12]
 80099aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80099ae:	81a3      	strh	r3, [r4, #12]
 80099b0:	2300      	movs	r3, #0
 80099b2:	6063      	str	r3, [r4, #4]
 80099b4:	6923      	ldr	r3, [r4, #16]
 80099b6:	6023      	str	r3, [r4, #0]
 80099b8:	89a3      	ldrh	r3, [r4, #12]
 80099ba:	f043 0308 	orr.w	r3, r3, #8
 80099be:	81a3      	strh	r3, [r4, #12]
 80099c0:	6923      	ldr	r3, [r4, #16]
 80099c2:	b94b      	cbnz	r3, 80099d8 <__swsetup_r+0x7c>
 80099c4:	89a3      	ldrh	r3, [r4, #12]
 80099c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80099ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099ce:	d003      	beq.n	80099d8 <__swsetup_r+0x7c>
 80099d0:	4621      	mov	r1, r4
 80099d2:	4628      	mov	r0, r5
 80099d4:	f000 fd9a 	bl	800a50c <__smakebuf_r>
 80099d8:	89a0      	ldrh	r0, [r4, #12]
 80099da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099de:	f010 0301 	ands.w	r3, r0, #1
 80099e2:	d00a      	beq.n	80099fa <__swsetup_r+0x9e>
 80099e4:	2300      	movs	r3, #0
 80099e6:	60a3      	str	r3, [r4, #8]
 80099e8:	6963      	ldr	r3, [r4, #20]
 80099ea:	425b      	negs	r3, r3
 80099ec:	61a3      	str	r3, [r4, #24]
 80099ee:	6923      	ldr	r3, [r4, #16]
 80099f0:	b943      	cbnz	r3, 8009a04 <__swsetup_r+0xa8>
 80099f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80099f6:	d1c4      	bne.n	8009982 <__swsetup_r+0x26>
 80099f8:	bd38      	pop	{r3, r4, r5, pc}
 80099fa:	0781      	lsls	r1, r0, #30
 80099fc:	bf58      	it	pl
 80099fe:	6963      	ldrpl	r3, [r4, #20]
 8009a00:	60a3      	str	r3, [r4, #8]
 8009a02:	e7f4      	b.n	80099ee <__swsetup_r+0x92>
 8009a04:	2000      	movs	r0, #0
 8009a06:	e7f7      	b.n	80099f8 <__swsetup_r+0x9c>
 8009a08:	20000068 	.word	0x20000068

08009a0c <memset>:
 8009a0c:	4402      	add	r2, r0
 8009a0e:	4603      	mov	r3, r0
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d100      	bne.n	8009a16 <memset+0xa>
 8009a14:	4770      	bx	lr
 8009a16:	f803 1b01 	strb.w	r1, [r3], #1
 8009a1a:	e7f9      	b.n	8009a10 <memset+0x4>

08009a1c <_close_r>:
 8009a1c:	b538      	push	{r3, r4, r5, lr}
 8009a1e:	4d06      	ldr	r5, [pc, #24]	; (8009a38 <_close_r+0x1c>)
 8009a20:	2300      	movs	r3, #0
 8009a22:	4604      	mov	r4, r0
 8009a24:	4608      	mov	r0, r1
 8009a26:	602b      	str	r3, [r5, #0]
 8009a28:	f7f7 fdf9 	bl	800161e <_close>
 8009a2c:	1c43      	adds	r3, r0, #1
 8009a2e:	d102      	bne.n	8009a36 <_close_r+0x1a>
 8009a30:	682b      	ldr	r3, [r5, #0]
 8009a32:	b103      	cbz	r3, 8009a36 <_close_r+0x1a>
 8009a34:	6023      	str	r3, [r4, #0]
 8009a36:	bd38      	pop	{r3, r4, r5, pc}
 8009a38:	20003a90 	.word	0x20003a90

08009a3c <_reclaim_reent>:
 8009a3c:	4b29      	ldr	r3, [pc, #164]	; (8009ae4 <_reclaim_reent+0xa8>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4283      	cmp	r3, r0
 8009a42:	b570      	push	{r4, r5, r6, lr}
 8009a44:	4604      	mov	r4, r0
 8009a46:	d04b      	beq.n	8009ae0 <_reclaim_reent+0xa4>
 8009a48:	69c3      	ldr	r3, [r0, #28]
 8009a4a:	b143      	cbz	r3, 8009a5e <_reclaim_reent+0x22>
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d144      	bne.n	8009adc <_reclaim_reent+0xa0>
 8009a52:	69e3      	ldr	r3, [r4, #28]
 8009a54:	6819      	ldr	r1, [r3, #0]
 8009a56:	b111      	cbz	r1, 8009a5e <_reclaim_reent+0x22>
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f000 f8b7 	bl	8009bcc <_free_r>
 8009a5e:	6961      	ldr	r1, [r4, #20]
 8009a60:	b111      	cbz	r1, 8009a68 <_reclaim_reent+0x2c>
 8009a62:	4620      	mov	r0, r4
 8009a64:	f000 f8b2 	bl	8009bcc <_free_r>
 8009a68:	69e1      	ldr	r1, [r4, #28]
 8009a6a:	b111      	cbz	r1, 8009a72 <_reclaim_reent+0x36>
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	f000 f8ad 	bl	8009bcc <_free_r>
 8009a72:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009a74:	b111      	cbz	r1, 8009a7c <_reclaim_reent+0x40>
 8009a76:	4620      	mov	r0, r4
 8009a78:	f000 f8a8 	bl	8009bcc <_free_r>
 8009a7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a7e:	b111      	cbz	r1, 8009a86 <_reclaim_reent+0x4a>
 8009a80:	4620      	mov	r0, r4
 8009a82:	f000 f8a3 	bl	8009bcc <_free_r>
 8009a86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009a88:	b111      	cbz	r1, 8009a90 <_reclaim_reent+0x54>
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	f000 f89e 	bl	8009bcc <_free_r>
 8009a90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009a92:	b111      	cbz	r1, 8009a9a <_reclaim_reent+0x5e>
 8009a94:	4620      	mov	r0, r4
 8009a96:	f000 f899 	bl	8009bcc <_free_r>
 8009a9a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009a9c:	b111      	cbz	r1, 8009aa4 <_reclaim_reent+0x68>
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	f000 f894 	bl	8009bcc <_free_r>
 8009aa4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009aa6:	b111      	cbz	r1, 8009aae <_reclaim_reent+0x72>
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f000 f88f 	bl	8009bcc <_free_r>
 8009aae:	6a23      	ldr	r3, [r4, #32]
 8009ab0:	b1b3      	cbz	r3, 8009ae0 <_reclaim_reent+0xa4>
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009ab8:	4718      	bx	r3
 8009aba:	5949      	ldr	r1, [r1, r5]
 8009abc:	b941      	cbnz	r1, 8009ad0 <_reclaim_reent+0x94>
 8009abe:	3504      	adds	r5, #4
 8009ac0:	69e3      	ldr	r3, [r4, #28]
 8009ac2:	2d80      	cmp	r5, #128	; 0x80
 8009ac4:	68d9      	ldr	r1, [r3, #12]
 8009ac6:	d1f8      	bne.n	8009aba <_reclaim_reent+0x7e>
 8009ac8:	4620      	mov	r0, r4
 8009aca:	f000 f87f 	bl	8009bcc <_free_r>
 8009ace:	e7c0      	b.n	8009a52 <_reclaim_reent+0x16>
 8009ad0:	680e      	ldr	r6, [r1, #0]
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	f000 f87a 	bl	8009bcc <_free_r>
 8009ad8:	4631      	mov	r1, r6
 8009ada:	e7ef      	b.n	8009abc <_reclaim_reent+0x80>
 8009adc:	2500      	movs	r5, #0
 8009ade:	e7ef      	b.n	8009ac0 <_reclaim_reent+0x84>
 8009ae0:	bd70      	pop	{r4, r5, r6, pc}
 8009ae2:	bf00      	nop
 8009ae4:	20000068 	.word	0x20000068

08009ae8 <_lseek_r>:
 8009ae8:	b538      	push	{r3, r4, r5, lr}
 8009aea:	4d07      	ldr	r5, [pc, #28]	; (8009b08 <_lseek_r+0x20>)
 8009aec:	4604      	mov	r4, r0
 8009aee:	4608      	mov	r0, r1
 8009af0:	4611      	mov	r1, r2
 8009af2:	2200      	movs	r2, #0
 8009af4:	602a      	str	r2, [r5, #0]
 8009af6:	461a      	mov	r2, r3
 8009af8:	f7f7 fdb8 	bl	800166c <_lseek>
 8009afc:	1c43      	adds	r3, r0, #1
 8009afe:	d102      	bne.n	8009b06 <_lseek_r+0x1e>
 8009b00:	682b      	ldr	r3, [r5, #0]
 8009b02:	b103      	cbz	r3, 8009b06 <_lseek_r+0x1e>
 8009b04:	6023      	str	r3, [r4, #0]
 8009b06:	bd38      	pop	{r3, r4, r5, pc}
 8009b08:	20003a90 	.word	0x20003a90

08009b0c <_read_r>:
 8009b0c:	b538      	push	{r3, r4, r5, lr}
 8009b0e:	4d07      	ldr	r5, [pc, #28]	; (8009b2c <_read_r+0x20>)
 8009b10:	4604      	mov	r4, r0
 8009b12:	4608      	mov	r0, r1
 8009b14:	4611      	mov	r1, r2
 8009b16:	2200      	movs	r2, #0
 8009b18:	602a      	str	r2, [r5, #0]
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	f7f7 fd46 	bl	80015ac <_read>
 8009b20:	1c43      	adds	r3, r0, #1
 8009b22:	d102      	bne.n	8009b2a <_read_r+0x1e>
 8009b24:	682b      	ldr	r3, [r5, #0]
 8009b26:	b103      	cbz	r3, 8009b2a <_read_r+0x1e>
 8009b28:	6023      	str	r3, [r4, #0]
 8009b2a:	bd38      	pop	{r3, r4, r5, pc}
 8009b2c:	20003a90 	.word	0x20003a90

08009b30 <_write_r>:
 8009b30:	b538      	push	{r3, r4, r5, lr}
 8009b32:	4d07      	ldr	r5, [pc, #28]	; (8009b50 <_write_r+0x20>)
 8009b34:	4604      	mov	r4, r0
 8009b36:	4608      	mov	r0, r1
 8009b38:	4611      	mov	r1, r2
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	602a      	str	r2, [r5, #0]
 8009b3e:	461a      	mov	r2, r3
 8009b40:	f7f7 fd51 	bl	80015e6 <_write>
 8009b44:	1c43      	adds	r3, r0, #1
 8009b46:	d102      	bne.n	8009b4e <_write_r+0x1e>
 8009b48:	682b      	ldr	r3, [r5, #0]
 8009b4a:	b103      	cbz	r3, 8009b4e <_write_r+0x1e>
 8009b4c:	6023      	str	r3, [r4, #0]
 8009b4e:	bd38      	pop	{r3, r4, r5, pc}
 8009b50:	20003a90 	.word	0x20003a90

08009b54 <__errno>:
 8009b54:	4b01      	ldr	r3, [pc, #4]	; (8009b5c <__errno+0x8>)
 8009b56:	6818      	ldr	r0, [r3, #0]
 8009b58:	4770      	bx	lr
 8009b5a:	bf00      	nop
 8009b5c:	20000068 	.word	0x20000068

08009b60 <__libc_init_array>:
 8009b60:	b570      	push	{r4, r5, r6, lr}
 8009b62:	4d0d      	ldr	r5, [pc, #52]	; (8009b98 <__libc_init_array+0x38>)
 8009b64:	4c0d      	ldr	r4, [pc, #52]	; (8009b9c <__libc_init_array+0x3c>)
 8009b66:	1b64      	subs	r4, r4, r5
 8009b68:	10a4      	asrs	r4, r4, #2
 8009b6a:	2600      	movs	r6, #0
 8009b6c:	42a6      	cmp	r6, r4
 8009b6e:	d109      	bne.n	8009b84 <__libc_init_array+0x24>
 8009b70:	4d0b      	ldr	r5, [pc, #44]	; (8009ba0 <__libc_init_array+0x40>)
 8009b72:	4c0c      	ldr	r4, [pc, #48]	; (8009ba4 <__libc_init_array+0x44>)
 8009b74:	f000 fd38 	bl	800a5e8 <_init>
 8009b78:	1b64      	subs	r4, r4, r5
 8009b7a:	10a4      	asrs	r4, r4, #2
 8009b7c:	2600      	movs	r6, #0
 8009b7e:	42a6      	cmp	r6, r4
 8009b80:	d105      	bne.n	8009b8e <__libc_init_array+0x2e>
 8009b82:	bd70      	pop	{r4, r5, r6, pc}
 8009b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b88:	4798      	blx	r3
 8009b8a:	3601      	adds	r6, #1
 8009b8c:	e7ee      	b.n	8009b6c <__libc_init_array+0xc>
 8009b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b92:	4798      	blx	r3
 8009b94:	3601      	adds	r6, #1
 8009b96:	e7f2      	b.n	8009b7e <__libc_init_array+0x1e>
 8009b98:	0800a708 	.word	0x0800a708
 8009b9c:	0800a708 	.word	0x0800a708
 8009ba0:	0800a708 	.word	0x0800a708
 8009ba4:	0800a70c 	.word	0x0800a70c

08009ba8 <__retarget_lock_init_recursive>:
 8009ba8:	4770      	bx	lr

08009baa <__retarget_lock_acquire_recursive>:
 8009baa:	4770      	bx	lr

08009bac <__retarget_lock_release_recursive>:
 8009bac:	4770      	bx	lr

08009bae <memcpy>:
 8009bae:	440a      	add	r2, r1
 8009bb0:	4291      	cmp	r1, r2
 8009bb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bb6:	d100      	bne.n	8009bba <memcpy+0xc>
 8009bb8:	4770      	bx	lr
 8009bba:	b510      	push	{r4, lr}
 8009bbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bc4:	4291      	cmp	r1, r2
 8009bc6:	d1f9      	bne.n	8009bbc <memcpy+0xe>
 8009bc8:	bd10      	pop	{r4, pc}
	...

08009bcc <_free_r>:
 8009bcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bce:	2900      	cmp	r1, #0
 8009bd0:	d044      	beq.n	8009c5c <_free_r+0x90>
 8009bd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bd6:	9001      	str	r0, [sp, #4]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	f1a1 0404 	sub.w	r4, r1, #4
 8009bde:	bfb8      	it	lt
 8009be0:	18e4      	addlt	r4, r4, r3
 8009be2:	f000 f8df 	bl	8009da4 <__malloc_lock>
 8009be6:	4a1e      	ldr	r2, [pc, #120]	; (8009c60 <_free_r+0x94>)
 8009be8:	9801      	ldr	r0, [sp, #4]
 8009bea:	6813      	ldr	r3, [r2, #0]
 8009bec:	b933      	cbnz	r3, 8009bfc <_free_r+0x30>
 8009bee:	6063      	str	r3, [r4, #4]
 8009bf0:	6014      	str	r4, [r2, #0]
 8009bf2:	b003      	add	sp, #12
 8009bf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bf8:	f000 b8da 	b.w	8009db0 <__malloc_unlock>
 8009bfc:	42a3      	cmp	r3, r4
 8009bfe:	d908      	bls.n	8009c12 <_free_r+0x46>
 8009c00:	6825      	ldr	r5, [r4, #0]
 8009c02:	1961      	adds	r1, r4, r5
 8009c04:	428b      	cmp	r3, r1
 8009c06:	bf01      	itttt	eq
 8009c08:	6819      	ldreq	r1, [r3, #0]
 8009c0a:	685b      	ldreq	r3, [r3, #4]
 8009c0c:	1949      	addeq	r1, r1, r5
 8009c0e:	6021      	streq	r1, [r4, #0]
 8009c10:	e7ed      	b.n	8009bee <_free_r+0x22>
 8009c12:	461a      	mov	r2, r3
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	b10b      	cbz	r3, 8009c1c <_free_r+0x50>
 8009c18:	42a3      	cmp	r3, r4
 8009c1a:	d9fa      	bls.n	8009c12 <_free_r+0x46>
 8009c1c:	6811      	ldr	r1, [r2, #0]
 8009c1e:	1855      	adds	r5, r2, r1
 8009c20:	42a5      	cmp	r5, r4
 8009c22:	d10b      	bne.n	8009c3c <_free_r+0x70>
 8009c24:	6824      	ldr	r4, [r4, #0]
 8009c26:	4421      	add	r1, r4
 8009c28:	1854      	adds	r4, r2, r1
 8009c2a:	42a3      	cmp	r3, r4
 8009c2c:	6011      	str	r1, [r2, #0]
 8009c2e:	d1e0      	bne.n	8009bf2 <_free_r+0x26>
 8009c30:	681c      	ldr	r4, [r3, #0]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	6053      	str	r3, [r2, #4]
 8009c36:	440c      	add	r4, r1
 8009c38:	6014      	str	r4, [r2, #0]
 8009c3a:	e7da      	b.n	8009bf2 <_free_r+0x26>
 8009c3c:	d902      	bls.n	8009c44 <_free_r+0x78>
 8009c3e:	230c      	movs	r3, #12
 8009c40:	6003      	str	r3, [r0, #0]
 8009c42:	e7d6      	b.n	8009bf2 <_free_r+0x26>
 8009c44:	6825      	ldr	r5, [r4, #0]
 8009c46:	1961      	adds	r1, r4, r5
 8009c48:	428b      	cmp	r3, r1
 8009c4a:	bf04      	itt	eq
 8009c4c:	6819      	ldreq	r1, [r3, #0]
 8009c4e:	685b      	ldreq	r3, [r3, #4]
 8009c50:	6063      	str	r3, [r4, #4]
 8009c52:	bf04      	itt	eq
 8009c54:	1949      	addeq	r1, r1, r5
 8009c56:	6021      	streq	r1, [r4, #0]
 8009c58:	6054      	str	r4, [r2, #4]
 8009c5a:	e7ca      	b.n	8009bf2 <_free_r+0x26>
 8009c5c:	b003      	add	sp, #12
 8009c5e:	bd30      	pop	{r4, r5, pc}
 8009c60:	20003a98 	.word	0x20003a98

08009c64 <sbrk_aligned>:
 8009c64:	b570      	push	{r4, r5, r6, lr}
 8009c66:	4e0e      	ldr	r6, [pc, #56]	; (8009ca0 <sbrk_aligned+0x3c>)
 8009c68:	460c      	mov	r4, r1
 8009c6a:	6831      	ldr	r1, [r6, #0]
 8009c6c:	4605      	mov	r5, r0
 8009c6e:	b911      	cbnz	r1, 8009c76 <sbrk_aligned+0x12>
 8009c70:	f000 fcaa 	bl	800a5c8 <_sbrk_r>
 8009c74:	6030      	str	r0, [r6, #0]
 8009c76:	4621      	mov	r1, r4
 8009c78:	4628      	mov	r0, r5
 8009c7a:	f000 fca5 	bl	800a5c8 <_sbrk_r>
 8009c7e:	1c43      	adds	r3, r0, #1
 8009c80:	d00a      	beq.n	8009c98 <sbrk_aligned+0x34>
 8009c82:	1cc4      	adds	r4, r0, #3
 8009c84:	f024 0403 	bic.w	r4, r4, #3
 8009c88:	42a0      	cmp	r0, r4
 8009c8a:	d007      	beq.n	8009c9c <sbrk_aligned+0x38>
 8009c8c:	1a21      	subs	r1, r4, r0
 8009c8e:	4628      	mov	r0, r5
 8009c90:	f000 fc9a 	bl	800a5c8 <_sbrk_r>
 8009c94:	3001      	adds	r0, #1
 8009c96:	d101      	bne.n	8009c9c <sbrk_aligned+0x38>
 8009c98:	f04f 34ff 	mov.w	r4, #4294967295
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ca0:	20003a9c 	.word	0x20003a9c

08009ca4 <_malloc_r>:
 8009ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ca8:	1ccd      	adds	r5, r1, #3
 8009caa:	f025 0503 	bic.w	r5, r5, #3
 8009cae:	3508      	adds	r5, #8
 8009cb0:	2d0c      	cmp	r5, #12
 8009cb2:	bf38      	it	cc
 8009cb4:	250c      	movcc	r5, #12
 8009cb6:	2d00      	cmp	r5, #0
 8009cb8:	4607      	mov	r7, r0
 8009cba:	db01      	blt.n	8009cc0 <_malloc_r+0x1c>
 8009cbc:	42a9      	cmp	r1, r5
 8009cbe:	d905      	bls.n	8009ccc <_malloc_r+0x28>
 8009cc0:	230c      	movs	r3, #12
 8009cc2:	603b      	str	r3, [r7, #0]
 8009cc4:	2600      	movs	r6, #0
 8009cc6:	4630      	mov	r0, r6
 8009cc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ccc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009da0 <_malloc_r+0xfc>
 8009cd0:	f000 f868 	bl	8009da4 <__malloc_lock>
 8009cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8009cd8:	461c      	mov	r4, r3
 8009cda:	bb5c      	cbnz	r4, 8009d34 <_malloc_r+0x90>
 8009cdc:	4629      	mov	r1, r5
 8009cde:	4638      	mov	r0, r7
 8009ce0:	f7ff ffc0 	bl	8009c64 <sbrk_aligned>
 8009ce4:	1c43      	adds	r3, r0, #1
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	d155      	bne.n	8009d96 <_malloc_r+0xf2>
 8009cea:	f8d8 4000 	ldr.w	r4, [r8]
 8009cee:	4626      	mov	r6, r4
 8009cf0:	2e00      	cmp	r6, #0
 8009cf2:	d145      	bne.n	8009d80 <_malloc_r+0xdc>
 8009cf4:	2c00      	cmp	r4, #0
 8009cf6:	d048      	beq.n	8009d8a <_malloc_r+0xe6>
 8009cf8:	6823      	ldr	r3, [r4, #0]
 8009cfa:	4631      	mov	r1, r6
 8009cfc:	4638      	mov	r0, r7
 8009cfe:	eb04 0903 	add.w	r9, r4, r3
 8009d02:	f000 fc61 	bl	800a5c8 <_sbrk_r>
 8009d06:	4581      	cmp	r9, r0
 8009d08:	d13f      	bne.n	8009d8a <_malloc_r+0xe6>
 8009d0a:	6821      	ldr	r1, [r4, #0]
 8009d0c:	1a6d      	subs	r5, r5, r1
 8009d0e:	4629      	mov	r1, r5
 8009d10:	4638      	mov	r0, r7
 8009d12:	f7ff ffa7 	bl	8009c64 <sbrk_aligned>
 8009d16:	3001      	adds	r0, #1
 8009d18:	d037      	beq.n	8009d8a <_malloc_r+0xe6>
 8009d1a:	6823      	ldr	r3, [r4, #0]
 8009d1c:	442b      	add	r3, r5
 8009d1e:	6023      	str	r3, [r4, #0]
 8009d20:	f8d8 3000 	ldr.w	r3, [r8]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d038      	beq.n	8009d9a <_malloc_r+0xf6>
 8009d28:	685a      	ldr	r2, [r3, #4]
 8009d2a:	42a2      	cmp	r2, r4
 8009d2c:	d12b      	bne.n	8009d86 <_malloc_r+0xe2>
 8009d2e:	2200      	movs	r2, #0
 8009d30:	605a      	str	r2, [r3, #4]
 8009d32:	e00f      	b.n	8009d54 <_malloc_r+0xb0>
 8009d34:	6822      	ldr	r2, [r4, #0]
 8009d36:	1b52      	subs	r2, r2, r5
 8009d38:	d41f      	bmi.n	8009d7a <_malloc_r+0xd6>
 8009d3a:	2a0b      	cmp	r2, #11
 8009d3c:	d917      	bls.n	8009d6e <_malloc_r+0xca>
 8009d3e:	1961      	adds	r1, r4, r5
 8009d40:	42a3      	cmp	r3, r4
 8009d42:	6025      	str	r5, [r4, #0]
 8009d44:	bf18      	it	ne
 8009d46:	6059      	strne	r1, [r3, #4]
 8009d48:	6863      	ldr	r3, [r4, #4]
 8009d4a:	bf08      	it	eq
 8009d4c:	f8c8 1000 	streq.w	r1, [r8]
 8009d50:	5162      	str	r2, [r4, r5]
 8009d52:	604b      	str	r3, [r1, #4]
 8009d54:	4638      	mov	r0, r7
 8009d56:	f104 060b 	add.w	r6, r4, #11
 8009d5a:	f000 f829 	bl	8009db0 <__malloc_unlock>
 8009d5e:	f026 0607 	bic.w	r6, r6, #7
 8009d62:	1d23      	adds	r3, r4, #4
 8009d64:	1af2      	subs	r2, r6, r3
 8009d66:	d0ae      	beq.n	8009cc6 <_malloc_r+0x22>
 8009d68:	1b9b      	subs	r3, r3, r6
 8009d6a:	50a3      	str	r3, [r4, r2]
 8009d6c:	e7ab      	b.n	8009cc6 <_malloc_r+0x22>
 8009d6e:	42a3      	cmp	r3, r4
 8009d70:	6862      	ldr	r2, [r4, #4]
 8009d72:	d1dd      	bne.n	8009d30 <_malloc_r+0x8c>
 8009d74:	f8c8 2000 	str.w	r2, [r8]
 8009d78:	e7ec      	b.n	8009d54 <_malloc_r+0xb0>
 8009d7a:	4623      	mov	r3, r4
 8009d7c:	6864      	ldr	r4, [r4, #4]
 8009d7e:	e7ac      	b.n	8009cda <_malloc_r+0x36>
 8009d80:	4634      	mov	r4, r6
 8009d82:	6876      	ldr	r6, [r6, #4]
 8009d84:	e7b4      	b.n	8009cf0 <_malloc_r+0x4c>
 8009d86:	4613      	mov	r3, r2
 8009d88:	e7cc      	b.n	8009d24 <_malloc_r+0x80>
 8009d8a:	230c      	movs	r3, #12
 8009d8c:	603b      	str	r3, [r7, #0]
 8009d8e:	4638      	mov	r0, r7
 8009d90:	f000 f80e 	bl	8009db0 <__malloc_unlock>
 8009d94:	e797      	b.n	8009cc6 <_malloc_r+0x22>
 8009d96:	6025      	str	r5, [r4, #0]
 8009d98:	e7dc      	b.n	8009d54 <_malloc_r+0xb0>
 8009d9a:	605b      	str	r3, [r3, #4]
 8009d9c:	deff      	udf	#255	; 0xff
 8009d9e:	bf00      	nop
 8009da0:	20003a98 	.word	0x20003a98

08009da4 <__malloc_lock>:
 8009da4:	4801      	ldr	r0, [pc, #4]	; (8009dac <__malloc_lock+0x8>)
 8009da6:	f7ff bf00 	b.w	8009baa <__retarget_lock_acquire_recursive>
 8009daa:	bf00      	nop
 8009dac:	20003a94 	.word	0x20003a94

08009db0 <__malloc_unlock>:
 8009db0:	4801      	ldr	r0, [pc, #4]	; (8009db8 <__malloc_unlock+0x8>)
 8009db2:	f7ff befb 	b.w	8009bac <__retarget_lock_release_recursive>
 8009db6:	bf00      	nop
 8009db8:	20003a94 	.word	0x20003a94

08009dbc <__sfputc_r>:
 8009dbc:	6893      	ldr	r3, [r2, #8]
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	b410      	push	{r4}
 8009dc4:	6093      	str	r3, [r2, #8]
 8009dc6:	da08      	bge.n	8009dda <__sfputc_r+0x1e>
 8009dc8:	6994      	ldr	r4, [r2, #24]
 8009dca:	42a3      	cmp	r3, r4
 8009dcc:	db01      	blt.n	8009dd2 <__sfputc_r+0x16>
 8009dce:	290a      	cmp	r1, #10
 8009dd0:	d103      	bne.n	8009dda <__sfputc_r+0x1e>
 8009dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dd6:	f7ff bd84 	b.w	80098e2 <__swbuf_r>
 8009dda:	6813      	ldr	r3, [r2, #0]
 8009ddc:	1c58      	adds	r0, r3, #1
 8009dde:	6010      	str	r0, [r2, #0]
 8009de0:	7019      	strb	r1, [r3, #0]
 8009de2:	4608      	mov	r0, r1
 8009de4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009de8:	4770      	bx	lr

08009dea <__sfputs_r>:
 8009dea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dec:	4606      	mov	r6, r0
 8009dee:	460f      	mov	r7, r1
 8009df0:	4614      	mov	r4, r2
 8009df2:	18d5      	adds	r5, r2, r3
 8009df4:	42ac      	cmp	r4, r5
 8009df6:	d101      	bne.n	8009dfc <__sfputs_r+0x12>
 8009df8:	2000      	movs	r0, #0
 8009dfa:	e007      	b.n	8009e0c <__sfputs_r+0x22>
 8009dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e00:	463a      	mov	r2, r7
 8009e02:	4630      	mov	r0, r6
 8009e04:	f7ff ffda 	bl	8009dbc <__sfputc_r>
 8009e08:	1c43      	adds	r3, r0, #1
 8009e0a:	d1f3      	bne.n	8009df4 <__sfputs_r+0xa>
 8009e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e10 <_vfiprintf_r>:
 8009e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e14:	460d      	mov	r5, r1
 8009e16:	b09d      	sub	sp, #116	; 0x74
 8009e18:	4614      	mov	r4, r2
 8009e1a:	4698      	mov	r8, r3
 8009e1c:	4606      	mov	r6, r0
 8009e1e:	b118      	cbz	r0, 8009e28 <_vfiprintf_r+0x18>
 8009e20:	6a03      	ldr	r3, [r0, #32]
 8009e22:	b90b      	cbnz	r3, 8009e28 <_vfiprintf_r+0x18>
 8009e24:	f7ff fc76 	bl	8009714 <__sinit>
 8009e28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e2a:	07d9      	lsls	r1, r3, #31
 8009e2c:	d405      	bmi.n	8009e3a <_vfiprintf_r+0x2a>
 8009e2e:	89ab      	ldrh	r3, [r5, #12]
 8009e30:	059a      	lsls	r2, r3, #22
 8009e32:	d402      	bmi.n	8009e3a <_vfiprintf_r+0x2a>
 8009e34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e36:	f7ff feb8 	bl	8009baa <__retarget_lock_acquire_recursive>
 8009e3a:	89ab      	ldrh	r3, [r5, #12]
 8009e3c:	071b      	lsls	r3, r3, #28
 8009e3e:	d501      	bpl.n	8009e44 <_vfiprintf_r+0x34>
 8009e40:	692b      	ldr	r3, [r5, #16]
 8009e42:	b99b      	cbnz	r3, 8009e6c <_vfiprintf_r+0x5c>
 8009e44:	4629      	mov	r1, r5
 8009e46:	4630      	mov	r0, r6
 8009e48:	f7ff fd88 	bl	800995c <__swsetup_r>
 8009e4c:	b170      	cbz	r0, 8009e6c <_vfiprintf_r+0x5c>
 8009e4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e50:	07dc      	lsls	r4, r3, #31
 8009e52:	d504      	bpl.n	8009e5e <_vfiprintf_r+0x4e>
 8009e54:	f04f 30ff 	mov.w	r0, #4294967295
 8009e58:	b01d      	add	sp, #116	; 0x74
 8009e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e5e:	89ab      	ldrh	r3, [r5, #12]
 8009e60:	0598      	lsls	r0, r3, #22
 8009e62:	d4f7      	bmi.n	8009e54 <_vfiprintf_r+0x44>
 8009e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e66:	f7ff fea1 	bl	8009bac <__retarget_lock_release_recursive>
 8009e6a:	e7f3      	b.n	8009e54 <_vfiprintf_r+0x44>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e70:	2320      	movs	r3, #32
 8009e72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e76:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e7a:	2330      	movs	r3, #48	; 0x30
 8009e7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a030 <_vfiprintf_r+0x220>
 8009e80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e84:	f04f 0901 	mov.w	r9, #1
 8009e88:	4623      	mov	r3, r4
 8009e8a:	469a      	mov	sl, r3
 8009e8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e90:	b10a      	cbz	r2, 8009e96 <_vfiprintf_r+0x86>
 8009e92:	2a25      	cmp	r2, #37	; 0x25
 8009e94:	d1f9      	bne.n	8009e8a <_vfiprintf_r+0x7a>
 8009e96:	ebba 0b04 	subs.w	fp, sl, r4
 8009e9a:	d00b      	beq.n	8009eb4 <_vfiprintf_r+0xa4>
 8009e9c:	465b      	mov	r3, fp
 8009e9e:	4622      	mov	r2, r4
 8009ea0:	4629      	mov	r1, r5
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	f7ff ffa1 	bl	8009dea <__sfputs_r>
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	f000 80a9 	beq.w	800a000 <_vfiprintf_r+0x1f0>
 8009eae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009eb0:	445a      	add	r2, fp
 8009eb2:	9209      	str	r2, [sp, #36]	; 0x24
 8009eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	f000 80a1 	beq.w	800a000 <_vfiprintf_r+0x1f0>
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ec4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ec8:	f10a 0a01 	add.w	sl, sl, #1
 8009ecc:	9304      	str	r3, [sp, #16]
 8009ece:	9307      	str	r3, [sp, #28]
 8009ed0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ed4:	931a      	str	r3, [sp, #104]	; 0x68
 8009ed6:	4654      	mov	r4, sl
 8009ed8:	2205      	movs	r2, #5
 8009eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ede:	4854      	ldr	r0, [pc, #336]	; (800a030 <_vfiprintf_r+0x220>)
 8009ee0:	f7f6 f976 	bl	80001d0 <memchr>
 8009ee4:	9a04      	ldr	r2, [sp, #16]
 8009ee6:	b9d8      	cbnz	r0, 8009f20 <_vfiprintf_r+0x110>
 8009ee8:	06d1      	lsls	r1, r2, #27
 8009eea:	bf44      	itt	mi
 8009eec:	2320      	movmi	r3, #32
 8009eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ef2:	0713      	lsls	r3, r2, #28
 8009ef4:	bf44      	itt	mi
 8009ef6:	232b      	movmi	r3, #43	; 0x2b
 8009ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009efc:	f89a 3000 	ldrb.w	r3, [sl]
 8009f00:	2b2a      	cmp	r3, #42	; 0x2a
 8009f02:	d015      	beq.n	8009f30 <_vfiprintf_r+0x120>
 8009f04:	9a07      	ldr	r2, [sp, #28]
 8009f06:	4654      	mov	r4, sl
 8009f08:	2000      	movs	r0, #0
 8009f0a:	f04f 0c0a 	mov.w	ip, #10
 8009f0e:	4621      	mov	r1, r4
 8009f10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f14:	3b30      	subs	r3, #48	; 0x30
 8009f16:	2b09      	cmp	r3, #9
 8009f18:	d94d      	bls.n	8009fb6 <_vfiprintf_r+0x1a6>
 8009f1a:	b1b0      	cbz	r0, 8009f4a <_vfiprintf_r+0x13a>
 8009f1c:	9207      	str	r2, [sp, #28]
 8009f1e:	e014      	b.n	8009f4a <_vfiprintf_r+0x13a>
 8009f20:	eba0 0308 	sub.w	r3, r0, r8
 8009f24:	fa09 f303 	lsl.w	r3, r9, r3
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	9304      	str	r3, [sp, #16]
 8009f2c:	46a2      	mov	sl, r4
 8009f2e:	e7d2      	b.n	8009ed6 <_vfiprintf_r+0xc6>
 8009f30:	9b03      	ldr	r3, [sp, #12]
 8009f32:	1d19      	adds	r1, r3, #4
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	9103      	str	r1, [sp, #12]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	bfbb      	ittet	lt
 8009f3c:	425b      	neglt	r3, r3
 8009f3e:	f042 0202 	orrlt.w	r2, r2, #2
 8009f42:	9307      	strge	r3, [sp, #28]
 8009f44:	9307      	strlt	r3, [sp, #28]
 8009f46:	bfb8      	it	lt
 8009f48:	9204      	strlt	r2, [sp, #16]
 8009f4a:	7823      	ldrb	r3, [r4, #0]
 8009f4c:	2b2e      	cmp	r3, #46	; 0x2e
 8009f4e:	d10c      	bne.n	8009f6a <_vfiprintf_r+0x15a>
 8009f50:	7863      	ldrb	r3, [r4, #1]
 8009f52:	2b2a      	cmp	r3, #42	; 0x2a
 8009f54:	d134      	bne.n	8009fc0 <_vfiprintf_r+0x1b0>
 8009f56:	9b03      	ldr	r3, [sp, #12]
 8009f58:	1d1a      	adds	r2, r3, #4
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	9203      	str	r2, [sp, #12]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	bfb8      	it	lt
 8009f62:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f66:	3402      	adds	r4, #2
 8009f68:	9305      	str	r3, [sp, #20]
 8009f6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a040 <_vfiprintf_r+0x230>
 8009f6e:	7821      	ldrb	r1, [r4, #0]
 8009f70:	2203      	movs	r2, #3
 8009f72:	4650      	mov	r0, sl
 8009f74:	f7f6 f92c 	bl	80001d0 <memchr>
 8009f78:	b138      	cbz	r0, 8009f8a <_vfiprintf_r+0x17a>
 8009f7a:	9b04      	ldr	r3, [sp, #16]
 8009f7c:	eba0 000a 	sub.w	r0, r0, sl
 8009f80:	2240      	movs	r2, #64	; 0x40
 8009f82:	4082      	lsls	r2, r0
 8009f84:	4313      	orrs	r3, r2
 8009f86:	3401      	adds	r4, #1
 8009f88:	9304      	str	r3, [sp, #16]
 8009f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f8e:	4829      	ldr	r0, [pc, #164]	; (800a034 <_vfiprintf_r+0x224>)
 8009f90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f94:	2206      	movs	r2, #6
 8009f96:	f7f6 f91b 	bl	80001d0 <memchr>
 8009f9a:	2800      	cmp	r0, #0
 8009f9c:	d03f      	beq.n	800a01e <_vfiprintf_r+0x20e>
 8009f9e:	4b26      	ldr	r3, [pc, #152]	; (800a038 <_vfiprintf_r+0x228>)
 8009fa0:	bb1b      	cbnz	r3, 8009fea <_vfiprintf_r+0x1da>
 8009fa2:	9b03      	ldr	r3, [sp, #12]
 8009fa4:	3307      	adds	r3, #7
 8009fa6:	f023 0307 	bic.w	r3, r3, #7
 8009faa:	3308      	adds	r3, #8
 8009fac:	9303      	str	r3, [sp, #12]
 8009fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fb0:	443b      	add	r3, r7
 8009fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8009fb4:	e768      	b.n	8009e88 <_vfiprintf_r+0x78>
 8009fb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fba:	460c      	mov	r4, r1
 8009fbc:	2001      	movs	r0, #1
 8009fbe:	e7a6      	b.n	8009f0e <_vfiprintf_r+0xfe>
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	3401      	adds	r4, #1
 8009fc4:	9305      	str	r3, [sp, #20]
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	f04f 0c0a 	mov.w	ip, #10
 8009fcc:	4620      	mov	r0, r4
 8009fce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fd2:	3a30      	subs	r2, #48	; 0x30
 8009fd4:	2a09      	cmp	r2, #9
 8009fd6:	d903      	bls.n	8009fe0 <_vfiprintf_r+0x1d0>
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d0c6      	beq.n	8009f6a <_vfiprintf_r+0x15a>
 8009fdc:	9105      	str	r1, [sp, #20]
 8009fde:	e7c4      	b.n	8009f6a <_vfiprintf_r+0x15a>
 8009fe0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fe4:	4604      	mov	r4, r0
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e7f0      	b.n	8009fcc <_vfiprintf_r+0x1bc>
 8009fea:	ab03      	add	r3, sp, #12
 8009fec:	9300      	str	r3, [sp, #0]
 8009fee:	462a      	mov	r2, r5
 8009ff0:	4b12      	ldr	r3, [pc, #72]	; (800a03c <_vfiprintf_r+0x22c>)
 8009ff2:	a904      	add	r1, sp, #16
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	f3af 8000 	nop.w
 8009ffa:	4607      	mov	r7, r0
 8009ffc:	1c78      	adds	r0, r7, #1
 8009ffe:	d1d6      	bne.n	8009fae <_vfiprintf_r+0x19e>
 800a000:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a002:	07d9      	lsls	r1, r3, #31
 800a004:	d405      	bmi.n	800a012 <_vfiprintf_r+0x202>
 800a006:	89ab      	ldrh	r3, [r5, #12]
 800a008:	059a      	lsls	r2, r3, #22
 800a00a:	d402      	bmi.n	800a012 <_vfiprintf_r+0x202>
 800a00c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a00e:	f7ff fdcd 	bl	8009bac <__retarget_lock_release_recursive>
 800a012:	89ab      	ldrh	r3, [r5, #12]
 800a014:	065b      	lsls	r3, r3, #25
 800a016:	f53f af1d 	bmi.w	8009e54 <_vfiprintf_r+0x44>
 800a01a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a01c:	e71c      	b.n	8009e58 <_vfiprintf_r+0x48>
 800a01e:	ab03      	add	r3, sp, #12
 800a020:	9300      	str	r3, [sp, #0]
 800a022:	462a      	mov	r2, r5
 800a024:	4b05      	ldr	r3, [pc, #20]	; (800a03c <_vfiprintf_r+0x22c>)
 800a026:	a904      	add	r1, sp, #16
 800a028:	4630      	mov	r0, r6
 800a02a:	f000 f879 	bl	800a120 <_printf_i>
 800a02e:	e7e4      	b.n	8009ffa <_vfiprintf_r+0x1ea>
 800a030:	0800a6cc 	.word	0x0800a6cc
 800a034:	0800a6d6 	.word	0x0800a6d6
 800a038:	00000000 	.word	0x00000000
 800a03c:	08009deb 	.word	0x08009deb
 800a040:	0800a6d2 	.word	0x0800a6d2

0800a044 <_printf_common>:
 800a044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a048:	4616      	mov	r6, r2
 800a04a:	4699      	mov	r9, r3
 800a04c:	688a      	ldr	r2, [r1, #8]
 800a04e:	690b      	ldr	r3, [r1, #16]
 800a050:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a054:	4293      	cmp	r3, r2
 800a056:	bfb8      	it	lt
 800a058:	4613      	movlt	r3, r2
 800a05a:	6033      	str	r3, [r6, #0]
 800a05c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a060:	4607      	mov	r7, r0
 800a062:	460c      	mov	r4, r1
 800a064:	b10a      	cbz	r2, 800a06a <_printf_common+0x26>
 800a066:	3301      	adds	r3, #1
 800a068:	6033      	str	r3, [r6, #0]
 800a06a:	6823      	ldr	r3, [r4, #0]
 800a06c:	0699      	lsls	r1, r3, #26
 800a06e:	bf42      	ittt	mi
 800a070:	6833      	ldrmi	r3, [r6, #0]
 800a072:	3302      	addmi	r3, #2
 800a074:	6033      	strmi	r3, [r6, #0]
 800a076:	6825      	ldr	r5, [r4, #0]
 800a078:	f015 0506 	ands.w	r5, r5, #6
 800a07c:	d106      	bne.n	800a08c <_printf_common+0x48>
 800a07e:	f104 0a19 	add.w	sl, r4, #25
 800a082:	68e3      	ldr	r3, [r4, #12]
 800a084:	6832      	ldr	r2, [r6, #0]
 800a086:	1a9b      	subs	r3, r3, r2
 800a088:	42ab      	cmp	r3, r5
 800a08a:	dc26      	bgt.n	800a0da <_printf_common+0x96>
 800a08c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a090:	1e13      	subs	r3, r2, #0
 800a092:	6822      	ldr	r2, [r4, #0]
 800a094:	bf18      	it	ne
 800a096:	2301      	movne	r3, #1
 800a098:	0692      	lsls	r2, r2, #26
 800a09a:	d42b      	bmi.n	800a0f4 <_printf_common+0xb0>
 800a09c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0a0:	4649      	mov	r1, r9
 800a0a2:	4638      	mov	r0, r7
 800a0a4:	47c0      	blx	r8
 800a0a6:	3001      	adds	r0, #1
 800a0a8:	d01e      	beq.n	800a0e8 <_printf_common+0xa4>
 800a0aa:	6823      	ldr	r3, [r4, #0]
 800a0ac:	6922      	ldr	r2, [r4, #16]
 800a0ae:	f003 0306 	and.w	r3, r3, #6
 800a0b2:	2b04      	cmp	r3, #4
 800a0b4:	bf02      	ittt	eq
 800a0b6:	68e5      	ldreq	r5, [r4, #12]
 800a0b8:	6833      	ldreq	r3, [r6, #0]
 800a0ba:	1aed      	subeq	r5, r5, r3
 800a0bc:	68a3      	ldr	r3, [r4, #8]
 800a0be:	bf0c      	ite	eq
 800a0c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0c4:	2500      	movne	r5, #0
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	bfc4      	itt	gt
 800a0ca:	1a9b      	subgt	r3, r3, r2
 800a0cc:	18ed      	addgt	r5, r5, r3
 800a0ce:	2600      	movs	r6, #0
 800a0d0:	341a      	adds	r4, #26
 800a0d2:	42b5      	cmp	r5, r6
 800a0d4:	d11a      	bne.n	800a10c <_printf_common+0xc8>
 800a0d6:	2000      	movs	r0, #0
 800a0d8:	e008      	b.n	800a0ec <_printf_common+0xa8>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	4652      	mov	r2, sl
 800a0de:	4649      	mov	r1, r9
 800a0e0:	4638      	mov	r0, r7
 800a0e2:	47c0      	blx	r8
 800a0e4:	3001      	adds	r0, #1
 800a0e6:	d103      	bne.n	800a0f0 <_printf_common+0xac>
 800a0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0f0:	3501      	adds	r5, #1
 800a0f2:	e7c6      	b.n	800a082 <_printf_common+0x3e>
 800a0f4:	18e1      	adds	r1, r4, r3
 800a0f6:	1c5a      	adds	r2, r3, #1
 800a0f8:	2030      	movs	r0, #48	; 0x30
 800a0fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0fe:	4422      	add	r2, r4
 800a100:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a104:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a108:	3302      	adds	r3, #2
 800a10a:	e7c7      	b.n	800a09c <_printf_common+0x58>
 800a10c:	2301      	movs	r3, #1
 800a10e:	4622      	mov	r2, r4
 800a110:	4649      	mov	r1, r9
 800a112:	4638      	mov	r0, r7
 800a114:	47c0      	blx	r8
 800a116:	3001      	adds	r0, #1
 800a118:	d0e6      	beq.n	800a0e8 <_printf_common+0xa4>
 800a11a:	3601      	adds	r6, #1
 800a11c:	e7d9      	b.n	800a0d2 <_printf_common+0x8e>
	...

0800a120 <_printf_i>:
 800a120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a124:	7e0f      	ldrb	r7, [r1, #24]
 800a126:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a128:	2f78      	cmp	r7, #120	; 0x78
 800a12a:	4691      	mov	r9, r2
 800a12c:	4680      	mov	r8, r0
 800a12e:	460c      	mov	r4, r1
 800a130:	469a      	mov	sl, r3
 800a132:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a136:	d807      	bhi.n	800a148 <_printf_i+0x28>
 800a138:	2f62      	cmp	r7, #98	; 0x62
 800a13a:	d80a      	bhi.n	800a152 <_printf_i+0x32>
 800a13c:	2f00      	cmp	r7, #0
 800a13e:	f000 80d4 	beq.w	800a2ea <_printf_i+0x1ca>
 800a142:	2f58      	cmp	r7, #88	; 0x58
 800a144:	f000 80c0 	beq.w	800a2c8 <_printf_i+0x1a8>
 800a148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a14c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a150:	e03a      	b.n	800a1c8 <_printf_i+0xa8>
 800a152:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a156:	2b15      	cmp	r3, #21
 800a158:	d8f6      	bhi.n	800a148 <_printf_i+0x28>
 800a15a:	a101      	add	r1, pc, #4	; (adr r1, 800a160 <_printf_i+0x40>)
 800a15c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a160:	0800a1b9 	.word	0x0800a1b9
 800a164:	0800a1cd 	.word	0x0800a1cd
 800a168:	0800a149 	.word	0x0800a149
 800a16c:	0800a149 	.word	0x0800a149
 800a170:	0800a149 	.word	0x0800a149
 800a174:	0800a149 	.word	0x0800a149
 800a178:	0800a1cd 	.word	0x0800a1cd
 800a17c:	0800a149 	.word	0x0800a149
 800a180:	0800a149 	.word	0x0800a149
 800a184:	0800a149 	.word	0x0800a149
 800a188:	0800a149 	.word	0x0800a149
 800a18c:	0800a2d1 	.word	0x0800a2d1
 800a190:	0800a1f9 	.word	0x0800a1f9
 800a194:	0800a28b 	.word	0x0800a28b
 800a198:	0800a149 	.word	0x0800a149
 800a19c:	0800a149 	.word	0x0800a149
 800a1a0:	0800a2f3 	.word	0x0800a2f3
 800a1a4:	0800a149 	.word	0x0800a149
 800a1a8:	0800a1f9 	.word	0x0800a1f9
 800a1ac:	0800a149 	.word	0x0800a149
 800a1b0:	0800a149 	.word	0x0800a149
 800a1b4:	0800a293 	.word	0x0800a293
 800a1b8:	682b      	ldr	r3, [r5, #0]
 800a1ba:	1d1a      	adds	r2, r3, #4
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	602a      	str	r2, [r5, #0]
 800a1c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	e09f      	b.n	800a30c <_printf_i+0x1ec>
 800a1cc:	6820      	ldr	r0, [r4, #0]
 800a1ce:	682b      	ldr	r3, [r5, #0]
 800a1d0:	0607      	lsls	r7, r0, #24
 800a1d2:	f103 0104 	add.w	r1, r3, #4
 800a1d6:	6029      	str	r1, [r5, #0]
 800a1d8:	d501      	bpl.n	800a1de <_printf_i+0xbe>
 800a1da:	681e      	ldr	r6, [r3, #0]
 800a1dc:	e003      	b.n	800a1e6 <_printf_i+0xc6>
 800a1de:	0646      	lsls	r6, r0, #25
 800a1e0:	d5fb      	bpl.n	800a1da <_printf_i+0xba>
 800a1e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a1e6:	2e00      	cmp	r6, #0
 800a1e8:	da03      	bge.n	800a1f2 <_printf_i+0xd2>
 800a1ea:	232d      	movs	r3, #45	; 0x2d
 800a1ec:	4276      	negs	r6, r6
 800a1ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1f2:	485a      	ldr	r0, [pc, #360]	; (800a35c <_printf_i+0x23c>)
 800a1f4:	230a      	movs	r3, #10
 800a1f6:	e012      	b.n	800a21e <_printf_i+0xfe>
 800a1f8:	682b      	ldr	r3, [r5, #0]
 800a1fa:	6820      	ldr	r0, [r4, #0]
 800a1fc:	1d19      	adds	r1, r3, #4
 800a1fe:	6029      	str	r1, [r5, #0]
 800a200:	0605      	lsls	r5, r0, #24
 800a202:	d501      	bpl.n	800a208 <_printf_i+0xe8>
 800a204:	681e      	ldr	r6, [r3, #0]
 800a206:	e002      	b.n	800a20e <_printf_i+0xee>
 800a208:	0641      	lsls	r1, r0, #25
 800a20a:	d5fb      	bpl.n	800a204 <_printf_i+0xe4>
 800a20c:	881e      	ldrh	r6, [r3, #0]
 800a20e:	4853      	ldr	r0, [pc, #332]	; (800a35c <_printf_i+0x23c>)
 800a210:	2f6f      	cmp	r7, #111	; 0x6f
 800a212:	bf0c      	ite	eq
 800a214:	2308      	moveq	r3, #8
 800a216:	230a      	movne	r3, #10
 800a218:	2100      	movs	r1, #0
 800a21a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a21e:	6865      	ldr	r5, [r4, #4]
 800a220:	60a5      	str	r5, [r4, #8]
 800a222:	2d00      	cmp	r5, #0
 800a224:	bfa2      	ittt	ge
 800a226:	6821      	ldrge	r1, [r4, #0]
 800a228:	f021 0104 	bicge.w	r1, r1, #4
 800a22c:	6021      	strge	r1, [r4, #0]
 800a22e:	b90e      	cbnz	r6, 800a234 <_printf_i+0x114>
 800a230:	2d00      	cmp	r5, #0
 800a232:	d04b      	beq.n	800a2cc <_printf_i+0x1ac>
 800a234:	4615      	mov	r5, r2
 800a236:	fbb6 f1f3 	udiv	r1, r6, r3
 800a23a:	fb03 6711 	mls	r7, r3, r1, r6
 800a23e:	5dc7      	ldrb	r7, [r0, r7]
 800a240:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a244:	4637      	mov	r7, r6
 800a246:	42bb      	cmp	r3, r7
 800a248:	460e      	mov	r6, r1
 800a24a:	d9f4      	bls.n	800a236 <_printf_i+0x116>
 800a24c:	2b08      	cmp	r3, #8
 800a24e:	d10b      	bne.n	800a268 <_printf_i+0x148>
 800a250:	6823      	ldr	r3, [r4, #0]
 800a252:	07de      	lsls	r6, r3, #31
 800a254:	d508      	bpl.n	800a268 <_printf_i+0x148>
 800a256:	6923      	ldr	r3, [r4, #16]
 800a258:	6861      	ldr	r1, [r4, #4]
 800a25a:	4299      	cmp	r1, r3
 800a25c:	bfde      	ittt	le
 800a25e:	2330      	movle	r3, #48	; 0x30
 800a260:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a264:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a268:	1b52      	subs	r2, r2, r5
 800a26a:	6122      	str	r2, [r4, #16]
 800a26c:	f8cd a000 	str.w	sl, [sp]
 800a270:	464b      	mov	r3, r9
 800a272:	aa03      	add	r2, sp, #12
 800a274:	4621      	mov	r1, r4
 800a276:	4640      	mov	r0, r8
 800a278:	f7ff fee4 	bl	800a044 <_printf_common>
 800a27c:	3001      	adds	r0, #1
 800a27e:	d14a      	bne.n	800a316 <_printf_i+0x1f6>
 800a280:	f04f 30ff 	mov.w	r0, #4294967295
 800a284:	b004      	add	sp, #16
 800a286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a28a:	6823      	ldr	r3, [r4, #0]
 800a28c:	f043 0320 	orr.w	r3, r3, #32
 800a290:	6023      	str	r3, [r4, #0]
 800a292:	4833      	ldr	r0, [pc, #204]	; (800a360 <_printf_i+0x240>)
 800a294:	2778      	movs	r7, #120	; 0x78
 800a296:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a29a:	6823      	ldr	r3, [r4, #0]
 800a29c:	6829      	ldr	r1, [r5, #0]
 800a29e:	061f      	lsls	r7, r3, #24
 800a2a0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a2a4:	d402      	bmi.n	800a2ac <_printf_i+0x18c>
 800a2a6:	065f      	lsls	r7, r3, #25
 800a2a8:	bf48      	it	mi
 800a2aa:	b2b6      	uxthmi	r6, r6
 800a2ac:	07df      	lsls	r7, r3, #31
 800a2ae:	bf48      	it	mi
 800a2b0:	f043 0320 	orrmi.w	r3, r3, #32
 800a2b4:	6029      	str	r1, [r5, #0]
 800a2b6:	bf48      	it	mi
 800a2b8:	6023      	strmi	r3, [r4, #0]
 800a2ba:	b91e      	cbnz	r6, 800a2c4 <_printf_i+0x1a4>
 800a2bc:	6823      	ldr	r3, [r4, #0]
 800a2be:	f023 0320 	bic.w	r3, r3, #32
 800a2c2:	6023      	str	r3, [r4, #0]
 800a2c4:	2310      	movs	r3, #16
 800a2c6:	e7a7      	b.n	800a218 <_printf_i+0xf8>
 800a2c8:	4824      	ldr	r0, [pc, #144]	; (800a35c <_printf_i+0x23c>)
 800a2ca:	e7e4      	b.n	800a296 <_printf_i+0x176>
 800a2cc:	4615      	mov	r5, r2
 800a2ce:	e7bd      	b.n	800a24c <_printf_i+0x12c>
 800a2d0:	682b      	ldr	r3, [r5, #0]
 800a2d2:	6826      	ldr	r6, [r4, #0]
 800a2d4:	6961      	ldr	r1, [r4, #20]
 800a2d6:	1d18      	adds	r0, r3, #4
 800a2d8:	6028      	str	r0, [r5, #0]
 800a2da:	0635      	lsls	r5, r6, #24
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	d501      	bpl.n	800a2e4 <_printf_i+0x1c4>
 800a2e0:	6019      	str	r1, [r3, #0]
 800a2e2:	e002      	b.n	800a2ea <_printf_i+0x1ca>
 800a2e4:	0670      	lsls	r0, r6, #25
 800a2e6:	d5fb      	bpl.n	800a2e0 <_printf_i+0x1c0>
 800a2e8:	8019      	strh	r1, [r3, #0]
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	6123      	str	r3, [r4, #16]
 800a2ee:	4615      	mov	r5, r2
 800a2f0:	e7bc      	b.n	800a26c <_printf_i+0x14c>
 800a2f2:	682b      	ldr	r3, [r5, #0]
 800a2f4:	1d1a      	adds	r2, r3, #4
 800a2f6:	602a      	str	r2, [r5, #0]
 800a2f8:	681d      	ldr	r5, [r3, #0]
 800a2fa:	6862      	ldr	r2, [r4, #4]
 800a2fc:	2100      	movs	r1, #0
 800a2fe:	4628      	mov	r0, r5
 800a300:	f7f5 ff66 	bl	80001d0 <memchr>
 800a304:	b108      	cbz	r0, 800a30a <_printf_i+0x1ea>
 800a306:	1b40      	subs	r0, r0, r5
 800a308:	6060      	str	r0, [r4, #4]
 800a30a:	6863      	ldr	r3, [r4, #4]
 800a30c:	6123      	str	r3, [r4, #16]
 800a30e:	2300      	movs	r3, #0
 800a310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a314:	e7aa      	b.n	800a26c <_printf_i+0x14c>
 800a316:	6923      	ldr	r3, [r4, #16]
 800a318:	462a      	mov	r2, r5
 800a31a:	4649      	mov	r1, r9
 800a31c:	4640      	mov	r0, r8
 800a31e:	47d0      	blx	sl
 800a320:	3001      	adds	r0, #1
 800a322:	d0ad      	beq.n	800a280 <_printf_i+0x160>
 800a324:	6823      	ldr	r3, [r4, #0]
 800a326:	079b      	lsls	r3, r3, #30
 800a328:	d413      	bmi.n	800a352 <_printf_i+0x232>
 800a32a:	68e0      	ldr	r0, [r4, #12]
 800a32c:	9b03      	ldr	r3, [sp, #12]
 800a32e:	4298      	cmp	r0, r3
 800a330:	bfb8      	it	lt
 800a332:	4618      	movlt	r0, r3
 800a334:	e7a6      	b.n	800a284 <_printf_i+0x164>
 800a336:	2301      	movs	r3, #1
 800a338:	4632      	mov	r2, r6
 800a33a:	4649      	mov	r1, r9
 800a33c:	4640      	mov	r0, r8
 800a33e:	47d0      	blx	sl
 800a340:	3001      	adds	r0, #1
 800a342:	d09d      	beq.n	800a280 <_printf_i+0x160>
 800a344:	3501      	adds	r5, #1
 800a346:	68e3      	ldr	r3, [r4, #12]
 800a348:	9903      	ldr	r1, [sp, #12]
 800a34a:	1a5b      	subs	r3, r3, r1
 800a34c:	42ab      	cmp	r3, r5
 800a34e:	dcf2      	bgt.n	800a336 <_printf_i+0x216>
 800a350:	e7eb      	b.n	800a32a <_printf_i+0x20a>
 800a352:	2500      	movs	r5, #0
 800a354:	f104 0619 	add.w	r6, r4, #25
 800a358:	e7f5      	b.n	800a346 <_printf_i+0x226>
 800a35a:	bf00      	nop
 800a35c:	0800a6dd 	.word	0x0800a6dd
 800a360:	0800a6ee 	.word	0x0800a6ee

0800a364 <__sflush_r>:
 800a364:	898a      	ldrh	r2, [r1, #12]
 800a366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a36a:	4605      	mov	r5, r0
 800a36c:	0710      	lsls	r0, r2, #28
 800a36e:	460c      	mov	r4, r1
 800a370:	d458      	bmi.n	800a424 <__sflush_r+0xc0>
 800a372:	684b      	ldr	r3, [r1, #4]
 800a374:	2b00      	cmp	r3, #0
 800a376:	dc05      	bgt.n	800a384 <__sflush_r+0x20>
 800a378:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	dc02      	bgt.n	800a384 <__sflush_r+0x20>
 800a37e:	2000      	movs	r0, #0
 800a380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a384:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a386:	2e00      	cmp	r6, #0
 800a388:	d0f9      	beq.n	800a37e <__sflush_r+0x1a>
 800a38a:	2300      	movs	r3, #0
 800a38c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a390:	682f      	ldr	r7, [r5, #0]
 800a392:	6a21      	ldr	r1, [r4, #32]
 800a394:	602b      	str	r3, [r5, #0]
 800a396:	d032      	beq.n	800a3fe <__sflush_r+0x9a>
 800a398:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a39a:	89a3      	ldrh	r3, [r4, #12]
 800a39c:	075a      	lsls	r2, r3, #29
 800a39e:	d505      	bpl.n	800a3ac <__sflush_r+0x48>
 800a3a0:	6863      	ldr	r3, [r4, #4]
 800a3a2:	1ac0      	subs	r0, r0, r3
 800a3a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3a6:	b10b      	cbz	r3, 800a3ac <__sflush_r+0x48>
 800a3a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3aa:	1ac0      	subs	r0, r0, r3
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3b2:	6a21      	ldr	r1, [r4, #32]
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	47b0      	blx	r6
 800a3b8:	1c43      	adds	r3, r0, #1
 800a3ba:	89a3      	ldrh	r3, [r4, #12]
 800a3bc:	d106      	bne.n	800a3cc <__sflush_r+0x68>
 800a3be:	6829      	ldr	r1, [r5, #0]
 800a3c0:	291d      	cmp	r1, #29
 800a3c2:	d82b      	bhi.n	800a41c <__sflush_r+0xb8>
 800a3c4:	4a29      	ldr	r2, [pc, #164]	; (800a46c <__sflush_r+0x108>)
 800a3c6:	410a      	asrs	r2, r1
 800a3c8:	07d6      	lsls	r6, r2, #31
 800a3ca:	d427      	bmi.n	800a41c <__sflush_r+0xb8>
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	6062      	str	r2, [r4, #4]
 800a3d0:	04d9      	lsls	r1, r3, #19
 800a3d2:	6922      	ldr	r2, [r4, #16]
 800a3d4:	6022      	str	r2, [r4, #0]
 800a3d6:	d504      	bpl.n	800a3e2 <__sflush_r+0x7e>
 800a3d8:	1c42      	adds	r2, r0, #1
 800a3da:	d101      	bne.n	800a3e0 <__sflush_r+0x7c>
 800a3dc:	682b      	ldr	r3, [r5, #0]
 800a3de:	b903      	cbnz	r3, 800a3e2 <__sflush_r+0x7e>
 800a3e0:	6560      	str	r0, [r4, #84]	; 0x54
 800a3e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3e4:	602f      	str	r7, [r5, #0]
 800a3e6:	2900      	cmp	r1, #0
 800a3e8:	d0c9      	beq.n	800a37e <__sflush_r+0x1a>
 800a3ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3ee:	4299      	cmp	r1, r3
 800a3f0:	d002      	beq.n	800a3f8 <__sflush_r+0x94>
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	f7ff fbea 	bl	8009bcc <_free_r>
 800a3f8:	2000      	movs	r0, #0
 800a3fa:	6360      	str	r0, [r4, #52]	; 0x34
 800a3fc:	e7c0      	b.n	800a380 <__sflush_r+0x1c>
 800a3fe:	2301      	movs	r3, #1
 800a400:	4628      	mov	r0, r5
 800a402:	47b0      	blx	r6
 800a404:	1c41      	adds	r1, r0, #1
 800a406:	d1c8      	bne.n	800a39a <__sflush_r+0x36>
 800a408:	682b      	ldr	r3, [r5, #0]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d0c5      	beq.n	800a39a <__sflush_r+0x36>
 800a40e:	2b1d      	cmp	r3, #29
 800a410:	d001      	beq.n	800a416 <__sflush_r+0xb2>
 800a412:	2b16      	cmp	r3, #22
 800a414:	d101      	bne.n	800a41a <__sflush_r+0xb6>
 800a416:	602f      	str	r7, [r5, #0]
 800a418:	e7b1      	b.n	800a37e <__sflush_r+0x1a>
 800a41a:	89a3      	ldrh	r3, [r4, #12]
 800a41c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a420:	81a3      	strh	r3, [r4, #12]
 800a422:	e7ad      	b.n	800a380 <__sflush_r+0x1c>
 800a424:	690f      	ldr	r7, [r1, #16]
 800a426:	2f00      	cmp	r7, #0
 800a428:	d0a9      	beq.n	800a37e <__sflush_r+0x1a>
 800a42a:	0793      	lsls	r3, r2, #30
 800a42c:	680e      	ldr	r6, [r1, #0]
 800a42e:	bf08      	it	eq
 800a430:	694b      	ldreq	r3, [r1, #20]
 800a432:	600f      	str	r7, [r1, #0]
 800a434:	bf18      	it	ne
 800a436:	2300      	movne	r3, #0
 800a438:	eba6 0807 	sub.w	r8, r6, r7
 800a43c:	608b      	str	r3, [r1, #8]
 800a43e:	f1b8 0f00 	cmp.w	r8, #0
 800a442:	dd9c      	ble.n	800a37e <__sflush_r+0x1a>
 800a444:	6a21      	ldr	r1, [r4, #32]
 800a446:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a448:	4643      	mov	r3, r8
 800a44a:	463a      	mov	r2, r7
 800a44c:	4628      	mov	r0, r5
 800a44e:	47b0      	blx	r6
 800a450:	2800      	cmp	r0, #0
 800a452:	dc06      	bgt.n	800a462 <__sflush_r+0xfe>
 800a454:	89a3      	ldrh	r3, [r4, #12]
 800a456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a45a:	81a3      	strh	r3, [r4, #12]
 800a45c:	f04f 30ff 	mov.w	r0, #4294967295
 800a460:	e78e      	b.n	800a380 <__sflush_r+0x1c>
 800a462:	4407      	add	r7, r0
 800a464:	eba8 0800 	sub.w	r8, r8, r0
 800a468:	e7e9      	b.n	800a43e <__sflush_r+0xda>
 800a46a:	bf00      	nop
 800a46c:	dfbffffe 	.word	0xdfbffffe

0800a470 <_fflush_r>:
 800a470:	b538      	push	{r3, r4, r5, lr}
 800a472:	690b      	ldr	r3, [r1, #16]
 800a474:	4605      	mov	r5, r0
 800a476:	460c      	mov	r4, r1
 800a478:	b913      	cbnz	r3, 800a480 <_fflush_r+0x10>
 800a47a:	2500      	movs	r5, #0
 800a47c:	4628      	mov	r0, r5
 800a47e:	bd38      	pop	{r3, r4, r5, pc}
 800a480:	b118      	cbz	r0, 800a48a <_fflush_r+0x1a>
 800a482:	6a03      	ldr	r3, [r0, #32]
 800a484:	b90b      	cbnz	r3, 800a48a <_fflush_r+0x1a>
 800a486:	f7ff f945 	bl	8009714 <__sinit>
 800a48a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d0f3      	beq.n	800a47a <_fflush_r+0xa>
 800a492:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a494:	07d0      	lsls	r0, r2, #31
 800a496:	d404      	bmi.n	800a4a2 <_fflush_r+0x32>
 800a498:	0599      	lsls	r1, r3, #22
 800a49a:	d402      	bmi.n	800a4a2 <_fflush_r+0x32>
 800a49c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a49e:	f7ff fb84 	bl	8009baa <__retarget_lock_acquire_recursive>
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	4621      	mov	r1, r4
 800a4a6:	f7ff ff5d 	bl	800a364 <__sflush_r>
 800a4aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4ac:	07da      	lsls	r2, r3, #31
 800a4ae:	4605      	mov	r5, r0
 800a4b0:	d4e4      	bmi.n	800a47c <_fflush_r+0xc>
 800a4b2:	89a3      	ldrh	r3, [r4, #12]
 800a4b4:	059b      	lsls	r3, r3, #22
 800a4b6:	d4e1      	bmi.n	800a47c <_fflush_r+0xc>
 800a4b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4ba:	f7ff fb77 	bl	8009bac <__retarget_lock_release_recursive>
 800a4be:	e7dd      	b.n	800a47c <_fflush_r+0xc>

0800a4c0 <__swhatbuf_r>:
 800a4c0:	b570      	push	{r4, r5, r6, lr}
 800a4c2:	460c      	mov	r4, r1
 800a4c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4c8:	2900      	cmp	r1, #0
 800a4ca:	b096      	sub	sp, #88	; 0x58
 800a4cc:	4615      	mov	r5, r2
 800a4ce:	461e      	mov	r6, r3
 800a4d0:	da0d      	bge.n	800a4ee <__swhatbuf_r+0x2e>
 800a4d2:	89a3      	ldrh	r3, [r4, #12]
 800a4d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a4d8:	f04f 0100 	mov.w	r1, #0
 800a4dc:	bf0c      	ite	eq
 800a4de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a4e2:	2340      	movne	r3, #64	; 0x40
 800a4e4:	2000      	movs	r0, #0
 800a4e6:	6031      	str	r1, [r6, #0]
 800a4e8:	602b      	str	r3, [r5, #0]
 800a4ea:	b016      	add	sp, #88	; 0x58
 800a4ec:	bd70      	pop	{r4, r5, r6, pc}
 800a4ee:	466a      	mov	r2, sp
 800a4f0:	f000 f848 	bl	800a584 <_fstat_r>
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	dbec      	blt.n	800a4d2 <__swhatbuf_r+0x12>
 800a4f8:	9901      	ldr	r1, [sp, #4]
 800a4fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a4fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a502:	4259      	negs	r1, r3
 800a504:	4159      	adcs	r1, r3
 800a506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a50a:	e7eb      	b.n	800a4e4 <__swhatbuf_r+0x24>

0800a50c <__smakebuf_r>:
 800a50c:	898b      	ldrh	r3, [r1, #12]
 800a50e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a510:	079d      	lsls	r5, r3, #30
 800a512:	4606      	mov	r6, r0
 800a514:	460c      	mov	r4, r1
 800a516:	d507      	bpl.n	800a528 <__smakebuf_r+0x1c>
 800a518:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a51c:	6023      	str	r3, [r4, #0]
 800a51e:	6123      	str	r3, [r4, #16]
 800a520:	2301      	movs	r3, #1
 800a522:	6163      	str	r3, [r4, #20]
 800a524:	b002      	add	sp, #8
 800a526:	bd70      	pop	{r4, r5, r6, pc}
 800a528:	ab01      	add	r3, sp, #4
 800a52a:	466a      	mov	r2, sp
 800a52c:	f7ff ffc8 	bl	800a4c0 <__swhatbuf_r>
 800a530:	9900      	ldr	r1, [sp, #0]
 800a532:	4605      	mov	r5, r0
 800a534:	4630      	mov	r0, r6
 800a536:	f7ff fbb5 	bl	8009ca4 <_malloc_r>
 800a53a:	b948      	cbnz	r0, 800a550 <__smakebuf_r+0x44>
 800a53c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a540:	059a      	lsls	r2, r3, #22
 800a542:	d4ef      	bmi.n	800a524 <__smakebuf_r+0x18>
 800a544:	f023 0303 	bic.w	r3, r3, #3
 800a548:	f043 0302 	orr.w	r3, r3, #2
 800a54c:	81a3      	strh	r3, [r4, #12]
 800a54e:	e7e3      	b.n	800a518 <__smakebuf_r+0xc>
 800a550:	89a3      	ldrh	r3, [r4, #12]
 800a552:	6020      	str	r0, [r4, #0]
 800a554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a558:	81a3      	strh	r3, [r4, #12]
 800a55a:	9b00      	ldr	r3, [sp, #0]
 800a55c:	6163      	str	r3, [r4, #20]
 800a55e:	9b01      	ldr	r3, [sp, #4]
 800a560:	6120      	str	r0, [r4, #16]
 800a562:	b15b      	cbz	r3, 800a57c <__smakebuf_r+0x70>
 800a564:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a568:	4630      	mov	r0, r6
 800a56a:	f000 f81d 	bl	800a5a8 <_isatty_r>
 800a56e:	b128      	cbz	r0, 800a57c <__smakebuf_r+0x70>
 800a570:	89a3      	ldrh	r3, [r4, #12]
 800a572:	f023 0303 	bic.w	r3, r3, #3
 800a576:	f043 0301 	orr.w	r3, r3, #1
 800a57a:	81a3      	strh	r3, [r4, #12]
 800a57c:	89a3      	ldrh	r3, [r4, #12]
 800a57e:	431d      	orrs	r5, r3
 800a580:	81a5      	strh	r5, [r4, #12]
 800a582:	e7cf      	b.n	800a524 <__smakebuf_r+0x18>

0800a584 <_fstat_r>:
 800a584:	b538      	push	{r3, r4, r5, lr}
 800a586:	4d07      	ldr	r5, [pc, #28]	; (800a5a4 <_fstat_r+0x20>)
 800a588:	2300      	movs	r3, #0
 800a58a:	4604      	mov	r4, r0
 800a58c:	4608      	mov	r0, r1
 800a58e:	4611      	mov	r1, r2
 800a590:	602b      	str	r3, [r5, #0]
 800a592:	f7f7 f850 	bl	8001636 <_fstat>
 800a596:	1c43      	adds	r3, r0, #1
 800a598:	d102      	bne.n	800a5a0 <_fstat_r+0x1c>
 800a59a:	682b      	ldr	r3, [r5, #0]
 800a59c:	b103      	cbz	r3, 800a5a0 <_fstat_r+0x1c>
 800a59e:	6023      	str	r3, [r4, #0]
 800a5a0:	bd38      	pop	{r3, r4, r5, pc}
 800a5a2:	bf00      	nop
 800a5a4:	20003a90 	.word	0x20003a90

0800a5a8 <_isatty_r>:
 800a5a8:	b538      	push	{r3, r4, r5, lr}
 800a5aa:	4d06      	ldr	r5, [pc, #24]	; (800a5c4 <_isatty_r+0x1c>)
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	4608      	mov	r0, r1
 800a5b2:	602b      	str	r3, [r5, #0]
 800a5b4:	f7f7 f84f 	bl	8001656 <_isatty>
 800a5b8:	1c43      	adds	r3, r0, #1
 800a5ba:	d102      	bne.n	800a5c2 <_isatty_r+0x1a>
 800a5bc:	682b      	ldr	r3, [r5, #0]
 800a5be:	b103      	cbz	r3, 800a5c2 <_isatty_r+0x1a>
 800a5c0:	6023      	str	r3, [r4, #0]
 800a5c2:	bd38      	pop	{r3, r4, r5, pc}
 800a5c4:	20003a90 	.word	0x20003a90

0800a5c8 <_sbrk_r>:
 800a5c8:	b538      	push	{r3, r4, r5, lr}
 800a5ca:	4d06      	ldr	r5, [pc, #24]	; (800a5e4 <_sbrk_r+0x1c>)
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	4608      	mov	r0, r1
 800a5d2:	602b      	str	r3, [r5, #0]
 800a5d4:	f7f7 f858 	bl	8001688 <_sbrk>
 800a5d8:	1c43      	adds	r3, r0, #1
 800a5da:	d102      	bne.n	800a5e2 <_sbrk_r+0x1a>
 800a5dc:	682b      	ldr	r3, [r5, #0]
 800a5de:	b103      	cbz	r3, 800a5e2 <_sbrk_r+0x1a>
 800a5e0:	6023      	str	r3, [r4, #0]
 800a5e2:	bd38      	pop	{r3, r4, r5, pc}
 800a5e4:	20003a90 	.word	0x20003a90

0800a5e8 <_init>:
 800a5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ea:	bf00      	nop
 800a5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ee:	bc08      	pop	{r3}
 800a5f0:	469e      	mov	lr, r3
 800a5f2:	4770      	bx	lr

0800a5f4 <_fini>:
 800a5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f6:	bf00      	nop
 800a5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5fa:	bc08      	pop	{r3}
 800a5fc:	469e      	mov	lr, r3
 800a5fe:	4770      	bx	lr
