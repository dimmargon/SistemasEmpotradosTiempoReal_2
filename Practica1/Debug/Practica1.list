
Practica1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b84  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004d0c  08004d0c  00014d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d54  08004d54  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004d54  08004d54  00014d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d5c  08004d5c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d5c  08004d5c  00014d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d60  08004d60  00014d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000774  20000010  08004d74  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000784  08004d74  00020784  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017626  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ffc  00000000  00000000  000376a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d0  00000000  00000000  0003a6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010e6  00000000  00000000  0003bc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000276a5  00000000  00000000  0003cd5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a190  00000000  00000000  00064403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efaba  00000000  00000000  0007e593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d18  00000000  00000000  0016e050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00173d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004cf4 	.word	0x08004cf4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004cf4 	.word	0x08004cf4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <ReadJoy>:
 *  Created on: Sep 19, 2024
 *      Author: dimasPortatil
 */
#include "stm32l4xx_hal.h"

uint8_t ReadJoy(void) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
	static uint8_t button = 0;
	static uint8_t prevButtonState = GPIO_PIN_SET;

	uint8_t currentButtonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80004ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ce:	4816      	ldr	r0, [pc, #88]	; (8000528 <ReadJoy+0x64>)
 80004d0:	f001 fc94 	bl	8001dfc <HAL_GPIO_ReadPin>
 80004d4:	4603      	mov	r3, r0
 80004d6:	71fb      	strb	r3, [r7, #7]

	if (currentButtonState == GPIO_PIN_RESET
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d10d      	bne.n	80004fa <ReadJoy+0x36>
			&& prevButtonState == GPIO_PIN_SET) {
 80004de:	4b13      	ldr	r3, [pc, #76]	; (800052c <ReadJoy+0x68>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d109      	bne.n	80004fa <ReadJoy+0x36>
		button++;
 80004e6:	4b12      	ldr	r3, [pc, #72]	; (8000530 <ReadJoy+0x6c>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	3301      	adds	r3, #1
 80004ec:	b2da      	uxtb	r2, r3
 80004ee:	4b10      	ldr	r3, [pc, #64]	; (8000530 <ReadJoy+0x6c>)
 80004f0:	701a      	strb	r2, [r3, #0]
		prevButtonState = GPIO_PIN_RESET;
 80004f2:	4b0e      	ldr	r3, [pc, #56]	; (800052c <ReadJoy+0x68>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	701a      	strb	r2, [r3, #0]
 80004f8:	e009      	b.n	800050e <ReadJoy+0x4a>
	} else if (currentButtonState == GPIO_PIN_SET
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d106      	bne.n	800050e <ReadJoy+0x4a>
			&& prevButtonState == GPIO_PIN_RESET) {
 8000500:	4b0a      	ldr	r3, [pc, #40]	; (800052c <ReadJoy+0x68>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d102      	bne.n	800050e <ReadJoy+0x4a>
		prevButtonState = GPIO_PIN_SET;
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <ReadJoy+0x68>)
 800050a:	2201      	movs	r2, #1
 800050c:	701a      	strb	r2, [r3, #0]
	}

	if (button > 4) {
 800050e:	4b08      	ldr	r3, [pc, #32]	; (8000530 <ReadJoy+0x6c>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b04      	cmp	r3, #4
 8000514:	d902      	bls.n	800051c <ReadJoy+0x58>
		button = 0;
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <ReadJoy+0x6c>)
 8000518:	2200      	movs	r2, #0
 800051a:	701a      	strb	r2, [r3, #0]
	}

	return button;
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <ReadJoy+0x6c>)
 800051e:	781b      	ldrb	r3, [r3, #0]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	48000800 	.word	0x48000800
 800052c:	20000000 	.word	0x20000000
 8000530:	2000002c 	.word	0x2000002c

08000534 <LED_On>:
 */
#include "stm32l4xx_hal.h"
#include "led_driver.h"


void LED_On(uint8_t nLed){
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	switch(nLed){
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	2b02      	cmp	r3, #2
 8000542:	d014      	beq.n	800056e <LED_On+0x3a>
 8000544:	2b02      	cmp	r3, #2
 8000546:	dc19      	bgt.n	800057c <LED_On+0x48>
 8000548:	2b00      	cmp	r3, #0
 800054a:	d002      	beq.n	8000552 <LED_On+0x1e>
 800054c:	2b01      	cmp	r3, #1
 800054e:	d007      	beq.n	8000560 <LED_On+0x2c>
		break;
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, SET);
		break;
	}
}
 8000550:	e014      	b.n	800057c <LED_On+0x48>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000552:	2201      	movs	r2, #1
 8000554:	2120      	movs	r1, #32
 8000556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055a:	f001 fc67 	bl	8001e2c <HAL_GPIO_WritePin>
		break;
 800055e:	e00d      	b.n	800057c <LED_On+0x48>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8000560:	2201      	movs	r2, #1
 8000562:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000566:	4807      	ldr	r0, [pc, #28]	; (8000584 <LED_On+0x50>)
 8000568:	f001 fc60 	bl	8001e2c <HAL_GPIO_WritePin>
		break;
 800056c:	e006      	b.n	800057c <LED_On+0x48>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, SET);
 800056e:	2201      	movs	r2, #1
 8000570:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000574:	4804      	ldr	r0, [pc, #16]	; (8000588 <LED_On+0x54>)
 8000576:	f001 fc59 	bl	8001e2c <HAL_GPIO_WritePin>
		break;
 800057a:	bf00      	nop
}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	48000400 	.word	0x48000400
 8000588:	48000800 	.word	0x48000800

0800058c <LED_Off>:

void LED_Off(uint8_t nLed){
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
	switch(nLed){
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	2b02      	cmp	r3, #2
 800059a:	d014      	beq.n	80005c6 <LED_Off+0x3a>
 800059c:	2b02      	cmp	r3, #2
 800059e:	dc19      	bgt.n	80005d4 <LED_Off+0x48>
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d002      	beq.n	80005aa <LED_Off+0x1e>
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d007      	beq.n	80005b8 <LED_Off+0x2c>
		break;
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, RESET);
		break;
	}
}
 80005a8:	e014      	b.n	80005d4 <LED_Off+0x48>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2120      	movs	r1, #32
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b2:	f001 fc3b 	bl	8001e2c <HAL_GPIO_WritePin>
		break;
 80005b6:	e00d      	b.n	80005d4 <LED_Off+0x48>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005be:	4807      	ldr	r0, [pc, #28]	; (80005dc <LED_Off+0x50>)
 80005c0:	f001 fc34 	bl	8001e2c <HAL_GPIO_WritePin>
		break;
 80005c4:	e006      	b.n	80005d4 <LED_Off+0x48>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005cc:	4804      	ldr	r0, [pc, #16]	; (80005e0 <LED_Off+0x54>)
 80005ce:	f001 fc2d 	bl	8001e2c <HAL_GPIO_WritePin>
		break;
 80005d2:	bf00      	nop
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	48000400 	.word	0x48000400
 80005e0:	48000800 	.word	0x48000800

080005e4 <LED_Toggle>:

void LED_Toggle(uint8_t nLed){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	switch(nLed){
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d012      	beq.n	800061a <LED_Toggle+0x36>
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	dc16      	bgt.n	8000626 <LED_Toggle+0x42>
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d002      	beq.n	8000602 <LED_Toggle+0x1e>
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d006      	beq.n	800060e <LED_Toggle+0x2a>
		break;
	case 2:
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
		break;
	}
}
 8000600:	e011      	b.n	8000626 <LED_Toggle+0x42>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000602:	2120      	movs	r1, #32
 8000604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000608:	f001 fc28 	bl	8001e5c <HAL_GPIO_TogglePin>
		break;
 800060c:	e00b      	b.n	8000626 <LED_Toggle+0x42>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800060e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000612:	4807      	ldr	r0, [pc, #28]	; (8000630 <LED_Toggle+0x4c>)
 8000614:	f001 fc22 	bl	8001e5c <HAL_GPIO_TogglePin>
		break;
 8000618:	e005      	b.n	8000626 <LED_Toggle+0x42>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 800061a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800061e:	4805      	ldr	r0, [pc, #20]	; (8000634 <LED_Toggle+0x50>)
 8000620:	f001 fc1c 	bl	8001e5c <HAL_GPIO_TogglePin>
		break;
 8000624:	bf00      	nop
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	48000400 	.word	0x48000400
 8000634:	48000800 	.word	0x48000800

08000638 <animation1>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void animation1(void) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
	int i;
	LED_Off(0);
 800063e:	2000      	movs	r0, #0
 8000640:	f7ff ffa4 	bl	800058c <LED_Off>
	for (i = 0; i < 3; i++) {
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	e00e      	b.n	8000668 <animation1+0x30>
		LED_Toggle(0);
 800064a:	2000      	movs	r0, #0
 800064c:	f7ff ffca 	bl	80005e4 <LED_Toggle>
		HAL_Delay(200);
 8000650:	20c8      	movs	r0, #200	; 0xc8
 8000652:	f000 ffe7 	bl	8001624 <HAL_Delay>
		LED_Toggle(0);
 8000656:	2000      	movs	r0, #0
 8000658:	f7ff ffc4 	bl	80005e4 <LED_Toggle>
		HAL_Delay(200);
 800065c:	20c8      	movs	r0, #200	; 0xc8
 800065e:	f000 ffe1 	bl	8001624 <HAL_Delay>
	for (i = 0; i < 3; i++) {
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	3301      	adds	r3, #1
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b02      	cmp	r3, #2
 800066c:	dded      	ble.n	800064a <animation1+0x12>
	}
	LED_Off(0);
 800066e:	2000      	movs	r0, #0
 8000670:	f7ff ff8c 	bl	800058c <LED_Off>
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <animation2>:
void animation2(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
	int i;
	LED_Off(1);
 8000682:	2001      	movs	r0, #1
 8000684:	f7ff ff82 	bl	800058c <LED_Off>
	LED_On(2);
 8000688:	2002      	movs	r0, #2
 800068a:	f7ff ff53 	bl	8000534 <LED_On>
	for (i = 0; i < 3; i++) {
 800068e:	2300      	movs	r3, #0
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	e00e      	b.n	80006b2 <animation2+0x36>
		LED_Toggle(1);
 8000694:	2001      	movs	r0, #1
 8000696:	f7ff ffa5 	bl	80005e4 <LED_Toggle>
		HAL_Delay(200);
 800069a:	20c8      	movs	r0, #200	; 0xc8
 800069c:	f000 ffc2 	bl	8001624 <HAL_Delay>
		LED_Toggle(1);
 80006a0:	2001      	movs	r0, #1
 80006a2:	f7ff ff9f 	bl	80005e4 <LED_Toggle>
		HAL_Delay(200);
 80006a6:	20c8      	movs	r0, #200	; 0xc8
 80006a8:	f000 ffbc 	bl	8001624 <HAL_Delay>
	for (i = 0; i < 3; i++) {
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	3301      	adds	r3, #1
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	dded      	ble.n	8000694 <animation2+0x18>
	}
	LED_Off(1);
 80006b8:	2001      	movs	r0, #1
 80006ba:	f7ff ff67 	bl	800058c <LED_Off>
	LED_On(2);
 80006be:	2002      	movs	r0, #2
 80006c0:	f7ff ff38 	bl	8000534 <LED_On>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <animation3>:
void animation3(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
	int i;
	LED_Off(2);
 80006d2:	2002      	movs	r0, #2
 80006d4:	f7ff ff5a 	bl	800058c <LED_Off>
	for (i = 0; i < 3; i++) {
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	e00e      	b.n	80006fc <animation3+0x30>
		LED_Toggle(2);
 80006de:	2002      	movs	r0, #2
 80006e0:	f7ff ff80 	bl	80005e4 <LED_Toggle>
		HAL_Delay(200);
 80006e4:	20c8      	movs	r0, #200	; 0xc8
 80006e6:	f000 ff9d 	bl	8001624 <HAL_Delay>
		LED_Toggle(2);
 80006ea:	2002      	movs	r0, #2
 80006ec:	f7ff ff7a 	bl	80005e4 <LED_Toggle>
		HAL_Delay(200);
 80006f0:	20c8      	movs	r0, #200	; 0xc8
 80006f2:	f000 ff97 	bl	8001624 <HAL_Delay>
	for (i = 0; i < 3; i++) {
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3301      	adds	r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2b02      	cmp	r3, #2
 8000700:	dded      	ble.n	80006de <animation3+0x12>
	}
	LED_Off(2);
 8000702:	2002      	movs	r0, #2
 8000704:	f7ff ff42 	bl	800058c <LED_Off>
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <animation4>:
void animation4(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
	int i;
	for (i = 0; i < 3; i++) {
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	e012      	b.n	8000742 <animation4+0x32>
		LED_Toggle(i);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff5f 	bl	80005e4 <LED_Toggle>
		HAL_Delay(200);
 8000726:	20c8      	movs	r0, #200	; 0xc8
 8000728:	f000 ff7c 	bl	8001624 <HAL_Delay>
		LED_Toggle(i);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff57 	bl	80005e4 <LED_Toggle>
		HAL_Delay(200);
 8000736:	20c8      	movs	r0, #200	; 0xc8
 8000738:	f000 ff74 	bl	8001624 <HAL_Delay>
	for (i = 0; i < 3; i++) {
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3301      	adds	r3, #1
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b02      	cmp	r3, #2
 8000746:	dde9      	ble.n	800071c <animation4+0xc>
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075a:	f000 feee 	bl	800153a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075e:	f000 f831 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000762:	f000 f9fb 	bl	8000b5c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000766:	f000 f88f 	bl	8000888 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800076a:	f000 f8c5 	bl	80008f8 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800076e:	f000 f903 	bl	8000978 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000772:	f000 f927 	bl	80009c4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000776:	f000 f963 	bl	8000a40 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800077a:	f000 f991 	bl	8000aa0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800077e:	f000 f9bf 	bl	8000b00 <MX_USB_OTG_FS_PCD_Init>
//		  HAL_Delay(500);
//		  LED_Toggle(nLed);
//		  HAL_Delay(500);
//	  }

		uint8_t button = ReadJoy();
 8000782:	f7ff fe9f 	bl	80004c4 <ReadJoy>
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
		switch (button) {
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b03      	cmp	r3, #3
 800078e:	d8f8      	bhi.n	8000782 <main+0x2e>
 8000790:	a201      	add	r2, pc, #4	; (adr r2, 8000798 <main+0x44>)
 8000792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000796:	bf00      	nop
 8000798:	080007a9 	.word	0x080007a9
 800079c:	080007af 	.word	0x080007af
 80007a0:	080007b5 	.word	0x080007b5
 80007a4:	080007bb 	.word	0x080007bb
		case 0:
			animation1();
 80007a8:	f7ff ff46 	bl	8000638 <animation1>
			break;
 80007ac:	e009      	b.n	80007c2 <main+0x6e>
		case 1:
			animation2();
 80007ae:	f7ff ff65 	bl	800067c <animation2>
			break;
 80007b2:	e006      	b.n	80007c2 <main+0x6e>
		case 2:
			animation3();
 80007b4:	f7ff ff8a 	bl	80006cc <animation3>
			break;
 80007b8:	e003      	b.n	80007c2 <main+0x6e>
		case 3:
			animation4();
 80007ba:	f7ff ffa9 	bl	8000710 <animation4>
			break;
 80007be:	bf00      	nop
 80007c0:	e7df      	b.n	8000782 <main+0x2e>
  {
 80007c2:	e7de      	b.n	8000782 <main+0x2e>

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b096      	sub	sp, #88	; 0x58
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2244      	movs	r2, #68	; 0x44
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f004 fa61 	bl	8004c9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	463b      	mov	r3, r7
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007ea:	f001 fdf7 	bl	80023dc <HAL_PWREx_ControlVoltageScaling>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007f4:	f000 fb62 	bl	8000ebc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007f8:	f001 fdd2 	bl	80023a0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007fc:	4b21      	ldr	r3, [pc, #132]	; (8000884 <SystemClock_Config+0xc0>)
 80007fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000802:	4a20      	ldr	r2, [pc, #128]	; (8000884 <SystemClock_Config+0xc0>)
 8000804:	f023 0318 	bic.w	r3, r3, #24
 8000808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800080c:	2314      	movs	r3, #20
 800080e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000810:	2301      	movs	r3, #1
 8000812:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000814:	2301      	movs	r3, #1
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800081c:	2360      	movs	r3, #96	; 0x60
 800081e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000820:	2302      	movs	r3, #2
 8000822:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000824:	2301      	movs	r3, #1
 8000826:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000828:	2301      	movs	r3, #1
 800082a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800082c:	2328      	movs	r3, #40	; 0x28
 800082e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000830:	2307      	movs	r3, #7
 8000832:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000834:	2302      	movs	r3, #2
 8000836:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000838:	2302      	movs	r3, #2
 800083a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4618      	mov	r0, r3
 8000842:	f001 feed 	bl	8002620 <HAL_RCC_OscConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800084c:	f000 fb36 	bl	8000ebc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000850:	230f      	movs	r3, #15
 8000852:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000854:	2303      	movs	r3, #3
 8000856:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000864:	463b      	mov	r3, r7
 8000866:	2104      	movs	r1, #4
 8000868:	4618      	mov	r0, r3
 800086a:	f002 fab5 	bl	8002dd8 <HAL_RCC_ClockConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000874:	f000 fb22 	bl	8000ebc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000878:	f002 ffbc 	bl	80037f4 <HAL_RCCEx_EnableMSIPLLMode>
}
 800087c:	bf00      	nop
 800087e:	3758      	adds	r7, #88	; 0x58
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40021000 	.word	0x40021000

08000888 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 800088e:	4a19      	ldr	r2, [pc, #100]	; (80008f4 <MX_DFSDM1_Init+0x6c>)
 8000890:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 8000894:	2201      	movs	r2, #1
 8000896:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 80008a0:	2202      	movs	r2, #2
 80008a2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 80008b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008b6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 80008c0:	2204      	movs	r2, #4
 80008c2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 80008d8:	2200      	movs	r2, #0
 80008da:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80008dc:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 80008de:	f000 ffd7 	bl	8001890 <HAL_DFSDM_ChannelInit>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80008e8:	f000 fae8 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000030 	.word	0x20000030
 80008f4:	40016020 	.word	0x40016020

080008f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_I2C2_Init+0x74>)
 80008fe:	4a1c      	ldr	r2, [pc, #112]	; (8000970 <MX_I2C2_Init+0x78>)
 8000900:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_I2C2_Init+0x74>)
 8000904:	4a1b      	ldr	r2, [pc, #108]	; (8000974 <MX_I2C2_Init+0x7c>)
 8000906:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000908:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_I2C2_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_I2C2_Init+0x74>)
 8000910:	2201      	movs	r2, #1
 8000912:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_I2C2_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_I2C2_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_I2C2_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_I2C2_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_I2C2_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000932:	480e      	ldr	r0, [pc, #56]	; (800096c <MX_I2C2_Init+0x74>)
 8000934:	f001 facf 	bl	8001ed6 <HAL_I2C_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800093e:	f000 fabd 	bl	8000ebc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000942:	2100      	movs	r1, #0
 8000944:	4809      	ldr	r0, [pc, #36]	; (800096c <MX_I2C2_Init+0x74>)
 8000946:	f001 fb61 	bl	800200c <HAL_I2CEx_ConfigAnalogFilter>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000950:	f000 fab4 	bl	8000ebc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000954:	2100      	movs	r1, #0
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_I2C2_Init+0x74>)
 8000958:	f001 fba3 	bl	80020a2 <HAL_I2CEx_ConfigDigitalFilter>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000962:	f000 faab 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000068 	.word	0x20000068
 8000970:	40005800 	.word	0x40005800
 8000974:	10909cec 	.word	0x10909cec

08000978 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_QUADSPI_Init+0x44>)
 800097e:	4a10      	ldr	r2, [pc, #64]	; (80009c0 <MX_QUADSPI_Init+0x48>)
 8000980:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_QUADSPI_Init+0x44>)
 8000984:	2202      	movs	r2, #2
 8000986:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_QUADSPI_Init+0x44>)
 800098a:	2204      	movs	r2, #4
 800098c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_QUADSPI_Init+0x44>)
 8000990:	2210      	movs	r2, #16
 8000992:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_QUADSPI_Init+0x44>)
 8000996:	2217      	movs	r2, #23
 8000998:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_QUADSPI_Init+0x44>)
 800099c:	2200      	movs	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_QUADSPI_Init+0x44>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_QUADSPI_Init+0x44>)
 80009a8:	f001 fd7e 	bl	80024a8 <HAL_QSPI_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80009b2:	f000 fa83 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200000bc 	.word	0x200000bc
 80009c0:	a0001000 	.word	0xa0001000

080009c4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <MX_SPI3_Init+0x74>)
 80009ca:	4a1c      	ldr	r2, [pc, #112]	; (8000a3c <MX_SPI3_Init+0x78>)
 80009cc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_SPI3_Init+0x74>)
 80009d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009d4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <MX_SPI3_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80009dc:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <MX_SPI3_Init+0x74>)
 80009de:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009e2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_SPI3_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <MX_SPI3_Init+0x74>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_SPI3_Init+0x74>)
 80009f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_SPI3_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_SPI3_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_SPI3_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <MX_SPI3_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_SPI3_Init+0x74>)
 8000a12:	2207      	movs	r2, #7
 8000a14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <MX_SPI3_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_SPI3_Init+0x74>)
 8000a1e:	2208      	movs	r2, #8
 8000a20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_SPI3_Init+0x74>)
 8000a24:	f003 f8c8 	bl	8003bb8 <HAL_SPI_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a2e:	f000 fa45 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000100 	.word	0x20000100
 8000a3c:	40003c00 	.word	0x40003c00

08000a40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a46:	4a15      	ldr	r2, [pc, #84]	; (8000a9c <MX_USART1_UART_Init+0x5c>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a84:	f003 f93b 	bl	8003cfe <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a8e:	f000 fa15 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000164 	.word	0x20000164
 8000a9c:	40013800 	.word	0x40013800

08000aa0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_USART3_UART_Init+0x58>)
 8000aa6:	4a15      	ldr	r2, [pc, #84]	; (8000afc <MX_USART3_UART_Init+0x5c>)
 8000aa8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <MX_USART3_UART_Init+0x58>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_USART3_UART_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_USART3_UART_Init+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_USART3_UART_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_USART3_UART_Init+0x58>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <MX_USART3_UART_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_USART3_UART_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <MX_USART3_UART_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_USART3_UART_Init+0x58>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_USART3_UART_Init+0x58>)
 8000ae4:	f003 f90b 	bl	8003cfe <HAL_UART_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000aee:	f000 f9e5 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200001ec 	.word	0x200001ec
 8000afc:	40004800 	.word	0x40004800

08000b00 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b0e:	2206      	movs	r2, #6
 8000b10:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b14:	2202      	movs	r2, #2
 8000b16:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b1a:	2202      	movs	r2, #2
 8000b1c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b44:	f001 faf9 	bl	800213a <HAL_PCD_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b4e:	f000 f9b5 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000274 	.word	0x20000274

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b72:	4bbc      	ldr	r3, [pc, #752]	; (8000e64 <MX_GPIO_Init+0x308>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	4abb      	ldr	r2, [pc, #748]	; (8000e64 <MX_GPIO_Init+0x308>)
 8000b78:	f043 0310 	orr.w	r3, r3, #16
 8000b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7e:	4bb9      	ldr	r3, [pc, #740]	; (8000e64 <MX_GPIO_Init+0x308>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	f003 0310 	and.w	r3, r3, #16
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8a:	4bb6      	ldr	r3, [pc, #728]	; (8000e64 <MX_GPIO_Init+0x308>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	4ab5      	ldr	r2, [pc, #724]	; (8000e64 <MX_GPIO_Init+0x308>)
 8000b90:	f043 0304 	orr.w	r3, r3, #4
 8000b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b96:	4bb3      	ldr	r3, [pc, #716]	; (8000e64 <MX_GPIO_Init+0x308>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	f003 0304 	and.w	r3, r3, #4
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	4bb0      	ldr	r3, [pc, #704]	; (8000e64 <MX_GPIO_Init+0x308>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	4aaf      	ldr	r2, [pc, #700]	; (8000e64 <MX_GPIO_Init+0x308>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bae:	4bad      	ldr	r3, [pc, #692]	; (8000e64 <MX_GPIO_Init+0x308>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	4baa      	ldr	r3, [pc, #680]	; (8000e64 <MX_GPIO_Init+0x308>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	4aa9      	ldr	r2, [pc, #676]	; (8000e64 <MX_GPIO_Init+0x308>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc6:	4ba7      	ldr	r3, [pc, #668]	; (8000e64 <MX_GPIO_Init+0x308>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd2:	4ba4      	ldr	r3, [pc, #656]	; (8000e64 <MX_GPIO_Init+0x308>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	4aa3      	ldr	r2, [pc, #652]	; (8000e64 <MX_GPIO_Init+0x308>)
 8000bd8:	f043 0308 	orr.w	r3, r3, #8
 8000bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bde:	4ba1      	ldr	r3, [pc, #644]	; (8000e64 <MX_GPIO_Init+0x308>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	f003 0308 	and.w	r3, r3, #8
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000bf0:	489d      	ldr	r0, [pc, #628]	; (8000e68 <MX_GPIO_Init+0x30c>)
 8000bf2:	f001 f91b 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|GPIO_PIN_5|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f248 1124 	movw	r1, #33060	; 0x8124
 8000bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c00:	f001 f914 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000c04:	2200      	movs	r2, #0
 8000c06:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000c0a:	4898      	ldr	r0, [pc, #608]	; (8000e6c <MX_GPIO_Init+0x310>)
 8000c0c:	f001 f90e 	bl	8001e2c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f241 0181 	movw	r1, #4225	; 0x1081
 8000c16:	4896      	ldr	r0, [pc, #600]	; (8000e70 <MX_GPIO_Init+0x314>)
 8000c18:	f001 f908 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c22:	4893      	ldr	r0, [pc, #588]	; (8000e70 <MX_GPIO_Init+0x314>)
 8000c24:	f001 f902 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000c2e:	4891      	ldr	r0, [pc, #580]	; (8000e74 <MX_GPIO_Init+0x318>)
 8000c30:	f001 f8fc 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	2120      	movs	r1, #32
 8000c38:	488c      	ldr	r0, [pc, #560]	; (8000e6c <MX_GPIO_Init+0x310>)
 8000c3a:	f001 f8f7 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	2101      	movs	r1, #1
 8000c42:	4889      	ldr	r0, [pc, #548]	; (8000e68 <MX_GPIO_Init+0x30c>)
 8000c44:	f001 f8f2 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000c48:	f240 1315 	movw	r3, #277	; 0x115
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4881      	ldr	r0, [pc, #516]	; (8000e68 <MX_GPIO_Init+0x30c>)
 8000c62:	f000 ff21 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000c66:	236a      	movs	r3, #106	; 0x6a
 8000c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	487b      	ldr	r0, [pc, #492]	; (8000e68 <MX_GPIO_Init+0x30c>)
 8000c7c:	f000 ff14 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	4877      	ldr	r0, [pc, #476]	; (8000e74 <MX_GPIO_Init+0x318>)
 8000c96:	f000 ff07 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000c9a:	233f      	movs	r3, #63	; 0x3f
 8000c9c:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c9e:	230b      	movs	r3, #11
 8000ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4619      	mov	r1, r3
 8000cac:	4871      	ldr	r0, [pc, #452]	; (8000e74 <MX_GPIO_Init+0x318>)
 8000cae:	f000 fefb 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000cc2:	2308      	movs	r3, #8
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd0:	f000 feea 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin PA5 SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|GPIO_PIN_5|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000cd4:	f248 1324 	movw	r3, #33060	; 0x8124
 8000cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf0:	f000 feda 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000cf4:	2308      	movs	r3, #8
 8000cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d04:	2301      	movs	r3, #1
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d12:	f000 fec9 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000d16:	2310      	movs	r3, #16
 8000d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d1a:	230b      	movs	r3, #11
 8000d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2c:	f000 febc 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000d30:	23c0      	movs	r3, #192	; 0xc0
 8000d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d40:	2305      	movs	r3, #5
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4e:	f000 feab 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000d52:	2301      	movs	r3, #1
 8000d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d56:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	4841      	ldr	r0, [pc, #260]	; (8000e6c <MX_GPIO_Init+0x310>)
 8000d68:	f000 fe9e 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d70:	230b      	movs	r3, #11
 8000d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	483b      	ldr	r0, [pc, #236]	; (8000e6c <MX_GPIO_Init+0x310>)
 8000d80:	f000 fe92 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000d84:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000d88:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4833      	ldr	r0, [pc, #204]	; (8000e6c <MX_GPIO_Init+0x310>)
 8000d9e:	f000 fe83 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000da2:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000da6:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	482d      	ldr	r0, [pc, #180]	; (8000e70 <MX_GPIO_Init+0x314>)
 8000dba:	f000 fe75 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000dbe:	f243 0381 	movw	r3, #12417	; 0x3081
 8000dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4826      	ldr	r0, [pc, #152]	; (8000e70 <MX_GPIO_Init+0x314>)
 8000dd8:	f000 fe66 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000ddc:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	481f      	ldr	r0, [pc, #124]	; (8000e74 <MX_GPIO_Init+0x318>)
 8000df6:	f000 fe57 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000dfa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000dfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e00:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4818      	ldr	r0, [pc, #96]	; (8000e74 <MX_GPIO_Init+0x318>)
 8000e12:	f000 fe49 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000e16:	2302      	movs	r3, #2
 8000e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e26:	2305      	movs	r3, #5
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	480f      	ldr	r0, [pc, #60]	; (8000e70 <MX_GPIO_Init+0x314>)
 8000e32:	f000 fe39 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000e36:	2378      	movs	r3, #120	; 0x78
 8000e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e42:	2303      	movs	r3, #3
 8000e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e46:	2307      	movs	r3, #7
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4807      	ldr	r0, [pc, #28]	; (8000e70 <MX_GPIO_Init+0x314>)
 8000e52:	f000 fe29 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000e56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e5c:	2312      	movs	r3, #18
 8000e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	e009      	b.n	8000e78 <MX_GPIO_Init+0x31c>
 8000e64:	40021000 	.word	0x40021000
 8000e68:	48001000 	.word	0x48001000
 8000e6c:	48000400 	.word	0x48000400
 8000e70:	48000c00 	.word	0x48000c00
 8000e74:	48000800 	.word	0x48000800
 8000e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e7e:	2304      	movs	r3, #4
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	480b      	ldr	r0, [pc, #44]	; (8000eb8 <MX_GPIO_Init+0x35c>)
 8000e8a:	f000 fe0d 	bl	8001aa8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	2017      	movs	r0, #23
 8000e94:	f000 fcc5 	bl	8001822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e98:	2017      	movs	r0, #23
 8000e9a:	f000 fcde 	bl	800185a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	2028      	movs	r0, #40	; 0x28
 8000ea4:	f000 fcbd 	bl	8001822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ea8:	2028      	movs	r0, #40	; 0x28
 8000eaa:	f000 fcd6 	bl	800185a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eae:	bf00      	nop
 8000eb0:	3728      	adds	r7, #40	; 0x28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	48000400 	.word	0x48000400

08000ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec0:	b672      	cpsid	i
}
 8000ec2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <Error_Handler+0x8>
	...

08000ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <HAL_MspInit+0x44>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed2:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <HAL_MspInit+0x44>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <HAL_MspInit+0x44>)
 8000edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <HAL_MspInit+0x44>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eea:	4a08      	ldr	r2, [pc, #32]	; (8000f0c <HAL_MspInit+0x44>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_MspInit+0x44>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000

08000f10 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0ac      	sub	sp, #176	; 0xb0
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	2288      	movs	r2, #136	; 0x88
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f003 feb2 	bl	8004c9a <memset>
  if(DFSDM1_Init == 0)
 8000f36:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d142      	bne.n	8000fc4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000f3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f42:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000f44:	2300      	movs	r3, #0
 8000f46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f002 f966 	bl	8003220 <HAL_RCCEx_PeriphCLKConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000f5a:	f7ff ffaf 	bl	8000ebc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f62:	4a1b      	ldr	r2, [pc, #108]	; (8000fd0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f68:	6613      	str	r3, [r2, #96]	; 0x60
 8000f6a:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f76:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	4a15      	ldr	r2, [pc, #84]	; (8000fd0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f7c:	f043 0310 	orr.w	r3, r3, #16
 8000f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f82:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	f003 0310 	and.w	r3, r3, #16
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000f8e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000f92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000fa8:	2306      	movs	r3, #6
 8000faa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000fb6:	f000 fd77 	bl	8001aa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	4a02      	ldr	r2, [pc, #8]	; (8000fcc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000fc2:	6013      	str	r3, [r2, #0]
  }

}
 8000fc4:	bf00      	nop
 8000fc6:	37b0      	adds	r7, #176	; 0xb0
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000758 	.word	0x20000758
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	48001000 	.word	0x48001000

08000fd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b0ac      	sub	sp, #176	; 0xb0
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2288      	movs	r2, #136	; 0x88
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f003 fe4e 	bl	8004c9a <memset>
  if(hi2c->Instance==I2C2)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a21      	ldr	r2, [pc, #132]	; (8001088 <HAL_I2C_MspInit+0xb0>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d13b      	bne.n	8001080 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800100c:	2300      	movs	r3, #0
 800100e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4618      	mov	r0, r3
 8001016:	f002 f903 	bl	8003220 <HAL_RCCEx_PeriphCLKConfig>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001020:	f7ff ff4c 	bl	8000ebc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <HAL_I2C_MspInit+0xb4>)
 8001026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001028:	4a18      	ldr	r2, [pc, #96]	; (800108c <HAL_I2C_MspInit+0xb4>)
 800102a:	f043 0302 	orr.w	r3, r3, #2
 800102e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001030:	4b16      	ldr	r3, [pc, #88]	; (800108c <HAL_I2C_MspInit+0xb4>)
 8001032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800103c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001040:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001044:	2312      	movs	r3, #18
 8001046:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104a:	2301      	movs	r3, #1
 800104c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001056:	2304      	movs	r3, #4
 8001058:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001060:	4619      	mov	r1, r3
 8001062:	480b      	ldr	r0, [pc, #44]	; (8001090 <HAL_I2C_MspInit+0xb8>)
 8001064:	f000 fd20 	bl	8001aa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <HAL_I2C_MspInit+0xb4>)
 800106a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <HAL_I2C_MspInit+0xb4>)
 800106e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001072:	6593      	str	r3, [r2, #88]	; 0x58
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <HAL_I2C_MspInit+0xb4>)
 8001076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001078:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001080:	bf00      	nop
 8001082:	37b0      	adds	r7, #176	; 0xb0
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40005800 	.word	0x40005800
 800108c:	40021000 	.word	0x40021000
 8001090:	48000400 	.word	0x48000400

08001094 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a17      	ldr	r2, [pc, #92]	; (8001110 <HAL_QSPI_MspInit+0x7c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d128      	bne.n	8001108 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <HAL_QSPI_MspInit+0x80>)
 80010b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010ba:	4a16      	ldr	r2, [pc, #88]	; (8001114 <HAL_QSPI_MspInit+0x80>)
 80010bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c0:	6513      	str	r3, [r2, #80]	; 0x50
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <HAL_QSPI_MspInit+0x80>)
 80010c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_QSPI_MspInit+0x80>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	4a10      	ldr	r2, [pc, #64]	; (8001114 <HAL_QSPI_MspInit+0x80>)
 80010d4:	f043 0310 	orr.w	r3, r3, #16
 80010d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_QSPI_MspInit+0x80>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	f003 0310 	and.w	r3, r3, #16
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80010e6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80010ea:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80010f8:	230a      	movs	r3, #10
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <HAL_QSPI_MspInit+0x84>)
 8001104:	f000 fcd0 	bl	8001aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001108:	bf00      	nop
 800110a:	3728      	adds	r7, #40	; 0x28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	a0001000 	.word	0xa0001000
 8001114:	40021000 	.word	0x40021000
 8001118:	48001000 	.word	0x48001000

0800111c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a17      	ldr	r2, [pc, #92]	; (8001198 <HAL_SPI_MspInit+0x7c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d128      	bne.n	8001190 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <HAL_SPI_MspInit+0x80>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001142:	4a16      	ldr	r2, [pc, #88]	; (800119c <HAL_SPI_MspInit+0x80>)
 8001144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001148:	6593      	str	r3, [r2, #88]	; 0x58
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_SPI_MspInit+0x80>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <HAL_SPI_MspInit+0x80>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	4a10      	ldr	r2, [pc, #64]	; (800119c <HAL_SPI_MspInit+0x80>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_SPI_MspInit+0x80>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800116e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001180:	2306      	movs	r3, #6
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <HAL_SPI_MspInit+0x84>)
 800118c:	f000 fc8c 	bl	8001aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001190:	bf00      	nop
 8001192:	3728      	adds	r7, #40	; 0x28
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40003c00 	.word	0x40003c00
 800119c:	40021000 	.word	0x40021000
 80011a0:	48000800 	.word	0x48000800

080011a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b0ae      	sub	sp, #184	; 0xb8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011bc:	f107 031c 	add.w	r3, r7, #28
 80011c0:	2288      	movs	r2, #136	; 0x88
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f003 fd68 	bl	8004c9a <memset>
  if(huart->Instance==USART1)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a42      	ldr	r2, [pc, #264]	; (80012d8 <HAL_UART_MspInit+0x134>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d13b      	bne.n	800124c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011d4:	2301      	movs	r3, #1
 80011d6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011d8:	2300      	movs	r3, #0
 80011da:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	4618      	mov	r0, r3
 80011e2:	f002 f81d 	bl	8003220 <HAL_RCCEx_PeriphCLKConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011ec:	f7ff fe66 	bl	8000ebc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011f0:	4b3a      	ldr	r3, [pc, #232]	; (80012dc <HAL_UART_MspInit+0x138>)
 80011f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f4:	4a39      	ldr	r2, [pc, #228]	; (80012dc <HAL_UART_MspInit+0x138>)
 80011f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fa:	6613      	str	r3, [r2, #96]	; 0x60
 80011fc:	4b37      	ldr	r3, [pc, #220]	; (80012dc <HAL_UART_MspInit+0x138>)
 80011fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001208:	4b34      	ldr	r3, [pc, #208]	; (80012dc <HAL_UART_MspInit+0x138>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120c:	4a33      	ldr	r2, [pc, #204]	; (80012dc <HAL_UART_MspInit+0x138>)
 800120e:	f043 0302 	orr.w	r3, r3, #2
 8001212:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001214:	4b31      	ldr	r3, [pc, #196]	; (80012dc <HAL_UART_MspInit+0x138>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001220:	23c0      	movs	r3, #192	; 0xc0
 8001222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001238:	2307      	movs	r3, #7
 800123a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001242:	4619      	mov	r1, r3
 8001244:	4826      	ldr	r0, [pc, #152]	; (80012e0 <HAL_UART_MspInit+0x13c>)
 8001246:	f000 fc2f 	bl	8001aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800124a:	e040      	b.n	80012ce <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a24      	ldr	r2, [pc, #144]	; (80012e4 <HAL_UART_MspInit+0x140>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d13b      	bne.n	80012ce <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001256:	2304      	movs	r3, #4
 8001258:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800125a:	2300      	movs	r3, #0
 800125c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800125e:	f107 031c 	add.w	r3, r7, #28
 8001262:	4618      	mov	r0, r3
 8001264:	f001 ffdc 	bl	8003220 <HAL_RCCEx_PeriphCLKConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_UART_MspInit+0xce>
      Error_Handler();
 800126e:	f7ff fe25 	bl	8000ebc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <HAL_UART_MspInit+0x138>)
 8001274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001276:	4a19      	ldr	r2, [pc, #100]	; (80012dc <HAL_UART_MspInit+0x138>)
 8001278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800127c:	6593      	str	r3, [r2, #88]	; 0x58
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <HAL_UART_MspInit+0x138>)
 8001280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800128a:	4b14      	ldr	r3, [pc, #80]	; (80012dc <HAL_UART_MspInit+0x138>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	4a13      	ldr	r2, [pc, #76]	; (80012dc <HAL_UART_MspInit+0x138>)
 8001290:	f043 0308 	orr.w	r3, r3, #8
 8001294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_UART_MspInit+0x138>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80012a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012bc:	2307      	movs	r3, #7
 80012be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012c6:	4619      	mov	r1, r3
 80012c8:	4807      	ldr	r0, [pc, #28]	; (80012e8 <HAL_UART_MspInit+0x144>)
 80012ca:	f000 fbed 	bl	8001aa8 <HAL_GPIO_Init>
}
 80012ce:	bf00      	nop
 80012d0:	37b8      	adds	r7, #184	; 0xb8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40013800 	.word	0x40013800
 80012dc:	40021000 	.word	0x40021000
 80012e0:	48000400 	.word	0x48000400
 80012e4:	40004800 	.word	0x40004800
 80012e8:	48000c00 	.word	0x48000c00

080012ec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b0ac      	sub	sp, #176	; 0xb0
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	2288      	movs	r2, #136	; 0x88
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f003 fcc4 	bl	8004c9a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800131a:	d17c      	bne.n	8001416 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800131c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001320:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001322:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001326:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800132a:	2301      	movs	r3, #1
 800132c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800132e:	2301      	movs	r3, #1
 8001330:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001332:	2318      	movs	r3, #24
 8001334:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001336:	2307      	movs	r3, #7
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800133a:	2302      	movs	r3, #2
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800133e:	2302      	movs	r3, #2
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001342:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001346:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4618      	mov	r0, r3
 800134e:	f001 ff67 	bl	8003220 <HAL_RCCEx_PeriphCLKConfig>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001358:	f7ff fdb0 	bl	8000ebc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135c:	4b30      	ldr	r3, [pc, #192]	; (8001420 <HAL_PCD_MspInit+0x134>)
 800135e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001360:	4a2f      	ldr	r2, [pc, #188]	; (8001420 <HAL_PCD_MspInit+0x134>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001368:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <HAL_PCD_MspInit+0x134>)
 800136a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001378:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137c:	2300      	movs	r3, #0
 800137e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001388:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800138c:	4619      	mov	r1, r3
 800138e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001392:	f000 fb89 	bl	8001aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001396:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800139a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013aa:	2303      	movs	r3, #3
 80013ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013b0:	230a      	movs	r3, #10
 80013b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013ba:	4619      	mov	r1, r3
 80013bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c0:	f000 fb72 	bl	8001aa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013c4:	4b16      	ldr	r3, [pc, #88]	; (8001420 <HAL_PCD_MspInit+0x134>)
 80013c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c8:	4a15      	ldr	r2, [pc, #84]	; (8001420 <HAL_PCD_MspInit+0x134>)
 80013ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d0:	4b13      	ldr	r3, [pc, #76]	; (8001420 <HAL_PCD_MspInit+0x134>)
 80013d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013dc:	4b10      	ldr	r3, [pc, #64]	; (8001420 <HAL_PCD_MspInit+0x134>)
 80013de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d114      	bne.n	8001412 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <HAL_PCD_MspInit+0x134>)
 80013ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ec:	4a0c      	ldr	r2, [pc, #48]	; (8001420 <HAL_PCD_MspInit+0x134>)
 80013ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f2:	6593      	str	r3, [r2, #88]	; 0x58
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <HAL_PCD_MspInit+0x134>)
 80013f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001400:	f001 f842 	bl	8002488 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_PCD_MspInit+0x134>)
 8001406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001408:	4a05      	ldr	r2, [pc, #20]	; (8001420 <HAL_PCD_MspInit+0x134>)
 800140a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800140e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001410:	e001      	b.n	8001416 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001412:	f001 f839 	bl	8002488 <HAL_PWREx_EnableVddUSB>
}
 8001416:	bf00      	nop
 8001418:	37b0      	adds	r7, #176	; 0xb0
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40021000 	.word	0x40021000

08001424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001428:	e7fe      	b.n	8001428 <NMI_Handler+0x4>

0800142a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <HardFault_Handler+0x4>

08001430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <MemManage_Handler+0x4>

08001436 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <BusFault_Handler+0x4>

0800143c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <UsageFault_Handler+0x4>

08001442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001470:	f000 f8b8 	bl	80015e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}

08001478 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800147c:	2020      	movs	r0, #32
 800147e:	f000 fd07 	bl	8001e90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001482:	2040      	movs	r0, #64	; 0x40
 8001484:	f000 fd04 	bl	8001e90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001488:	2080      	movs	r0, #128	; 0x80
 800148a:	f000 fd01 	bl	8001e90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800148e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001492:	f000 fcfd 	bl	8001e90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}

0800149a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800149e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80014a2:	f000 fcf5 	bl	8001e90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80014a6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80014aa:	f000 fcf1 	bl	8001e90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80014ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014b2:	f000 fced 	bl	8001e90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80014b6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80014ba:	f000 fce9 	bl	8001e90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <SystemInit+0x20>)
 80014ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ce:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <SystemInit+0x20>)
 80014d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001520 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014ec:	f7ff ffea 	bl	80014c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f0:	480c      	ldr	r0, [pc, #48]	; (8001524 <LoopForever+0x6>)
  ldr r1, =_edata
 80014f2:	490d      	ldr	r1, [pc, #52]	; (8001528 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014f4:	4a0d      	ldr	r2, [pc, #52]	; (800152c <LoopForever+0xe>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f8:	e002      	b.n	8001500 <LoopCopyDataInit>

080014fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fe:	3304      	adds	r3, #4

08001500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001504:	d3f9      	bcc.n	80014fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001508:	4c0a      	ldr	r4, [pc, #40]	; (8001534 <LoopForever+0x16>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800150c:	e001      	b.n	8001512 <LoopFillZerobss>

0800150e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001510:	3204      	adds	r2, #4

08001512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001514:	d3fb      	bcc.n	800150e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001516:	f003 fbc9 	bl	8004cac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800151a:	f7ff f91b 	bl	8000754 <main>

0800151e <LoopForever>:

LoopForever:
    b LoopForever
 800151e:	e7fe      	b.n	800151e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001520:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001528:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800152c:	08004d64 	.word	0x08004d64
  ldr r2, =_sbss
 8001530:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001534:	20000784 	.word	0x20000784

08001538 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001538:	e7fe      	b.n	8001538 <ADC1_2_IRQHandler>

0800153a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001544:	2003      	movs	r0, #3
 8001546:	f000 f961 	bl	800180c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800154a:	2000      	movs	r0, #0
 800154c:	f000 f80e 	bl	800156c <HAL_InitTick>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d002      	beq.n	800155c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	71fb      	strb	r3, [r7, #7]
 800155a:	e001      	b.n	8001560 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800155c:	f7ff fcb4 	bl	8000ec8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001560:	79fb      	ldrb	r3, [r7, #7]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001578:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <HAL_InitTick+0x6c>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d023      	beq.n	80015c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <HAL_InitTick+0x70>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <HAL_InitTick+0x6c>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4619      	mov	r1, r3
 800158a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001592:	fbb2 f3f3 	udiv	r3, r2, r3
 8001596:	4618      	mov	r0, r3
 8001598:	f000 f96d 	bl	8001876 <HAL_SYSTICK_Config>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10f      	bne.n	80015c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b0f      	cmp	r3, #15
 80015a6:	d809      	bhi.n	80015bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a8:	2200      	movs	r2, #0
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f000 f937 	bl	8001822 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015b4:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <HAL_InitTick+0x74>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	e007      	b.n	80015cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
 80015c0:	e004      	b.n	80015cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	73fb      	strb	r3, [r7, #15]
 80015c6:	e001      	b.n	80015cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	2000000c 	.word	0x2000000c
 80015dc:	20000004 	.word	0x20000004
 80015e0:	20000008 	.word	0x20000008

080015e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_IncTick+0x20>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_IncTick+0x24>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	4a04      	ldr	r2, [pc, #16]	; (8001608 <HAL_IncTick+0x24>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	2000000c 	.word	0x2000000c
 8001608:	2000075c 	.word	0x2000075c

0800160c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return uwTick;
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <HAL_GetTick+0x14>)
 8001612:	681b      	ldr	r3, [r3, #0]
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	2000075c 	.word	0x2000075c

08001624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800162c:	f7ff ffee 	bl	800160c <HAL_GetTick>
 8001630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800163c:	d005      	beq.n	800164a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <HAL_Delay+0x44>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4413      	add	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800164a:	bf00      	nop
 800164c:	f7ff ffde 	bl	800160c <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	429a      	cmp	r2, r3
 800165a:	d8f7      	bhi.n	800164c <HAL_Delay+0x28>
  {
  }
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	2000000c 	.word	0x2000000c

0800166c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001688:	4013      	ands	r3, r2
 800168a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800169c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169e:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	60d3      	str	r3, [r2, #12]
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <__NVIC_GetPriorityGrouping+0x18>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	f003 0307 	and.w	r3, r3, #7
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	db0b      	blt.n	80016fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	f003 021f 	and.w	r2, r3, #31
 80016e8:	4907      	ldr	r1, [pc, #28]	; (8001708 <__NVIC_EnableIRQ+0x38>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	2001      	movs	r0, #1
 80016f2:	fa00 f202 	lsl.w	r2, r0, r2
 80016f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000e100 	.word	0xe000e100

0800170c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	db0a      	blt.n	8001736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	b2da      	uxtb	r2, r3
 8001724:	490c      	ldr	r1, [pc, #48]	; (8001758 <__NVIC_SetPriority+0x4c>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	0112      	lsls	r2, r2, #4
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	440b      	add	r3, r1
 8001730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001734:	e00a      	b.n	800174c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4908      	ldr	r1, [pc, #32]	; (800175c <__NVIC_SetPriority+0x50>)
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	3b04      	subs	r3, #4
 8001744:	0112      	lsls	r2, r2, #4
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	440b      	add	r3, r1
 800174a:	761a      	strb	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000e100 	.word	0xe000e100
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	; 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f1c3 0307 	rsb	r3, r3, #7
 800177a:	2b04      	cmp	r3, #4
 800177c:	bf28      	it	cs
 800177e:	2304      	movcs	r3, #4
 8001780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3304      	adds	r3, #4
 8001786:	2b06      	cmp	r3, #6
 8001788:	d902      	bls.n	8001790 <NVIC_EncodePriority+0x30>
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3b03      	subs	r3, #3
 800178e:	e000      	b.n	8001792 <NVIC_EncodePriority+0x32>
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	f04f 32ff 	mov.w	r2, #4294967295
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43da      	mvns	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	401a      	ands	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	43d9      	mvns	r1, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	4313      	orrs	r3, r2
         );
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3724      	adds	r7, #36	; 0x24
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d8:	d301      	bcc.n	80017de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017da:	2301      	movs	r3, #1
 80017dc:	e00f      	b.n	80017fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017de:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <SysTick_Config+0x40>)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e6:	210f      	movs	r1, #15
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ec:	f7ff ff8e 	bl	800170c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <SysTick_Config+0x40>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f6:	4b04      	ldr	r3, [pc, #16]	; (8001808 <SysTick_Config+0x40>)
 80017f8:	2207      	movs	r2, #7
 80017fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	e000e010 	.word	0xe000e010

0800180c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ff29 	bl	800166c <__NVIC_SetPriorityGrouping>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b086      	sub	sp, #24
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
 800182e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001834:	f7ff ff3e 	bl	80016b4 <__NVIC_GetPriorityGrouping>
 8001838:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	6978      	ldr	r0, [r7, #20]
 8001840:	f7ff ff8e 	bl	8001760 <NVIC_EncodePriority>
 8001844:	4602      	mov	r2, r0
 8001846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff5d 	bl	800170c <__NVIC_SetPriority>
}
 8001852:	bf00      	nop
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff31 	bl	80016d0 <__NVIC_EnableIRQ>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff ffa2 	bl	80017c8 <SysTick_Config>
 8001884:	4603      	mov	r3, r0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e0ac      	b.n	80019fc <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 f8b2 	bl	8001a10 <DFSDM_GetChannelFromInstance>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4a55      	ldr	r2, [pc, #340]	; (8001a04 <HAL_DFSDM_ChannelInit+0x174>)
 80018b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e09f      	b.n	80019fc <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff fb27 	bl	8000f10 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80018c2:	4b51      	ldr	r3, [pc, #324]	; (8001a08 <HAL_DFSDM_ChannelInit+0x178>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	3301      	adds	r3, #1
 80018c8:	4a4f      	ldr	r2, [pc, #316]	; (8001a08 <HAL_DFSDM_ChannelInit+0x178>)
 80018ca:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80018cc:	4b4e      	ldr	r3, [pc, #312]	; (8001a08 <HAL_DFSDM_ChannelInit+0x178>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d125      	bne.n	8001920 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80018d4:	4b4d      	ldr	r3, [pc, #308]	; (8001a0c <HAL_DFSDM_ChannelInit+0x17c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a4c      	ldr	r2, [pc, #304]	; (8001a0c <HAL_DFSDM_ChannelInit+0x17c>)
 80018da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80018de:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80018e0:	4b4a      	ldr	r3, [pc, #296]	; (8001a0c <HAL_DFSDM_ChannelInit+0x17c>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	4948      	ldr	r1, [pc, #288]	; (8001a0c <HAL_DFSDM_ChannelInit+0x17c>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80018ee:	4b47      	ldr	r3, [pc, #284]	; (8001a0c <HAL_DFSDM_ChannelInit+0x17c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a46      	ldr	r2, [pc, #280]	; (8001a0c <HAL_DFSDM_ChannelInit+0x17c>)
 80018f4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80018f8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	791b      	ldrb	r3, [r3, #4]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d108      	bne.n	8001914 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001902:	4b42      	ldr	r3, [pc, #264]	; (8001a0c <HAL_DFSDM_ChannelInit+0x17c>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	3b01      	subs	r3, #1
 800190c:	041b      	lsls	r3, r3, #16
 800190e:	493f      	ldr	r1, [pc, #252]	; (8001a0c <HAL_DFSDM_ChannelInit+0x17c>)
 8001910:	4313      	orrs	r3, r2
 8001912:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001914:	4b3d      	ldr	r3, [pc, #244]	; (8001a0c <HAL_DFSDM_ChannelInit+0x17c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a3c      	ldr	r2, [pc, #240]	; (8001a0c <HAL_DFSDM_ChannelInit+0x17c>)
 800191a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800191e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800192e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6819      	ldr	r1, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800193e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001944:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 020f 	bic.w	r2, r2, #15
 800195c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6819      	ldr	r1, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001984:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6899      	ldr	r1, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001994:	3b01      	subs	r3, #1
 8001996:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001998:	431a      	orrs	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f002 0207 	and.w	r2, r2, #7
 80019b0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6859      	ldr	r1, [r3, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80019c4:	431a      	orrs	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019dc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 f810 	bl	8001a10 <DFSDM_GetChannelFromInstance>
 80019f0:	4602      	mov	r2, r0
 80019f2:	4904      	ldr	r1, [pc, #16]	; (8001a04 <HAL_DFSDM_ChannelInit+0x174>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000764 	.word	0x20000764
 8001a08:	20000760 	.word	0x20000760
 8001a0c:	40016000 	.word	0x40016000

08001a10 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a1c      	ldr	r2, [pc, #112]	; (8001a8c <DFSDM_GetChannelFromInstance+0x7c>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d102      	bne.n	8001a26 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	e02b      	b.n	8001a7e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a19      	ldr	r2, [pc, #100]	; (8001a90 <DFSDM_GetChannelFromInstance+0x80>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d102      	bne.n	8001a34 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	e024      	b.n	8001a7e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a17      	ldr	r2, [pc, #92]	; (8001a94 <DFSDM_GetChannelFromInstance+0x84>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d102      	bne.n	8001a42 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	e01d      	b.n	8001a7e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a14      	ldr	r2, [pc, #80]	; (8001a98 <DFSDM_GetChannelFromInstance+0x88>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d102      	bne.n	8001a50 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	e016      	b.n	8001a7e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <DFSDM_GetChannelFromInstance+0x8c>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d102      	bne.n	8001a5e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001a58:	2305      	movs	r3, #5
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	e00f      	b.n	8001a7e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a0f      	ldr	r2, [pc, #60]	; (8001aa0 <DFSDM_GetChannelFromInstance+0x90>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d102      	bne.n	8001a6c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001a66:	2306      	movs	r3, #6
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	e008      	b.n	8001a7e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a0d      	ldr	r2, [pc, #52]	; (8001aa4 <DFSDM_GetChannelFromInstance+0x94>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d102      	bne.n	8001a7a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001a74:	2307      	movs	r3, #7
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	e001      	b.n	8001a7e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	40016000 	.word	0x40016000
 8001a90:	40016020 	.word	0x40016020
 8001a94:	40016040 	.word	0x40016040
 8001a98:	40016080 	.word	0x40016080
 8001a9c:	400160a0 	.word	0x400160a0
 8001aa0:	400160c0 	.word	0x400160c0
 8001aa4:	400160e0 	.word	0x400160e0

08001aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b087      	sub	sp, #28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab6:	e17f      	b.n	8001db8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	2101      	movs	r1, #1
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 8171 	beq.w	8001db2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d005      	beq.n	8001ae8 <HAL_GPIO_Init+0x40>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d130      	bne.n	8001b4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b1e:	2201      	movs	r2, #1
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	091b      	lsrs	r3, r3, #4
 8001b34:	f003 0201 	and.w	r2, r3, #1
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d118      	bne.n	8001b88 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	08db      	lsrs	r3, r3, #3
 8001b72:	f003 0201 	and.w	r2, r3, #1
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d017      	beq.n	8001bc4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d123      	bne.n	8001c18 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	08da      	lsrs	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3208      	adds	r2, #8
 8001bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	220f      	movs	r2, #15
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	08da      	lsrs	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3208      	adds	r2, #8
 8001c12:	6939      	ldr	r1, [r7, #16]
 8001c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	2203      	movs	r2, #3
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0203 	and.w	r2, r3, #3
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80ac 	beq.w	8001db2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5a:	4b5f      	ldr	r3, [pc, #380]	; (8001dd8 <HAL_GPIO_Init+0x330>)
 8001c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5e:	4a5e      	ldr	r2, [pc, #376]	; (8001dd8 <HAL_GPIO_Init+0x330>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6613      	str	r3, [r2, #96]	; 0x60
 8001c66:	4b5c      	ldr	r3, [pc, #368]	; (8001dd8 <HAL_GPIO_Init+0x330>)
 8001c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c72:	4a5a      	ldr	r2, [pc, #360]	; (8001ddc <HAL_GPIO_Init+0x334>)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	089b      	lsrs	r3, r3, #2
 8001c78:	3302      	adds	r3, #2
 8001c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	220f      	movs	r2, #15
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c9c:	d025      	beq.n	8001cea <HAL_GPIO_Init+0x242>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4f      	ldr	r2, [pc, #316]	; (8001de0 <HAL_GPIO_Init+0x338>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d01f      	beq.n	8001ce6 <HAL_GPIO_Init+0x23e>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a4e      	ldr	r2, [pc, #312]	; (8001de4 <HAL_GPIO_Init+0x33c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d019      	beq.n	8001ce2 <HAL_GPIO_Init+0x23a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a4d      	ldr	r2, [pc, #308]	; (8001de8 <HAL_GPIO_Init+0x340>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d013      	beq.n	8001cde <HAL_GPIO_Init+0x236>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4c      	ldr	r2, [pc, #304]	; (8001dec <HAL_GPIO_Init+0x344>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d00d      	beq.n	8001cda <HAL_GPIO_Init+0x232>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4b      	ldr	r2, [pc, #300]	; (8001df0 <HAL_GPIO_Init+0x348>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d007      	beq.n	8001cd6 <HAL_GPIO_Init+0x22e>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a4a      	ldr	r2, [pc, #296]	; (8001df4 <HAL_GPIO_Init+0x34c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d101      	bne.n	8001cd2 <HAL_GPIO_Init+0x22a>
 8001cce:	2306      	movs	r3, #6
 8001cd0:	e00c      	b.n	8001cec <HAL_GPIO_Init+0x244>
 8001cd2:	2307      	movs	r3, #7
 8001cd4:	e00a      	b.n	8001cec <HAL_GPIO_Init+0x244>
 8001cd6:	2305      	movs	r3, #5
 8001cd8:	e008      	b.n	8001cec <HAL_GPIO_Init+0x244>
 8001cda:	2304      	movs	r3, #4
 8001cdc:	e006      	b.n	8001cec <HAL_GPIO_Init+0x244>
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e004      	b.n	8001cec <HAL_GPIO_Init+0x244>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e002      	b.n	8001cec <HAL_GPIO_Init+0x244>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <HAL_GPIO_Init+0x244>
 8001cea:	2300      	movs	r3, #0
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	f002 0203 	and.w	r2, r2, #3
 8001cf2:	0092      	lsls	r2, r2, #2
 8001cf4:	4093      	lsls	r3, r2
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cfc:	4937      	ldr	r1, [pc, #220]	; (8001ddc <HAL_GPIO_Init+0x334>)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	089b      	lsrs	r3, r3, #2
 8001d02:	3302      	adds	r3, #2
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d0a:	4b3b      	ldr	r3, [pc, #236]	; (8001df8 <HAL_GPIO_Init+0x350>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d2e:	4a32      	ldr	r2, [pc, #200]	; (8001df8 <HAL_GPIO_Init+0x350>)
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d34:	4b30      	ldr	r3, [pc, #192]	; (8001df8 <HAL_GPIO_Init+0x350>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d58:	4a27      	ldr	r2, [pc, #156]	; (8001df8 <HAL_GPIO_Init+0x350>)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d5e:	4b26      	ldr	r3, [pc, #152]	; (8001df8 <HAL_GPIO_Init+0x350>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	43db      	mvns	r3, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d82:	4a1d      	ldr	r2, [pc, #116]	; (8001df8 <HAL_GPIO_Init+0x350>)
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d88:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <HAL_GPIO_Init+0x350>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dac:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <HAL_GPIO_Init+0x350>)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	3301      	adds	r3, #1
 8001db6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f47f ae78 	bne.w	8001ab8 <HAL_GPIO_Init+0x10>
  }
}
 8001dc8:	bf00      	nop
 8001dca:	bf00      	nop
 8001dcc:	371c      	adds	r7, #28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40010000 	.word	0x40010000
 8001de0:	48000400 	.word	0x48000400
 8001de4:	48000800 	.word	0x48000800
 8001de8:	48000c00 	.word	0x48000c00
 8001dec:	48001000 	.word	0x48001000
 8001df0:	48001400 	.word	0x48001400
 8001df4:	48001800 	.word	0x48001800
 8001df8:	40010400 	.word	0x40010400

08001dfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	887b      	ldrh	r3, [r7, #2]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d002      	beq.n	8001e1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
 8001e18:	e001      	b.n	8001e1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	807b      	strh	r3, [r7, #2]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e3c:	787b      	ldrb	r3, [r7, #1]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e48:	e002      	b.n	8001e50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e4a:	887a      	ldrh	r2, [r7, #2]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e6e:	887a      	ldrh	r2, [r7, #2]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4013      	ands	r3, r2
 8001e74:	041a      	lsls	r2, r3, #16
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	43d9      	mvns	r1, r3
 8001e7a:	887b      	ldrh	r3, [r7, #2]
 8001e7c:	400b      	ands	r3, r1
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	619a      	str	r2, [r3, #24]
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e9c:	695a      	ldr	r2, [r3, #20]
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d006      	beq.n	8001eb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ea6:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ea8:	88fb      	ldrh	r3, [r7, #6]
 8001eaa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 f806 	bl	8001ec0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40010400 	.word	0x40010400

08001ec0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e08d      	b.n	8002004 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d106      	bne.n	8001f02 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff f86b 	bl	8000fd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2224      	movs	r2, #36	; 0x24
 8001f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0201 	bic.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f26:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f36:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d107      	bne.n	8001f50 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f4c:	609a      	str	r2, [r3, #8]
 8001f4e:	e006      	b.n	8001f5e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f5c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d108      	bne.n	8001f78 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	e007      	b.n	8001f88 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f86:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6812      	ldr	r2, [r2, #0]
 8001f92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f9a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001faa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691a      	ldr	r2, [r3, #16]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69d9      	ldr	r1, [r3, #28]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a1a      	ldr	r2, [r3, #32]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f042 0201 	orr.w	r2, r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2220      	movs	r2, #32
 8001ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b20      	cmp	r3, #32
 8002020:	d138      	bne.n	8002094 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800202c:	2302      	movs	r3, #2
 800202e:	e032      	b.n	8002096 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2224      	movs	r2, #36	; 0x24
 800203c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0201 	bic.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800205e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6819      	ldr	r1, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	e000      	b.n	8002096 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002094:	2302      	movs	r3, #2
  }
}
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b085      	sub	sp, #20
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b20      	cmp	r3, #32
 80020b6:	d139      	bne.n	800212c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d101      	bne.n	80020c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e033      	b.n	800212e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2224      	movs	r2, #36	; 0x24
 80020d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0201 	bic.w	r2, r2, #1
 80020e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	021b      	lsls	r3, r3, #8
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0201 	orr.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	e000      	b.n	800212e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800212c:	2302      	movs	r3, #2
  }
}
 800212e:	4618      	mov	r0, r3
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b086      	sub	sp, #24
 800213e:	af02      	add	r7, sp, #8
 8002140:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e101      	b.n	8002350 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d106      	bne.n	8002166 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff f8c3 	bl	80012ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2203      	movs	r2, #3
 800216a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f002 fb0f 	bl	800479c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	7c1a      	ldrb	r2, [r3, #16]
 8002186:	f88d 2000 	strb.w	r2, [sp]
 800218a:	3304      	adds	r3, #4
 800218c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800218e:	f002 fad8 	bl	8004742 <USB_CoreInit>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e0d5      	b.n	8002350 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f002 fb07 	bl	80047be <USB_SetCurrentMode>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d005      	beq.n	80021c2 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2202      	movs	r2, #2
 80021ba:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e0c6      	b.n	8002350 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c2:	2300      	movs	r3, #0
 80021c4:	73fb      	strb	r3, [r7, #15]
 80021c6:	e04a      	b.n	800225e <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021c8:	7bfa      	ldrb	r2, [r7, #15]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4413      	add	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	3315      	adds	r3, #21
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021dc:	7bfa      	ldrb	r2, [r7, #15]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4413      	add	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	3314      	adds	r3, #20
 80021ec:	7bfa      	ldrb	r2, [r7, #15]
 80021ee:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021f0:	7bfa      	ldrb	r2, [r7, #15]
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
 80021f4:	b298      	uxth	r0, r3
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4413      	add	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	332e      	adds	r3, #46	; 0x2e
 8002204:	4602      	mov	r2, r0
 8002206:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002208:	7bfa      	ldrb	r2, [r7, #15]
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4413      	add	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	3318      	adds	r3, #24
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4413      	add	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	331c      	adds	r3, #28
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002230:	7bfa      	ldrb	r2, [r7, #15]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4413      	add	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	3320      	adds	r3, #32
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002244:	7bfa      	ldrb	r2, [r7, #15]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4413      	add	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	3324      	adds	r3, #36	; 0x24
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	3301      	adds	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	791b      	ldrb	r3, [r3, #4]
 8002262:	7bfa      	ldrb	r2, [r7, #15]
 8002264:	429a      	cmp	r2, r3
 8002266:	d3af      	bcc.n	80021c8 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002268:	2300      	movs	r3, #0
 800226a:	73fb      	strb	r3, [r7, #15]
 800226c:	e044      	b.n	80022f8 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800226e:	7bfa      	ldrb	r2, [r7, #15]
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4413      	add	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002284:	7bfa      	ldrb	r2, [r7, #15]
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4413      	add	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002296:	7bfa      	ldrb	r2, [r7, #15]
 8002298:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800229a:	7bfa      	ldrb	r2, [r7, #15]
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	4413      	add	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	440b      	add	r3, r1
 80022a8:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022b0:	7bfa      	ldrb	r2, [r7, #15]
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4413      	add	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022c6:	7bfa      	ldrb	r2, [r7, #15]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022dc:	7bfa      	ldrb	r2, [r7, #15]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	3301      	adds	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	791b      	ldrb	r3, [r3, #4]
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d3b5      	bcc.n	800226e <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	7c1a      	ldrb	r2, [r3, #16]
 800230a:	f88d 2000 	strb.w	r2, [sp]
 800230e:	3304      	adds	r3, #4
 8002310:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002312:	f002 faa1 	bl	8004858 <USB_DevInit>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e013      	b.n	8002350 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	7b1b      	ldrb	r3, [r3, #12]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d102      	bne.n	8002344 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f80a 	bl	8002358 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f002 fc46 	bl	8004bda <USB_DevDisconnect>

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800238a:	f043 0303 	orr.w	r3, r3, #3
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023a4:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a04      	ldr	r2, [pc, #16]	; (80023bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ae:	6013      	str	r3, [r2, #0]
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40007000 	.word	0x40007000

080023c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80023c4:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40007000 	.word	0x40007000

080023dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ea:	d130      	bne.n	800244e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ec:	4b23      	ldr	r3, [pc, #140]	; (800247c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023f8:	d038      	beq.n	800246c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023fa:	4b20      	ldr	r3, [pc, #128]	; (800247c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002402:	4a1e      	ldr	r2, [pc, #120]	; (800247c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002404:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002408:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800240a:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2232      	movs	r2, #50	; 0x32
 8002410:	fb02 f303 	mul.w	r3, r2, r3
 8002414:	4a1b      	ldr	r2, [pc, #108]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002416:	fba2 2303 	umull	r2, r3, r2, r3
 800241a:	0c9b      	lsrs	r3, r3, #18
 800241c:	3301      	adds	r3, #1
 800241e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002420:	e002      	b.n	8002428 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	3b01      	subs	r3, #1
 8002426:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002428:	4b14      	ldr	r3, [pc, #80]	; (800247c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002434:	d102      	bne.n	800243c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1f2      	bne.n	8002422 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800243c:	4b0f      	ldr	r3, [pc, #60]	; (800247c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002448:	d110      	bne.n	800246c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e00f      	b.n	800246e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800244e:	4b0b      	ldr	r3, [pc, #44]	; (800247c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800245a:	d007      	beq.n	800246c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800245c:	4b07      	ldr	r3, [pc, #28]	; (800247c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002464:	4a05      	ldr	r2, [pc, #20]	; (800247c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800246a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40007000 	.word	0x40007000
 8002480:	20000004 	.word	0x20000004
 8002484:	431bde83 	.word	0x431bde83

08002488 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4a04      	ldr	r2, [pc, #16]	; (80024a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002492:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002496:	6053      	str	r3, [r2, #4]
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40007000 	.word	0x40007000

080024a8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80024b0:	f7ff f8ac 	bl	800160c <HAL_GetTick>
 80024b4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e063      	b.n	8002588 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10b      	bne.n	80024e4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7fe fddd 	bl	8001094 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80024da:	f241 3188 	movw	r1, #5000	; 0x1388
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f858 	bl	8002594 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	021a      	lsls	r2, r3, #8
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	2120      	movs	r1, #32
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f850 	bl	80025b0 <QSPI_WaitFlagStateUntilTimeout>
 8002510:	4603      	mov	r3, r0
 8002512:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002514:	7afb      	ldrb	r3, [r7, #11]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d131      	bne.n	800257e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002524:	f023 0310 	bic.w	r3, r3, #16
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6852      	ldr	r2, [r2, #4]
 800252c:	0611      	lsls	r1, r2, #24
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68d2      	ldr	r2, [r2, #12]
 8002532:	4311      	orrs	r1, r2
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	430b      	orrs	r3, r1
 800253a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	4b13      	ldr	r3, [pc, #76]	; (8002590 <HAL_QSPI_Init+0xe8>)
 8002544:	4013      	ands	r3, r2
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6912      	ldr	r2, [r2, #16]
 800254a:	0411      	lsls	r1, r2, #16
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6952      	ldr	r2, [r2, #20]
 8002550:	4311      	orrs	r1, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6992      	ldr	r2, [r2, #24]
 8002556:	4311      	orrs	r1, r2
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	430b      	orrs	r3, r1
 800255e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0201 	orr.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002586:	7afb      	ldrb	r3, [r7, #11]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	ffe0f8fe 	.word	0xffe0f8fe

08002594 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	603b      	str	r3, [r7, #0]
 80025bc:	4613      	mov	r3, r2
 80025be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80025c0:	e01a      	b.n	80025f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c8:	d016      	beq.n	80025f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ca:	f7ff f81f 	bl	800160c <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d302      	bcc.n	80025e0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10b      	bne.n	80025f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2204      	movs	r2, #4
 80025e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ec:	f043 0201 	orr.w	r2, r3, #1
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e00e      	b.n	8002616 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	4013      	ands	r3, r2
 8002602:	2b00      	cmp	r3, #0
 8002604:	bf14      	ite	ne
 8002606:	2301      	movne	r3, #1
 8002608:	2300      	moveq	r3, #0
 800260a:	b2db      	uxtb	r3, r3
 800260c:	461a      	mov	r2, r3
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	429a      	cmp	r2, r3
 8002612:	d1d6      	bne.n	80025c2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e3ca      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002632:	4b97      	ldr	r3, [pc, #604]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800263c:	4b94      	ldr	r3, [pc, #592]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 80e4 	beq.w	800281c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <HAL_RCC_OscConfig+0x4a>
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	2b0c      	cmp	r3, #12
 800265e:	f040 808b 	bne.w	8002778 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2b01      	cmp	r3, #1
 8002666:	f040 8087 	bne.w	8002778 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800266a:	4b89      	ldr	r3, [pc, #548]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d005      	beq.n	8002682 <HAL_RCC_OscConfig+0x62>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e3a2      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a1a      	ldr	r2, [r3, #32]
 8002686:	4b82      	ldr	r3, [pc, #520]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d004      	beq.n	800269c <HAL_RCC_OscConfig+0x7c>
 8002692:	4b7f      	ldr	r3, [pc, #508]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800269a:	e005      	b.n	80026a8 <HAL_RCC_OscConfig+0x88>
 800269c:	4b7c      	ldr	r3, [pc, #496]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 800269e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a2:	091b      	lsrs	r3, r3, #4
 80026a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d223      	bcs.n	80026f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 fd55 	bl	8003160 <RCC_SetFlashLatencyFromMSIRange>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e383      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026c0:	4b73      	ldr	r3, [pc, #460]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a72      	ldr	r2, [pc, #456]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 80026c6:	f043 0308 	orr.w	r3, r3, #8
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	4b70      	ldr	r3, [pc, #448]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	496d      	ldr	r1, [pc, #436]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026de:	4b6c      	ldr	r3, [pc, #432]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	021b      	lsls	r3, r3, #8
 80026ec:	4968      	ldr	r1, [pc, #416]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	604b      	str	r3, [r1, #4]
 80026f2:	e025      	b.n	8002740 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026f4:	4b66      	ldr	r3, [pc, #408]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a65      	ldr	r2, [pc, #404]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 80026fa:	f043 0308 	orr.w	r3, r3, #8
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	4b63      	ldr	r3, [pc, #396]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	4960      	ldr	r1, [pc, #384]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 800270e:	4313      	orrs	r3, r2
 8002710:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002712:	4b5f      	ldr	r3, [pc, #380]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	495b      	ldr	r1, [pc, #364]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 8002722:	4313      	orrs	r3, r2
 8002724:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d109      	bne.n	8002740 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	4618      	mov	r0, r3
 8002732:	f000 fd15 	bl	8003160 <RCC_SetFlashLatencyFromMSIRange>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e343      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002740:	f000 fc4a 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8002744:	4602      	mov	r2, r0
 8002746:	4b52      	ldr	r3, [pc, #328]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	091b      	lsrs	r3, r3, #4
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	4950      	ldr	r1, [pc, #320]	; (8002894 <HAL_RCC_OscConfig+0x274>)
 8002752:	5ccb      	ldrb	r3, [r1, r3]
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	fa22 f303 	lsr.w	r3, r2, r3
 800275c:	4a4e      	ldr	r2, [pc, #312]	; (8002898 <HAL_RCC_OscConfig+0x278>)
 800275e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002760:	4b4e      	ldr	r3, [pc, #312]	; (800289c <HAL_RCC_OscConfig+0x27c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f7fe ff01 	bl	800156c <HAL_InitTick>
 800276a:	4603      	mov	r3, r0
 800276c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d052      	beq.n	800281a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	e327      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d032      	beq.n	80027e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002780:	4b43      	ldr	r3, [pc, #268]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a42      	ldr	r2, [pc, #264]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800278c:	f7fe ff3e 	bl	800160c <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002794:	f7fe ff3a 	bl	800160c <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e310      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027a6:	4b3a      	ldr	r3, [pc, #232]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0f0      	beq.n	8002794 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027b2:	4b37      	ldr	r3, [pc, #220]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a36      	ldr	r2, [pc, #216]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 80027b8:	f043 0308 	orr.w	r3, r3, #8
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	4b34      	ldr	r3, [pc, #208]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	4931      	ldr	r1, [pc, #196]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027d0:	4b2f      	ldr	r3, [pc, #188]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	021b      	lsls	r3, r3, #8
 80027de:	492c      	ldr	r1, [pc, #176]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	604b      	str	r3, [r1, #4]
 80027e4:	e01a      	b.n	800281c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027e6:	4b2a      	ldr	r3, [pc, #168]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a29      	ldr	r2, [pc, #164]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 80027ec:	f023 0301 	bic.w	r3, r3, #1
 80027f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027f2:	f7fe ff0b 	bl	800160c <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027fa:	f7fe ff07 	bl	800160c <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e2dd      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800280c:	4b20      	ldr	r3, [pc, #128]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f0      	bne.n	80027fa <HAL_RCC_OscConfig+0x1da>
 8002818:	e000      	b.n	800281c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800281a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d074      	beq.n	8002912 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2b08      	cmp	r3, #8
 800282c:	d005      	beq.n	800283a <HAL_RCC_OscConfig+0x21a>
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	2b0c      	cmp	r3, #12
 8002832:	d10e      	bne.n	8002852 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	2b03      	cmp	r3, #3
 8002838:	d10b      	bne.n	8002852 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d064      	beq.n	8002910 <HAL_RCC_OscConfig+0x2f0>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d160      	bne.n	8002910 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e2ba      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800285a:	d106      	bne.n	800286a <HAL_RCC_OscConfig+0x24a>
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0b      	ldr	r2, [pc, #44]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 8002862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	e026      	b.n	80028b8 <HAL_RCC_OscConfig+0x298>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002872:	d115      	bne.n	80028a0 <HAL_RCC_OscConfig+0x280>
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a05      	ldr	r2, [pc, #20]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 800287a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	4b03      	ldr	r3, [pc, #12]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a02      	ldr	r2, [pc, #8]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 8002886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288a:	6013      	str	r3, [r2, #0]
 800288c:	e014      	b.n	80028b8 <HAL_RCC_OscConfig+0x298>
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000
 8002894:	08004d0c 	.word	0x08004d0c
 8002898:	20000004 	.word	0x20000004
 800289c:	20000008 	.word	0x20000008
 80028a0:	4ba0      	ldr	r3, [pc, #640]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a9f      	ldr	r2, [pc, #636]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 80028a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	4b9d      	ldr	r3, [pc, #628]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a9c      	ldr	r2, [pc, #624]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 80028b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d013      	beq.n	80028e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c0:	f7fe fea4 	bl	800160c <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c8:	f7fe fea0 	bl	800160c <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b64      	cmp	r3, #100	; 0x64
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e276      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028da:	4b92      	ldr	r3, [pc, #584]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x2a8>
 80028e6:	e014      	b.n	8002912 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7fe fe90 	bl	800160c <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f0:	f7fe fe8c 	bl	800160c <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	; 0x64
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e262      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002902:	4b88      	ldr	r3, [pc, #544]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0x2d0>
 800290e:	e000      	b.n	8002912 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d060      	beq.n	80029e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	2b04      	cmp	r3, #4
 8002922:	d005      	beq.n	8002930 <HAL_RCC_OscConfig+0x310>
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	2b0c      	cmp	r3, #12
 8002928:	d119      	bne.n	800295e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2b02      	cmp	r3, #2
 800292e:	d116      	bne.n	800295e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002930:	4b7c      	ldr	r3, [pc, #496]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_OscConfig+0x328>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e23f      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002948:	4b76      	ldr	r3, [pc, #472]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	061b      	lsls	r3, r3, #24
 8002956:	4973      	ldr	r1, [pc, #460]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 8002958:	4313      	orrs	r3, r2
 800295a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800295c:	e040      	b.n	80029e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d023      	beq.n	80029ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002966:	4b6f      	ldr	r3, [pc, #444]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a6e      	ldr	r2, [pc, #440]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 800296c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002970:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002972:	f7fe fe4b 	bl	800160c <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800297a:	f7fe fe47 	bl	800160c <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e21d      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800298c:	4b65      	ldr	r3, [pc, #404]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0f0      	beq.n	800297a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002998:	4b62      	ldr	r3, [pc, #392]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	061b      	lsls	r3, r3, #24
 80029a6:	495f      	ldr	r1, [pc, #380]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]
 80029ac:	e018      	b.n	80029e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ae:	4b5d      	ldr	r3, [pc, #372]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a5c      	ldr	r2, [pc, #368]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 80029b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ba:	f7fe fe27 	bl	800160c <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c2:	f7fe fe23 	bl	800160c <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e1f9      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029d4:	4b53      	ldr	r3, [pc, #332]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1f0      	bne.n	80029c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d03c      	beq.n	8002a66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d01c      	beq.n	8002a2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f4:	4b4b      	ldr	r3, [pc, #300]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 80029f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029fa:	4a4a      	ldr	r2, [pc, #296]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a04:	f7fe fe02 	bl	800160c <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a0c:	f7fe fdfe 	bl	800160c <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e1d4      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a1e:	4b41      	ldr	r3, [pc, #260]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 8002a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0ef      	beq.n	8002a0c <HAL_RCC_OscConfig+0x3ec>
 8002a2c:	e01b      	b.n	8002a66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a2e:	4b3d      	ldr	r3, [pc, #244]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 8002a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a34:	4a3b      	ldr	r2, [pc, #236]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 8002a36:	f023 0301 	bic.w	r3, r3, #1
 8002a3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3e:	f7fe fde5 	bl	800160c <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a46:	f7fe fde1 	bl	800160c <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e1b7      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a58:	4b32      	ldr	r3, [pc, #200]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 8002a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1ef      	bne.n	8002a46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 80a6 	beq.w	8002bc0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a74:	2300      	movs	r3, #0
 8002a76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a78:	4b2a      	ldr	r3, [pc, #168]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 8002a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10d      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a84:	4b27      	ldr	r3, [pc, #156]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 8002a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a88:	4a26      	ldr	r2, [pc, #152]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 8002a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a90:	4b24      	ldr	r3, [pc, #144]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 8002a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aa0:	4b21      	ldr	r3, [pc, #132]	; (8002b28 <HAL_RCC_OscConfig+0x508>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d118      	bne.n	8002ade <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aac:	4b1e      	ldr	r3, [pc, #120]	; (8002b28 <HAL_RCC_OscConfig+0x508>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <HAL_RCC_OscConfig+0x508>)
 8002ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab8:	f7fe fda8 	bl	800160c <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac0:	f7fe fda4 	bl	800160c <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e17a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ad2:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <HAL_RCC_OscConfig+0x508>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d108      	bne.n	8002af8 <HAL_RCC_OscConfig+0x4d8>
 8002ae6:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 8002ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aec:	4a0d      	ldr	r2, [pc, #52]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002af6:	e029      	b.n	8002b4c <HAL_RCC_OscConfig+0x52c>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b05      	cmp	r3, #5
 8002afe:	d115      	bne.n	8002b2c <HAL_RCC_OscConfig+0x50c>
 8002b00:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 8002b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b06:	4a07      	ldr	r2, [pc, #28]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 8002b08:	f043 0304 	orr.w	r3, r3, #4
 8002b0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 8002b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b16:	4a03      	ldr	r2, [pc, #12]	; (8002b24 <HAL_RCC_OscConfig+0x504>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b20:	e014      	b.n	8002b4c <HAL_RCC_OscConfig+0x52c>
 8002b22:	bf00      	nop
 8002b24:	40021000 	.word	0x40021000
 8002b28:	40007000 	.word	0x40007000
 8002b2c:	4b9c      	ldr	r3, [pc, #624]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b32:	4a9b      	ldr	r2, [pc, #620]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002b34:	f023 0301 	bic.w	r3, r3, #1
 8002b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b3c:	4b98      	ldr	r3, [pc, #608]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b42:	4a97      	ldr	r2, [pc, #604]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002b44:	f023 0304 	bic.w	r3, r3, #4
 8002b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d016      	beq.n	8002b82 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b54:	f7fe fd5a 	bl	800160c <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b5a:	e00a      	b.n	8002b72 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5c:	f7fe fd56 	bl	800160c <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e12a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b72:	4b8b      	ldr	r3, [pc, #556]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0ed      	beq.n	8002b5c <HAL_RCC_OscConfig+0x53c>
 8002b80:	e015      	b.n	8002bae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b82:	f7fe fd43 	bl	800160c <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b88:	e00a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8a:	f7fe fd3f 	bl	800160c <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e113      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ba0:	4b7f      	ldr	r3, [pc, #508]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1ed      	bne.n	8002b8a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bae:	7ffb      	ldrb	r3, [r7, #31]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d105      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb4:	4b7a      	ldr	r3, [pc, #488]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb8:	4a79      	ldr	r2, [pc, #484]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002bba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80fe 	beq.w	8002dc6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	f040 80d0 	bne.w	8002d74 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002bd4:	4b72      	ldr	r3, [pc, #456]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f003 0203 	and.w	r2, r3, #3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d130      	bne.n	8002c4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d127      	bne.n	8002c4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c04:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d11f      	bne.n	8002c4a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c14:	2a07      	cmp	r2, #7
 8002c16:	bf14      	ite	ne
 8002c18:	2201      	movne	r2, #1
 8002c1a:	2200      	moveq	r2, #0
 8002c1c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d113      	bne.n	8002c4a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2c:	085b      	lsrs	r3, r3, #1
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d109      	bne.n	8002c4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	085b      	lsrs	r3, r3, #1
 8002c42:	3b01      	subs	r3, #1
 8002c44:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d06e      	beq.n	8002d28 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	2b0c      	cmp	r3, #12
 8002c4e:	d069      	beq.n	8002d24 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c50:	4b53      	ldr	r3, [pc, #332]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d105      	bne.n	8002c68 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c5c:	4b50      	ldr	r3, [pc, #320]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0ad      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c6c:	4b4c      	ldr	r3, [pc, #304]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a4b      	ldr	r2, [pc, #300]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c76:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c78:	f7fe fcc8 	bl	800160c <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c80:	f7fe fcc4 	bl	800160c <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e09a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c92:	4b43      	ldr	r3, [pc, #268]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c9e:	4b40      	ldr	r3, [pc, #256]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	4b40      	ldr	r3, [pc, #256]	; (8002da4 <HAL_RCC_OscConfig+0x784>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002cae:	3a01      	subs	r2, #1
 8002cb0:	0112      	lsls	r2, r2, #4
 8002cb2:	4311      	orrs	r1, r2
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cb8:	0212      	lsls	r2, r2, #8
 8002cba:	4311      	orrs	r1, r2
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002cc0:	0852      	lsrs	r2, r2, #1
 8002cc2:	3a01      	subs	r2, #1
 8002cc4:	0552      	lsls	r2, r2, #21
 8002cc6:	4311      	orrs	r1, r2
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ccc:	0852      	lsrs	r2, r2, #1
 8002cce:	3a01      	subs	r2, #1
 8002cd0:	0652      	lsls	r2, r2, #25
 8002cd2:	4311      	orrs	r1, r2
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cd8:	0912      	lsrs	r2, r2, #4
 8002cda:	0452      	lsls	r2, r2, #17
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	4930      	ldr	r1, [pc, #192]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ce4:	4b2e      	ldr	r3, [pc, #184]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a2d      	ldr	r2, [pc, #180]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cf0:	4b2b      	ldr	r3, [pc, #172]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4a2a      	ldr	r2, [pc, #168]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cfa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cfc:	f7fe fc86 	bl	800160c <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d04:	f7fe fc82 	bl	800160c <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e058      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d16:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d22:	e050      	b.n	8002dc6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e04f      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d28:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d148      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d34:	4b1a      	ldr	r3, [pc, #104]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a19      	ldr	r2, [pc, #100]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d40:	4b17      	ldr	r3, [pc, #92]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	4a16      	ldr	r2, [pc, #88]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d4c:	f7fe fc5e 	bl	800160c <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d54:	f7fe fc5a 	bl	800160c <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e030      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d66:	4b0e      	ldr	r3, [pc, #56]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0x734>
 8002d72:	e028      	b.n	8002dc6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	2b0c      	cmp	r3, #12
 8002d78:	d023      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7a:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a08      	ldr	r2, [pc, #32]	; (8002da0 <HAL_RCC_OscConfig+0x780>)
 8002d80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d86:	f7fe fc41 	bl	800160c <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d8c:	e00c      	b.n	8002da8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8e:	f7fe fc3d 	bl	800160c <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d905      	bls.n	8002da8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e013      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7a8>
 8002da0:	40021000 	.word	0x40021000
 8002da4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002da8:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <HAL_RCC_OscConfig+0x7b0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1ec      	bne.n	8002d8e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <HAL_RCC_OscConfig+0x7b0>)
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	4905      	ldr	r1, [pc, #20]	; (8002dd0 <HAL_RCC_OscConfig+0x7b0>)
 8002dba:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <HAL_RCC_OscConfig+0x7b4>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	60cb      	str	r3, [r1, #12]
 8002dc0:	e001      	b.n	8002dc6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3720      	adds	r7, #32
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	feeefffc 	.word	0xfeeefffc

08002dd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0e7      	b.n	8002fbc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dec:	4b75      	ldr	r3, [pc, #468]	; (8002fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d910      	bls.n	8002e1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfa:	4b72      	ldr	r3, [pc, #456]	; (8002fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 0207 	bic.w	r2, r3, #7
 8002e02:	4970      	ldr	r1, [pc, #448]	; (8002fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0a:	4b6e      	ldr	r3, [pc, #440]	; (8002fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d001      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0cf      	b.n	8002fbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d010      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	4b66      	ldr	r3, [pc, #408]	; (8002fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d908      	bls.n	8002e4a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e38:	4b63      	ldr	r3, [pc, #396]	; (8002fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	4960      	ldr	r1, [pc, #384]	; (8002fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d04c      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d107      	bne.n	8002e6e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5e:	4b5a      	ldr	r3, [pc, #360]	; (8002fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d121      	bne.n	8002eae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e0a6      	b.n	8002fbc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d107      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e76:	4b54      	ldr	r3, [pc, #336]	; (8002fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d115      	bne.n	8002eae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e09a      	b.n	8002fbc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d107      	bne.n	8002e9e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e8e:	4b4e      	ldr	r3, [pc, #312]	; (8002fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d109      	bne.n	8002eae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e08e      	b.n	8002fbc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e9e:	4b4a      	ldr	r3, [pc, #296]	; (8002fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e086      	b.n	8002fbc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002eae:	4b46      	ldr	r3, [pc, #280]	; (8002fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f023 0203 	bic.w	r2, r3, #3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	4943      	ldr	r1, [pc, #268]	; (8002fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec0:	f7fe fba4 	bl	800160c <HAL_GetTick>
 8002ec4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec6:	e00a      	b.n	8002ede <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec8:	f7fe fba0 	bl	800160c <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e06e      	b.n	8002fbc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ede:	4b3a      	ldr	r3, [pc, #232]	; (8002fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 020c 	and.w	r2, r3, #12
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d1eb      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d010      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	4b31      	ldr	r3, [pc, #196]	; (8002fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d208      	bcs.n	8002f1e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f0c:	4b2e      	ldr	r3, [pc, #184]	; (8002fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	492b      	ldr	r1, [pc, #172]	; (8002fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f1e:	4b29      	ldr	r3, [pc, #164]	; (8002fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d210      	bcs.n	8002f4e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2c:	4b25      	ldr	r3, [pc, #148]	; (8002fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f023 0207 	bic.w	r2, r3, #7
 8002f34:	4923      	ldr	r1, [pc, #140]	; (8002fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3c:	4b21      	ldr	r3, [pc, #132]	; (8002fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d001      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e036      	b.n	8002fbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0304 	and.w	r3, r3, #4
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d008      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f5a:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	4918      	ldr	r1, [pc, #96]	; (8002fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d009      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f78:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4910      	ldr	r1, [pc, #64]	; (8002fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f8c:	f000 f824 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8002f90:	4602      	mov	r2, r0
 8002f92:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	091b      	lsrs	r3, r3, #4
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	490b      	ldr	r1, [pc, #44]	; (8002fcc <HAL_RCC_ClockConfig+0x1f4>)
 8002f9e:	5ccb      	ldrb	r3, [r1, r3]
 8002fa0:	f003 031f 	and.w	r3, r3, #31
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa8:	4a09      	ldr	r2, [pc, #36]	; (8002fd0 <HAL_RCC_ClockConfig+0x1f8>)
 8002faa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fac:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <HAL_RCC_ClockConfig+0x1fc>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7fe fadb 	bl	800156c <HAL_InitTick>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002fba:	7afb      	ldrb	r3, [r7, #11]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40022000 	.word	0x40022000
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	08004d0c 	.word	0x08004d0c
 8002fd0:	20000004 	.word	0x20000004
 8002fd4:	20000008 	.word	0x20000008

08002fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	; 0x24
 8002fdc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61fb      	str	r3, [r7, #28]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fe6:	4b3e      	ldr	r3, [pc, #248]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ff0:	4b3b      	ldr	r3, [pc, #236]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d005      	beq.n	800300c <HAL_RCC_GetSysClockFreq+0x34>
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	2b0c      	cmp	r3, #12
 8003004:	d121      	bne.n	800304a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d11e      	bne.n	800304a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800300c:	4b34      	ldr	r3, [pc, #208]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b00      	cmp	r3, #0
 8003016:	d107      	bne.n	8003028 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003018:	4b31      	ldr	r3, [pc, #196]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800301a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800301e:	0a1b      	lsrs	r3, r3, #8
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	61fb      	str	r3, [r7, #28]
 8003026:	e005      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003028:	4b2d      	ldr	r3, [pc, #180]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	091b      	lsrs	r3, r3, #4
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003034:	4a2b      	ldr	r2, [pc, #172]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800303c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10d      	bne.n	8003060 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003048:	e00a      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	2b04      	cmp	r3, #4
 800304e:	d102      	bne.n	8003056 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003050:	4b25      	ldr	r3, [pc, #148]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003052:	61bb      	str	r3, [r7, #24]
 8003054:	e004      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	2b08      	cmp	r3, #8
 800305a:	d101      	bne.n	8003060 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800305c:	4b23      	ldr	r3, [pc, #140]	; (80030ec <HAL_RCC_GetSysClockFreq+0x114>)
 800305e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	2b0c      	cmp	r3, #12
 8003064:	d134      	bne.n	80030d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003066:	4b1e      	ldr	r3, [pc, #120]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b02      	cmp	r3, #2
 8003074:	d003      	beq.n	800307e <HAL_RCC_GetSysClockFreq+0xa6>
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2b03      	cmp	r3, #3
 800307a:	d003      	beq.n	8003084 <HAL_RCC_GetSysClockFreq+0xac>
 800307c:	e005      	b.n	800308a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800307e:	4b1a      	ldr	r3, [pc, #104]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003080:	617b      	str	r3, [r7, #20]
      break;
 8003082:	e005      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003084:	4b19      	ldr	r3, [pc, #100]	; (80030ec <HAL_RCC_GetSysClockFreq+0x114>)
 8003086:	617b      	str	r3, [r7, #20]
      break;
 8003088:	e002      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	617b      	str	r3, [r7, #20]
      break;
 800308e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003090:	4b13      	ldr	r3, [pc, #76]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	091b      	lsrs	r3, r3, #4
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	3301      	adds	r3, #1
 800309c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800309e:	4b10      	ldr	r3, [pc, #64]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	0a1b      	lsrs	r3, r3, #8
 80030a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	fb03 f202 	mul.w	r2, r3, r2
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030b6:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	0e5b      	lsrs	r3, r3, #25
 80030bc:	f003 0303 	and.w	r3, r3, #3
 80030c0:	3301      	adds	r3, #1
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030d0:	69bb      	ldr	r3, [r7, #24]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3724      	adds	r7, #36	; 0x24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40021000 	.word	0x40021000
 80030e4:	08004d24 	.word	0x08004d24
 80030e8:	00f42400 	.word	0x00f42400
 80030ec:	007a1200 	.word	0x007a1200

080030f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030f4:	4b03      	ldr	r3, [pc, #12]	; (8003104 <HAL_RCC_GetHCLKFreq+0x14>)
 80030f6:	681b      	ldr	r3, [r3, #0]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	20000004 	.word	0x20000004

08003108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800310c:	f7ff fff0 	bl	80030f0 <HAL_RCC_GetHCLKFreq>
 8003110:	4602      	mov	r2, r0
 8003112:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	0a1b      	lsrs	r3, r3, #8
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	4904      	ldr	r1, [pc, #16]	; (8003130 <HAL_RCC_GetPCLK1Freq+0x28>)
 800311e:	5ccb      	ldrb	r3, [r1, r3]
 8003120:	f003 031f 	and.w	r3, r3, #31
 8003124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003128:	4618      	mov	r0, r3
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40021000 	.word	0x40021000
 8003130:	08004d1c 	.word	0x08004d1c

08003134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003138:	f7ff ffda 	bl	80030f0 <HAL_RCC_GetHCLKFreq>
 800313c:	4602      	mov	r2, r0
 800313e:	4b06      	ldr	r3, [pc, #24]	; (8003158 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	0adb      	lsrs	r3, r3, #11
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	4904      	ldr	r1, [pc, #16]	; (800315c <HAL_RCC_GetPCLK2Freq+0x28>)
 800314a:	5ccb      	ldrb	r3, [r1, r3]
 800314c:	f003 031f 	and.w	r3, r3, #31
 8003150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003154:	4618      	mov	r0, r3
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40021000 	.word	0x40021000
 800315c:	08004d1c 	.word	0x08004d1c

08003160 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003168:	2300      	movs	r3, #0
 800316a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800316c:	4b2a      	ldr	r3, [pc, #168]	; (8003218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800316e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003178:	f7ff f922 	bl	80023c0 <HAL_PWREx_GetVoltageRange>
 800317c:	6178      	str	r0, [r7, #20]
 800317e:	e014      	b.n	80031aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003180:	4b25      	ldr	r3, [pc, #148]	; (8003218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003184:	4a24      	ldr	r2, [pc, #144]	; (8003218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800318a:	6593      	str	r3, [r2, #88]	; 0x58
 800318c:	4b22      	ldr	r3, [pc, #136]	; (8003218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800318e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003198:	f7ff f912 	bl	80023c0 <HAL_PWREx_GetVoltageRange>
 800319c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800319e:	4b1e      	ldr	r3, [pc, #120]	; (8003218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a2:	4a1d      	ldr	r2, [pc, #116]	; (8003218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031b0:	d10b      	bne.n	80031ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b80      	cmp	r3, #128	; 0x80
 80031b6:	d919      	bls.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2ba0      	cmp	r3, #160	; 0xa0
 80031bc:	d902      	bls.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031be:	2302      	movs	r3, #2
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	e013      	b.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031c4:	2301      	movs	r3, #1
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	e010      	b.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b80      	cmp	r3, #128	; 0x80
 80031ce:	d902      	bls.n	80031d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031d0:	2303      	movs	r3, #3
 80031d2:	613b      	str	r3, [r7, #16]
 80031d4:	e00a      	b.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b80      	cmp	r3, #128	; 0x80
 80031da:	d102      	bne.n	80031e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031dc:	2302      	movs	r3, #2
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	e004      	b.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b70      	cmp	r3, #112	; 0x70
 80031e6:	d101      	bne.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031e8:	2301      	movs	r3, #1
 80031ea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 0207 	bic.w	r2, r3, #7
 80031f4:	4909      	ldr	r1, [pc, #36]	; (800321c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031fc:	4b07      	ldr	r3, [pc, #28]	; (800321c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	429a      	cmp	r2, r3
 8003208:	d001      	beq.n	800320e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40021000 	.word	0x40021000
 800321c:	40022000 	.word	0x40022000

08003220 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003228:	2300      	movs	r3, #0
 800322a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800322c:	2300      	movs	r3, #0
 800322e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003238:	2b00      	cmp	r3, #0
 800323a:	d041      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003240:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003244:	d02a      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003246:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800324a:	d824      	bhi.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800324c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003250:	d008      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003252:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003256:	d81e      	bhi.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00a      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800325c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003260:	d010      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003262:	e018      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003264:	4b86      	ldr	r3, [pc, #536]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4a85      	ldr	r2, [pc, #532]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800326e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003270:	e015      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3304      	adds	r3, #4
 8003276:	2100      	movs	r1, #0
 8003278:	4618      	mov	r0, r3
 800327a:	f000 facb 	bl	8003814 <RCCEx_PLLSAI1_Config>
 800327e:	4603      	mov	r3, r0
 8003280:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003282:	e00c      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3320      	adds	r3, #32
 8003288:	2100      	movs	r1, #0
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fbb6 	bl	80039fc <RCCEx_PLLSAI2_Config>
 8003290:	4603      	mov	r3, r0
 8003292:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003294:	e003      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	74fb      	strb	r3, [r7, #19]
      break;
 800329a:	e000      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800329c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800329e:	7cfb      	ldrb	r3, [r7, #19]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10b      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032a4:	4b76      	ldr	r3, [pc, #472]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032b2:	4973      	ldr	r1, [pc, #460]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032ba:	e001      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032bc:	7cfb      	ldrb	r3, [r7, #19]
 80032be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d041      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032d4:	d02a      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80032d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032da:	d824      	bhi.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032e0:	d008      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032e6:	d81e      	bhi.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00a      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032f0:	d010      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032f2:	e018      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032f4:	4b62      	ldr	r3, [pc, #392]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	4a61      	ldr	r2, [pc, #388]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003300:	e015      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3304      	adds	r3, #4
 8003306:	2100      	movs	r1, #0
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fa83 	bl	8003814 <RCCEx_PLLSAI1_Config>
 800330e:	4603      	mov	r3, r0
 8003310:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003312:	e00c      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3320      	adds	r3, #32
 8003318:	2100      	movs	r1, #0
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fb6e 	bl	80039fc <RCCEx_PLLSAI2_Config>
 8003320:	4603      	mov	r3, r0
 8003322:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003324:	e003      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	74fb      	strb	r3, [r7, #19]
      break;
 800332a:	e000      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800332c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800332e:	7cfb      	ldrb	r3, [r7, #19]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10b      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003334:	4b52      	ldr	r3, [pc, #328]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003342:	494f      	ldr	r1, [pc, #316]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800334a:	e001      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800334c:	7cfb      	ldrb	r3, [r7, #19]
 800334e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80a0 	beq.w	800349e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800335e:	2300      	movs	r3, #0
 8003360:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003362:	4b47      	ldr	r3, [pc, #284]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003372:	2300      	movs	r3, #0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00d      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003378:	4b41      	ldr	r3, [pc, #260]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800337a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337c:	4a40      	ldr	r2, [pc, #256]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800337e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003382:	6593      	str	r3, [r2, #88]	; 0x58
 8003384:	4b3e      	ldr	r3, [pc, #248]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003390:	2301      	movs	r3, #1
 8003392:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003394:	4b3b      	ldr	r3, [pc, #236]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a3a      	ldr	r2, [pc, #232]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800339a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800339e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033a0:	f7fe f934 	bl	800160c <HAL_GetTick>
 80033a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033a6:	e009      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a8:	f7fe f930 	bl	800160c <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d902      	bls.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	74fb      	strb	r3, [r7, #19]
        break;
 80033ba:	e005      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033bc:	4b31      	ldr	r3, [pc, #196]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0ef      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80033c8:	7cfb      	ldrb	r3, [r7, #19]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d15c      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033ce:	4b2c      	ldr	r3, [pc, #176]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d01f      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d019      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033ec:	4b24      	ldr	r3, [pc, #144]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033f8:	4b21      	ldr	r3, [pc, #132]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fe:	4a20      	ldr	r2, [pc, #128]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003408:	4b1d      	ldr	r3, [pc, #116]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340e:	4a1c      	ldr	r2, [pc, #112]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003418:	4a19      	ldr	r2, [pc, #100]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d016      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342a:	f7fe f8ef 	bl	800160c <HAL_GetTick>
 800342e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003430:	e00b      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003432:	f7fe f8eb 	bl	800160c <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003440:	4293      	cmp	r3, r2
 8003442:	d902      	bls.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	74fb      	strb	r3, [r7, #19]
            break;
 8003448:	e006      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800344a:	4b0d      	ldr	r3, [pc, #52]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0ec      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003458:	7cfb      	ldrb	r3, [r7, #19]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10c      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800345e:	4b08      	ldr	r3, [pc, #32]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003464:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800346e:	4904      	ldr	r1, [pc, #16]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003476:	e009      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003478:	7cfb      	ldrb	r3, [r7, #19]
 800347a:	74bb      	strb	r3, [r7, #18]
 800347c:	e006      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800347e:	bf00      	nop
 8003480:	40021000 	.word	0x40021000
 8003484:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003488:	7cfb      	ldrb	r3, [r7, #19]
 800348a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800348c:	7c7b      	ldrb	r3, [r7, #17]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d105      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003492:	4b9e      	ldr	r3, [pc, #632]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003496:	4a9d      	ldr	r2, [pc, #628]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800349c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034aa:	4b98      	ldr	r3, [pc, #608]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b0:	f023 0203 	bic.w	r2, r3, #3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b8:	4994      	ldr	r1, [pc, #592]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034cc:	4b8f      	ldr	r3, [pc, #572]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d2:	f023 020c 	bic.w	r2, r3, #12
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034da:	498c      	ldr	r1, [pc, #560]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0304 	and.w	r3, r3, #4
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034ee:	4b87      	ldr	r3, [pc, #540]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	4983      	ldr	r1, [pc, #524]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00a      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003510:	4b7e      	ldr	r3, [pc, #504]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003516:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	497b      	ldr	r1, [pc, #492]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0310 	and.w	r3, r3, #16
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003532:	4b76      	ldr	r3, [pc, #472]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003538:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003540:	4972      	ldr	r1, [pc, #456]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0320 	and.w	r3, r3, #32
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003554:	4b6d      	ldr	r3, [pc, #436]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003562:	496a      	ldr	r1, [pc, #424]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003576:	4b65      	ldr	r3, [pc, #404]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003584:	4961      	ldr	r1, [pc, #388]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003598:	4b5c      	ldr	r3, [pc, #368]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a6:	4959      	ldr	r1, [pc, #356]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035ba:	4b54      	ldr	r3, [pc, #336]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c8:	4950      	ldr	r1, [pc, #320]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035dc:	4b4b      	ldr	r3, [pc, #300]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ea:	4948      	ldr	r1, [pc, #288]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035fe:	4b43      	ldr	r3, [pc, #268]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003604:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360c:	493f      	ldr	r1, [pc, #252]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d028      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003620:	4b3a      	ldr	r3, [pc, #232]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003626:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800362e:	4937      	ldr	r1, [pc, #220]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800363a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800363e:	d106      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003640:	4b32      	ldr	r3, [pc, #200]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	4a31      	ldr	r2, [pc, #196]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003646:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800364a:	60d3      	str	r3, [r2, #12]
 800364c:	e011      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003652:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003656:	d10c      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3304      	adds	r3, #4
 800365c:	2101      	movs	r1, #1
 800365e:	4618      	mov	r0, r3
 8003660:	f000 f8d8 	bl	8003814 <RCCEx_PLLSAI1_Config>
 8003664:	4603      	mov	r3, r0
 8003666:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003668:	7cfb      	ldrb	r3, [r7, #19]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800366e:	7cfb      	ldrb	r3, [r7, #19]
 8003670:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d028      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800367e:	4b23      	ldr	r3, [pc, #140]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003684:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368c:	491f      	ldr	r1, [pc, #124]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003698:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800369c:	d106      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800369e:	4b1b      	ldr	r3, [pc, #108]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	4a1a      	ldr	r2, [pc, #104]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036a8:	60d3      	str	r3, [r2, #12]
 80036aa:	e011      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3304      	adds	r3, #4
 80036ba:	2101      	movs	r1, #1
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 f8a9 	bl	8003814 <RCCEx_PLLSAI1_Config>
 80036c2:	4603      	mov	r3, r0
 80036c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036c6:	7cfb      	ldrb	r3, [r7, #19]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80036cc:	7cfb      	ldrb	r3, [r7, #19]
 80036ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d02b      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ea:	4908      	ldr	r1, [pc, #32]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036fa:	d109      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036fc:	4b03      	ldr	r3, [pc, #12]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4a02      	ldr	r2, [pc, #8]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003706:	60d3      	str	r3, [r2, #12]
 8003708:	e014      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800370a:	bf00      	nop
 800370c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003714:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003718:	d10c      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3304      	adds	r3, #4
 800371e:	2101      	movs	r1, #1
 8003720:	4618      	mov	r0, r3
 8003722:	f000 f877 	bl	8003814 <RCCEx_PLLSAI1_Config>
 8003726:	4603      	mov	r3, r0
 8003728:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800372a:	7cfb      	ldrb	r3, [r7, #19]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003730:	7cfb      	ldrb	r3, [r7, #19]
 8003732:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d02f      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003740:	4b2b      	ldr	r3, [pc, #172]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003746:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800374e:	4928      	ldr	r1, [pc, #160]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800375a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800375e:	d10d      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3304      	adds	r3, #4
 8003764:	2102      	movs	r1, #2
 8003766:	4618      	mov	r0, r3
 8003768:	f000 f854 	bl	8003814 <RCCEx_PLLSAI1_Config>
 800376c:	4603      	mov	r3, r0
 800376e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003770:	7cfb      	ldrb	r3, [r7, #19]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d014      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003776:	7cfb      	ldrb	r3, [r7, #19]
 8003778:	74bb      	strb	r3, [r7, #18]
 800377a:	e011      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003784:	d10c      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	3320      	adds	r3, #32
 800378a:	2102      	movs	r1, #2
 800378c:	4618      	mov	r0, r3
 800378e:	f000 f935 	bl	80039fc <RCCEx_PLLSAI2_Config>
 8003792:	4603      	mov	r3, r0
 8003794:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003796:	7cfb      	ldrb	r3, [r7, #19]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800379c:	7cfb      	ldrb	r3, [r7, #19]
 800379e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00a      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037ac:	4b10      	ldr	r3, [pc, #64]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037ba:	490d      	ldr	r1, [pc, #52]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00b      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037ce:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037de:	4904      	ldr	r1, [pc, #16]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40021000 	.word	0x40021000

080037f4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80037f8:	4b05      	ldr	r3, [pc, #20]	; (8003810 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a04      	ldr	r2, [pc, #16]	; (8003810 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80037fe:	f043 0304 	orr.w	r3, r3, #4
 8003802:	6013      	str	r3, [r2, #0]
}
 8003804:	bf00      	nop
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40021000 	.word	0x40021000

08003814 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003822:	4b75      	ldr	r3, [pc, #468]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d018      	beq.n	8003860 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800382e:	4b72      	ldr	r3, [pc, #456]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f003 0203 	and.w	r2, r3, #3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d10d      	bne.n	800385a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
       ||
 8003842:	2b00      	cmp	r3, #0
 8003844:	d009      	beq.n	800385a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003846:	4b6c      	ldr	r3, [pc, #432]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	091b      	lsrs	r3, r3, #4
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
       ||
 8003856:	429a      	cmp	r2, r3
 8003858:	d047      	beq.n	80038ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	73fb      	strb	r3, [r7, #15]
 800385e:	e044      	b.n	80038ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b03      	cmp	r3, #3
 8003866:	d018      	beq.n	800389a <RCCEx_PLLSAI1_Config+0x86>
 8003868:	2b03      	cmp	r3, #3
 800386a:	d825      	bhi.n	80038b8 <RCCEx_PLLSAI1_Config+0xa4>
 800386c:	2b01      	cmp	r3, #1
 800386e:	d002      	beq.n	8003876 <RCCEx_PLLSAI1_Config+0x62>
 8003870:	2b02      	cmp	r3, #2
 8003872:	d009      	beq.n	8003888 <RCCEx_PLLSAI1_Config+0x74>
 8003874:	e020      	b.n	80038b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003876:	4b60      	ldr	r3, [pc, #384]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d11d      	bne.n	80038be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003886:	e01a      	b.n	80038be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003888:	4b5b      	ldr	r3, [pc, #364]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003890:	2b00      	cmp	r3, #0
 8003892:	d116      	bne.n	80038c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003898:	e013      	b.n	80038c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800389a:	4b57      	ldr	r3, [pc, #348]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10f      	bne.n	80038c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038a6:	4b54      	ldr	r3, [pc, #336]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d109      	bne.n	80038c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038b6:	e006      	b.n	80038c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
      break;
 80038bc:	e004      	b.n	80038c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038be:	bf00      	nop
 80038c0:	e002      	b.n	80038c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038c2:	bf00      	nop
 80038c4:	e000      	b.n	80038c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10d      	bne.n	80038ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038ce:	4b4a      	ldr	r3, [pc, #296]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6819      	ldr	r1, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	3b01      	subs	r3, #1
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	430b      	orrs	r3, r1
 80038e4:	4944      	ldr	r1, [pc, #272]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d17d      	bne.n	80039ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038f0:	4b41      	ldr	r3, [pc, #260]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a40      	ldr	r2, [pc, #256]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038fc:	f7fd fe86 	bl	800160c <HAL_GetTick>
 8003900:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003902:	e009      	b.n	8003918 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003904:	f7fd fe82 	bl	800160c <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d902      	bls.n	8003918 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	73fb      	strb	r3, [r7, #15]
        break;
 8003916:	e005      	b.n	8003924 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003918:	4b37      	ldr	r3, [pc, #220]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1ef      	bne.n	8003904 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d160      	bne.n	80039ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d111      	bne.n	8003954 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003930:	4b31      	ldr	r3, [pc, #196]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6892      	ldr	r2, [r2, #8]
 8003940:	0211      	lsls	r1, r2, #8
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	68d2      	ldr	r2, [r2, #12]
 8003946:	0912      	lsrs	r2, r2, #4
 8003948:	0452      	lsls	r2, r2, #17
 800394a:	430a      	orrs	r2, r1
 800394c:	492a      	ldr	r1, [pc, #168]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800394e:	4313      	orrs	r3, r2
 8003950:	610b      	str	r3, [r1, #16]
 8003952:	e027      	b.n	80039a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d112      	bne.n	8003980 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800395a:	4b27      	ldr	r3, [pc, #156]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003962:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6892      	ldr	r2, [r2, #8]
 800396a:	0211      	lsls	r1, r2, #8
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6912      	ldr	r2, [r2, #16]
 8003970:	0852      	lsrs	r2, r2, #1
 8003972:	3a01      	subs	r2, #1
 8003974:	0552      	lsls	r2, r2, #21
 8003976:	430a      	orrs	r2, r1
 8003978:	491f      	ldr	r1, [pc, #124]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800397a:	4313      	orrs	r3, r2
 800397c:	610b      	str	r3, [r1, #16]
 800397e:	e011      	b.n	80039a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003980:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003988:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6892      	ldr	r2, [r2, #8]
 8003990:	0211      	lsls	r1, r2, #8
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6952      	ldr	r2, [r2, #20]
 8003996:	0852      	lsrs	r2, r2, #1
 8003998:	3a01      	subs	r2, #1
 800399a:	0652      	lsls	r2, r2, #25
 800399c:	430a      	orrs	r2, r1
 800399e:	4916      	ldr	r1, [pc, #88]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039a4:	4b14      	ldr	r3, [pc, #80]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a13      	ldr	r2, [pc, #76]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b0:	f7fd fe2c 	bl	800160c <HAL_GetTick>
 80039b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039b6:	e009      	b.n	80039cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039b8:	f7fd fe28 	bl	800160c <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d902      	bls.n	80039cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	73fb      	strb	r3, [r7, #15]
          break;
 80039ca:	e005      	b.n	80039d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039cc:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0ef      	beq.n	80039b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039de:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e0:	691a      	ldr	r2, [r3, #16]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	4904      	ldr	r1, [pc, #16]	; (80039f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000

080039fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a0a:	4b6a      	ldr	r3, [pc, #424]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d018      	beq.n	8003a48 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a16:	4b67      	ldr	r3, [pc, #412]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f003 0203 	and.w	r2, r3, #3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d10d      	bne.n	8003a42 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
       ||
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a2e:	4b61      	ldr	r3, [pc, #388]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	091b      	lsrs	r3, r3, #4
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
       ||
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d047      	beq.n	8003ad2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
 8003a46:	e044      	b.n	8003ad2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d018      	beq.n	8003a82 <RCCEx_PLLSAI2_Config+0x86>
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d825      	bhi.n	8003aa0 <RCCEx_PLLSAI2_Config+0xa4>
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d002      	beq.n	8003a5e <RCCEx_PLLSAI2_Config+0x62>
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d009      	beq.n	8003a70 <RCCEx_PLLSAI2_Config+0x74>
 8003a5c:	e020      	b.n	8003aa0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a5e:	4b55      	ldr	r3, [pc, #340]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d11d      	bne.n	8003aa6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a6e:	e01a      	b.n	8003aa6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a70:	4b50      	ldr	r3, [pc, #320]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d116      	bne.n	8003aaa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a80:	e013      	b.n	8003aaa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a82:	4b4c      	ldr	r3, [pc, #304]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10f      	bne.n	8003aae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a8e:	4b49      	ldr	r3, [pc, #292]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d109      	bne.n	8003aae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a9e:	e006      	b.n	8003aae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa4:	e004      	b.n	8003ab0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003aa6:	bf00      	nop
 8003aa8:	e002      	b.n	8003ab0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003aaa:	bf00      	nop
 8003aac:	e000      	b.n	8003ab0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003aae:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10d      	bne.n	8003ad2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ab6:	4b3f      	ldr	r3, [pc, #252]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6819      	ldr	r1, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	430b      	orrs	r3, r1
 8003acc:	4939      	ldr	r1, [pc, #228]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d167      	bne.n	8003ba8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ad8:	4b36      	ldr	r3, [pc, #216]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a35      	ldr	r2, [pc, #212]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ade:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ae2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ae4:	f7fd fd92 	bl	800160c <HAL_GetTick>
 8003ae8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003aea:	e009      	b.n	8003b00 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003aec:	f7fd fd8e 	bl	800160c <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d902      	bls.n	8003b00 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	73fb      	strb	r3, [r7, #15]
        break;
 8003afe:	e005      	b.n	8003b0c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b00:	4b2c      	ldr	r3, [pc, #176]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1ef      	bne.n	8003aec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d14a      	bne.n	8003ba8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d111      	bne.n	8003b3c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b18:	4b26      	ldr	r3, [pc, #152]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6892      	ldr	r2, [r2, #8]
 8003b28:	0211      	lsls	r1, r2, #8
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68d2      	ldr	r2, [r2, #12]
 8003b2e:	0912      	lsrs	r2, r2, #4
 8003b30:	0452      	lsls	r2, r2, #17
 8003b32:	430a      	orrs	r2, r1
 8003b34:	491f      	ldr	r1, [pc, #124]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	614b      	str	r3, [r1, #20]
 8003b3a:	e011      	b.n	8003b60 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b3c:	4b1d      	ldr	r3, [pc, #116]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6892      	ldr	r2, [r2, #8]
 8003b4c:	0211      	lsls	r1, r2, #8
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6912      	ldr	r2, [r2, #16]
 8003b52:	0852      	lsrs	r2, r2, #1
 8003b54:	3a01      	subs	r2, #1
 8003b56:	0652      	lsls	r2, r2, #25
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	4916      	ldr	r1, [pc, #88]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b60:	4b14      	ldr	r3, [pc, #80]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a13      	ldr	r2, [pc, #76]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6c:	f7fd fd4e 	bl	800160c <HAL_GetTick>
 8003b70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b72:	e009      	b.n	8003b88 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b74:	f7fd fd4a 	bl	800160c <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d902      	bls.n	8003b88 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	73fb      	strb	r3, [r7, #15]
          break;
 8003b86:	e005      	b.n	8003b94 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b88:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0ef      	beq.n	8003b74 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d106      	bne.n	8003ba8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b9a:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b9c:	695a      	ldr	r2, [r3, #20]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	4904      	ldr	r1, [pc, #16]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40021000 	.word	0x40021000

08003bb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e095      	b.n	8003cf6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d108      	bne.n	8003be4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bda:	d009      	beq.n	8003bf0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	61da      	str	r2, [r3, #28]
 8003be2:	e005      	b.n	8003bf0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fd fa86 	bl	800111c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c30:	d902      	bls.n	8003c38 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c32:	2300      	movs	r3, #0
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	e002      	b.n	8003c3e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c3c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c46:	d007      	beq.n	8003c58 <HAL_SPI_Init+0xa0>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c50:	d002      	beq.n	8003c58 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c90:	431a      	orrs	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9a:	ea42 0103 	orr.w	r1, r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	0c1b      	lsrs	r3, r3, #16
 8003cb4:	f003 0204 	and.w	r2, r3, #4
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	f003 0310 	and.w	r3, r3, #16
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003cd4:	ea42 0103 	orr.w	r1, r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b082      	sub	sp, #8
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e040      	b.n	8003d92 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d106      	bne.n	8003d26 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7fd fa3f 	bl	80011a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2224      	movs	r2, #36	; 0x24
 8003d2a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0201 	bic.w	r2, r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 fae1 	bl	800430c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f826 	bl	8003d9c <UART_SetConfig>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e01b      	b.n	8003d92 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f042 0201 	orr.w	r2, r2, #1
 8003d88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fb60 	bl	8004450 <UART_CheckIdleState>
 8003d90:	4603      	mov	r3, r0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003da0:	b08a      	sub	sp, #40	; 0x28
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	431a      	orrs	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	4ba4      	ldr	r3, [pc, #656]	; (800405c <UART_SetConfig+0x2c0>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	6812      	ldr	r2, [r2, #0]
 8003dd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dd4:	430b      	orrs	r3, r1
 8003dd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a99      	ldr	r2, [pc, #612]	; (8004060 <UART_SetConfig+0x2c4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d004      	beq.n	8003e08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e04:	4313      	orrs	r3, r2
 8003e06:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a90      	ldr	r2, [pc, #576]	; (8004064 <UART_SetConfig+0x2c8>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d126      	bne.n	8003e74 <UART_SetConfig+0xd8>
 8003e26:	4b90      	ldr	r3, [pc, #576]	; (8004068 <UART_SetConfig+0x2cc>)
 8003e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2c:	f003 0303 	and.w	r3, r3, #3
 8003e30:	2b03      	cmp	r3, #3
 8003e32:	d81b      	bhi.n	8003e6c <UART_SetConfig+0xd0>
 8003e34:	a201      	add	r2, pc, #4	; (adr r2, 8003e3c <UART_SetConfig+0xa0>)
 8003e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3a:	bf00      	nop
 8003e3c:	08003e4d 	.word	0x08003e4d
 8003e40:	08003e5d 	.word	0x08003e5d
 8003e44:	08003e55 	.word	0x08003e55
 8003e48:	08003e65 	.word	0x08003e65
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e52:	e116      	b.n	8004082 <UART_SetConfig+0x2e6>
 8003e54:	2302      	movs	r3, #2
 8003e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e5a:	e112      	b.n	8004082 <UART_SetConfig+0x2e6>
 8003e5c:	2304      	movs	r3, #4
 8003e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e62:	e10e      	b.n	8004082 <UART_SetConfig+0x2e6>
 8003e64:	2308      	movs	r3, #8
 8003e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e6a:	e10a      	b.n	8004082 <UART_SetConfig+0x2e6>
 8003e6c:	2310      	movs	r3, #16
 8003e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e72:	e106      	b.n	8004082 <UART_SetConfig+0x2e6>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a7c      	ldr	r2, [pc, #496]	; (800406c <UART_SetConfig+0x2d0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d138      	bne.n	8003ef0 <UART_SetConfig+0x154>
 8003e7e:	4b7a      	ldr	r3, [pc, #488]	; (8004068 <UART_SetConfig+0x2cc>)
 8003e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e84:	f003 030c 	and.w	r3, r3, #12
 8003e88:	2b0c      	cmp	r3, #12
 8003e8a:	d82d      	bhi.n	8003ee8 <UART_SetConfig+0x14c>
 8003e8c:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <UART_SetConfig+0xf8>)
 8003e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e92:	bf00      	nop
 8003e94:	08003ec9 	.word	0x08003ec9
 8003e98:	08003ee9 	.word	0x08003ee9
 8003e9c:	08003ee9 	.word	0x08003ee9
 8003ea0:	08003ee9 	.word	0x08003ee9
 8003ea4:	08003ed9 	.word	0x08003ed9
 8003ea8:	08003ee9 	.word	0x08003ee9
 8003eac:	08003ee9 	.word	0x08003ee9
 8003eb0:	08003ee9 	.word	0x08003ee9
 8003eb4:	08003ed1 	.word	0x08003ed1
 8003eb8:	08003ee9 	.word	0x08003ee9
 8003ebc:	08003ee9 	.word	0x08003ee9
 8003ec0:	08003ee9 	.word	0x08003ee9
 8003ec4:	08003ee1 	.word	0x08003ee1
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ece:	e0d8      	b.n	8004082 <UART_SetConfig+0x2e6>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ed6:	e0d4      	b.n	8004082 <UART_SetConfig+0x2e6>
 8003ed8:	2304      	movs	r3, #4
 8003eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ede:	e0d0      	b.n	8004082 <UART_SetConfig+0x2e6>
 8003ee0:	2308      	movs	r3, #8
 8003ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ee6:	e0cc      	b.n	8004082 <UART_SetConfig+0x2e6>
 8003ee8:	2310      	movs	r3, #16
 8003eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eee:	e0c8      	b.n	8004082 <UART_SetConfig+0x2e6>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a5e      	ldr	r2, [pc, #376]	; (8004070 <UART_SetConfig+0x2d4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d125      	bne.n	8003f46 <UART_SetConfig+0x1aa>
 8003efa:	4b5b      	ldr	r3, [pc, #364]	; (8004068 <UART_SetConfig+0x2cc>)
 8003efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f04:	2b30      	cmp	r3, #48	; 0x30
 8003f06:	d016      	beq.n	8003f36 <UART_SetConfig+0x19a>
 8003f08:	2b30      	cmp	r3, #48	; 0x30
 8003f0a:	d818      	bhi.n	8003f3e <UART_SetConfig+0x1a2>
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	d00a      	beq.n	8003f26 <UART_SetConfig+0x18a>
 8003f10:	2b20      	cmp	r3, #32
 8003f12:	d814      	bhi.n	8003f3e <UART_SetConfig+0x1a2>
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <UART_SetConfig+0x182>
 8003f18:	2b10      	cmp	r3, #16
 8003f1a:	d008      	beq.n	8003f2e <UART_SetConfig+0x192>
 8003f1c:	e00f      	b.n	8003f3e <UART_SetConfig+0x1a2>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f24:	e0ad      	b.n	8004082 <UART_SetConfig+0x2e6>
 8003f26:	2302      	movs	r3, #2
 8003f28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f2c:	e0a9      	b.n	8004082 <UART_SetConfig+0x2e6>
 8003f2e:	2304      	movs	r3, #4
 8003f30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f34:	e0a5      	b.n	8004082 <UART_SetConfig+0x2e6>
 8003f36:	2308      	movs	r3, #8
 8003f38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f3c:	e0a1      	b.n	8004082 <UART_SetConfig+0x2e6>
 8003f3e:	2310      	movs	r3, #16
 8003f40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f44:	e09d      	b.n	8004082 <UART_SetConfig+0x2e6>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a4a      	ldr	r2, [pc, #296]	; (8004074 <UART_SetConfig+0x2d8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d125      	bne.n	8003f9c <UART_SetConfig+0x200>
 8003f50:	4b45      	ldr	r3, [pc, #276]	; (8004068 <UART_SetConfig+0x2cc>)
 8003f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f5a:	2bc0      	cmp	r3, #192	; 0xc0
 8003f5c:	d016      	beq.n	8003f8c <UART_SetConfig+0x1f0>
 8003f5e:	2bc0      	cmp	r3, #192	; 0xc0
 8003f60:	d818      	bhi.n	8003f94 <UART_SetConfig+0x1f8>
 8003f62:	2b80      	cmp	r3, #128	; 0x80
 8003f64:	d00a      	beq.n	8003f7c <UART_SetConfig+0x1e0>
 8003f66:	2b80      	cmp	r3, #128	; 0x80
 8003f68:	d814      	bhi.n	8003f94 <UART_SetConfig+0x1f8>
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <UART_SetConfig+0x1d8>
 8003f6e:	2b40      	cmp	r3, #64	; 0x40
 8003f70:	d008      	beq.n	8003f84 <UART_SetConfig+0x1e8>
 8003f72:	e00f      	b.n	8003f94 <UART_SetConfig+0x1f8>
 8003f74:	2300      	movs	r3, #0
 8003f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f7a:	e082      	b.n	8004082 <UART_SetConfig+0x2e6>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f82:	e07e      	b.n	8004082 <UART_SetConfig+0x2e6>
 8003f84:	2304      	movs	r3, #4
 8003f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f8a:	e07a      	b.n	8004082 <UART_SetConfig+0x2e6>
 8003f8c:	2308      	movs	r3, #8
 8003f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f92:	e076      	b.n	8004082 <UART_SetConfig+0x2e6>
 8003f94:	2310      	movs	r3, #16
 8003f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f9a:	e072      	b.n	8004082 <UART_SetConfig+0x2e6>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a35      	ldr	r2, [pc, #212]	; (8004078 <UART_SetConfig+0x2dc>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d12a      	bne.n	8003ffc <UART_SetConfig+0x260>
 8003fa6:	4b30      	ldr	r3, [pc, #192]	; (8004068 <UART_SetConfig+0x2cc>)
 8003fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fb4:	d01a      	beq.n	8003fec <UART_SetConfig+0x250>
 8003fb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fba:	d81b      	bhi.n	8003ff4 <UART_SetConfig+0x258>
 8003fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fc0:	d00c      	beq.n	8003fdc <UART_SetConfig+0x240>
 8003fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fc6:	d815      	bhi.n	8003ff4 <UART_SetConfig+0x258>
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <UART_SetConfig+0x238>
 8003fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fd0:	d008      	beq.n	8003fe4 <UART_SetConfig+0x248>
 8003fd2:	e00f      	b.n	8003ff4 <UART_SetConfig+0x258>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fda:	e052      	b.n	8004082 <UART_SetConfig+0x2e6>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fe2:	e04e      	b.n	8004082 <UART_SetConfig+0x2e6>
 8003fe4:	2304      	movs	r3, #4
 8003fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fea:	e04a      	b.n	8004082 <UART_SetConfig+0x2e6>
 8003fec:	2308      	movs	r3, #8
 8003fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ff2:	e046      	b.n	8004082 <UART_SetConfig+0x2e6>
 8003ff4:	2310      	movs	r3, #16
 8003ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ffa:	e042      	b.n	8004082 <UART_SetConfig+0x2e6>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a17      	ldr	r2, [pc, #92]	; (8004060 <UART_SetConfig+0x2c4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d13a      	bne.n	800407c <UART_SetConfig+0x2e0>
 8004006:	4b18      	ldr	r3, [pc, #96]	; (8004068 <UART_SetConfig+0x2cc>)
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004010:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004014:	d01a      	beq.n	800404c <UART_SetConfig+0x2b0>
 8004016:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800401a:	d81b      	bhi.n	8004054 <UART_SetConfig+0x2b8>
 800401c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004020:	d00c      	beq.n	800403c <UART_SetConfig+0x2a0>
 8004022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004026:	d815      	bhi.n	8004054 <UART_SetConfig+0x2b8>
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <UART_SetConfig+0x298>
 800402c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004030:	d008      	beq.n	8004044 <UART_SetConfig+0x2a8>
 8004032:	e00f      	b.n	8004054 <UART_SetConfig+0x2b8>
 8004034:	2300      	movs	r3, #0
 8004036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800403a:	e022      	b.n	8004082 <UART_SetConfig+0x2e6>
 800403c:	2302      	movs	r3, #2
 800403e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004042:	e01e      	b.n	8004082 <UART_SetConfig+0x2e6>
 8004044:	2304      	movs	r3, #4
 8004046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800404a:	e01a      	b.n	8004082 <UART_SetConfig+0x2e6>
 800404c:	2308      	movs	r3, #8
 800404e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004052:	e016      	b.n	8004082 <UART_SetConfig+0x2e6>
 8004054:	2310      	movs	r3, #16
 8004056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800405a:	e012      	b.n	8004082 <UART_SetConfig+0x2e6>
 800405c:	efff69f3 	.word	0xefff69f3
 8004060:	40008000 	.word	0x40008000
 8004064:	40013800 	.word	0x40013800
 8004068:	40021000 	.word	0x40021000
 800406c:	40004400 	.word	0x40004400
 8004070:	40004800 	.word	0x40004800
 8004074:	40004c00 	.word	0x40004c00
 8004078:	40005000 	.word	0x40005000
 800407c:	2310      	movs	r3, #16
 800407e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a9f      	ldr	r2, [pc, #636]	; (8004304 <UART_SetConfig+0x568>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d17a      	bne.n	8004182 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800408c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004090:	2b08      	cmp	r3, #8
 8004092:	d824      	bhi.n	80040de <UART_SetConfig+0x342>
 8004094:	a201      	add	r2, pc, #4	; (adr r2, 800409c <UART_SetConfig+0x300>)
 8004096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409a:	bf00      	nop
 800409c:	080040c1 	.word	0x080040c1
 80040a0:	080040df 	.word	0x080040df
 80040a4:	080040c9 	.word	0x080040c9
 80040a8:	080040df 	.word	0x080040df
 80040ac:	080040cf 	.word	0x080040cf
 80040b0:	080040df 	.word	0x080040df
 80040b4:	080040df 	.word	0x080040df
 80040b8:	080040df 	.word	0x080040df
 80040bc:	080040d7 	.word	0x080040d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040c0:	f7ff f822 	bl	8003108 <HAL_RCC_GetPCLK1Freq>
 80040c4:	61f8      	str	r0, [r7, #28]
        break;
 80040c6:	e010      	b.n	80040ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040c8:	4b8f      	ldr	r3, [pc, #572]	; (8004308 <UART_SetConfig+0x56c>)
 80040ca:	61fb      	str	r3, [r7, #28]
        break;
 80040cc:	e00d      	b.n	80040ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ce:	f7fe ff83 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 80040d2:	61f8      	str	r0, [r7, #28]
        break;
 80040d4:	e009      	b.n	80040ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040da:	61fb      	str	r3, [r7, #28]
        break;
 80040dc:	e005      	b.n	80040ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80040e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 80fb 	beq.w	80042e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	4413      	add	r3, r2
 80040fc:	69fa      	ldr	r2, [r7, #28]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d305      	bcc.n	800410e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004108:	69fa      	ldr	r2, [r7, #28]
 800410a:	429a      	cmp	r2, r3
 800410c:	d903      	bls.n	8004116 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004114:	e0e8      	b.n	80042e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	2200      	movs	r2, #0
 800411a:	461c      	mov	r4, r3
 800411c:	4615      	mov	r5, r2
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	022b      	lsls	r3, r5, #8
 8004128:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800412c:	0222      	lsls	r2, r4, #8
 800412e:	68f9      	ldr	r1, [r7, #12]
 8004130:	6849      	ldr	r1, [r1, #4]
 8004132:	0849      	lsrs	r1, r1, #1
 8004134:	2000      	movs	r0, #0
 8004136:	4688      	mov	r8, r1
 8004138:	4681      	mov	r9, r0
 800413a:	eb12 0a08 	adds.w	sl, r2, r8
 800413e:	eb43 0b09 	adc.w	fp, r3, r9
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	603b      	str	r3, [r7, #0]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004150:	4650      	mov	r0, sl
 8004152:	4659      	mov	r1, fp
 8004154:	f7fc f838 	bl	80001c8 <__aeabi_uldivmod>
 8004158:	4602      	mov	r2, r0
 800415a:	460b      	mov	r3, r1
 800415c:	4613      	mov	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004166:	d308      	bcc.n	800417a <UART_SetConfig+0x3de>
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800416e:	d204      	bcs.n	800417a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	60da      	str	r2, [r3, #12]
 8004178:	e0b6      	b.n	80042e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004180:	e0b2      	b.n	80042e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800418a:	d15e      	bne.n	800424a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800418c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004190:	2b08      	cmp	r3, #8
 8004192:	d828      	bhi.n	80041e6 <UART_SetConfig+0x44a>
 8004194:	a201      	add	r2, pc, #4	; (adr r2, 800419c <UART_SetConfig+0x400>)
 8004196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419a:	bf00      	nop
 800419c:	080041c1 	.word	0x080041c1
 80041a0:	080041c9 	.word	0x080041c9
 80041a4:	080041d1 	.word	0x080041d1
 80041a8:	080041e7 	.word	0x080041e7
 80041ac:	080041d7 	.word	0x080041d7
 80041b0:	080041e7 	.word	0x080041e7
 80041b4:	080041e7 	.word	0x080041e7
 80041b8:	080041e7 	.word	0x080041e7
 80041bc:	080041df 	.word	0x080041df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041c0:	f7fe ffa2 	bl	8003108 <HAL_RCC_GetPCLK1Freq>
 80041c4:	61f8      	str	r0, [r7, #28]
        break;
 80041c6:	e014      	b.n	80041f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041c8:	f7fe ffb4 	bl	8003134 <HAL_RCC_GetPCLK2Freq>
 80041cc:	61f8      	str	r0, [r7, #28]
        break;
 80041ce:	e010      	b.n	80041f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041d0:	4b4d      	ldr	r3, [pc, #308]	; (8004308 <UART_SetConfig+0x56c>)
 80041d2:	61fb      	str	r3, [r7, #28]
        break;
 80041d4:	e00d      	b.n	80041f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041d6:	f7fe feff 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 80041da:	61f8      	str	r0, [r7, #28]
        break;
 80041dc:	e009      	b.n	80041f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041e2:	61fb      	str	r3, [r7, #28]
        break;
 80041e4:	e005      	b.n	80041f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80041f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d077      	beq.n	80042e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	005a      	lsls	r2, r3, #1
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	085b      	lsrs	r3, r3, #1
 8004202:	441a      	add	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	fbb2 f3f3 	udiv	r3, r2, r3
 800420c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	2b0f      	cmp	r3, #15
 8004212:	d916      	bls.n	8004242 <UART_SetConfig+0x4a6>
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800421a:	d212      	bcs.n	8004242 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	b29b      	uxth	r3, r3
 8004220:	f023 030f 	bic.w	r3, r3, #15
 8004224:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	085b      	lsrs	r3, r3, #1
 800422a:	b29b      	uxth	r3, r3
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	b29a      	uxth	r2, r3
 8004232:	8afb      	ldrh	r3, [r7, #22]
 8004234:	4313      	orrs	r3, r2
 8004236:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	8afa      	ldrh	r2, [r7, #22]
 800423e:	60da      	str	r2, [r3, #12]
 8004240:	e052      	b.n	80042e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004248:	e04e      	b.n	80042e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800424a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800424e:	2b08      	cmp	r3, #8
 8004250:	d827      	bhi.n	80042a2 <UART_SetConfig+0x506>
 8004252:	a201      	add	r2, pc, #4	; (adr r2, 8004258 <UART_SetConfig+0x4bc>)
 8004254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004258:	0800427d 	.word	0x0800427d
 800425c:	08004285 	.word	0x08004285
 8004260:	0800428d 	.word	0x0800428d
 8004264:	080042a3 	.word	0x080042a3
 8004268:	08004293 	.word	0x08004293
 800426c:	080042a3 	.word	0x080042a3
 8004270:	080042a3 	.word	0x080042a3
 8004274:	080042a3 	.word	0x080042a3
 8004278:	0800429b 	.word	0x0800429b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800427c:	f7fe ff44 	bl	8003108 <HAL_RCC_GetPCLK1Freq>
 8004280:	61f8      	str	r0, [r7, #28]
        break;
 8004282:	e014      	b.n	80042ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004284:	f7fe ff56 	bl	8003134 <HAL_RCC_GetPCLK2Freq>
 8004288:	61f8      	str	r0, [r7, #28]
        break;
 800428a:	e010      	b.n	80042ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800428c:	4b1e      	ldr	r3, [pc, #120]	; (8004308 <UART_SetConfig+0x56c>)
 800428e:	61fb      	str	r3, [r7, #28]
        break;
 8004290:	e00d      	b.n	80042ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004292:	f7fe fea1 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8004296:	61f8      	str	r0, [r7, #28]
        break;
 8004298:	e009      	b.n	80042ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800429a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800429e:	61fb      	str	r3, [r7, #28]
        break;
 80042a0:	e005      	b.n	80042ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80042ac:	bf00      	nop
    }

    if (pclk != 0U)
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d019      	beq.n	80042e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	085a      	lsrs	r2, r3, #1
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	441a      	add	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	2b0f      	cmp	r3, #15
 80042cc:	d909      	bls.n	80042e2 <UART_SetConfig+0x546>
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d4:	d205      	bcs.n	80042e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	b29a      	uxth	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	60da      	str	r2, [r3, #12]
 80042e0:	e002      	b.n	80042e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80042f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3728      	adds	r7, #40	; 0x28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004302:	bf00      	nop
 8004304:	40008000 	.word	0x40008000
 8004308:	00f42400 	.word	0x00f42400

0800430c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00a      	beq.n	800437a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00a      	beq.n	800439c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00a      	beq.n	80043be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d01a      	beq.n	8004422 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800440a:	d10a      	bne.n	8004422 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	605a      	str	r2, [r3, #4]
  }
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b098      	sub	sp, #96	; 0x60
 8004454:	af02      	add	r7, sp, #8
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004460:	f7fd f8d4 	bl	800160c <HAL_GetTick>
 8004464:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b08      	cmp	r3, #8
 8004472:	d12e      	bne.n	80044d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004474:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800447c:	2200      	movs	r2, #0
 800447e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f88c 	bl	80045a0 <UART_WaitOnFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d021      	beq.n	80044d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004496:	e853 3f00 	ldrex	r3, [r3]
 800449a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800449c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800449e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044a2:	653b      	str	r3, [r7, #80]	; 0x50
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ac:	647b      	str	r3, [r7, #68]	; 0x44
 80044ae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044b4:	e841 2300 	strex	r3, r2, [r1]
 80044b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e6      	bne.n	800448e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e062      	b.n	8004598 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b04      	cmp	r3, #4
 80044de:	d149      	bne.n	8004574 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044e8:	2200      	movs	r2, #0
 80044ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f856 	bl	80045a0 <UART_WaitOnFlagUntilTimeout>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d03c      	beq.n	8004574 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	e853 3f00 	ldrex	r3, [r3]
 8004506:	623b      	str	r3, [r7, #32]
   return(result);
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800450e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004518:	633b      	str	r3, [r7, #48]	; 0x30
 800451a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800451e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004520:	e841 2300 	strex	r3, r2, [r1]
 8004524:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1e6      	bne.n	80044fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3308      	adds	r3, #8
 8004532:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	e853 3f00 	ldrex	r3, [r3]
 800453a:	60fb      	str	r3, [r7, #12]
   return(result);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0301 	bic.w	r3, r3, #1
 8004542:	64bb      	str	r3, [r7, #72]	; 0x48
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3308      	adds	r3, #8
 800454a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800454c:	61fa      	str	r2, [r7, #28]
 800454e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004550:	69b9      	ldr	r1, [r7, #24]
 8004552:	69fa      	ldr	r2, [r7, #28]
 8004554:	e841 2300 	strex	r3, r2, [r1]
 8004558:	617b      	str	r3, [r7, #20]
   return(result);
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1e5      	bne.n	800452c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2220      	movs	r2, #32
 8004564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e011      	b.n	8004598 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2220      	movs	r2, #32
 8004578:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2220      	movs	r2, #32
 800457e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3758      	adds	r7, #88	; 0x58
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	603b      	str	r3, [r7, #0]
 80045ac:	4613      	mov	r3, r2
 80045ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045b0:	e04f      	b.n	8004652 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b8:	d04b      	beq.n	8004652 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ba:	f7fd f827 	bl	800160c <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d302      	bcc.n	80045d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e04e      	b.n	8004672 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d037      	beq.n	8004652 <UART_WaitOnFlagUntilTimeout+0xb2>
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b80      	cmp	r3, #128	; 0x80
 80045e6:	d034      	beq.n	8004652 <UART_WaitOnFlagUntilTimeout+0xb2>
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2b40      	cmp	r3, #64	; 0x40
 80045ec:	d031      	beq.n	8004652 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d110      	bne.n	800461e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2208      	movs	r2, #8
 8004602:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 f838 	bl	800467a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2208      	movs	r2, #8
 800460e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e029      	b.n	8004672 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004628:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800462c:	d111      	bne.n	8004652 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004636:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 f81e 	bl	800467a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2220      	movs	r2, #32
 8004642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e00f      	b.n	8004672 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69da      	ldr	r2, [r3, #28]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	4013      	ands	r3, r2
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	429a      	cmp	r2, r3
 8004660:	bf0c      	ite	eq
 8004662:	2301      	moveq	r3, #1
 8004664:	2300      	movne	r3, #0
 8004666:	b2db      	uxtb	r3, r3
 8004668:	461a      	mov	r2, r3
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	429a      	cmp	r2, r3
 800466e:	d0a0      	beq.n	80045b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800467a:	b480      	push	{r7}
 800467c:	b095      	sub	sp, #84	; 0x54
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468a:	e853 3f00 	ldrex	r3, [r3]
 800468e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004692:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	461a      	mov	r2, r3
 800469e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a0:	643b      	str	r3, [r7, #64]	; 0x40
 80046a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046a8:	e841 2300 	strex	r3, r2, [r1]
 80046ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1e6      	bne.n	8004682 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3308      	adds	r3, #8
 80046ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	e853 3f00 	ldrex	r3, [r3]
 80046c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	f023 0301 	bic.w	r3, r3, #1
 80046ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3308      	adds	r3, #8
 80046d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046dc:	e841 2300 	strex	r3, r2, [r1]
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1e5      	bne.n	80046b4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d118      	bne.n	8004722 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	e853 3f00 	ldrex	r3, [r3]
 80046fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f023 0310 	bic.w	r3, r3, #16
 8004704:	647b      	str	r3, [r7, #68]	; 0x44
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	461a      	mov	r2, r3
 800470c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800470e:	61bb      	str	r3, [r7, #24]
 8004710:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004712:	6979      	ldr	r1, [r7, #20]
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	e841 2300 	strex	r3, r2, [r1]
 800471a:	613b      	str	r3, [r7, #16]
   return(result);
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1e6      	bne.n	80046f0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2220      	movs	r2, #32
 8004726:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004736:	bf00      	nop
 8004738:	3754      	adds	r7, #84	; 0x54
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004742:	b084      	sub	sp, #16
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	f107 001c 	add.w	r0, r7, #28
 8004750:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 fa69 	bl	8004c38 <USB_CoreReset>
 8004766:	4603      	mov	r3, r0
 8004768:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800476a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800476e:	2b00      	cmp	r3, #0
 8004770:	d106      	bne.n	8004780 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004776:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	639a      	str	r2, [r3, #56]	; 0x38
 800477e:	e005      	b.n	800478c <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004784:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800478c:	7bfb      	ldrb	r3, [r7, #15]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004798:	b004      	add	sp, #16
 800479a:	4770      	bx	lr

0800479c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f023 0201 	bic.w	r2, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b084      	sub	sp, #16
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
 80047c6:	460b      	mov	r3, r1
 80047c8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047da:	78fb      	ldrb	r3, [r7, #3]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d115      	bne.n	800480c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80047ec:	200a      	movs	r0, #10
 80047ee:	f7fc ff19 	bl	8001624 <HAL_Delay>
      ms += 10U;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	330a      	adds	r3, #10
 80047f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fa0f 	bl	8004c1c <USB_GetMode>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b01      	cmp	r3, #1
 8004802:	d01e      	beq.n	8004842 <USB_SetCurrentMode+0x84>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2bc7      	cmp	r3, #199	; 0xc7
 8004808:	d9f0      	bls.n	80047ec <USB_SetCurrentMode+0x2e>
 800480a:	e01a      	b.n	8004842 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800480c:	78fb      	ldrb	r3, [r7, #3]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d115      	bne.n	800483e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800481e:	200a      	movs	r0, #10
 8004820:	f7fc ff00 	bl	8001624 <HAL_Delay>
      ms += 10U;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	330a      	adds	r3, #10
 8004828:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f9f6 	bl	8004c1c <USB_GetMode>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d005      	beq.n	8004842 <USB_SetCurrentMode+0x84>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2bc7      	cmp	r3, #199	; 0xc7
 800483a:	d9f0      	bls.n	800481e <USB_SetCurrentMode+0x60>
 800483c:	e001      	b.n	8004842 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e005      	b.n	800484e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2bc8      	cmp	r3, #200	; 0xc8
 8004846:	d101      	bne.n	800484c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e000      	b.n	800484e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004858:	b084      	sub	sp, #16
 800485a:	b580      	push	{r7, lr}
 800485c:	b086      	sub	sp, #24
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
 8004862:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004866:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004872:	2300      	movs	r3, #0
 8004874:	613b      	str	r3, [r7, #16]
 8004876:	e009      	b.n	800488c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	3340      	adds	r3, #64	; 0x40
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	2200      	movs	r2, #0
 8004884:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	3301      	adds	r3, #1
 800488a:	613b      	str	r3, [r7, #16]
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	2b0e      	cmp	r3, #14
 8004890:	d9f2      	bls.n	8004878 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004892:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004896:	2b00      	cmp	r3, #0
 8004898:	d11c      	bne.n	80048d4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048a8:	f043 0302 	orr.w	r3, r3, #2
 80048ac:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	e005      	b.n	80048e0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048e6:	461a      	mov	r2, r3
 80048e8:	2300      	movs	r3, #0
 80048ea:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048ec:	2103      	movs	r1, #3
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f95a 	bl	8004ba8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048f4:	2110      	movs	r1, #16
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f8f6 	bl	8004ae8 <USB_FlushTxFifo>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f920 	bl	8004b4c <USB_FlushRxFifo>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491c:	461a      	mov	r2, r3
 800491e:	2300      	movs	r3, #0
 8004920:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004928:	461a      	mov	r2, r3
 800492a:	2300      	movs	r3, #0
 800492c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004934:	461a      	mov	r2, r3
 8004936:	2300      	movs	r3, #0
 8004938:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800493a:	2300      	movs	r3, #0
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	e043      	b.n	80049c8 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004952:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004956:	d118      	bne.n	800498a <USB_DevInit+0x132>
    {
      if (i == 0U)
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10a      	bne.n	8004974 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496a:	461a      	mov	r2, r3
 800496c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	e013      	b.n	800499c <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004980:	461a      	mov	r2, r3
 8004982:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	e008      	b.n	800499c <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004996:	461a      	mov	r2, r3
 8004998:	2300      	movs	r3, #0
 800499a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a8:	461a      	mov	r2, r3
 80049aa:	2300      	movs	r3, #0
 80049ac:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ba:	461a      	mov	r2, r3
 80049bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	3301      	adds	r3, #1
 80049c6:	613b      	str	r3, [r7, #16]
 80049c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80049cc:	461a      	mov	r2, r3
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d3b5      	bcc.n	8004940 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049d4:	2300      	movs	r3, #0
 80049d6:	613b      	str	r3, [r7, #16]
 80049d8:	e043      	b.n	8004a62 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049f0:	d118      	bne.n	8004a24 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10a      	bne.n	8004a0e <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a04:	461a      	mov	r2, r3
 8004a06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a0a:	6013      	str	r3, [r2, #0]
 8004a0c:	e013      	b.n	8004a36 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a20:	6013      	str	r3, [r2, #0]
 8004a22:	e008      	b.n	8004a36 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a30:	461a      	mov	r2, r3
 8004a32:	2300      	movs	r3, #0
 8004a34:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a42:	461a      	mov	r2, r3
 8004a44:	2300      	movs	r3, #0
 8004a46:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a54:	461a      	mov	r2, r3
 8004a56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	613b      	str	r3, [r7, #16]
 8004a62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a66:	461a      	mov	r2, r3
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d3b5      	bcc.n	80049da <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a80:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a8e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	f043 0210 	orr.w	r2, r3, #16
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	699a      	ldr	r2, [r3, #24]
 8004aa0:	4b10      	ldr	r3, [pc, #64]	; (8004ae4 <USB_DevInit+0x28c>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004aa8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d005      	beq.n	8004abc <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	f043 0208 	orr.w	r2, r3, #8
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004abc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d107      	bne.n	8004ad4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004acc:	f043 0304 	orr.w	r3, r3, #4
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3718      	adds	r7, #24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ae0:	b004      	add	sp, #16
 8004ae2:	4770      	bx	lr
 8004ae4:	803c3800 	.word	0x803c3800

08004ae8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004af2:	2300      	movs	r3, #0
 8004af4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	3301      	adds	r3, #1
 8004afa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004b02:	d901      	bls.n	8004b08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e01b      	b.n	8004b40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	daf2      	bge.n	8004af6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	019b      	lsls	r3, r3, #6
 8004b18:	f043 0220 	orr.w	r2, r3, #32
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	3301      	adds	r3, #1
 8004b24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004b2c:	d901      	bls.n	8004b32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e006      	b.n	8004b40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	f003 0320 	and.w	r3, r3, #32
 8004b3a:	2b20      	cmp	r3, #32
 8004b3c:	d0f0      	beq.n	8004b20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004b64:	d901      	bls.n	8004b6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e018      	b.n	8004b9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	daf2      	bge.n	8004b58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2210      	movs	r2, #16
 8004b7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004b88:	d901      	bls.n	8004b8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e006      	b.n	8004b9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	f003 0310 	and.w	r3, r3, #16
 8004b96:	2b10      	cmp	r3, #16
 8004b98:	d0f0      	beq.n	8004b7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	78fb      	ldrb	r3, [r7, #3]
 8004bc2:	68f9      	ldr	r1, [r7, #12]
 8004bc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b085      	sub	sp, #20
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004bf4:	f023 0303 	bic.w	r3, r3, #3
 8004bf8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c08:	f043 0302 	orr.w	r3, r3, #2
 8004c0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	f003 0301 	and.w	r3, r3, #1
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	3301      	adds	r3, #1
 8004c48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004c50:	d901      	bls.n	8004c56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e01b      	b.n	8004c8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	daf2      	bge.n	8004c44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f043 0201 	orr.w	r2, r3, #1
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3301      	adds	r3, #1
 8004c72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004c7a:	d901      	bls.n	8004c80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e006      	b.n	8004c8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d0f0      	beq.n	8004c6e <USB_CoreReset+0x36>

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <memset>:
 8004c9a:	4402      	add	r2, r0
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d100      	bne.n	8004ca4 <memset+0xa>
 8004ca2:	4770      	bx	lr
 8004ca4:	f803 1b01 	strb.w	r1, [r3], #1
 8004ca8:	e7f9      	b.n	8004c9e <memset+0x4>
	...

08004cac <__libc_init_array>:
 8004cac:	b570      	push	{r4, r5, r6, lr}
 8004cae:	4d0d      	ldr	r5, [pc, #52]	; (8004ce4 <__libc_init_array+0x38>)
 8004cb0:	4c0d      	ldr	r4, [pc, #52]	; (8004ce8 <__libc_init_array+0x3c>)
 8004cb2:	1b64      	subs	r4, r4, r5
 8004cb4:	10a4      	asrs	r4, r4, #2
 8004cb6:	2600      	movs	r6, #0
 8004cb8:	42a6      	cmp	r6, r4
 8004cba:	d109      	bne.n	8004cd0 <__libc_init_array+0x24>
 8004cbc:	4d0b      	ldr	r5, [pc, #44]	; (8004cec <__libc_init_array+0x40>)
 8004cbe:	4c0c      	ldr	r4, [pc, #48]	; (8004cf0 <__libc_init_array+0x44>)
 8004cc0:	f000 f818 	bl	8004cf4 <_init>
 8004cc4:	1b64      	subs	r4, r4, r5
 8004cc6:	10a4      	asrs	r4, r4, #2
 8004cc8:	2600      	movs	r6, #0
 8004cca:	42a6      	cmp	r6, r4
 8004ccc:	d105      	bne.n	8004cda <__libc_init_array+0x2e>
 8004cce:	bd70      	pop	{r4, r5, r6, pc}
 8004cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cd4:	4798      	blx	r3
 8004cd6:	3601      	adds	r6, #1
 8004cd8:	e7ee      	b.n	8004cb8 <__libc_init_array+0xc>
 8004cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cde:	4798      	blx	r3
 8004ce0:	3601      	adds	r6, #1
 8004ce2:	e7f2      	b.n	8004cca <__libc_init_array+0x1e>
 8004ce4:	08004d5c 	.word	0x08004d5c
 8004ce8:	08004d5c 	.word	0x08004d5c
 8004cec:	08004d5c 	.word	0x08004d5c
 8004cf0:	08004d60 	.word	0x08004d60

08004cf4 <_init>:
 8004cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf6:	bf00      	nop
 8004cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cfa:	bc08      	pop	{r3}
 8004cfc:	469e      	mov	lr, r3
 8004cfe:	4770      	bx	lr

08004d00 <_fini>:
 8004d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d02:	bf00      	nop
 8004d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d06:	bc08      	pop	{r3}
 8004d08:	469e      	mov	lr, r3
 8004d0a:	4770      	bx	lr
