
Rafa_SETR2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000117e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd0  08011978  08011978  00021978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012748  08012748  0003029c  2**0
                  CONTENTS
  4 .ARM          00000008  08012748  08012748  00022748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012750  08012750  0003029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012750  08012750  00022750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012754  08012754  00022754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000029c  20000000  08012758  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003338  2000029c  080129f4  0003029c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200035d4  080129f4  000335d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003029c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000302cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ee1a  00000000  00000000  0003030f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000071f8  00000000  00000000  0005f129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002bd8  00000000  00000000  00066328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000021a8  00000000  00000000  00068f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f732  00000000  00000000  0006b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003454c  00000000  00000000  0009a7da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001118e5  00000000  00000000  000ced26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000cac4  00000000  00000000  001e060c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001ed0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000029c 	.word	0x2000029c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011960 	.word	0x08011960

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002a0 	.word	0x200002a0
 80001cc:	08011960 	.word	0x08011960

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000eac:	4b27      	ldr	r3, [pc, #156]	; (8000f4c <I2Cx_MspInit+0xa8>)
 8000eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb0:	4a26      	ldr	r2, [pc, #152]	; (8000f4c <I2Cx_MspInit+0xa8>)
 8000eb2:	f043 0302 	orr.w	r3, r3, #2
 8000eb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb8:	4b24      	ldr	r3, [pc, #144]	; (8000f4c <I2Cx_MspInit+0xa8>)
 8000eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebc:	f003 0302 	and.w	r3, r3, #2
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8000ec4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ec8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000eca:	2312      	movs	r3, #18
 8000ecc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	481b      	ldr	r0, [pc, #108]	; (8000f50 <I2Cx_MspInit+0xac>)
 8000ee2:	f003 f8dd 	bl	80040a0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	4818      	ldr	r0, [pc, #96]	; (8000f50 <I2Cx_MspInit+0xac>)
 8000eee:	f003 f8d7 	bl	80040a0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <I2Cx_MspInit+0xa8>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef6:	4a15      	ldr	r2, [pc, #84]	; (8000f4c <I2Cx_MspInit+0xa8>)
 8000ef8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000efc:	6593      	str	r3, [r2, #88]	; 0x58
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <I2Cx_MspInit+0xa8>)
 8000f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <I2Cx_MspInit+0xa8>)
 8000f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f0e:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <I2Cx_MspInit+0xa8>)
 8000f10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f14:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8000f16:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <I2Cx_MspInit+0xa8>)
 8000f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f1a:	4a0c      	ldr	r2, [pc, #48]	; (8000f4c <I2Cx_MspInit+0xa8>)
 8000f1c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000f20:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	210f      	movs	r1, #15
 8000f26:	2021      	movs	r0, #33	; 0x21
 8000f28:	f002 ff42 	bl	8003db0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000f2c:	2021      	movs	r0, #33	; 0x21
 8000f2e:	f002 ff5b 	bl	8003de8 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	210f      	movs	r1, #15
 8000f36:	2022      	movs	r0, #34	; 0x22
 8000f38:	f002 ff3a 	bl	8003db0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000f3c:	2022      	movs	r0, #34	; 0x22
 8000f3e:	f002 ff53 	bl	8003de8 <HAL_NVIC_EnableIRQ>
}
 8000f42:	bf00      	nop
 8000f44:	3728      	adds	r7, #40	; 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	48000400 	.word	0x48000400

08000f54 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <I2Cx_Init+0x54>)
 8000f60:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a11      	ldr	r2, [pc, #68]	; (8000fac <I2Cx_Init+0x58>)
 8000f66:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2201      	movs	r2, #1
 8000f72:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ff89 	bl	8000ea4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f003 fb6a 	bl	800466c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8000f98:	2100      	movs	r1, #0
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f004 f86e 	bl	800507c <HAL_I2CEx_ConfigAnalogFilter>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40005800 	.word	0x40005800
 8000fac:	00702681 	.word	0x00702681

08000fb0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af04      	add	r7, sp, #16
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	4608      	mov	r0, r1
 8000fba:	4611      	mov	r1, r2
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	72fb      	strb	r3, [r7, #11]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	813b      	strh	r3, [r7, #8]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000fce:	7afb      	ldrb	r3, [r7, #11]
 8000fd0:	b299      	uxth	r1, r3
 8000fd2:	88f8      	ldrh	r0, [r7, #6]
 8000fd4:	893a      	ldrh	r2, [r7, #8]
 8000fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fda:	9302      	str	r3, [sp, #8]
 8000fdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	6a3b      	ldr	r3, [r7, #32]
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f003 fd12 	bl	8004a10 <HAL_I2C_Mem_Read>
 8000fec:	4603      	mov	r3, r0
 8000fee:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000ff0:	7dfb      	ldrb	r3, [r7, #23]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d004      	beq.n	8001000 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8000ff6:	7afb      	ldrb	r3, [r7, #11]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f000 f832 	bl	8001064 <I2Cx_Error>
  }
  return status;
 8001000:	7dfb      	ldrb	r3, [r7, #23]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b08a      	sub	sp, #40	; 0x28
 800100e:	af04      	add	r7, sp, #16
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	4608      	mov	r0, r1
 8001014:	4611      	mov	r1, r2
 8001016:	461a      	mov	r2, r3
 8001018:	4603      	mov	r3, r0
 800101a:	72fb      	strb	r3, [r7, #11]
 800101c:	460b      	mov	r3, r1
 800101e:	813b      	strh	r3, [r7, #8]
 8001020:	4613      	mov	r3, r2
 8001022:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001028:	7afb      	ldrb	r3, [r7, #11]
 800102a:	b299      	uxth	r1, r3
 800102c:	88f8      	ldrh	r0, [r7, #6]
 800102e:	893a      	ldrh	r2, [r7, #8]
 8001030:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	6a3b      	ldr	r3, [r7, #32]
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	4603      	mov	r3, r0
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f003 fbd1 	bl	80047e8 <HAL_I2C_Mem_Write>
 8001046:	4603      	mov	r3, r0
 8001048:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800104a:	7dfb      	ldrb	r3, [r7, #23]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d004      	beq.n	800105a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001050:	7afb      	ldrb	r3, [r7, #11]
 8001052:	4619      	mov	r1, r3
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f000 f805 	bl	8001064 <I2Cx_Error>
  }
  return status;
 800105a:	7dfb      	ldrb	r3, [r7, #23]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f003 fb8a 	bl	800478a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ff6c 	bl	8000f54 <I2Cx_Init>
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <SENSOR_IO_Init+0x10>)
 800108a:	f7ff ff63 	bl	8000f54 <I2Cx_Init>
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200002b8 	.word	0x200002b8

08001098 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af02      	add	r7, sp, #8
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
 80010a2:	460b      	mov	r3, r1
 80010a4:	71bb      	strb	r3, [r7, #6]
 80010a6:	4613      	mov	r3, r2
 80010a8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	79f9      	ldrb	r1, [r7, #7]
 80010b0:	2301      	movs	r3, #1
 80010b2:	9301      	str	r3, [sp, #4]
 80010b4:	1d7b      	adds	r3, r7, #5
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	2301      	movs	r3, #1
 80010ba:	4803      	ldr	r0, [pc, #12]	; (80010c8 <SENSOR_IO_Write+0x30>)
 80010bc:	f7ff ffa5 	bl	800100a <I2Cx_WriteMultiple>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200002b8 	.word	0x200002b8

080010cc <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	4603      	mov	r3, r0
 80010d4:	460a      	mov	r2, r1
 80010d6:	71fb      	strb	r3, [r7, #7]
 80010d8:	4613      	mov	r3, r2
 80010da:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80010e0:	79bb      	ldrb	r3, [r7, #6]
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	79f9      	ldrb	r1, [r7, #7]
 80010e6:	2301      	movs	r3, #1
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	f107 030f 	add.w	r3, r7, #15
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	4804      	ldr	r0, [pc, #16]	; (8001104 <SENSOR_IO_Read+0x38>)
 80010f4:	f7ff ff5c 	bl	8000fb0 <I2Cx_ReadMultiple>

  return read_value;
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200002b8 	.word	0x200002b8

08001108 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af02      	add	r7, sp, #8
 800110e:	603a      	str	r2, [r7, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
 8001116:	460b      	mov	r3, r1
 8001118:	71bb      	strb	r3, [r7, #6]
 800111a:	4613      	mov	r3, r2
 800111c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800111e:	79bb      	ldrb	r3, [r7, #6]
 8001120:	b29a      	uxth	r2, r3
 8001122:	79f9      	ldrb	r1, [r7, #7]
 8001124:	88bb      	ldrh	r3, [r7, #4]
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2301      	movs	r3, #1
 800112e:	4804      	ldr	r0, [pc, #16]	; (8001140 <SENSOR_IO_ReadMultiple+0x38>)
 8001130:	f7ff ff3e 	bl	8000fb0 <I2Cx_ReadMultiple>
 8001134:	4603      	mov	r3, r0
 8001136:	b29b      	uxth	r3, r3
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	200002b8 	.word	0x200002b8

08001144 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800114e:	2300      	movs	r3, #0
 8001150:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001152:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <BSP_ACCELERO_Init+0x74>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	4798      	blx	r3
 8001158:	4603      	mov	r3, r0
 800115a:	2b6a      	cmp	r3, #106	; 0x6a
 800115c:	d002      	beq.n	8001164 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	73fb      	strb	r3, [r7, #15]
 8001162:	e024      	b.n	80011ae <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <BSP_ACCELERO_Init+0x78>)
 8001166:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <BSP_ACCELERO_Init+0x74>)
 8001168:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800116a:	2330      	movs	r3, #48	; 0x30
 800116c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001172:	2300      	movs	r3, #0
 8001174:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001176:	2340      	movs	r3, #64	; 0x40
 8001178:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001182:	797a      	ldrb	r2, [r7, #5]
 8001184:	7abb      	ldrb	r3, [r7, #10]
 8001186:	4313      	orrs	r3, r2
 8001188:	b2db      	uxtb	r3, r3
 800118a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800118c:	7a3b      	ldrb	r3, [r7, #8]
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	b2db      	uxtb	r3, r3
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	b21a      	sxth	r2, r3
 8001198:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800119c:	4313      	orrs	r3, r2
 800119e:	b21b      	sxth	r3, r3
 80011a0:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <BSP_ACCELERO_Init+0x78>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	89ba      	ldrh	r2, [r7, #12]
 80011aa:	4610      	mov	r0, r2
 80011ac:	4798      	blx	r3
  }  

  return ret;
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	2000005c 	.word	0x2000005c
 80011bc:	20000304 	.word	0x20000304

080011c0 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d009      	beq.n	80011e4 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d004      	beq.n	80011e4 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	4798      	blx	r3
    }
  }
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000304 	.word	0x20000304

080011f0 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80011fa:	2300      	movs	r3, #0
 80011fc:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <BSP_GYRO_Init+0x7c>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	4798      	blx	r3
 8001204:	4603      	mov	r3, r0
 8001206:	2b6a      	cmp	r3, #106	; 0x6a
 8001208:	d002      	beq.n	8001210 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	73fb      	strb	r3, [r7, #15]
 800120e:	e028      	b.n	8001262 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8001210:	4b17      	ldr	r3, [pc, #92]	; (8001270 <BSP_GYRO_Init+0x80>)
 8001212:	4a16      	ldr	r2, [pc, #88]	; (800126c <BSP_GYRO_Init+0x7c>)
 8001214:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 800121a:	2330      	movs	r3, #48	; 0x30
 800121c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001226:	2340      	movs	r3, #64	; 0x40
 8001228:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800122e:	230c      	movs	r3, #12
 8001230:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8001232:	7aba      	ldrb	r2, [r7, #10]
 8001234:	797b      	ldrb	r3, [r7, #5]
 8001236:	4313      	orrs	r3, r2
 8001238:	b2db      	uxtb	r3, r3
 800123a:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800123c:	7a3b      	ldrb	r3, [r7, #8]
 800123e:	f043 0304 	orr.w	r3, r3, #4
 8001242:	b2db      	uxtb	r3, r3
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	b21a      	sxth	r2, r3
 8001248:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800124c:	4313      	orrs	r3, r2
 800124e:	b21b      	sxth	r3, r3
 8001250:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8001252:	4b07      	ldr	r3, [pc, #28]	; (8001270 <BSP_GYRO_Init+0x80>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	89ba      	ldrh	r2, [r7, #12]
 800125a:	4610      	mov	r0, r2
 800125c:	4798      	blx	r3
    
    ret = GYRO_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8001262:	7bfb      	ldrb	r3, [r7, #15]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000090 	.word	0x20000090
 8001270:	20000308 	.word	0x20000308

08001274 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <BSP_GYRO_GetXYZ+0x2c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d009      	beq.n	8001298 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <BSP_GYRO_GetXYZ+0x2c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	2b00      	cmp	r3, #0
 800128c:	d004      	beq.n	8001298 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <BSP_GYRO_GetXYZ+0x2c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	4798      	blx	r3
    }
  }
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000308 	.word	0x20000308

080012a4 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <BSP_HSENSOR_Init+0x38>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	20be      	movs	r0, #190	; 0xbe
 80012b0:	4798      	blx	r3
 80012b2:	4603      	mov	r3, r0
 80012b4:	2bbc      	cmp	r3, #188	; 0xbc
 80012b6:	d002      	beq.n	80012be <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	e009      	b.n	80012d2 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <BSP_HSENSOR_Init+0x3c>)
 80012c0:	4a06      	ldr	r2, [pc, #24]	; (80012dc <BSP_HSENSOR_Init+0x38>)
 80012c2:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <BSP_HSENSOR_Init+0x3c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	20be      	movs	r0, #190	; 0xbe
 80012cc:	4798      	blx	r3
    ret = HSENSOR_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80012d2:	687b      	ldr	r3, [r7, #4]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000000 	.word	0x20000000
 80012e0:	2000030c 	.word	0x2000030c

080012e4 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <BSP_HSENSOR_ReadHumidity+0x18>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	20be      	movs	r0, #190	; 0xbe
 80012f0:	4798      	blx	r3
 80012f2:	eef0 7a40 	vmov.f32	s15, s0
}
 80012f6:	eeb0 0a67 	vmov.f32	s0, s15
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	2000030c 	.word	0x2000030c

08001300 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8001306:	2300      	movs	r3, #0
 8001308:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <BSP_MAGNETO_Init+0x50>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	4798      	blx	r3
 8001310:	4603      	mov	r3, r0
 8001312:	2b3d      	cmp	r3, #61	; 0x3d
 8001314:	d002      	beq.n	800131c <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	71fb      	strb	r3, [r7, #7]
 800131a:	e013      	b.n	8001344 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 800131c:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <BSP_MAGNETO_Init+0x54>)
 800131e:	4a0c      	ldr	r2, [pc, #48]	; (8001350 <BSP_MAGNETO_Init+0x50>)
 8001320:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8001322:	2358      	movs	r3, #88	; 0x58
 8001324:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8001326:	2300      	movs	r3, #0
 8001328:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 800132a:	2300      	movs	r3, #0
 800132c:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 800132e:	2308      	movs	r3, #8
 8001330:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8001332:	2340      	movs	r3, #64	; 0x40
 8001334:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8001336:	4b07      	ldr	r3, [pc, #28]	; (8001354 <BSP_MAGNETO_Init+0x54>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	463a      	mov	r2, r7
 800133e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001342:	4798      	blx	r3
  } 

  return ret;  
 8001344:	79fb      	ldrb	r3, [r7, #7]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	2000001c 	.word	0x2000001c
 8001354:	20000310 	.word	0x20000310

08001358 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d009      	beq.n	800137c <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <BSP_MAGNETO_GetXYZ+0x2c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	2b00      	cmp	r3, #0
 8001370:	d004      	beq.n	800137c <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8001372:	4b04      	ldr	r3, [pc, #16]	; (8001384 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	4798      	blx	r3
    }
  }
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000310 	.word	0x20000310

08001388 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <BSP_PSENSOR_Init+0x38>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	20ba      	movs	r0, #186	; 0xba
 8001394:	4798      	blx	r3
 8001396:	4603      	mov	r3, r0
 8001398:	2bb1      	cmp	r3, #177	; 0xb1
 800139a:	d002      	beq.n	80013a2 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	e009      	b.n	80013b6 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <BSP_PSENSOR_Init+0x3c>)
 80013a4:	4a06      	ldr	r2, [pc, #24]	; (80013c0 <BSP_PSENSOR_Init+0x38>)
 80013a6:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <BSP_PSENSOR_Init+0x3c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	20ba      	movs	r0, #186	; 0xba
 80013b0:	4798      	blx	r3
    ret = PSENSOR_OK;
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80013b6:	687b      	ldr	r3, [r7, #4]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000050 	.word	0x20000050
 80013c4:	20000314 	.word	0x20000314

080013c8 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <BSP_PSENSOR_ReadPressure+0x18>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	20ba      	movs	r0, #186	; 0xba
 80013d4:	4798      	blx	r3
 80013d6:	eef0 7a40 	vmov.f32	s15, s0
}
 80013da:	eeb0 0a67 	vmov.f32	s0, s15
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000314 	.word	0x20000314

080013e4 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <BSP_TSENSOR_Init+0x30>)
 80013f0:	4a09      	ldr	r2, [pc, #36]	; (8001418 <BSP_TSENSOR_Init+0x34>)
 80013f2:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80013f4:	f7ff fe46 	bl	8001084 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <BSP_TSENSOR_Init+0x30>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2100      	movs	r1, #0
 8001400:	20be      	movs	r0, #190	; 0xbe
 8001402:	4798      	blx	r3

  ret = TSENSOR_OK;
 8001404:	2300      	movs	r3, #0
 8001406:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001408:	79fb      	ldrb	r3, [r7, #7]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000318 	.word	0x20000318
 8001418:	2000000c 	.word	0x2000000c

0800141c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <BSP_TSENSOR_ReadTemp+0x18>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	20be      	movs	r0, #190	; 0xbe
 8001428:	4798      	blx	r3
 800142a:	eef0 7a40 	vmov.f32	s15, s0
}
 800142e:	eeb0 0a67 	vmov.f32	s0, s15
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000318 	.word	0x20000318

08001438 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2120      	movs	r1, #32
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fe3f 	bl	80010cc <SENSOR_IO_Read>
 800144e:	4603      	mov	r3, r0
 8001450:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	f023 0304 	bic.w	r3, r3, #4
 8001458:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	f023 0303 	bic.w	r3, r3, #3
 8001468:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001478:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	7bfa      	ldrb	r2, [r7, #15]
 8001480:	2120      	movs	r1, #32
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fe08 	bl	8001098 <SENSOR_IO_Write>
}
 8001488:	bf00      	nop
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800149a:	2300      	movs	r3, #0
 800149c:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800149e:	f7ff fdf1 	bl	8001084 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	210f      	movs	r1, #15
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fe0f 	bl	80010cc <SENSOR_IO_Read>
 80014ae:	4603      	mov	r3, r0
 80014b0:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	b2d8      	uxtb	r0, r3
 80014ca:	f107 020c 	add.w	r2, r7, #12
 80014ce:	2302      	movs	r3, #2
 80014d0:	21b0      	movs	r1, #176	; 0xb0
 80014d2:	f7ff fe19 	bl	8001108 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80014d6:	7b3b      	ldrb	r3, [r7, #12]
 80014d8:	085b      	lsrs	r3, r3, #1
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80014de:	7b7b      	ldrb	r3, [r7, #13]
 80014e0:	085b      	lsrs	r3, r3, #1
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80014e6:	88fb      	ldrh	r3, [r7, #6]
 80014e8:	b2d8      	uxtb	r0, r3
 80014ea:	f107 020c 	add.w	r2, r7, #12
 80014ee:	2302      	movs	r3, #2
 80014f0:	21b6      	movs	r1, #182	; 0xb6
 80014f2:	f7ff fe09 	bl	8001108 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80014f6:	7b7b      	ldrb	r3, [r7, #13]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	7b3b      	ldrb	r3, [r7, #12]
 80014fe:	b21b      	sxth	r3, r3
 8001500:	4313      	orrs	r3, r2
 8001502:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	b2d8      	uxtb	r0, r3
 8001508:	f107 020c 	add.w	r2, r7, #12
 800150c:	2302      	movs	r3, #2
 800150e:	21ba      	movs	r1, #186	; 0xba
 8001510:	f7ff fdfa 	bl	8001108 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001514:	7b7b      	ldrb	r3, [r7, #13]
 8001516:	021b      	lsls	r3, r3, #8
 8001518:	b21a      	sxth	r2, r3
 800151a:	7b3b      	ldrb	r3, [r7, #12]
 800151c:	b21b      	sxth	r3, r3
 800151e:	4313      	orrs	r3, r2
 8001520:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	b2d8      	uxtb	r0, r3
 8001526:	f107 020c 	add.w	r2, r7, #12
 800152a:	2302      	movs	r3, #2
 800152c:	21a8      	movs	r1, #168	; 0xa8
 800152e:	f7ff fdeb 	bl	8001108 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001532:	7b7b      	ldrb	r3, [r7, #13]
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	b21a      	sxth	r2, r3
 8001538:	7b3b      	ldrb	r3, [r7, #12]
 800153a:	b21b      	sxth	r3, r3
 800153c:	4313      	orrs	r3, r2
 800153e:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001540:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001544:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	ee07 3a90 	vmov	s15, r3
 800154e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001552:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001556:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	ee07 3a90 	vmov	s15, r3
 8001560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001564:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001568:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800156c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	ee07 3a90 	vmov	s15, r3
 8001576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800157a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800157e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001582:	ee07 3a90 	vmov	s15, r3
 8001586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800158a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800158e:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8001592:	edd7 7a04 	vldr	s15, [r7, #16]
 8001596:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800159a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800159e:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80015a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80015a6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80015ec <HTS221_H_ReadHumidity+0x130>
 80015aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b2:	dd01      	ble.n	80015b8 <HTS221_H_ReadHumidity+0xfc>
 80015b4:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <HTS221_H_ReadHumidity+0x134>)
 80015b6:	e00a      	b.n	80015ce <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 80015b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80015bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c4:	d502      	bpl.n	80015cc <HTS221_H_ReadHumidity+0x110>
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	e000      	b.n	80015ce <HTS221_H_ReadHumidity+0x112>
 80015cc:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80015ce:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80015d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015d4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015dc:	eef0 7a66 	vmov.f32	s15, s13
}
 80015e0:	eeb0 0a67 	vmov.f32	s0, s15
 80015e4:	3720      	adds	r7, #32
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	447a0000 	.word	0x447a0000
 80015f0:	447a0000 	.word	0x447a0000

080015f4 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	6039      	str	r1, [r7, #0]
 80015fe:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001600:	88fb      	ldrh	r3, [r7, #6]
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2120      	movs	r1, #32
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fd60 	bl	80010cc <SENSOR_IO_Read>
 800160c:	4603      	mov	r3, r0
 800160e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	f023 0304 	bic.w	r3, r3, #4
 8001616:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	f043 0304 	orr.w	r3, r3, #4
 800161e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	f023 0303 	bic.w	r3, r3, #3
 8001626:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001636:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	7bfa      	ldrb	r2, [r7, #15]
 800163e:	2120      	movs	r1, #32
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fd29 	bl	8001098 <SENSOR_IO_Write>
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b088      	sub	sp, #32
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	b2d8      	uxtb	r0, r3
 800165c:	f107 0208 	add.w	r2, r7, #8
 8001660:	2302      	movs	r3, #2
 8001662:	21b2      	movs	r1, #178	; 0xb2
 8001664:	f7ff fd50 	bl	8001108 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2135      	movs	r1, #53	; 0x35
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fd2c 	bl	80010cc <SENSOR_IO_Read>
 8001674:	4603      	mov	r3, r0
 8001676:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001678:	7ffb      	ldrb	r3, [r7, #31]
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	b21b      	sxth	r3, r3
 800167e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001682:	b21a      	sxth	r2, r3
 8001684:	7a3b      	ldrb	r3, [r7, #8]
 8001686:	b21b      	sxth	r3, r3
 8001688:	4313      	orrs	r3, r2
 800168a:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800168c:	7ffb      	ldrb	r3, [r7, #31]
 800168e:	019b      	lsls	r3, r3, #6
 8001690:	b21b      	sxth	r3, r3
 8001692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001696:	b21a      	sxth	r2, r3
 8001698:	7a7b      	ldrb	r3, [r7, #9]
 800169a:	b21b      	sxth	r3, r3
 800169c:	4313      	orrs	r3, r2
 800169e:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80016a0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80016a4:	10db      	asrs	r3, r3, #3
 80016a6:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80016a8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80016ac:	10db      	asrs	r3, r3, #3
 80016ae:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	b2d8      	uxtb	r0, r3
 80016b4:	f107 0208 	add.w	r2, r7, #8
 80016b8:	2304      	movs	r3, #4
 80016ba:	21bc      	movs	r1, #188	; 0xbc
 80016bc:	f7ff fd24 	bl	8001108 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80016c0:	7a7b      	ldrb	r3, [r7, #9]
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	7a3b      	ldrb	r3, [r7, #8]
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	4313      	orrs	r3, r2
 80016cc:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80016ce:	7afb      	ldrb	r3, [r7, #11]
 80016d0:	021b      	lsls	r3, r3, #8
 80016d2:	b21a      	sxth	r2, r3
 80016d4:	7abb      	ldrb	r3, [r7, #10]
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	4313      	orrs	r3, r2
 80016da:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	b2d8      	uxtb	r0, r3
 80016e0:	f107 0208 	add.w	r2, r7, #8
 80016e4:	2302      	movs	r3, #2
 80016e6:	21aa      	movs	r1, #170	; 0xaa
 80016e8:	f7ff fd0e 	bl	8001108 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80016ec:	7a7b      	ldrb	r3, [r7, #9]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	b21a      	sxth	r2, r3
 80016f2:	7a3b      	ldrb	r3, [r7, #8]
 80016f4:	b21b      	sxth	r3, r3
 80016f6:	4313      	orrs	r3, r2
 80016f8:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80016fa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80016fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	ee07 3a90 	vmov	s15, r3
 8001708:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800170c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001710:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	ee07 3a90 	vmov	s15, r3
 800171a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800171e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001722:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001726:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	ee07 3a90 	vmov	s15, r3
 8001730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001734:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001738:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800173c:	ee07 3a90 	vmov	s15, r3
 8001740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001744:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001748:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	ee07 3a90 	vmov	s15, r3
}
 8001752:	eeb0 0a67 	vmov.f32	s0, s15
 8001756:	3720      	adds	r7, #32
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	463b      	mov	r3, r7
 8001764:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8001768:	783b      	ldrb	r3, [r7, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	2120      	movs	r1, #32
 800176e:	203c      	movs	r0, #60	; 0x3c
 8001770:	f7ff fc92 	bl	8001098 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8001774:	787b      	ldrb	r3, [r7, #1]
 8001776:	461a      	mov	r2, r3
 8001778:	2121      	movs	r1, #33	; 0x21
 800177a:	203c      	movs	r0, #60	; 0x3c
 800177c:	f7ff fc8c 	bl	8001098 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8001780:	78bb      	ldrb	r3, [r7, #2]
 8001782:	461a      	mov	r2, r3
 8001784:	2122      	movs	r1, #34	; 0x22
 8001786:	203c      	movs	r0, #60	; 0x3c
 8001788:	f7ff fc86 	bl	8001098 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	461a      	mov	r2, r3
 8001790:	2123      	movs	r1, #35	; 0x23
 8001792:	203c      	movs	r0, #60	; 0x3c
 8001794:	f7ff fc80 	bl	8001098 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8001798:	793b      	ldrb	r3, [r7, #4]
 800179a:	461a      	mov	r2, r3
 800179c:	2124      	movs	r1, #36	; 0x24
 800179e:	203c      	movs	r0, #60	; 0x3c
 80017a0:	f7ff fc7a 	bl	8001098 <SENSOR_IO_Write>
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80017b2:	2300      	movs	r3, #0
 80017b4:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80017b6:	2122      	movs	r1, #34	; 0x22
 80017b8:	203c      	movs	r0, #60	; 0x3c
 80017ba:	f7ff fc87 	bl	80010cc <SENSOR_IO_Read>
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	f023 0303 	bic.w	r3, r3, #3
 80017c8:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	f043 0303 	orr.w	r3, r3, #3
 80017d0:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	461a      	mov	r2, r3
 80017d6:	2122      	movs	r1, #34	; 0x22
 80017d8:	203c      	movs	r0, #60	; 0x3c
 80017da:	f7ff fc5d 	bl	8001098 <SENSOR_IO_Write>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80017ea:	f7ff fc4b 	bl	8001084 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80017ee:	210f      	movs	r1, #15
 80017f0:	203c      	movs	r0, #60	; 0x3c
 80017f2:	f7ff fc6b 	bl	80010cc <SENSOR_IO_Read>
 80017f6:	4603      	mov	r3, r0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	bd80      	pop	{r7, pc}

080017fc <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800180a:	2122      	movs	r1, #34	; 0x22
 800180c:	203c      	movs	r0, #60	; 0x3c
 800180e:	f7ff fc5d 	bl	80010cc <SENSOR_IO_Read>
 8001812:	4603      	mov	r3, r0
 8001814:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	f023 0320 	bic.w	r3, r3, #32
 800181c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800181e:	88fb      	ldrh	r3, [r7, #6]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	f043 0320 	orr.w	r3, r3, #32
 800182a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800182c:	7bfb      	ldrb	r3, [r7, #15]
 800182e:	461a      	mov	r2, r3
 8001830:	2122      	movs	r1, #34	; 0x22
 8001832:	203c      	movs	r0, #60	; 0x3c
 8001834:	f7ff fc30 	bl	8001098 <SENSOR_IO_Write>
}
 8001838:	bf00      	nop
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8001848:	2300      	movs	r3, #0
 800184a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8001856:	2121      	movs	r1, #33	; 0x21
 8001858:	203c      	movs	r0, #60	; 0x3c
 800185a:	f7ff fc37 	bl	80010cc <SENSOR_IO_Read>
 800185e:	4603      	mov	r3, r0
 8001860:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8001862:	f107 0208 	add.w	r2, r7, #8
 8001866:	2306      	movs	r3, #6
 8001868:	21a8      	movs	r1, #168	; 0xa8
 800186a:	203c      	movs	r0, #60	; 0x3c
 800186c:	f7ff fc4c 	bl	8001108 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001870:	2300      	movs	r3, #0
 8001872:	77fb      	strb	r3, [r7, #31]
 8001874:	e01c      	b.n	80018b0 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001876:	7ffb      	ldrb	r3, [r7, #31]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	3301      	adds	r3, #1
 800187c:	3320      	adds	r3, #32
 800187e:	443b      	add	r3, r7
 8001880:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001884:	b29b      	uxth	r3, r3
 8001886:	021b      	lsls	r3, r3, #8
 8001888:	b29a      	uxth	r2, r3
 800188a:	7ffb      	ldrb	r3, [r7, #31]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	3320      	adds	r3, #32
 8001890:	443b      	add	r3, r7
 8001892:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001896:	b29b      	uxth	r3, r3
 8001898:	4413      	add	r3, r2
 800189a:	b29a      	uxth	r2, r3
 800189c:	7ffb      	ldrb	r3, [r7, #31]
 800189e:	b212      	sxth	r2, r2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	3320      	adds	r3, #32
 80018a4:	443b      	add	r3, r7
 80018a6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80018aa:	7ffb      	ldrb	r3, [r7, #31]
 80018ac:	3301      	adds	r3, #1
 80018ae:	77fb      	strb	r3, [r7, #31]
 80018b0:	7ffb      	ldrb	r3, [r7, #31]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d9df      	bls.n	8001876 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80018b6:	7dfb      	ldrb	r3, [r7, #23]
 80018b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80018bc:	2b60      	cmp	r3, #96	; 0x60
 80018be:	d013      	beq.n	80018e8 <LIS3MDL_MagReadXYZ+0xa8>
 80018c0:	2b60      	cmp	r3, #96	; 0x60
 80018c2:	dc14      	bgt.n	80018ee <LIS3MDL_MagReadXYZ+0xae>
 80018c4:	2b40      	cmp	r3, #64	; 0x40
 80018c6:	d00c      	beq.n	80018e2 <LIS3MDL_MagReadXYZ+0xa2>
 80018c8:	2b40      	cmp	r3, #64	; 0x40
 80018ca:	dc10      	bgt.n	80018ee <LIS3MDL_MagReadXYZ+0xae>
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d002      	beq.n	80018d6 <LIS3MDL_MagReadXYZ+0x96>
 80018d0:	2b20      	cmp	r3, #32
 80018d2:	d003      	beq.n	80018dc <LIS3MDL_MagReadXYZ+0x9c>
 80018d4:	e00b      	b.n	80018ee <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 80018d6:	4b19      	ldr	r3, [pc, #100]	; (800193c <LIS3MDL_MagReadXYZ+0xfc>)
 80018d8:	61bb      	str	r3, [r7, #24]
    break;
 80018da:	e008      	b.n	80018ee <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 80018dc:	4b18      	ldr	r3, [pc, #96]	; (8001940 <LIS3MDL_MagReadXYZ+0x100>)
 80018de:	61bb      	str	r3, [r7, #24]
    break;
 80018e0:	e005      	b.n	80018ee <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80018e2:	4b18      	ldr	r3, [pc, #96]	; (8001944 <LIS3MDL_MagReadXYZ+0x104>)
 80018e4:	61bb      	str	r3, [r7, #24]
    break;
 80018e6:	e002      	b.n	80018ee <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80018e8:	4b17      	ldr	r3, [pc, #92]	; (8001948 <LIS3MDL_MagReadXYZ+0x108>)
 80018ea:	61bb      	str	r3, [r7, #24]
    break;    
 80018ec:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	77fb      	strb	r3, [r7, #31]
 80018f2:	e01a      	b.n	800192a <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80018f4:	7ffb      	ldrb	r3, [r7, #31]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	3320      	adds	r3, #32
 80018fa:	443b      	add	r3, r7
 80018fc:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001908:	edd7 7a06 	vldr	s15, [r7, #24]
 800190c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001910:	7ffb      	ldrb	r3, [r7, #31]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	4413      	add	r3, r2
 8001918:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800191c:	ee17 2a90 	vmov	r2, s15
 8001920:	b212      	sxth	r2, r2
 8001922:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001924:	7ffb      	ldrb	r3, [r7, #31]
 8001926:	3301      	adds	r3, #1
 8001928:	77fb      	strb	r3, [r7, #31]
 800192a:	7ffb      	ldrb	r3, [r7, #31]
 800192c:	2b02      	cmp	r3, #2
 800192e:	d9e1      	bls.n	80018f4 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3720      	adds	r7, #32
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	3e0f5c29 	.word	0x3e0f5c29
 8001940:	3e947ae1 	.word	0x3e947ae1
 8001944:	3edc28f6 	.word	0x3edc28f6
 8001948:	3f147ae1 	.word	0x3f147ae1

0800194c <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8001956:	88fb      	ldrh	r3, [r7, #6]
 8001958:	4618      	mov	r0, r3
 800195a:	f000 f879 	bl	8001a50 <LPS22HB_Init>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8001966:	b580      	push	{r7, lr}
 8001968:	b084      	sub	sp, #16
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001970:	2300      	movs	r3, #0
 8001972:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001974:	f7ff fb86 	bl	8001084 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8001978:	88fb      	ldrh	r3, [r7, #6]
 800197a:	b2db      	uxtb	r3, r3
 800197c:	210f      	movs	r1, #15
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fba4 	bl	80010cc <SENSOR_IO_Read>
 8001984:	4603      	mov	r3, r0
 8001986:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001988:	7bfb      	ldrb	r3, [r7, #15]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8001994:	b590      	push	{r4, r7, lr}
 8001996:	b087      	sub	sp, #28
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	74fb      	strb	r3, [r7, #19]
 80019a6:	e013      	b.n	80019d0 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80019a8:	88fb      	ldrh	r3, [r7, #6]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	7cfb      	ldrb	r3, [r7, #19]
 80019ae:	3328      	adds	r3, #40	; 0x28
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	7cfc      	ldrb	r4, [r7, #19]
 80019b4:	4619      	mov	r1, r3
 80019b6:	4610      	mov	r0, r2
 80019b8:	f7ff fb88 	bl	80010cc <SENSOR_IO_Read>
 80019bc:	4603      	mov	r3, r0
 80019be:	461a      	mov	r2, r3
 80019c0:	f104 0318 	add.w	r3, r4, #24
 80019c4:	443b      	add	r3, r7
 80019c6:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80019ca:	7cfb      	ldrb	r3, [r7, #19]
 80019cc:	3301      	adds	r3, #1
 80019ce:	74fb      	strb	r3, [r7, #19]
 80019d0:	7cfb      	ldrb	r3, [r7, #19]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d9e8      	bls.n	80019a8 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	74fb      	strb	r3, [r7, #19]
 80019da:	e00f      	b.n	80019fc <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80019dc:	7cfb      	ldrb	r3, [r7, #19]
 80019de:	3318      	adds	r3, #24
 80019e0:	443b      	add	r3, r7
 80019e2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80019e6:	461a      	mov	r2, r3
 80019e8:	7cfb      	ldrb	r3, [r7, #19]
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80019f6:	7cfb      	ldrb	r3, [r7, #19]
 80019f8:	3301      	adds	r3, #1
 80019fa:	74fb      	strb	r3, [r7, #19]
 80019fc:	7cfb      	ldrb	r3, [r7, #19]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d9ec      	bls.n	80019dc <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a12:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2264      	movs	r2, #100	; 0x64
 8001a1c:	fb02 f303 	mul.w	r3, r2, r3
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	da01      	bge.n	8001a28 <LPS22HB_P_ReadPressure+0x94>
 8001a24:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001a28:	131b      	asrs	r3, r3, #12
 8001a2a:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	ee07 3a90 	vmov	s15, r3
 8001a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a36:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001a4c <LPS22HB_P_ReadPressure+0xb8>
 8001a3a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a3e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001a42:	eeb0 0a67 	vmov.f32	s0, s15
 8001a46:	371c      	adds	r7, #28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd90      	pop	{r4, r7, pc}
 8001a4c:	42c80000 	.word	0x42c80000

08001a50 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	211a      	movs	r1, #26
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fb33 	bl	80010cc <SENSOR_IO_Read>
 8001a66:	4603      	mov	r3, r0
 8001a68:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
 8001a6c:	f023 0301 	bic.w	r3, r3, #1
 8001a70:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	7bfa      	ldrb	r2, [r7, #15]
 8001a80:	211a      	movs	r1, #26
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fb08 	bl	8001098 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2110      	movs	r1, #16
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fb1c 	bl	80010cc <SENSOR_IO_Read>
 8001a94:	4603      	mov	r3, r0
 8001a96:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a9e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001aa6:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	f023 0302 	bic.w	r3, r3, #2
 8001aae:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	f043 0302 	orr.w	r3, r3, #2
 8001ab6:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	7bfa      	ldrb	r2, [r7, #15]
 8001abe:	2110      	movs	r1, #16
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff fae9 	bl	8001098 <SENSOR_IO_Write>
}  
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b084      	sub	sp, #16
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001adc:	2110      	movs	r1, #16
 8001ade:	20d4      	movs	r0, #212	; 0xd4
 8001ae0:	f7ff faf4 	bl	80010cc <SENSOR_IO_Read>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001ae8:	88fb      	ldrh	r3, [r7, #6]
 8001aea:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001aec:	7bbb      	ldrb	r3, [r7, #14]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001af4:	7bba      	ldrb	r2, [r7, #14]
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8001afc:	7bbb      	ldrb	r3, [r7, #14]
 8001afe:	461a      	mov	r2, r3
 8001b00:	2110      	movs	r1, #16
 8001b02:	20d4      	movs	r0, #212	; 0xd4
 8001b04:	f7ff fac8 	bl	8001098 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001b08:	2112      	movs	r1, #18
 8001b0a:	20d4      	movs	r0, #212	; 0xd4
 8001b0c:	f7ff fade 	bl	80010cc <SENSOR_IO_Read>
 8001b10:	4603      	mov	r3, r0
 8001b12:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001b14:	88fb      	ldrh	r3, [r7, #6]
 8001b16:	0a1b      	lsrs	r3, r3, #8
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001b1c:	7bbb      	ldrb	r3, [r7, #14]
 8001b1e:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001b22:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001b24:	7bba      	ldrb	r2, [r7, #14]
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001b2c:	7bbb      	ldrb	r3, [r7, #14]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	2112      	movs	r1, #18
 8001b32:	20d4      	movs	r0, #212	; 0xd4
 8001b34:	f7ff fab0 	bl	8001098 <SENSOR_IO_Write>
}
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001b46:	2300      	movs	r3, #0
 8001b48:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001b4a:	2110      	movs	r1, #16
 8001b4c:	20d4      	movs	r0, #212	; 0xd4
 8001b4e:	f7ff fabd 	bl	80010cc <SENSOR_IO_Read>
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	f003 030f 	and.w	r3, r3, #15
 8001b5c:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	461a      	mov	r2, r3
 8001b62:	2110      	movs	r1, #16
 8001b64:	20d4      	movs	r0, #212	; 0xd4
 8001b66:	f7ff fa97 	bl	8001098 <SENSOR_IO_Write>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8001b72:	b580      	push	{r7, lr}
 8001b74:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8001b76:	f7ff fa85 	bl	8001084 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8001b7a:	210f      	movs	r1, #15
 8001b7c:	20d4      	movs	r0, #212	; 0xd4
 8001b7e:	f7ff faa5 	bl	80010cc <SENSOR_IO_Read>
 8001b82:	4603      	mov	r3, r0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8001b96:	2115      	movs	r1, #21
 8001b98:	20d4      	movs	r0, #212	; 0xd4
 8001b9a:	f7ff fa97 	bl	80010cc <SENSOR_IO_Read>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	f023 0310 	bic.w	r3, r3, #16
 8001ba8:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	f043 0310 	orr.w	r3, r3, #16
 8001bb6:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	2115      	movs	r1, #21
 8001bbe:	20d4      	movs	r0, #212	; 0xd4
 8001bc0:	f7ff fa6a 	bl	8001098 <SENSOR_IO_Write>
}
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001bdc:	f04f 0300 	mov.w	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001be2:	2110      	movs	r1, #16
 8001be4:	20d4      	movs	r0, #212	; 0xd4
 8001be6:	f7ff fa71 	bl	80010cc <SENSOR_IO_Read>
 8001bea:	4603      	mov	r3, r0
 8001bec:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001bee:	f107 0208 	add.w	r2, r7, #8
 8001bf2:	2306      	movs	r3, #6
 8001bf4:	2128      	movs	r1, #40	; 0x28
 8001bf6:	20d4      	movs	r0, #212	; 0xd4
 8001bf8:	f7ff fa86 	bl	8001108 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	77fb      	strb	r3, [r7, #31]
 8001c00:	e01c      	b.n	8001c3c <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001c02:	7ffb      	ldrb	r3, [r7, #31]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	3301      	adds	r3, #1
 8001c08:	3320      	adds	r3, #32
 8001c0a:	443b      	add	r3, r7
 8001c0c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	7ffb      	ldrb	r3, [r7, #31]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	3320      	adds	r3, #32
 8001c1c:	443b      	add	r3, r7
 8001c1e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	4413      	add	r3, r2
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	7ffb      	ldrb	r3, [r7, #31]
 8001c2a:	b212      	sxth	r2, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	3320      	adds	r3, #32
 8001c30:	443b      	add	r3, r7
 8001c32:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001c36:	7ffb      	ldrb	r3, [r7, #31]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	77fb      	strb	r3, [r7, #31]
 8001c3c:	7ffb      	ldrb	r3, [r7, #31]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d9df      	bls.n	8001c02 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8001c42:	7dfb      	ldrb	r3, [r7, #23]
 8001c44:	f003 030c 	and.w	r3, r3, #12
 8001c48:	2b0c      	cmp	r3, #12
 8001c4a:	d829      	bhi.n	8001ca0 <LSM6DSL_AccReadXYZ+0xd4>
 8001c4c:	a201      	add	r2, pc, #4	; (adr r2, 8001c54 <LSM6DSL_AccReadXYZ+0x88>)
 8001c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c52:	bf00      	nop
 8001c54:	08001c89 	.word	0x08001c89
 8001c58:	08001ca1 	.word	0x08001ca1
 8001c5c:	08001ca1 	.word	0x08001ca1
 8001c60:	08001ca1 	.word	0x08001ca1
 8001c64:	08001c9b 	.word	0x08001c9b
 8001c68:	08001ca1 	.word	0x08001ca1
 8001c6c:	08001ca1 	.word	0x08001ca1
 8001c70:	08001ca1 	.word	0x08001ca1
 8001c74:	08001c8f 	.word	0x08001c8f
 8001c78:	08001ca1 	.word	0x08001ca1
 8001c7c:	08001ca1 	.word	0x08001ca1
 8001c80:	08001ca1 	.word	0x08001ca1
 8001c84:	08001c95 	.word	0x08001c95
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8001c88:	4b18      	ldr	r3, [pc, #96]	; (8001cec <LSM6DSL_AccReadXYZ+0x120>)
 8001c8a:	61bb      	str	r3, [r7, #24]
    break;
 8001c8c:	e008      	b.n	8001ca0 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8001c8e:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <LSM6DSL_AccReadXYZ+0x124>)
 8001c90:	61bb      	str	r3, [r7, #24]
    break;
 8001c92:	e005      	b.n	8001ca0 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8001c94:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <LSM6DSL_AccReadXYZ+0x128>)
 8001c96:	61bb      	str	r3, [r7, #24]
    break;
 8001c98:	e002      	b.n	8001ca0 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8001c9a:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <LSM6DSL_AccReadXYZ+0x12c>)
 8001c9c:	61bb      	str	r3, [r7, #24]
    break;    
 8001c9e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	77fb      	strb	r3, [r7, #31]
 8001ca4:	e01a      	b.n	8001cdc <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001ca6:	7ffb      	ldrb	r3, [r7, #31]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	3320      	adds	r3, #32
 8001cac:	443b      	add	r3, r7
 8001cae:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001cb2:	ee07 3a90 	vmov	s15, r3
 8001cb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cba:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc2:	7ffb      	ldrb	r3, [r7, #31]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cce:	ee17 2a90 	vmov	r2, s15
 8001cd2:	b212      	sxth	r2, r2
 8001cd4:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001cd6:	7ffb      	ldrb	r3, [r7, #31]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	77fb      	strb	r3, [r7, #31]
 8001cdc:	7ffb      	ldrb	r3, [r7, #31]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d9e1      	bls.n	8001ca6 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	bf00      	nop
 8001ce6:	3720      	adds	r7, #32
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	3d79db23 	.word	0x3d79db23
 8001cf0:	3df9db23 	.word	0x3df9db23
 8001cf4:	3e79db23 	.word	0x3e79db23
 8001cf8:	3ef9db23 	.word	0x3ef9db23

08001cfc <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001d06:	2300      	movs	r3, #0
 8001d08:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001d0a:	2111      	movs	r1, #17
 8001d0c:	20d4      	movs	r0, #212	; 0xd4
 8001d0e:	f7ff f9dd 	bl	80010cc <SENSOR_IO_Read>
 8001d12:	4603      	mov	r3, r0
 8001d14:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001d1a:	7bbb      	ldrb	r3, [r7, #14]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001d22:	7bba      	ldrb	r2, [r7, #14]
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8001d2a:	7bbb      	ldrb	r3, [r7, #14]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	2111      	movs	r1, #17
 8001d30:	20d4      	movs	r0, #212	; 0xd4
 8001d32:	f7ff f9b1 	bl	8001098 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001d36:	2112      	movs	r1, #18
 8001d38:	20d4      	movs	r0, #212	; 0xd4
 8001d3a:	f7ff f9c7 	bl	80010cc <SENSOR_IO_Read>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001d4a:	7bbb      	ldrb	r3, [r7, #14]
 8001d4c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001d50:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001d52:	7bba      	ldrb	r2, [r7, #14]
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001d5a:	7bbb      	ldrb	r3, [r7, #14]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	2112      	movs	r1, #18
 8001d60:	20d4      	movs	r0, #212	; 0xd4
 8001d62:	f7ff f999 	bl	8001098 <SENSOR_IO_Write>
}
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001d74:	2300      	movs	r3, #0
 8001d76:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001d78:	2111      	movs	r1, #17
 8001d7a:	20d4      	movs	r0, #212	; 0xd4
 8001d7c:	f7ff f9a6 	bl	80010cc <SENSOR_IO_Read>
 8001d80:	4603      	mov	r3, r0
 8001d82:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	2111      	movs	r1, #17
 8001d92:	20d4      	movs	r0, #212	; 0xd4
 8001d94:	f7ff f980 	bl	8001098 <SENSOR_IO_Write>
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001da4:	f7ff f96e 	bl	8001084 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8001da8:	210f      	movs	r1, #15
 8001daa:	20d4      	movs	r0, #212	; 0xd4
 8001dac:	f7ff f98e 	bl	80010cc <SENSOR_IO_Read>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8001dc4:	2116      	movs	r1, #22
 8001dc6:	20d4      	movs	r0, #212	; 0xd4
 8001dc8:	f7ff f980 	bl	80010cc <SENSOR_IO_Read>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dd6:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001dd8:	88fb      	ldrh	r3, [r7, #6]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001de4:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	461a      	mov	r2, r3
 8001dea:	2116      	movs	r1, #22
 8001dec:	20d4      	movs	r0, #212	; 0xd4
 8001dee:	f7ff f953 	bl	8001098 <SENSOR_IO_Write>
}
 8001df2:	bf00      	nop
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001e12:	2111      	movs	r1, #17
 8001e14:	20d4      	movs	r0, #212	; 0xd4
 8001e16:	f7ff f959 	bl	80010cc <SENSOR_IO_Read>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8001e1e:	f107 0208 	add.w	r2, r7, #8
 8001e22:	2306      	movs	r3, #6
 8001e24:	2122      	movs	r1, #34	; 0x22
 8001e26:	20d4      	movs	r0, #212	; 0xd4
 8001e28:	f7ff f96e 	bl	8001108 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	77fb      	strb	r3, [r7, #31]
 8001e30:	e01c      	b.n	8001e6c <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001e32:	7ffb      	ldrb	r3, [r7, #31]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	3301      	adds	r3, #1
 8001e38:	3320      	adds	r3, #32
 8001e3a:	443b      	add	r3, r7
 8001e3c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	021b      	lsls	r3, r3, #8
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	7ffb      	ldrb	r3, [r7, #31]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	3320      	adds	r3, #32
 8001e4c:	443b      	add	r3, r7
 8001e4e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	4413      	add	r3, r2
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	7ffb      	ldrb	r3, [r7, #31]
 8001e5a:	b212      	sxth	r2, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	3320      	adds	r3, #32
 8001e60:	443b      	add	r3, r7
 8001e62:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001e66:	7ffb      	ldrb	r3, [r7, #31]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	77fb      	strb	r3, [r7, #31]
 8001e6c:	7ffb      	ldrb	r3, [r7, #31]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d9df      	bls.n	8001e32 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8001e72:	7dfb      	ldrb	r3, [r7, #23]
 8001e74:	f003 030c 	and.w	r3, r3, #12
 8001e78:	2b0c      	cmp	r3, #12
 8001e7a:	d829      	bhi.n	8001ed0 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8001e7c:	a201      	add	r2, pc, #4	; (adr r2, 8001e84 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 8001e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e82:	bf00      	nop
 8001e84:	08001eb9 	.word	0x08001eb9
 8001e88:	08001ed1 	.word	0x08001ed1
 8001e8c:	08001ed1 	.word	0x08001ed1
 8001e90:	08001ed1 	.word	0x08001ed1
 8001e94:	08001ebf 	.word	0x08001ebf
 8001e98:	08001ed1 	.word	0x08001ed1
 8001e9c:	08001ed1 	.word	0x08001ed1
 8001ea0:	08001ed1 	.word	0x08001ed1
 8001ea4:	08001ec5 	.word	0x08001ec5
 8001ea8:	08001ed1 	.word	0x08001ed1
 8001eac:	08001ed1 	.word	0x08001ed1
 8001eb0:	08001ed1 	.word	0x08001ed1
 8001eb4:	08001ecb 	.word	0x08001ecb
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8001eb8:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8001eba:	61bb      	str	r3, [r7, #24]
    break;
 8001ebc:	e008      	b.n	8001ed0 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8001ebe:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8001ec0:	61bb      	str	r3, [r7, #24]
    break;
 8001ec2:	e005      	b.n	8001ed0 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8001ec4:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8001ec6:	61bb      	str	r3, [r7, #24]
    break;
 8001ec8:	e002      	b.n	8001ed0 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8001eca:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8001ecc:	61bb      	str	r3, [r7, #24]
    break;    
 8001ece:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	77fb      	strb	r3, [r7, #31]
 8001ed4:	e016      	b.n	8001f04 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8001ed6:	7ffb      	ldrb	r3, [r7, #31]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	3320      	adds	r3, #32
 8001edc:	443b      	add	r3, r7
 8001ede:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001ee2:	ee07 3a90 	vmov	s15, r3
 8001ee6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eea:	7ffb      	ldrb	r3, [r7, #31]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001efa:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001efe:	7ffb      	ldrb	r3, [r7, #31]
 8001f00:	3301      	adds	r3, #1
 8001f02:	77fb      	strb	r3, [r7, #31]
 8001f04:	7ffb      	ldrb	r3, [r7, #31]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d9e5      	bls.n	8001ed6 <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	bf00      	nop
 8001f0e:	3720      	adds	r7, #32
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	410c0000 	.word	0x410c0000
 8001f18:	418c0000 	.word	0x418c0000
 8001f1c:	420c0000 	.word	0x420c0000
 8001f20:	428c0000 	.word	0x428c0000

08001f24 <InitSensores>:

struct  SensorData dd;
extern QueueHandle_t xQueueSensors;

void InitSensores()
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
	BSP_HSENSOR_Init();
 8001f28:	f7ff f9bc 	bl	80012a4 <BSP_HSENSOR_Init>
	BSP_PSENSOR_Init();
 8001f2c:	f7ff fa2c 	bl	8001388 <BSP_PSENSOR_Init>
	BSP_TSENSOR_Init();
 8001f30:	f7ff fa58 	bl	80013e4 <BSP_TSENSOR_Init>

	BSP_ACCELERO_Init();
 8001f34:	f7ff f906 	bl	8001144 <BSP_ACCELERO_Init>
	BSP_GYRO_Init();
 8001f38:	f7ff f95a 	bl	80011f0 <BSP_GYRO_Init>
	BSP_MAGNETO_Init();
 8001f3c:	f7ff f9e0 	bl	8001300 <BSP_MAGNETO_Init>
}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <ReadSensores>:

void ReadSensores()
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
	dd.humidity = BSP_HSENSOR_ReadHumidity();
 8001f48:	f7ff f9cc 	bl	80012e4 <BSP_HSENSOR_ReadHumidity>
 8001f4c:	eef0 7a40 	vmov.f32	s15, s0
 8001f50:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <ReadSensores+0x44>)
 8001f52:	edc3 7a01 	vstr	s15, [r3, #4]
	dd.pressure = BSP_PSENSOR_ReadPressure();
 8001f56:	f7ff fa37 	bl	80013c8 <BSP_PSENSOR_ReadPressure>
 8001f5a:	eef0 7a40 	vmov.f32	s15, s0
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <ReadSensores+0x44>)
 8001f60:	edc3 7a02 	vstr	s15, [r3, #8]
	dd.temperature = BSP_TSENSOR_ReadTemp();
 8001f64:	f7ff fa5a 	bl	800141c <BSP_TSENSOR_ReadTemp>
 8001f68:	eef0 7a40 	vmov.f32	s15, s0
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <ReadSensores+0x44>)
 8001f6e:	edc3 7a00 	vstr	s15, [r3]

	BSP_ACCELERO_AccGetXYZ(dd.accelData);
 8001f72:	4806      	ldr	r0, [pc, #24]	; (8001f8c <ReadSensores+0x48>)
 8001f74:	f7ff f924 	bl	80011c0 <BSP_ACCELERO_AccGetXYZ>
	BSP_GYRO_GetXYZ(dd.gyro);
 8001f78:	4805      	ldr	r0, [pc, #20]	; (8001f90 <ReadSensores+0x4c>)
 8001f7a:	f7ff f97b 	bl	8001274 <BSP_GYRO_GetXYZ>
	BSP_MAGNETO_GetXYZ(dd.magXYZ);
 8001f7e:	4805      	ldr	r0, [pc, #20]	; (8001f94 <ReadSensores+0x50>)
 8001f80:	f7ff f9ea 	bl	8001358 <BSP_MAGNETO_GetXYZ>
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	2000031c 	.word	0x2000031c
 8001f8c:	20000328 	.word	0x20000328
 8001f90:	20000330 	.word	0x20000330
 8001f94:	2000033c 	.word	0x2000033c

08001f98 <TareaSensores>:


void TareaSensores(void *pArg)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
	InitSensores();
 8001fa0:	f7ff ffc0 	bl	8001f24 <InitSensores>
	while(1)
	{
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa8:	2001      	movs	r0, #1
 8001faa:	f00b fc67 	bl	800d87c <ulTaskNotifyTake>
		ReadSensores();
 8001fae:	f7ff ffc9 	bl	8001f44 <ReadSensores>
		xQueueSend(xQueueSensors,&dd, portMAX_DELAY);
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <TareaSensores+0x2c>)
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fbc:	4902      	ldr	r1, [pc, #8]	; (8001fc8 <TareaSensores+0x30>)
 8001fbe:	f009 ff53 	bl	800be68 <xQueueGenericSend>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001fc2:	e7ef      	b.n	8001fa4 <TareaSensores+0xc>
 8001fc4:	20000354 	.word	0x20000354
 8001fc8:	2000031c 	.word	0x2000031c

08001fcc <TareaWebServer>:
void TareaSensores(void *pArg);

struct SensorData GetSensores();

void TareaWebServer(void *pArg)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	wifi_server();
 8001fd4:	f001 f994 	bl	8003300 <wifi_server>
}
 8001fd8:	bf00      	nop
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <TareaLED>:

void TareaLED(void *pArg)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	char ch;
	while(1)
	{
		xQueueReceive(xQueueLED, &ch, portMAX_DELAY);
 8001fe8:	4b08      	ldr	r3, [pc, #32]	; (800200c <TareaLED+0x2c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f107 010f 	add.w	r1, r7, #15
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f00a f95b 	bl	800c2b0 <xQueueReceive>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, ch);
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002002:	4803      	ldr	r0, [pc, #12]	; (8002010 <TareaLED+0x30>)
 8002004:	f002 fb02 	bl	800460c <HAL_GPIO_WritePin>
		xQueueReceive(xQueueLED, &ch, portMAX_DELAY);
 8002008:	e7ee      	b.n	8001fe8 <TareaLED+0x8>
 800200a:	bf00      	nop
 800200c:	20000350 	.word	0x20000350
 8002010:	48000400 	.word	0x48000400

08002014 <CreateTasks>:
	}
}

void CreateTasks()
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af02      	add	r7, sp, #8
	xTaskCreate(TareaSensores,"TareaSensores", 128, NULL,1, &sensoresTaskHandler);
 800201a:	4b11      	ldr	r3, [pc, #68]	; (8002060 <CreateTasks+0x4c>)
 800201c:	9301      	str	r3, [sp, #4]
 800201e:	2301      	movs	r3, #1
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	2300      	movs	r3, #0
 8002024:	2280      	movs	r2, #128	; 0x80
 8002026:	490f      	ldr	r1, [pc, #60]	; (8002064 <CreateTasks+0x50>)
 8002028:	480f      	ldr	r0, [pc, #60]	; (8002068 <CreateTasks+0x54>)
 800202a:	f00a fd10 	bl	800ca4e <xTaskCreate>
	xTaskCreate(TareaWebServer,"TareaWebServer", 386, NULL,1, NULL);
 800202e:	2300      	movs	r3, #0
 8002030:	9301      	str	r3, [sp, #4]
 8002032:	2301      	movs	r3, #1
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	2300      	movs	r3, #0
 8002038:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800203c:	490b      	ldr	r1, [pc, #44]	; (800206c <CreateTasks+0x58>)
 800203e:	480c      	ldr	r0, [pc, #48]	; (8002070 <CreateTasks+0x5c>)
 8002040:	f00a fd05 	bl	800ca4e <xTaskCreate>
	xTaskCreate(TareaLED,"TareaLED", 128, NULL,1, NULL);
 8002044:	2300      	movs	r3, #0
 8002046:	9301      	str	r3, [sp, #4]
 8002048:	2301      	movs	r3, #1
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	2300      	movs	r3, #0
 800204e:	2280      	movs	r2, #128	; 0x80
 8002050:	4908      	ldr	r1, [pc, #32]	; (8002074 <CreateTasks+0x60>)
 8002052:	4809      	ldr	r0, [pc, #36]	; (8002078 <CreateTasks+0x64>)
 8002054:	f00a fcfb 	bl	800ca4e <xTaskCreate>
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	2000034c 	.word	0x2000034c
 8002064:	08011978 	.word	0x08011978
 8002068:	08001f99 	.word	0x08001f99
 800206c:	08011988 	.word	0x08011988
 8002070:	08001fcd 	.word	0x08001fcd
 8002074:	08011998 	.word	0x08011998
 8002078:	08001fe1 	.word	0x08001fe1

0800207c <CreateSerialObjects>:


void CreateSerialObjects()
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	xSemaphore = xSemaphoreCreateBinary();
 8002080:	2203      	movs	r2, #3
 8002082:	2100      	movs	r1, #0
 8002084:	2001      	movs	r0, #1
 8002086:	f009 fe8b 	bl	800bda0 <xQueueGenericCreate>
 800208a:	4603      	mov	r3, r0
 800208c:	4a11      	ldr	r2, [pc, #68]	; (80020d4 <CreateSerialObjects+0x58>)
 800208e:	6013      	str	r3, [r2, #0]
	xSemaphoreGive (xSemaphore);
 8002090:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <CreateSerialObjects+0x58>)
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	2300      	movs	r3, #0
 8002096:	2200      	movs	r2, #0
 8002098:	2100      	movs	r1, #0
 800209a:	f009 fee5 	bl	800be68 <xQueueGenericSend>

	xQueue = xQueueCreate(5, sizeof (char));
 800209e:	2200      	movs	r2, #0
 80020a0:	2101      	movs	r1, #1
 80020a2:	2005      	movs	r0, #5
 80020a4:	f009 fe7c 	bl	800bda0 <xQueueGenericCreate>
 80020a8:	4603      	mov	r3, r0
 80020aa:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <CreateSerialObjects+0x5c>)
 80020ac:	6013      	str	r3, [r2, #0]
	xQueueLED = xQueueCreate(1, sizeof (char));
 80020ae:	2200      	movs	r2, #0
 80020b0:	2101      	movs	r1, #1
 80020b2:	2001      	movs	r0, #1
 80020b4:	f009 fe74 	bl	800bda0 <xQueueGenericCreate>
 80020b8:	4603      	mov	r3, r0
 80020ba:	4a08      	ldr	r2, [pc, #32]	; (80020dc <CreateSerialObjects+0x60>)
 80020bc:	6013      	str	r3, [r2, #0]
	xQueueSensors = xQueueCreate(1, sizeof (struct SensorData));
 80020be:	2200      	movs	r2, #0
 80020c0:	2128      	movs	r1, #40	; 0x28
 80020c2:	2001      	movs	r0, #1
 80020c4:	f009 fe6c 	bl	800bda0 <xQueueGenericCreate>
 80020c8:	4603      	mov	r3, r0
 80020ca:	4a05      	ldr	r2, [pc, #20]	; (80020e0 <CreateSerialObjects+0x64>)
 80020cc:	6013      	str	r3, [r2, #0]
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000344 	.word	0x20000344
 80020d8:	20000348 	.word	0x20000348
 80020dc:	20000350 	.word	0x20000350
 80020e0:	20000354 	.word	0x20000354

080020e4 <EncolarLED>:

void EncolarLED(char ch)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
	xQueueSend(xQueueLED,&ch, portMAX_DELAY);
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <EncolarLED+0x24>)
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	1df9      	adds	r1, r7, #7
 80020f4:	2300      	movs	r3, #0
 80020f6:	f04f 32ff 	mov.w	r2, #4294967295
 80020fa:	f009 feb5 	bl	800be68 <xQueueGenericSend>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000350 	.word	0x20000350

0800210c <GetSensores>:

struct SensorData GetSensores()
{
 800210c:	b5b0      	push	{r4, r5, r7, lr}
 800210e:	b08c      	sub	sp, #48	; 0x30
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
	struct SensorData sensor;
	xTaskNotifyGive(sensoresTaskHandler);
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <GetSensores+0x48>)
 8002116:	6818      	ldr	r0, [r3, #0]
 8002118:	2300      	movs	r3, #0
 800211a:	2202      	movs	r2, #2
 800211c:	2100      	movs	r1, #0
 800211e:	f00b fbf5 	bl	800d90c <xTaskGenericNotify>
	xQueueReceive(xQueueSensors, &sensor, portMAX_DELAY);
 8002122:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <GetSensores+0x4c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f107 0108 	add.w	r1, r7, #8
 800212a:	f04f 32ff 	mov.w	r2, #4294967295
 800212e:	4618      	mov	r0, r3
 8002130:	f00a f8be 	bl	800c2b0 <xQueueReceive>
	return sensor;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	461d      	mov	r5, r3
 8002138:	f107 0408 	add.w	r4, r7, #8
 800213c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800213e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002144:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002148:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	3730      	adds	r7, #48	; 0x30
 8002150:	46bd      	mov	sp, r7
 8002152:	bdb0      	pop	{r4, r5, r7, pc}
 8002154:	2000034c 	.word	0x2000034c
 8002158:	20000354 	.word	0x20000354

0800215c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002160:	f001 fd11 	bl	8003b86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002164:	f000 f81a 	bl	800219c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002168:	f000 fa24 	bl	80025b4 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800216c:	f000 f8ba 	bl	80022e4 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8002170:	f000 f8f0 	bl	8002354 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8002174:	f000 f92c 	bl	80023d0 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8002178:	f000 f950 	bl	800241c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800217c:	f000 f98c 	bl	8002498 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002180:	f000 f9ba 	bl	80024f8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002184:	f000 f9e8 	bl	8002558 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002188:	f009 fbd8 	bl	800b93c <osKernelInitialize>
  /* creation of defaultTask */
  //defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  CreateSerialObjects();
 800218c:	f7ff ff76 	bl	800207c <CreateSerialObjects>
  CreateTasks();
 8002190:	f7ff ff40 	bl	8002014 <CreateTasks>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002194:	f009 fc06 	bl	800b9a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8002198:	e7fe      	b.n	8002198 <main+0x3c>
	...

0800219c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b0b8      	sub	sp, #224	; 0xe0
 80021a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021a6:	2244      	movs	r2, #68	; 0x44
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f00d facc 	bl	800f748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021c0:	463b      	mov	r3, r7
 80021c2:	2288      	movs	r2, #136	; 0x88
 80021c4:	2100      	movs	r1, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f00d fabe 	bl	800f748 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80021cc:	f003 f936 	bl	800543c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80021d0:	4b42      	ldr	r3, [pc, #264]	; (80022dc <SystemClock_Config+0x140>)
 80021d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d6:	4a41      	ldr	r2, [pc, #260]	; (80022dc <SystemClock_Config+0x140>)
 80021d8:	f023 0318 	bic.w	r3, r3, #24
 80021dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80021e0:	2314      	movs	r3, #20
 80021e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80021e6:	2301      	movs	r3, #1
 80021e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80021ec:	2301      	movs	r3, #1
 80021ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80021f8:	2360      	movs	r3, #96	; 0x60
 80021fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021fe:	2302      	movs	r3, #2
 8002200:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002204:	2301      	movs	r3, #1
 8002206:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800220a:	2301      	movs	r3, #1
 800220c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002210:	2328      	movs	r3, #40	; 0x28
 8002212:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002216:	2307      	movs	r3, #7
 8002218:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800221c:	2302      	movs	r3, #2
 800221e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002222:	2302      	movs	r3, #2
 8002224:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002228:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800222c:	4618      	mov	r0, r3
 800222e:	f003 fa45 	bl	80056bc <HAL_RCC_OscConfig>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002238:	f000 fb7e 	bl	8002938 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800223c:	230f      	movs	r3, #15
 800223e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002242:	2303      	movs	r3, #3
 8002244:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800224e:	2300      	movs	r3, #0
 8002250:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002254:	2300      	movs	r3, #0
 8002256:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800225a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800225e:	2104      	movs	r1, #4
 8002260:	4618      	mov	r0, r3
 8002262:	f003 fe13 	bl	8005e8c <HAL_RCC_ClockConfig>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800226c:	f000 fb64 	bl	8002938 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8002270:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <SystemClock_Config+0x144>)
 8002272:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002274:	2300      	movs	r3, #0
 8002276:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002278:	2300      	movs	r3, #0
 800227a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800227c:	2300      	movs	r3, #0
 800227e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002280:	2300      	movs	r3, #0
 8002282:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002286:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800228a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800228c:	2301      	movs	r3, #1
 800228e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002290:	2301      	movs	r3, #1
 8002292:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002294:	2318      	movs	r3, #24
 8002296:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002298:	2307      	movs	r3, #7
 800229a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800229c:	2302      	movs	r3, #2
 800229e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80022a0:	2302      	movs	r3, #2
 80022a2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80022a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022a8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022aa:	463b      	mov	r3, r7
 80022ac:	4618      	mov	r0, r3
 80022ae:	f004 f825 	bl	80062fc <HAL_RCCEx_PeriphCLKConfig>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <SystemClock_Config+0x120>
  {
    Error_Handler();
 80022b8:	f000 fb3e 	bl	8002938 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80022bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022c0:	f003 f8da 	bl	8005478 <HAL_PWREx_ControlVoltageScaling>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <SystemClock_Config+0x132>
  {
    Error_Handler();
 80022ca:	f000 fb35 	bl	8002938 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80022ce:	f004 faff 	bl	80068d0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80022d2:	bf00      	nop
 80022d4:	37e0      	adds	r7, #224	; 0xe0
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40021000 	.word	0x40021000
 80022e0:	00012085 	.word	0x00012085

080022e4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80022e8:	4b18      	ldr	r3, [pc, #96]	; (800234c <MX_DFSDM1_Init+0x68>)
 80022ea:	4a19      	ldr	r2, [pc, #100]	; (8002350 <MX_DFSDM1_Init+0x6c>)
 80022ec:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80022ee:	4b17      	ldr	r3, [pc, #92]	; (800234c <MX_DFSDM1_Init+0x68>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80022f4:	4b15      	ldr	r3, [pc, #84]	; (800234c <MX_DFSDM1_Init+0x68>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <MX_DFSDM1_Init+0x68>)
 80022fc:	2202      	movs	r2, #2
 80022fe:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <MX_DFSDM1_Init+0x68>)
 8002302:	2200      	movs	r2, #0
 8002304:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <MX_DFSDM1_Init+0x68>)
 8002308:	2200      	movs	r2, #0
 800230a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <MX_DFSDM1_Init+0x68>)
 800230e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002312:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8002314:	4b0d      	ldr	r3, [pc, #52]	; (800234c <MX_DFSDM1_Init+0x68>)
 8002316:	2200      	movs	r2, #0
 8002318:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800231a:	4b0c      	ldr	r3, [pc, #48]	; (800234c <MX_DFSDM1_Init+0x68>)
 800231c:	2204      	movs	r2, #4
 800231e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <MX_DFSDM1_Init+0x68>)
 8002322:	2200      	movs	r2, #0
 8002324:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <MX_DFSDM1_Init+0x68>)
 8002328:	2201      	movs	r2, #1
 800232a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800232c:	4b07      	ldr	r3, [pc, #28]	; (800234c <MX_DFSDM1_Init+0x68>)
 800232e:	2200      	movs	r2, #0
 8002330:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <MX_DFSDM1_Init+0x68>)
 8002334:	2200      	movs	r2, #0
 8002336:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8002338:	4804      	ldr	r0, [pc, #16]	; (800234c <MX_DFSDM1_Init+0x68>)
 800233a:	f001 fd63 	bl	8003e04 <HAL_DFSDM_ChannelInit>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8002344:	f000 faf8 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000358 	.word	0x20000358
 8002350:	40016020 	.word	0x40016020

08002354 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002358:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <MX_I2C2_Init+0x74>)
 800235a:	4a1c      	ldr	r2, [pc, #112]	; (80023cc <MX_I2C2_Init+0x78>)
 800235c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800235e:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <MX_I2C2_Init+0x74>)
 8002360:	f640 6214 	movw	r2, #3604	; 0xe14
 8002364:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002366:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <MX_I2C2_Init+0x74>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800236c:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <MX_I2C2_Init+0x74>)
 800236e:	2201      	movs	r2, #1
 8002370:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002372:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <MX_I2C2_Init+0x74>)
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <MX_I2C2_Init+0x74>)
 800237a:	2200      	movs	r2, #0
 800237c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800237e:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <MX_I2C2_Init+0x74>)
 8002380:	2200      	movs	r2, #0
 8002382:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002384:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <MX_I2C2_Init+0x74>)
 8002386:	2200      	movs	r2, #0
 8002388:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800238a:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <MX_I2C2_Init+0x74>)
 800238c:	2200      	movs	r2, #0
 800238e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002390:	480d      	ldr	r0, [pc, #52]	; (80023c8 <MX_I2C2_Init+0x74>)
 8002392:	f002 f96b 	bl	800466c <HAL_I2C_Init>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800239c:	f000 facc 	bl	8002938 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023a0:	2100      	movs	r1, #0
 80023a2:	4809      	ldr	r0, [pc, #36]	; (80023c8 <MX_I2C2_Init+0x74>)
 80023a4:	f002 fe6a 	bl	800507c <HAL_I2CEx_ConfigAnalogFilter>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80023ae:	f000 fac3 	bl	8002938 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80023b2:	2100      	movs	r1, #0
 80023b4:	4804      	ldr	r0, [pc, #16]	; (80023c8 <MX_I2C2_Init+0x74>)
 80023b6:	f002 feac 	bl	8005112 <HAL_I2CEx_ConfigDigitalFilter>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80023c0:	f000 faba 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80023c4:	bf00      	nop
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20000390 	.word	0x20000390
 80023cc:	40005800 	.word	0x40005800

080023d0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80023d4:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <MX_QUADSPI_Init+0x44>)
 80023d6:	4a10      	ldr	r2, [pc, #64]	; (8002418 <MX_QUADSPI_Init+0x48>)
 80023d8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80023da:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <MX_QUADSPI_Init+0x44>)
 80023dc:	22ff      	movs	r2, #255	; 0xff
 80023de:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80023e0:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <MX_QUADSPI_Init+0x44>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80023e6:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <MX_QUADSPI_Init+0x44>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80023ec:	4b09      	ldr	r3, [pc, #36]	; (8002414 <MX_QUADSPI_Init+0x44>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80023f2:	4b08      	ldr	r3, [pc, #32]	; (8002414 <MX_QUADSPI_Init+0x44>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <MX_QUADSPI_Init+0x44>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80023fe:	4805      	ldr	r0, [pc, #20]	; (8002414 <MX_QUADSPI_Init+0x44>)
 8002400:	f003 f8a0 	bl	8005544 <HAL_QSPI_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800240a:	f000 fa95 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	200003dc 	.word	0x200003dc
 8002418:	a0001000 	.word	0xa0001000

0800241c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002420:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <MX_SPI3_Init+0x74>)
 8002422:	4a1c      	ldr	r2, [pc, #112]	; (8002494 <MX_SPI3_Init+0x78>)
 8002424:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002426:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <MX_SPI3_Init+0x74>)
 8002428:	f44f 7282 	mov.w	r2, #260	; 0x104
 800242c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800242e:	4b18      	ldr	r3, [pc, #96]	; (8002490 <MX_SPI3_Init+0x74>)
 8002430:	2200      	movs	r2, #0
 8002432:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002434:	4b16      	ldr	r3, [pc, #88]	; (8002490 <MX_SPI3_Init+0x74>)
 8002436:	f44f 7240 	mov.w	r2, #768	; 0x300
 800243a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800243c:	4b14      	ldr	r3, [pc, #80]	; (8002490 <MX_SPI3_Init+0x74>)
 800243e:	2200      	movs	r2, #0
 8002440:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002442:	4b13      	ldr	r3, [pc, #76]	; (8002490 <MX_SPI3_Init+0x74>)
 8002444:	2200      	movs	r2, #0
 8002446:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002448:	4b11      	ldr	r3, [pc, #68]	; (8002490 <MX_SPI3_Init+0x74>)
 800244a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800244e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002450:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <MX_SPI3_Init+0x74>)
 8002452:	2200      	movs	r2, #0
 8002454:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002456:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <MX_SPI3_Init+0x74>)
 8002458:	2200      	movs	r2, #0
 800245a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <MX_SPI3_Init+0x74>)
 800245e:	2200      	movs	r2, #0
 8002460:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002462:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <MX_SPI3_Init+0x74>)
 8002464:	2200      	movs	r2, #0
 8002466:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002468:	4b09      	ldr	r3, [pc, #36]	; (8002490 <MX_SPI3_Init+0x74>)
 800246a:	2207      	movs	r2, #7
 800246c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800246e:	4b08      	ldr	r3, [pc, #32]	; (8002490 <MX_SPI3_Init+0x74>)
 8002470:	2200      	movs	r2, #0
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <MX_SPI3_Init+0x74>)
 8002476:	2208      	movs	r2, #8
 8002478:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800247a:	4805      	ldr	r0, [pc, #20]	; (8002490 <MX_SPI3_Init+0x74>)
 800247c:	f004 fc0a 	bl	8006c94 <HAL_SPI_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002486:	f000 fa57 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000420 	.word	0x20000420
 8002494:	40003c00 	.word	0x40003c00

08002498 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800249c:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <MX_USART1_UART_Init+0x58>)
 800249e:	4a15      	ldr	r2, [pc, #84]	; (80024f4 <MX_USART1_UART_Init+0x5c>)
 80024a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <MX_USART1_UART_Init+0x58>)
 80024a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024aa:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <MX_USART1_UART_Init+0x58>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024b0:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <MX_USART1_UART_Init+0x58>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024b6:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <MX_USART1_UART_Init+0x58>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <MX_USART1_UART_Init+0x58>)
 80024be:	220c      	movs	r2, #12
 80024c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024c2:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <MX_USART1_UART_Init+0x58>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024c8:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <MX_USART1_UART_Init+0x58>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ce:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <MX_USART1_UART_Init+0x58>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <MX_USART1_UART_Init+0x58>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024da:	4805      	ldr	r0, [pc, #20]	; (80024f0 <MX_USART1_UART_Init+0x58>)
 80024dc:	f006 f9c8 	bl	8008870 <HAL_UART_Init>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80024e6:	f000 fa27 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000484 	.word	0x20000484
 80024f4:	40013800 	.word	0x40013800

080024f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80024fc:	4b14      	ldr	r3, [pc, #80]	; (8002550 <MX_USART3_UART_Init+0x58>)
 80024fe:	4a15      	ldr	r2, [pc, #84]	; (8002554 <MX_USART3_UART_Init+0x5c>)
 8002500:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002502:	4b13      	ldr	r3, [pc, #76]	; (8002550 <MX_USART3_UART_Init+0x58>)
 8002504:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002508:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800250a:	4b11      	ldr	r3, [pc, #68]	; (8002550 <MX_USART3_UART_Init+0x58>)
 800250c:	2200      	movs	r2, #0
 800250e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002510:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <MX_USART3_UART_Init+0x58>)
 8002512:	2200      	movs	r2, #0
 8002514:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002516:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <MX_USART3_UART_Init+0x58>)
 8002518:	2200      	movs	r2, #0
 800251a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800251c:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <MX_USART3_UART_Init+0x58>)
 800251e:	220c      	movs	r2, #12
 8002520:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002522:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <MX_USART3_UART_Init+0x58>)
 8002524:	2200      	movs	r2, #0
 8002526:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002528:	4b09      	ldr	r3, [pc, #36]	; (8002550 <MX_USART3_UART_Init+0x58>)
 800252a:	2200      	movs	r2, #0
 800252c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800252e:	4b08      	ldr	r3, [pc, #32]	; (8002550 <MX_USART3_UART_Init+0x58>)
 8002530:	2200      	movs	r2, #0
 8002532:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002534:	4b06      	ldr	r3, [pc, #24]	; (8002550 <MX_USART3_UART_Init+0x58>)
 8002536:	2200      	movs	r2, #0
 8002538:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800253a:	4805      	ldr	r0, [pc, #20]	; (8002550 <MX_USART3_UART_Init+0x58>)
 800253c:	f006 f998 	bl	8008870 <HAL_UART_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002546:	f000 f9f7 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000504 	.word	0x20000504
 8002554:	40004800 	.word	0x40004800

08002558 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800255c:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800255e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002562:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002564:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002566:	2206      	movs	r2, #6
 8002568:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800256a:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800256c:	2202      	movs	r2, #2
 800256e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002570:	4b0f      	ldr	r3, [pc, #60]	; (80025b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002572:	2202      	movs	r2, #2
 8002574:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002576:	4b0e      	ldr	r3, [pc, #56]	; (80025b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002578:	2200      	movs	r2, #0
 800257a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800257c:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800257e:	2200      	movs	r2, #0
 8002580:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002582:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002584:	2200      	movs	r2, #0
 8002586:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8002588:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800258a:	2200      	movs	r2, #0
 800258c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800258e:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002590:	2200      	movs	r2, #0
 8002592:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002594:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002596:	2200      	movs	r2, #0
 8002598:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800259a:	4805      	ldr	r0, [pc, #20]	; (80025b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800259c:	f002 fe05 	bl	80051aa <HAL_PCD_Init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80025a6:	f000 f9c7 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000584 	.word	0x20000584

080025b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08a      	sub	sp, #40	; 0x28
 80025b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ba:	f107 0314 	add.w	r3, r7, #20
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]
 80025c4:	609a      	str	r2, [r3, #8]
 80025c6:	60da      	str	r2, [r3, #12]
 80025c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025ca:	4bba      	ldr	r3, [pc, #744]	; (80028b4 <MX_GPIO_Init+0x300>)
 80025cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ce:	4ab9      	ldr	r2, [pc, #740]	; (80028b4 <MX_GPIO_Init+0x300>)
 80025d0:	f043 0310 	orr.w	r3, r3, #16
 80025d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025d6:	4bb7      	ldr	r3, [pc, #732]	; (80028b4 <MX_GPIO_Init+0x300>)
 80025d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e2:	4bb4      	ldr	r3, [pc, #720]	; (80028b4 <MX_GPIO_Init+0x300>)
 80025e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e6:	4ab3      	ldr	r2, [pc, #716]	; (80028b4 <MX_GPIO_Init+0x300>)
 80025e8:	f043 0304 	orr.w	r3, r3, #4
 80025ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ee:	4bb1      	ldr	r3, [pc, #708]	; (80028b4 <MX_GPIO_Init+0x300>)
 80025f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fa:	4bae      	ldr	r3, [pc, #696]	; (80028b4 <MX_GPIO_Init+0x300>)
 80025fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fe:	4aad      	ldr	r2, [pc, #692]	; (80028b4 <MX_GPIO_Init+0x300>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002606:	4bab      	ldr	r3, [pc, #684]	; (80028b4 <MX_GPIO_Init+0x300>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002612:	4ba8      	ldr	r3, [pc, #672]	; (80028b4 <MX_GPIO_Init+0x300>)
 8002614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002616:	4aa7      	ldr	r2, [pc, #668]	; (80028b4 <MX_GPIO_Init+0x300>)
 8002618:	f043 0302 	orr.w	r3, r3, #2
 800261c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800261e:	4ba5      	ldr	r3, [pc, #660]	; (80028b4 <MX_GPIO_Init+0x300>)
 8002620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	607b      	str	r3, [r7, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800262a:	4ba2      	ldr	r3, [pc, #648]	; (80028b4 <MX_GPIO_Init+0x300>)
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	4aa1      	ldr	r2, [pc, #644]	; (80028b4 <MX_GPIO_Init+0x300>)
 8002630:	f043 0308 	orr.w	r3, r3, #8
 8002634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002636:	4b9f      	ldr	r3, [pc, #636]	; (80028b4 <MX_GPIO_Init+0x300>)
 8002638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8002642:	2200      	movs	r2, #0
 8002644:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002648:	489b      	ldr	r0, [pc, #620]	; (80028b8 <MX_GPIO_Init+0x304>)
 800264a:	f001 ffdf 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800264e:	2200      	movs	r2, #0
 8002650:	f248 1104 	movw	r1, #33028	; 0x8104
 8002654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002658:	f001 ffd8 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800265c:	2200      	movs	r2, #0
 800265e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8002662:	4896      	ldr	r0, [pc, #600]	; (80028bc <MX_GPIO_Init+0x308>)
 8002664:	f001 ffd2 	bl	800460c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8002668:	2200      	movs	r2, #0
 800266a:	f241 0181 	movw	r1, #4225	; 0x1081
 800266e:	4894      	ldr	r0, [pc, #592]	; (80028c0 <MX_GPIO_Init+0x30c>)
 8002670:	f001 ffcc 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002674:	2201      	movs	r2, #1
 8002676:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800267a:	4891      	ldr	r0, [pc, #580]	; (80028c0 <MX_GPIO_Init+0x30c>)
 800267c:	f001 ffc6 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8002680:	2200      	movs	r2, #0
 8002682:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002686:	488f      	ldr	r0, [pc, #572]	; (80028c4 <MX_GPIO_Init+0x310>)
 8002688:	f001 ffc0 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 800268c:	2201      	movs	r2, #1
 800268e:	2120      	movs	r1, #32
 8002690:	488a      	ldr	r0, [pc, #552]	; (80028bc <MX_GPIO_Init+0x308>)
 8002692:	f001 ffbb 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002696:	2201      	movs	r2, #1
 8002698:	2101      	movs	r1, #1
 800269a:	4887      	ldr	r0, [pc, #540]	; (80028b8 <MX_GPIO_Init+0x304>)
 800269c:	f001 ffb6 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80026a0:	f240 1315 	movw	r3, #277	; 0x115
 80026a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a6:	2301      	movs	r3, #1
 80026a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ae:	2300      	movs	r3, #0
 80026b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026b2:	f107 0314 	add.w	r3, r7, #20
 80026b6:	4619      	mov	r1, r3
 80026b8:	487f      	ldr	r0, [pc, #508]	; (80028b8 <MX_GPIO_Init+0x304>)
 80026ba:	f001 fcf1 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80026be:	236a      	movs	r3, #106	; 0x6a
 80026c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026c2:	4b81      	ldr	r3, [pc, #516]	; (80028c8 <MX_GPIO_Init+0x314>)
 80026c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026ca:	f107 0314 	add.w	r3, r7, #20
 80026ce:	4619      	mov	r1, r3
 80026d0:	4879      	ldr	r0, [pc, #484]	; (80028b8 <MX_GPIO_Init+0x304>)
 80026d2:	f001 fce5 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80026d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026dc:	4b7b      	ldr	r3, [pc, #492]	; (80028cc <MX_GPIO_Init+0x318>)
 80026de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80026e4:	f107 0314 	add.w	r3, r7, #20
 80026e8:	4619      	mov	r1, r3
 80026ea:	4876      	ldr	r0, [pc, #472]	; (80028c4 <MX_GPIO_Init+0x310>)
 80026ec:	f001 fcd8 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80026f0:	233f      	movs	r3, #63	; 0x3f
 80026f2:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80026f4:	230b      	movs	r3, #11
 80026f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026fc:	f107 0314 	add.w	r3, r7, #20
 8002700:	4619      	mov	r1, r3
 8002702:	4870      	ldr	r0, [pc, #448]	; (80028c4 <MX_GPIO_Init+0x310>)
 8002704:	f001 fccc 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8002708:	2303      	movs	r3, #3
 800270a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270c:	2302      	movs	r3, #2
 800270e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002714:	2303      	movs	r3, #3
 8002716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002718:	2308      	movs	r3, #8
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271c:	f107 0314 	add.w	r3, r7, #20
 8002720:	4619      	mov	r1, r3
 8002722:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002726:	f001 fcbb 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800272a:	f248 1304 	movw	r3, #33028	; 0x8104
 800272e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002730:	2301      	movs	r3, #1
 8002732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	2300      	movs	r3, #0
 8002736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002738:	2300      	movs	r3, #0
 800273a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273c:	f107 0314 	add.w	r3, r7, #20
 8002740:	4619      	mov	r1, r3
 8002742:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002746:	f001 fcab 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800274a:	2308      	movs	r3, #8
 800274c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274e:	2302      	movs	r3, #2
 8002750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002756:	2300      	movs	r3, #0
 8002758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800275a:	2301      	movs	r3, #1
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800275e:	f107 0314 	add.w	r3, r7, #20
 8002762:	4619      	mov	r1, r3
 8002764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002768:	f001 fc9a 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800276c:	2310      	movs	r3, #16
 800276e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002770:	230b      	movs	r3, #11
 8002772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002774:	2300      	movs	r3, #0
 8002776:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	4619      	mov	r1, r3
 800277e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002782:	f001 fc8d 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8002786:	23e0      	movs	r3, #224	; 0xe0
 8002788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278a:	2302      	movs	r3, #2
 800278c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002792:	2303      	movs	r3, #3
 8002794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002796:	2305      	movs	r3, #5
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279a:	f107 0314 	add.w	r3, r7, #20
 800279e:	4619      	mov	r1, r3
 80027a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a4:	f001 fc7c 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80027a8:	2301      	movs	r3, #1
 80027aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027ac:	4b46      	ldr	r3, [pc, #280]	; (80028c8 <MX_GPIO_Init+0x314>)
 80027ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	4619      	mov	r1, r3
 80027ba:	4840      	ldr	r0, [pc, #256]	; (80028bc <MX_GPIO_Init+0x308>)
 80027bc:	f001 fc70 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80027c0:	2302      	movs	r3, #2
 80027c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80027c4:	230b      	movs	r3, #11
 80027c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80027cc:	f107 0314 	add.w	r3, r7, #20
 80027d0:	4619      	mov	r1, r3
 80027d2:	483a      	ldr	r0, [pc, #232]	; (80028bc <MX_GPIO_Init+0x308>)
 80027d4:	f001 fc64 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80027d8:	f24f 0334 	movw	r3, #61492	; 0xf034
 80027dc:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027de:	2301      	movs	r3, #1
 80027e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e6:	2300      	movs	r3, #0
 80027e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ea:	f107 0314 	add.w	r3, r7, #20
 80027ee:	4619      	mov	r1, r3
 80027f0:	4832      	ldr	r0, [pc, #200]	; (80028bc <MX_GPIO_Init+0x308>)
 80027f2:	f001 fc55 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80027f6:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80027fa:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027fc:	4b32      	ldr	r3, [pc, #200]	; (80028c8 <MX_GPIO_Init+0x314>)
 80027fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002804:	f107 0314 	add.w	r3, r7, #20
 8002808:	4619      	mov	r1, r3
 800280a:	482d      	ldr	r0, [pc, #180]	; (80028c0 <MX_GPIO_Init+0x30c>)
 800280c:	f001 fc48 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8002810:	f243 0381 	movw	r3, #12417	; 0x3081
 8002814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002816:	2301      	movs	r3, #1
 8002818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281e:	2300      	movs	r3, #0
 8002820:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002822:	f107 0314 	add.w	r3, r7, #20
 8002826:	4619      	mov	r1, r3
 8002828:	4825      	ldr	r0, [pc, #148]	; (80028c0 <MX_GPIO_Init+0x30c>)
 800282a:	f001 fc39 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800282e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002834:	2301      	movs	r3, #1
 8002836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283c:	2300      	movs	r3, #0
 800283e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002840:	f107 0314 	add.w	r3, r7, #20
 8002844:	4619      	mov	r1, r3
 8002846:	481f      	ldr	r0, [pc, #124]	; (80028c4 <MX_GPIO_Init+0x310>)
 8002848:	f001 fc2a 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800284c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002852:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <MX_GPIO_Init+0x314>)
 8002854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800285a:	f107 0314 	add.w	r3, r7, #20
 800285e:	4619      	mov	r1, r3
 8002860:	4818      	ldr	r0, [pc, #96]	; (80028c4 <MX_GPIO_Init+0x310>)
 8002862:	f001 fc1d 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8002866:	2302      	movs	r3, #2
 8002868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286a:	2302      	movs	r3, #2
 800286c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002872:	2303      	movs	r3, #3
 8002874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002876:	2305      	movs	r3, #5
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800287a:	f107 0314 	add.w	r3, r7, #20
 800287e:	4619      	mov	r1, r3
 8002880:	480f      	ldr	r0, [pc, #60]	; (80028c0 <MX_GPIO_Init+0x30c>)
 8002882:	f001 fc0d 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8002886:	2378      	movs	r3, #120	; 0x78
 8002888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288a:	2302      	movs	r3, #2
 800288c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002892:	2303      	movs	r3, #3
 8002894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002896:	2307      	movs	r3, #7
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800289a:	f107 0314 	add.w	r3, r7, #20
 800289e:	4619      	mov	r1, r3
 80028a0:	4807      	ldr	r0, [pc, #28]	; (80028c0 <MX_GPIO_Init+0x30c>)
 80028a2:	f001 fbfd 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80028a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028ac:	2312      	movs	r3, #18
 80028ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e00d      	b.n	80028d0 <MX_GPIO_Init+0x31c>
 80028b4:	40021000 	.word	0x40021000
 80028b8:	48001000 	.word	0x48001000
 80028bc:	48000400 	.word	0x48000400
 80028c0:	48000c00 	.word	0x48000c00
 80028c4:	48000800 	.word	0x48000800
 80028c8:	10110000 	.word	0x10110000
 80028cc:	10210000 	.word	0x10210000
 80028d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d2:	2303      	movs	r3, #3
 80028d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028d6:	2304      	movs	r3, #4
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028da:	f107 0314 	add.w	r3, r7, #20
 80028de:	4619      	mov	r1, r3
 80028e0:	480b      	ldr	r0, [pc, #44]	; (8002910 <MX_GPIO_Init+0x35c>)
 80028e2:	f001 fbdd 	bl	80040a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2105      	movs	r1, #5
 80028ea:	2017      	movs	r0, #23
 80028ec:	f001 fa60 	bl	8003db0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80028f0:	2017      	movs	r0, #23
 80028f2:	f001 fa79 	bl	8003de8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2105      	movs	r1, #5
 80028fa:	2028      	movs	r0, #40	; 0x28
 80028fc:	f001 fa58 	bl	8003db0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002900:	2028      	movs	r0, #40	; 0x28
 8002902:	f001 fa71 	bl	8003de8 <HAL_NVIC_EnableIRQ>

}
 8002906:	bf00      	nop
 8002908:	3728      	adds	r7, #40	; 0x28
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	48000400 	.word	0x48000400

08002914 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a04      	ldr	r2, [pc, #16]	; (8002934 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d101      	bne.n	800292a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002926:	f001 f947 	bl	8003bb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40014800 	.word	0x40014800

08002938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
	...

08002948 <HAL_UART_TxCpltCallback>:

extern UART_HandleTypeDef huart1;
extern SemaphoreHandle_t xSemaphore;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	static signed long xHigherPriorityTaskWoken = pdFALSE;

	xSemaphoreGiveFromISR(xSemaphore, xHigherPriorityTaskWoken);
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_UART_TxCpltCallback+0x38>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a0b      	ldr	r2, [pc, #44]	; (8002984 <HAL_UART_TxCpltCallback+0x3c>)
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	4611      	mov	r1, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f009 fc1a 	bl	800c194 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002960:	4b08      	ldr	r3, [pc, #32]	; (8002984 <HAL_UART_TxCpltCallback+0x3c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d007      	beq.n	8002978 <HAL_UART_TxCpltCallback+0x30>
 8002968:	4b07      	ldr	r3, [pc, #28]	; (8002988 <HAL_UART_TxCpltCallback+0x40>)
 800296a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	f3bf 8f4f 	dsb	sy
 8002974:	f3bf 8f6f 	isb	sy

}
 8002978:	bf00      	nop
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	20000344 	.word	0x20000344
 8002984:	2000098c 	.word	0x2000098c
 8002988:	e000ed04 	.word	0xe000ed04

0800298c <__io_putchar>:

int __io_putchar(int ch)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
	BaseType_t status = xSemaphoreTake(xSemaphore, 0xffff);
 8002994:	4b09      	ldr	r3, [pc, #36]	; (80029bc <__io_putchar+0x30>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800299c:	4618      	mov	r0, r3
 800299e:	f009 fd67 	bl	800c470 <xQueueSemaphoreTake>
 80029a2:	60f8      	str	r0, [r7, #12]

	HAL_UART_Transmit_IT(&huart1, (uint8_t*) &ch, 1);
 80029a4:	1d3b      	adds	r3, r7, #4
 80029a6:	2201      	movs	r2, #1
 80029a8:	4619      	mov	r1, r3
 80029aa:	4805      	ldr	r0, [pc, #20]	; (80029c0 <__io_putchar+0x34>)
 80029ac:	f006 f87c 	bl	8008aa8 <HAL_UART_Transmit_IT>

	//while(HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 30000))
	//{
	//	;
	//}
	return ch;
 80029b0:	687b      	ldr	r3, [r7, #4]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000344 	.word	0x20000344
 80029c0:	20000484 	.word	0x20000484

080029c4 <__io_getchar>:

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}

int __io_getchar(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	71fb      	strb	r3, [r7, #7]

	//while(HAL_OK != HAL_UART_Receive(&huart1, &ch, 1, 30000))
	//{
	//	;
	//}
	HAL_UART_Receive(&huart1, &ch, 1, 0);
 80029ce:	1df9      	adds	r1, r7, #7
 80029d0:	2300      	movs	r3, #0
 80029d2:	2201      	movs	r2, #1
 80029d4:	4803      	ldr	r0, [pc, #12]	; (80029e4 <__io_getchar+0x20>)
 80029d6:	f005 ff99 	bl	800890c <HAL_UART_Receive>

	return ch;
 80029da:	79fb      	ldrb	r3, [r7, #7]


}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	20000484 	.word	0x20000484

080029e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ee:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <HAL_MspInit+0x4c>)
 80029f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f2:	4a10      	ldr	r2, [pc, #64]	; (8002a34 <HAL_MspInit+0x4c>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	6613      	str	r3, [r2, #96]	; 0x60
 80029fa:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <HAL_MspInit+0x4c>)
 80029fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	607b      	str	r3, [r7, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a06:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <HAL_MspInit+0x4c>)
 8002a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0a:	4a0a      	ldr	r2, [pc, #40]	; (8002a34 <HAL_MspInit+0x4c>)
 8002a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a10:	6593      	str	r3, [r2, #88]	; 0x58
 8002a12:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <HAL_MspInit+0x4c>)
 8002a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	210f      	movs	r1, #15
 8002a22:	f06f 0001 	mvn.w	r0, #1
 8002a26:	f001 f9c3 	bl	8003db0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40021000 	.word	0x40021000

08002a38 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08a      	sub	sp, #40	; 0x28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a40:	f107 0314 	add.w	r3, r7, #20
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
 8002a4e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8002a50:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d128      	bne.n	8002aaa <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002a58:	4b17      	ldr	r3, [pc, #92]	; (8002ab8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8002a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a5c:	4a16      	ldr	r2, [pc, #88]	; (8002ab8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8002a5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a62:	6613      	str	r3, [r2, #96]	; 0x60
 8002a64:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8002a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8002a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a74:	4a10      	ldr	r2, [pc, #64]	; (8002ab8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8002a76:	f043 0310 	orr.w	r3, r3, #16
 8002a7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a7c:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8002a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a80:	f003 0310 	and.w	r3, r3, #16
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8002a88:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a96:	2300      	movs	r3, #0
 8002a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002a9a:	2306      	movs	r3, #6
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a9e:	f107 0314 	add.w	r3, r7, #20
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4805      	ldr	r0, [pc, #20]	; (8002abc <HAL_DFSDM_ChannelMspInit+0x84>)
 8002aa6:	f001 fafb 	bl	80040a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8002aaa:	bf00      	nop
 8002aac:	3728      	adds	r7, #40	; 0x28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000990 	.word	0x20000990
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	48001000 	.word	0x48001000

08002ac0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08a      	sub	sp, #40	; 0x28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac8:	f107 0314 	add.w	r3, r7, #20
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	60da      	str	r2, [r3, #12]
 8002ad6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a17      	ldr	r2, [pc, #92]	; (8002b3c <HAL_I2C_MspInit+0x7c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d128      	bne.n	8002b34 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae2:	4b17      	ldr	r3, [pc, #92]	; (8002b40 <HAL_I2C_MspInit+0x80>)
 8002ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae6:	4a16      	ldr	r2, [pc, #88]	; (8002b40 <HAL_I2C_MspInit+0x80>)
 8002ae8:	f043 0302 	orr.w	r3, r3, #2
 8002aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aee:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <HAL_I2C_MspInit+0x80>)
 8002af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002afa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b00:	2312      	movs	r3, #18
 8002b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b04:	2301      	movs	r3, #1
 8002b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b0c:	2304      	movs	r3, #4
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b10:	f107 0314 	add.w	r3, r7, #20
 8002b14:	4619      	mov	r1, r3
 8002b16:	480b      	ldr	r0, [pc, #44]	; (8002b44 <HAL_I2C_MspInit+0x84>)
 8002b18:	f001 fac2 	bl	80040a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b1c:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <HAL_I2C_MspInit+0x80>)
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b20:	4a07      	ldr	r2, [pc, #28]	; (8002b40 <HAL_I2C_MspInit+0x80>)
 8002b22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b26:	6593      	str	r3, [r2, #88]	; 0x58
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <HAL_I2C_MspInit+0x80>)
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002b34:	bf00      	nop
 8002b36:	3728      	adds	r7, #40	; 0x28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40005800 	.word	0x40005800
 8002b40:	40021000 	.word	0x40021000
 8002b44:	48000400 	.word	0x48000400

08002b48 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a0b      	ldr	r2, [pc, #44]	; (8002b84 <HAL_I2C_MspDeInit+0x3c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d10f      	bne.n	8002b7a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_I2C_MspDeInit+0x40>)
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5e:	4a0a      	ldr	r2, [pc, #40]	; (8002b88 <HAL_I2C_MspDeInit+0x40>)
 8002b60:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002b64:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8002b66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b6a:	4808      	ldr	r0, [pc, #32]	; (8002b8c <HAL_I2C_MspDeInit+0x44>)
 8002b6c:	f001 fc42 	bl	80043f4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8002b70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b74:	4805      	ldr	r0, [pc, #20]	; (8002b8c <HAL_I2C_MspDeInit+0x44>)
 8002b76:	f001 fc3d 	bl	80043f4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40005800 	.word	0x40005800
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	48000400 	.word	0x48000400

08002b90 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08a      	sub	sp, #40	; 0x28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	60da      	str	r2, [r3, #12]
 8002ba6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a17      	ldr	r2, [pc, #92]	; (8002c0c <HAL_QSPI_MspInit+0x7c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d128      	bne.n	8002c04 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002bb2:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <HAL_QSPI_MspInit+0x80>)
 8002bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb6:	4a16      	ldr	r2, [pc, #88]	; (8002c10 <HAL_QSPI_MspInit+0x80>)
 8002bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bbc:	6513      	str	r3, [r2, #80]	; 0x50
 8002bbe:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <HAL_QSPI_MspInit+0x80>)
 8002bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bca:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <HAL_QSPI_MspInit+0x80>)
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bce:	4a10      	ldr	r2, [pc, #64]	; (8002c10 <HAL_QSPI_MspInit+0x80>)
 8002bd0:	f043 0310 	orr.w	r3, r3, #16
 8002bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <HAL_QSPI_MspInit+0x80>)
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8002be2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002be6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be8:	2302      	movs	r3, #2
 8002bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002bf4:	230a      	movs	r3, #10
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bf8:	f107 0314 	add.w	r3, r7, #20
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4805      	ldr	r0, [pc, #20]	; (8002c14 <HAL_QSPI_MspInit+0x84>)
 8002c00:	f001 fa4e 	bl	80040a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002c04:	bf00      	nop
 8002c06:	3728      	adds	r7, #40	; 0x28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	a0001000 	.word	0xa0001000
 8002c10:	40021000 	.word	0x40021000
 8002c14:	48001000 	.word	0x48001000

08002c18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	; 0x28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c20:	f107 0314 	add.w	r3, r7, #20
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	60da      	str	r2, [r3, #12]
 8002c2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a17      	ldr	r2, [pc, #92]	; (8002c94 <HAL_SPI_MspInit+0x7c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d128      	bne.n	8002c8c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002c3a:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <HAL_SPI_MspInit+0x80>)
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3e:	4a16      	ldr	r2, [pc, #88]	; (8002c98 <HAL_SPI_MspInit+0x80>)
 8002c40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c44:	6593      	str	r3, [r2, #88]	; 0x58
 8002c46:	4b14      	ldr	r3, [pc, #80]	; (8002c98 <HAL_SPI_MspInit+0x80>)
 8002c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c4e:	613b      	str	r3, [r7, #16]
 8002c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c52:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <HAL_SPI_MspInit+0x80>)
 8002c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c56:	4a10      	ldr	r2, [pc, #64]	; (8002c98 <HAL_SPI_MspInit+0x80>)
 8002c58:	f043 0304 	orr.w	r3, r3, #4
 8002c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c5e:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <HAL_SPI_MspInit+0x80>)
 8002c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002c6a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c70:	2302      	movs	r3, #2
 8002c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c7c:	2306      	movs	r3, #6
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c80:	f107 0314 	add.w	r3, r7, #20
 8002c84:	4619      	mov	r1, r3
 8002c86:	4805      	ldr	r0, [pc, #20]	; (8002c9c <HAL_SPI_MspInit+0x84>)
 8002c88:	f001 fa0a 	bl	80040a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002c8c:	bf00      	nop
 8002c8e:	3728      	adds	r7, #40	; 0x28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40003c00 	.word	0x40003c00
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	48000800 	.word	0x48000800

08002ca0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a08      	ldr	r2, [pc, #32]	; (8002cd0 <HAL_SPI_MspDeInit+0x30>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d10a      	bne.n	8002cc8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8002cb2:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <HAL_SPI_MspDeInit+0x34>)
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb6:	4a07      	ldr	r2, [pc, #28]	; (8002cd4 <HAL_SPI_MspDeInit+0x34>)
 8002cb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002cbc:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8002cbe:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002cc2:	4805      	ldr	r0, [pc, #20]	; (8002cd8 <HAL_SPI_MspDeInit+0x38>)
 8002cc4:	f001 fb96 	bl	80043f4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8002cc8:	bf00      	nop
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40003c00 	.word	0x40003c00
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	48000800 	.word	0x48000800

08002cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08c      	sub	sp, #48	; 0x30
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce4:	f107 031c 	add.w	r3, r7, #28
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	60da      	str	r2, [r3, #12]
 8002cf2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a32      	ldr	r2, [pc, #200]	; (8002dc4 <HAL_UART_MspInit+0xe8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d130      	bne.n	8002d60 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cfe:	4b32      	ldr	r3, [pc, #200]	; (8002dc8 <HAL_UART_MspInit+0xec>)
 8002d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d02:	4a31      	ldr	r2, [pc, #196]	; (8002dc8 <HAL_UART_MspInit+0xec>)
 8002d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d08:	6613      	str	r3, [r2, #96]	; 0x60
 8002d0a:	4b2f      	ldr	r3, [pc, #188]	; (8002dc8 <HAL_UART_MspInit+0xec>)
 8002d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d12:	61bb      	str	r3, [r7, #24]
 8002d14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d16:	4b2c      	ldr	r3, [pc, #176]	; (8002dc8 <HAL_UART_MspInit+0xec>)
 8002d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1a:	4a2b      	ldr	r2, [pc, #172]	; (8002dc8 <HAL_UART_MspInit+0xec>)
 8002d1c:	f043 0302 	orr.w	r3, r3, #2
 8002d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d22:	4b29      	ldr	r3, [pc, #164]	; (8002dc8 <HAL_UART_MspInit+0xec>)
 8002d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002d2e:	23c0      	movs	r3, #192	; 0xc0
 8002d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d32:	2302      	movs	r3, #2
 8002d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d3e:	2307      	movs	r3, #7
 8002d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d42:	f107 031c 	add.w	r3, r7, #28
 8002d46:	4619      	mov	r1, r3
 8002d48:	4820      	ldr	r0, [pc, #128]	; (8002dcc <HAL_UART_MspInit+0xf0>)
 8002d4a:	f001 f9a9 	bl	80040a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2105      	movs	r1, #5
 8002d52:	2025      	movs	r0, #37	; 0x25
 8002d54:	f001 f82c 	bl	8003db0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d58:	2025      	movs	r0, #37	; 0x25
 8002d5a:	f001 f845 	bl	8003de8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d5e:	e02d      	b.n	8002dbc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a1a      	ldr	r2, [pc, #104]	; (8002dd0 <HAL_UART_MspInit+0xf4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d128      	bne.n	8002dbc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d6a:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <HAL_UART_MspInit+0xec>)
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6e:	4a16      	ldr	r2, [pc, #88]	; (8002dc8 <HAL_UART_MspInit+0xec>)
 8002d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d74:	6593      	str	r3, [r2, #88]	; 0x58
 8002d76:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <HAL_UART_MspInit+0xec>)
 8002d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <HAL_UART_MspInit+0xec>)
 8002d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d86:	4a10      	ldr	r2, [pc, #64]	; (8002dc8 <HAL_UART_MspInit+0xec>)
 8002d88:	f043 0308 	orr.w	r3, r3, #8
 8002d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <HAL_UART_MspInit+0xec>)
 8002d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002d9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da0:	2302      	movs	r3, #2
 8002da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da8:	2303      	movs	r3, #3
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002dac:	2307      	movs	r3, #7
 8002dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002db0:	f107 031c 	add.w	r3, r7, #28
 8002db4:	4619      	mov	r1, r3
 8002db6:	4807      	ldr	r0, [pc, #28]	; (8002dd4 <HAL_UART_MspInit+0xf8>)
 8002db8:	f001 f972 	bl	80040a0 <HAL_GPIO_Init>
}
 8002dbc:	bf00      	nop
 8002dbe:	3730      	adds	r7, #48	; 0x30
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40013800 	.word	0x40013800
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	48000400 	.word	0x48000400
 8002dd0:	40004800 	.word	0x40004800
 8002dd4:	48000c00 	.word	0x48000c00

08002dd8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08a      	sub	sp, #40	; 0x28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de0:	f107 0314 	add.w	r3, r7, #20
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	60da      	str	r2, [r3, #12]
 8002dee:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002df8:	d154      	bne.n	8002ea4 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dfa:	4b2c      	ldr	r3, [pc, #176]	; (8002eac <HAL_PCD_MspInit+0xd4>)
 8002dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfe:	4a2b      	ldr	r2, [pc, #172]	; (8002eac <HAL_PCD_MspInit+0xd4>)
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e06:	4b29      	ldr	r3, [pc, #164]	; (8002eac <HAL_PCD_MspInit+0xd4>)
 8002e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002e12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002e20:	f107 0314 	add.w	r3, r7, #20
 8002e24:	4619      	mov	r1, r3
 8002e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e2a:	f001 f939 	bl	80040a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002e2e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e34:	2302      	movs	r3, #2
 8002e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002e40:	230a      	movs	r3, #10
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	4619      	mov	r1, r3
 8002e4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e4e:	f001 f927 	bl	80040a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002e52:	4b16      	ldr	r3, [pc, #88]	; (8002eac <HAL_PCD_MspInit+0xd4>)
 8002e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e56:	4a15      	ldr	r2, [pc, #84]	; (8002eac <HAL_PCD_MspInit+0xd4>)
 8002e58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e5e:	4b13      	ldr	r3, [pc, #76]	; (8002eac <HAL_PCD_MspInit+0xd4>)
 8002e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e6a:	4b10      	ldr	r3, [pc, #64]	; (8002eac <HAL_PCD_MspInit+0xd4>)
 8002e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d114      	bne.n	8002ea0 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e76:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <HAL_PCD_MspInit+0xd4>)
 8002e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7a:	4a0c      	ldr	r2, [pc, #48]	; (8002eac <HAL_PCD_MspInit+0xd4>)
 8002e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e80:	6593      	str	r3, [r2, #88]	; 0x58
 8002e82:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <HAL_PCD_MspInit+0xd4>)
 8002e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	60bb      	str	r3, [r7, #8]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002e8e:	f002 fb49 	bl	8005524 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e92:	4b06      	ldr	r3, [pc, #24]	; (8002eac <HAL_PCD_MspInit+0xd4>)
 8002e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e96:	4a05      	ldr	r2, [pc, #20]	; (8002eac <HAL_PCD_MspInit+0xd4>)
 8002e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002e9e:	e001      	b.n	8002ea4 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8002ea0:	f002 fb40 	bl	8005524 <HAL_PWREx_EnableVddUSB>
}
 8002ea4:	bf00      	nop
 8002ea6:	3728      	adds	r7, #40	; 0x28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40021000 	.word	0x40021000

08002eb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08c      	sub	sp, #48	; 0x30
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	201a      	movs	r0, #26
 8002ec6:	f000 ff73 	bl	8003db0 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002eca:	201a      	movs	r0, #26
 8002ecc:	f000 ff8c 	bl	8003de8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8002ed0:	4b1e      	ldr	r3, [pc, #120]	; (8002f4c <HAL_InitTick+0x9c>)
 8002ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed4:	4a1d      	ldr	r2, [pc, #116]	; (8002f4c <HAL_InitTick+0x9c>)
 8002ed6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eda:	6613      	str	r3, [r2, #96]	; 0x60
 8002edc:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <HAL_InitTick+0x9c>)
 8002ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ee8:	f107 0210 	add.w	r2, r7, #16
 8002eec:	f107 0314 	add.w	r3, r7, #20
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f003 f970 	bl	80061d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002ef8:	f003 f958 	bl	80061ac <HAL_RCC_GetPCLK2Freq>
 8002efc:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	4a13      	ldr	r2, [pc, #76]	; (8002f50 <HAL_InitTick+0xa0>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	0c9b      	lsrs	r3, r3, #18
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8002f0c:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <HAL_InitTick+0xa4>)
 8002f0e:	4a12      	ldr	r2, [pc, #72]	; (8002f58 <HAL_InitTick+0xa8>)
 8002f10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000 / 1000) - 1;
 8002f12:	4b10      	ldr	r3, [pc, #64]	; (8002f54 <HAL_InitTick+0xa4>)
 8002f14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f18:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8002f1a:	4a0e      	ldr	r2, [pc, #56]	; (8002f54 <HAL_InitTick+0xa4>)
 8002f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1e:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8002f20:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <HAL_InitTick+0xa4>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f26:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_InitTick+0xa4>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8002f2c:	4809      	ldr	r0, [pc, #36]	; (8002f54 <HAL_InitTick+0xa4>)
 8002f2e:	f005 f9ce 	bl	80082ce <HAL_TIM_Base_Init>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d104      	bne.n	8002f42 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8002f38:	4806      	ldr	r0, [pc, #24]	; (8002f54 <HAL_InitTick+0xa4>)
 8002f3a:	f005 fa29 	bl	8008390 <HAL_TIM_Base_Start_IT>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	e000      	b.n	8002f44 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3730      	adds	r7, #48	; 0x30
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	431bde83 	.word	0x431bde83
 8002f54:	20000994 	.word	0x20000994
 8002f58:	40014800 	.word	0x40014800

08002f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f60:	bf00      	nop
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f6e:	e7fe      	b.n	8002f6e <HardFault_Handler+0x4>

08002f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f74:	e7fe      	b.n	8002f74 <MemManage_Handler+0x4>

08002f76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f76:	b480      	push	{r7}
 8002f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f7a:	e7fe      	b.n	8002f7a <BusFault_Handler+0x4>

08002f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f80:	e7fe      	b.n	8002f80 <UsageFault_Handler+0x4>

08002f82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f82:	b480      	push	{r7}
 8002f84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f86:	bf00      	nop
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002f94:	2020      	movs	r0, #32
 8002f96:	f001 fb51 	bl	800463c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002f9a:	2040      	movs	r0, #64	; 0x40
 8002f9c:	f001 fb4e 	bl	800463c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002fa0:	2080      	movs	r0, #128	; 0x80
 8002fa2:	f001 fb4b 	bl	800463c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002fa6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002faa:	f001 fb47 	bl	800463c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002fae:	bf00      	nop
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002fb8:	4802      	ldr	r0, [pc, #8]	; (8002fc4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8002fba:	f005 fa59 	bl	8008470 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002fbe:	bf00      	nop
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000994 	.word	0x20000994

08002fc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002fcc:	4802      	ldr	r0, [pc, #8]	; (8002fd8 <USART1_IRQHandler+0x10>)
 8002fce:	f005 fdc7 	bl	8008b60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002fd2:	bf00      	nop
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000484 	.word	0x20000484

08002fdc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002fe0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002fe4:	f001 fb2a 	bl	800463c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002fe8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002fec:	f001 fb26 	bl	800463c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002ff0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002ff4:	f001 fb22 	bl	800463c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002ff8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ffc:	f001 fb1e 	bl	800463c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003000:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003004:	f001 fb1a 	bl	800463c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003008:	bf00      	nop
 800300a:	bd80      	pop	{r7, pc}

0800300c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
	return 1;
 8003010:	2301      	movs	r3, #1
}
 8003012:	4618      	mov	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <_kill>:

int _kill(int pid, int sig)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003026:	f00c fc87 	bl	800f938 <__errno>
 800302a:	4603      	mov	r3, r0
 800302c:	2216      	movs	r2, #22
 800302e:	601a      	str	r2, [r3, #0]
	return -1;
 8003030:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <_exit>:

void _exit (int status)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003044:	f04f 31ff 	mov.w	r1, #4294967295
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff ffe7 	bl	800301c <_kill>
	while (1) {}		/* Make sure we hang here */
 800304e:	e7fe      	b.n	800304e <_exit+0x12>

08003050 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	e00a      	b.n	8003078 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003062:	f7ff fcaf 	bl	80029c4 <__io_getchar>
 8003066:	4601      	mov	r1, r0
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	60ba      	str	r2, [r7, #8]
 800306e:	b2ca      	uxtb	r2, r1
 8003070:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	3301      	adds	r3, #1
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	429a      	cmp	r2, r3
 800307e:	dbf0      	blt.n	8003062 <_read+0x12>
	}

return len;
 8003080:	687b      	ldr	r3, [r7, #4]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b086      	sub	sp, #24
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	e009      	b.n	80030b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	60ba      	str	r2, [r7, #8]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff fc71 	bl	800298c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	3301      	adds	r3, #1
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	dbf1      	blt.n	800309c <_write+0x12>
	}
	return len;
 80030b8:	687b      	ldr	r3, [r7, #4]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <_close>:

int _close(int file)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
	return -1;
 80030ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030ea:	605a      	str	r2, [r3, #4]
	return 0;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <_isatty>:

int _isatty(int file)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
	return 1;
 8003102:	2301      	movs	r3, #1
}
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
	return 0;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003134:	4a14      	ldr	r2, [pc, #80]	; (8003188 <_sbrk+0x5c>)
 8003136:	4b15      	ldr	r3, [pc, #84]	; (800318c <_sbrk+0x60>)
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003140:	4b13      	ldr	r3, [pc, #76]	; (8003190 <_sbrk+0x64>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d102      	bne.n	800314e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003148:	4b11      	ldr	r3, [pc, #68]	; (8003190 <_sbrk+0x64>)
 800314a:	4a12      	ldr	r2, [pc, #72]	; (8003194 <_sbrk+0x68>)
 800314c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <_sbrk+0x64>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	429a      	cmp	r2, r3
 800315a:	d207      	bcs.n	800316c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800315c:	f00c fbec 	bl	800f938 <__errno>
 8003160:	4603      	mov	r3, r0
 8003162:	220c      	movs	r2, #12
 8003164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003166:	f04f 33ff 	mov.w	r3, #4294967295
 800316a:	e009      	b.n	8003180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800316c:	4b08      	ldr	r3, [pc, #32]	; (8003190 <_sbrk+0x64>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003172:	4b07      	ldr	r3, [pc, #28]	; (8003190 <_sbrk+0x64>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4413      	add	r3, r2
 800317a:	4a05      	ldr	r2, [pc, #20]	; (8003190 <_sbrk+0x64>)
 800317c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800317e:	68fb      	ldr	r3, [r7, #12]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20018000 	.word	0x20018000
 800318c:	00000400 	.word	0x00000400
 8003190:	200009e0 	.word	0x200009e0
 8003194:	200035d8 	.word	0x200035d8

08003198 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800319c:	4b17      	ldr	r3, [pc, #92]	; (80031fc <SystemInit+0x64>)
 800319e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a2:	4a16      	ldr	r2, [pc, #88]	; (80031fc <SystemInit+0x64>)
 80031a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80031ac:	4b14      	ldr	r3, [pc, #80]	; (8003200 <SystemInit+0x68>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a13      	ldr	r2, [pc, #76]	; (8003200 <SystemInit+0x68>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80031b8:	4b11      	ldr	r3, [pc, #68]	; (8003200 <SystemInit+0x68>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80031be:	4b10      	ldr	r3, [pc, #64]	; (8003200 <SystemInit+0x68>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a0f      	ldr	r2, [pc, #60]	; (8003200 <SystemInit+0x68>)
 80031c4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80031c8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80031cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80031ce:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <SystemInit+0x68>)
 80031d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031d4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80031d6:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <SystemInit+0x68>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a09      	ldr	r2, [pc, #36]	; (8003200 <SystemInit+0x68>)
 80031dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80031e2:	4b07      	ldr	r3, [pc, #28]	; (8003200 <SystemInit+0x68>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031e8:	4b04      	ldr	r3, [pc, #16]	; (80031fc <SystemInit+0x64>)
 80031ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031ee:	609a      	str	r2, [r3, #8]
#endif
}
 80031f0:	bf00      	nop
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	e000ed00 	.word	0xe000ed00
 8003200:	40021000 	.word	0x40021000

08003204 <wifi_start>:




static int wifi_start(void)
{
 8003204:	b5b0      	push	{r4, r5, r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];

 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 800320a:	f008 fa29 	bl	800b660 <WIFI_Init>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d123      	bne.n	800325c <wifi_start+0x58>
  {
    LOG(("ES-WIFI Initialized.\n"));
 8003214:	4814      	ldr	r0, [pc, #80]	; (8003268 <wifi_start+0x64>)
 8003216:	f00c f987 	bl	800f528 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 800321a:	463b      	mov	r3, r7
 800321c:	4618      	mov	r0, r3
 800321e:	f008 fa6d 	bl	800b6fc <WIFI_GetMAC_Address>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d113      	bne.n	8003250 <wifi_start+0x4c>
    {
      LOG(("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 8003228:	783b      	ldrb	r3, [r7, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	787b      	ldrb	r3, [r7, #1]
 800322e:	461c      	mov	r4, r3
 8003230:	78bb      	ldrb	r3, [r7, #2]
 8003232:	461d      	mov	r5, r3
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	793a      	ldrb	r2, [r7, #4]
 8003238:	7979      	ldrb	r1, [r7, #5]
 800323a:	9102      	str	r1, [sp, #8]
 800323c:	9201      	str	r2, [sp, #4]
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	462b      	mov	r3, r5
 8003242:	4622      	mov	r2, r4
 8003244:	4601      	mov	r1, r0
 8003246:	4809      	ldr	r0, [pc, #36]	; (800326c <wifi_start+0x68>)
 8003248:	f00c f908 	bl	800f45c <iprintf>
  }
  else
  {
    return -1;
  }
  return 0;
 800324c:	2300      	movs	r3, #0
 800324e:	e007      	b.n	8003260 <wifi_start+0x5c>
      LOG(("> ERROR : CANNOT get MAC address\n"));
 8003250:	4807      	ldr	r0, [pc, #28]	; (8003270 <wifi_start+0x6c>)
 8003252:	f00c f969 	bl	800f528 <puts>
      return -1;
 8003256:	f04f 33ff 	mov.w	r3, #4294967295
 800325a:	e001      	b.n	8003260 <wifi_start+0x5c>
    return -1;
 800325c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bdb0      	pop	{r4, r5, r7, pc}
 8003268:	080119a4 	.word	0x080119a4
 800326c:	080119bc 	.word	0x080119bc
 8003270:	080119f0 	.word	0x080119f0

08003274 <wifi_connect>:



int wifi_connect(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af02      	add	r7, sp, #8

  wifi_start();
 800327a:	f7ff ffc3 	bl	8003204 <wifi_start>

  LOG(("\nConnecting to %s , %s\n",SSID,PASSWORD));
 800327e:	4a19      	ldr	r2, [pc, #100]	; (80032e4 <wifi_connect+0x70>)
 8003280:	4919      	ldr	r1, [pc, #100]	; (80032e8 <wifi_connect+0x74>)
 8003282:	481a      	ldr	r0, [pc, #104]	; (80032ec <wifi_connect+0x78>)
 8003284:	f00c f8ea 	bl	800f45c <iprintf>
  if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 8003288:	2203      	movs	r2, #3
 800328a:	4916      	ldr	r1, [pc, #88]	; (80032e4 <wifi_connect+0x70>)
 800328c:	4816      	ldr	r0, [pc, #88]	; (80032e8 <wifi_connect+0x74>)
 800328e:	f008 fa13 	bl	800b6b8 <WIFI_Connect>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d11d      	bne.n	80032d4 <wifi_connect+0x60>
  {
    if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 8003298:	4815      	ldr	r0, [pc, #84]	; (80032f0 <wifi_connect+0x7c>)
 800329a:	f008 fa45 	bl	800b728 <WIFI_GetIP_Address>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d111      	bne.n	80032c8 <wifi_connect+0x54>
    {
      LOG(("> es-wifi module connected: got IP Address : %d.%d.%d.%d\n",
 80032a4:	4b12      	ldr	r3, [pc, #72]	; (80032f0 <wifi_connect+0x7c>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	4619      	mov	r1, r3
 80032aa:	4b11      	ldr	r3, [pc, #68]	; (80032f0 <wifi_connect+0x7c>)
 80032ac:	785b      	ldrb	r3, [r3, #1]
 80032ae:	461a      	mov	r2, r3
 80032b0:	4b0f      	ldr	r3, [pc, #60]	; (80032f0 <wifi_connect+0x7c>)
 80032b2:	789b      	ldrb	r3, [r3, #2]
 80032b4:	4618      	mov	r0, r3
 80032b6:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <wifi_connect+0x7c>)
 80032b8:	78db      	ldrb	r3, [r3, #3]
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	4603      	mov	r3, r0
 80032be:	480d      	ldr	r0, [pc, #52]	; (80032f4 <wifi_connect+0x80>)
 80032c0:	f00c f8cc 	bl	800f45c <iprintf>
  else
  {
		 LOG(("ERROR : es-wifi module NOT connected\n"));
     return -1;
  }
  return 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	e00a      	b.n	80032de <wifi_connect+0x6a>
		  LOG((" ERROR : es-wifi module CANNOT get IP address\n"));
 80032c8:	480b      	ldr	r0, [pc, #44]	; (80032f8 <wifi_connect+0x84>)
 80032ca:	f00c f92d 	bl	800f528 <puts>
      return -1;
 80032ce:	f04f 33ff 	mov.w	r3, #4294967295
 80032d2:	e004      	b.n	80032de <wifi_connect+0x6a>
		 LOG(("ERROR : es-wifi module NOT connected\n"));
 80032d4:	4809      	ldr	r0, [pc, #36]	; (80032fc <wifi_connect+0x88>)
 80032d6:	f00c f927 	bl	800f528 <puts>
     return -1;
 80032da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032de:	4618      	mov	r0, r3
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	08011a14 	.word	0x08011a14
 80032e8:	08011a20 	.word	0x08011a20
 80032ec:	08011a2c 	.word	0x08011a2c
 80032f0:	20000de4 	.word	0x20000de4
 80032f4:	08011a44 	.word	0x08011a44
 80032f8:	08011a80 	.word	0x08011a80
 80032fc:	08011ab0 	.word	0x08011ab0

08003300 <wifi_server>:

int wifi_server(void)
{
 8003300:	b590      	push	{r4, r7, lr}
 8003302:	b087      	sub	sp, #28
 8003304:	af02      	add	r7, sp, #8
  bool StopServer = false;
 8003306:	2300      	movs	r3, #0
 8003308:	73fb      	strb	r3, [r7, #15]

  LOG(("\nRunning HTML Server test\n"));
 800330a:	483d      	ldr	r0, [pc, #244]	; (8003400 <wifi_server+0x100>)
 800330c:	f00c f90c 	bl	800f528 <puts>
  if (wifi_connect()!=0) return -1;
 8003310:	f7ff ffb0 	bl	8003274 <wifi_connect>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <wifi_server+0x20>
 800331a:	f04f 33ff 	mov.w	r3, #4294967295
 800331e:	e06b      	b.n	80033f8 <wifi_server+0xf8>


  if (WIFI_STATUS_OK!=WIFI_StartServer(SOCKET, WIFI_TCP_PROTOCOL, 1, "", PORT))
 8003320:	2350      	movs	r3, #80	; 0x50
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	4b37      	ldr	r3, [pc, #220]	; (8003404 <wifi_server+0x104>)
 8003326:	2201      	movs	r2, #1
 8003328:	2100      	movs	r1, #0
 800332a:	2000      	movs	r0, #0
 800332c:	f008 fa18 	bl	800b760 <WIFI_StartServer>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d002      	beq.n	800333c <wifi_server+0x3c>
  {
    LOG(("ERROR: Cannot start server.\n"));
 8003336:	4834      	ldr	r0, [pc, #208]	; (8003408 <wifi_server+0x108>)
 8003338:	f00c f8f6 	bl	800f528 <puts>
  }

  LOG(("Server is running and waiting for an HTTP  Client connection to %d.%d.%d.%d\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 800333c:	4b33      	ldr	r3, [pc, #204]	; (800340c <wifi_server+0x10c>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	4619      	mov	r1, r3
 8003342:	4b32      	ldr	r3, [pc, #200]	; (800340c <wifi_server+0x10c>)
 8003344:	785b      	ldrb	r3, [r3, #1]
 8003346:	461a      	mov	r2, r3
 8003348:	4b30      	ldr	r3, [pc, #192]	; (800340c <wifi_server+0x10c>)
 800334a:	789b      	ldrb	r3, [r3, #2]
 800334c:	4618      	mov	r0, r3
 800334e:	4b2f      	ldr	r3, [pc, #188]	; (800340c <wifi_server+0x10c>)
 8003350:	78db      	ldrb	r3, [r3, #3]
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	4603      	mov	r3, r0
 8003356:	482e      	ldr	r0, [pc, #184]	; (8003410 <wifi_server+0x110>)
 8003358:	f00c f880 	bl	800f45c <iprintf>
  {
    uint8_t RemoteIP[4];
    uint16_t RemotePort;


    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,1000,RemoteIP,&RemotePort))
 800335c:	e00f      	b.n	800337e <wifi_server+0x7e>
    {
        LOG(("Waiting connection to  %d.%d.%d.%d\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 800335e:	4b2b      	ldr	r3, [pc, #172]	; (800340c <wifi_server+0x10c>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	4619      	mov	r1, r3
 8003364:	4b29      	ldr	r3, [pc, #164]	; (800340c <wifi_server+0x10c>)
 8003366:	785b      	ldrb	r3, [r3, #1]
 8003368:	461a      	mov	r2, r3
 800336a:	4b28      	ldr	r3, [pc, #160]	; (800340c <wifi_server+0x10c>)
 800336c:	789b      	ldrb	r3, [r3, #2]
 800336e:	4618      	mov	r0, r3
 8003370:	4b26      	ldr	r3, [pc, #152]	; (800340c <wifi_server+0x10c>)
 8003372:	78db      	ldrb	r3, [r3, #3]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	4603      	mov	r3, r0
 8003378:	4826      	ldr	r0, [pc, #152]	; (8003414 <wifi_server+0x114>)
 800337a:	f00c f86f 	bl	800f45c <iprintf>
    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,1000,RemoteIP,&RemotePort))
 800337e:	1dbb      	adds	r3, r7, #6
 8003380:	f107 0208 	add.w	r2, r7, #8
 8003384:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003388:	2000      	movs	r0, #0
 800338a:	f008 fa19 	bl	800b7c0 <WIFI_WaitServerConnection>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1e4      	bne.n	800335e <wifi_server+0x5e>

    }

    LOG(("Client connected %d.%d.%d.%d:%d\n",RemoteIP[0],RemoteIP[1],RemoteIP[2],RemoteIP[3],RemotePort));
 8003394:	7a3b      	ldrb	r3, [r7, #8]
 8003396:	4619      	mov	r1, r3
 8003398:	7a7b      	ldrb	r3, [r7, #9]
 800339a:	4618      	mov	r0, r3
 800339c:	7abb      	ldrb	r3, [r7, #10]
 800339e:	461c      	mov	r4, r3
 80033a0:	7afb      	ldrb	r3, [r7, #11]
 80033a2:	88fa      	ldrh	r2, [r7, #6]
 80033a4:	9201      	str	r2, [sp, #4]
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	4623      	mov	r3, r4
 80033aa:	4602      	mov	r2, r0
 80033ac:	481a      	ldr	r0, [pc, #104]	; (8003418 <wifi_server+0x118>)
 80033ae:	f00c f855 	bl	800f45c <iprintf>

    StopServer=WebServerProcess();
 80033b2:	f000 f839 	bl	8003428 <WebServerProcess>
 80033b6:	4603      	mov	r3, r0
 80033b8:	73fb      	strb	r3, [r7, #15]

    if(WIFI_CloseServerConnection(SOCKET) != WIFI_STATUS_OK)
 80033ba:	2000      	movs	r0, #0
 80033bc:	f008 fa44 	bl	800b848 <WIFI_CloseServerConnection>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d005      	beq.n	80033d2 <wifi_server+0xd2>
    {
      LOG(("ERROR: failed to close current Server connection\n"));
 80033c6:	4815      	ldr	r0, [pc, #84]	; (800341c <wifi_server+0x11c>)
 80033c8:	f00c f8ae 	bl	800f528 <puts>
      return -1;
 80033cc:	f04f 33ff 	mov.w	r3, #4294967295
 80033d0:	e012      	b.n	80033f8 <wifi_server+0xf8>
    }
  }
  while(StopServer == false);
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	f083 0301 	eor.w	r3, r3, #1
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1cf      	bne.n	800337e <wifi_server+0x7e>

  if (WIFI_STATUS_OK!=WIFI_StopServer(SOCKET))
 80033de:	2000      	movs	r0, #0
 80033e0:	f008 fa48 	bl	800b874 <WIFI_StopServer>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <wifi_server+0xf0>
  {
    LOG(("ERROR: Cannot stop server.\n"));
 80033ea:	480d      	ldr	r0, [pc, #52]	; (8003420 <wifi_server+0x120>)
 80033ec:	f00c f89c 	bl	800f528 <puts>
  }

  LOG(("Server is stop\n"));
 80033f0:	480c      	ldr	r0, [pc, #48]	; (8003424 <wifi_server+0x124>)
 80033f2:	f00c f899 	bl	800f528 <puts>
  return 0;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd90      	pop	{r4, r7, pc}
 8003400:	08011ad8 	.word	0x08011ad8
 8003404:	08011af4 	.word	0x08011af4
 8003408:	08011af8 	.word	0x08011af8
 800340c:	20000de4 	.word	0x20000de4
 8003410:	08011b14 	.word	0x08011b14
 8003414:	08011b64 	.word	0x08011b64
 8003418:	08011b88 	.word	0x08011b88
 800341c:	08011bac 	.word	0x08011bac
 8003420:	08011be0 	.word	0x08011be0
 8003424:	08011bfc 	.word	0x08011bfc

08003428 <WebServerProcess>:


static bool WebServerProcess(void)
{
 8003428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800342a:	b09f      	sub	sp, #124	; 0x7c
 800342c:	af08      	add	r7, sp, #32
	uint8_t LedState = 1;
 800342e:	2301      	movs	r3, #1
 8003430:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    struct SensorData datosRecibidos;
	    uint16_t respLen;
	    static uint8_t resp[1024];
	    bool stopserver = false;
 8003434:	2300      	movs	r3, #0
 8003436:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	    if (WIFI_STATUS_OK == WIFI_ReceiveData(SOCKET, resp, 1000, &respLen, WIFI_READ_TIMEOUT)) {
 800343a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800343e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003442:	9200      	str	r2, [sp, #0]
 8003444:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003448:	495c      	ldr	r1, [pc, #368]	; (80035bc <WebServerProcess+0x194>)
 800344a:	2000      	movs	r0, #0
 800344c:	f008 fa4c 	bl	800b8e8 <WIFI_ReceiveData>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	f040 80a8 	bne.w	80035a8 <WebServerProcess+0x180>
	        LOG(("get %d bytes from server\n", respLen));
 8003458:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800345a:	4619      	mov	r1, r3
 800345c:	4858      	ldr	r0, [pc, #352]	; (80035c0 <WebServerProcess+0x198>)
 800345e:	f00b fffd 	bl	800f45c <iprintf>

	        if (respLen > 0) {
 8003462:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 80a2 	beq.w	80035ae <WebServerProcess+0x186>
	            if (strstr((char *)resp, "GET")) { /* GET: send JSON data */
 800346a:	4956      	ldr	r1, [pc, #344]	; (80035c4 <WebServerProcess+0x19c>)
 800346c:	4853      	ldr	r0, [pc, #332]	; (80035bc <WebServerProcess+0x194>)
 800346e:	f00c fa03 	bl	800f878 <strstr>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d020      	beq.n	80034ba <WebServerProcess+0x92>
	                datosRecibidos = GetSensores();
 8003478:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800347c:	4618      	mov	r0, r3
 800347e:	f7fe fe45 	bl	800210c <GetSensores>

	                // Generar y enviar JSON
	                if (SendWebPage(LedState, datosRecibidos) != WIFI_STATUS_OK) {
 8003482:	f897 6057 	ldrb.w	r6, [r7, #87]	; 0x57
 8003486:	466d      	mov	r5, sp
 8003488:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800348c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800348e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003490:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003494:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003498:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800349c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800349e:	4630      	mov	r0, r6
 80034a0:	f000 f8aa 	bl	80035f8 <SendWebPage>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <WebServerProcess+0x8a>
	                    LOG(("> ERROR: Cannot send JSON response\n"));
 80034aa:	4847      	ldr	r0, [pc, #284]	; (80035c8 <WebServerProcess+0x1a0>)
 80034ac:	f00c f83c 	bl	800f528 <puts>
 80034b0:	e07d      	b.n	80035ae <WebServerProcess+0x186>
	                }
	                else {
	                    LOG(("Sent JSON response after GET command\n"));
 80034b2:	4846      	ldr	r0, [pc, #280]	; (80035cc <WebServerProcess+0x1a4>)
 80034b4:	f00c f838 	bl	800f528 <puts>
 80034b8:	e079      	b.n	80035ae <WebServerProcess+0x186>
	                }
	            } else if (strstr((char *)resp, "POST")) { /* POST: process received info */
 80034ba:	4945      	ldr	r1, [pc, #276]	; (80035d0 <WebServerProcess+0x1a8>)
 80034bc:	483f      	ldr	r0, [pc, #252]	; (80035bc <WebServerProcess+0x194>)
 80034be:	f00c f9db 	bl	800f878 <strstr>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d072      	beq.n	80035ae <WebServerProcess+0x186>
	                LOG(("Post request\n"));
 80034c8:	4842      	ldr	r0, [pc, #264]	; (80035d4 <WebServerProcess+0x1ac>)
 80034ca:	f00c f82d 	bl	800f528 <puts>

	                if (strstr((char *)resp, "radio")) {
 80034ce:	4942      	ldr	r1, [pc, #264]	; (80035d8 <WebServerProcess+0x1b0>)
 80034d0:	483a      	ldr	r0, [pc, #232]	; (80035bc <WebServerProcess+0x194>)
 80034d2:	f00c f9d1 	bl	800f878 <strstr>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d01e      	beq.n	800351a <WebServerProcess+0xf2>
	                    if (strstr((char *)resp, "radio=0")) {
 80034dc:	493f      	ldr	r1, [pc, #252]	; (80035dc <WebServerProcess+0x1b4>)
 80034de:	4837      	ldr	r0, [pc, #220]	; (80035bc <WebServerProcess+0x194>)
 80034e0:	f00c f9ca 	bl	800f878 <strstr>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d008      	beq.n	80034fc <WebServerProcess+0xd4>
	                        LedState = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	                        EncolarLED(LedState);
 80034f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fe fdf5 	bl	80020e4 <EncolarLED>
 80034fa:	e00e      	b.n	800351a <WebServerProcess+0xf2>
	                    } else if (strstr((char *)resp, "radio=1")) {
 80034fc:	4938      	ldr	r1, [pc, #224]	; (80035e0 <WebServerProcess+0x1b8>)
 80034fe:	482f      	ldr	r0, [pc, #188]	; (80035bc <WebServerProcess+0x194>)
 8003500:	f00c f9ba 	bl	800f878 <strstr>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d007      	beq.n	800351a <WebServerProcess+0xf2>
	                        LedState = 1;
 800350a:	2301      	movs	r3, #1
 800350c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	                        EncolarLED(LedState);
 8003510:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003514:	4618      	mov	r0, r3
 8003516:	f7fe fde5 	bl	80020e4 <EncolarLED>
	                    }
	                }
	                if (strstr((char *)resp, "stop_server")) {
 800351a:	4932      	ldr	r1, [pc, #200]	; (80035e4 <WebServerProcess+0x1bc>)
 800351c:	4827      	ldr	r0, [pc, #156]	; (80035bc <WebServerProcess+0x194>)
 800351e:	f00c f9ab 	bl	800f878 <strstr>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d014      	beq.n	8003552 <WebServerProcess+0x12a>
	                    if (strstr((char *)resp, "stop_server=0")) {
 8003528:	492f      	ldr	r1, [pc, #188]	; (80035e8 <WebServerProcess+0x1c0>)
 800352a:	4824      	ldr	r0, [pc, #144]	; (80035bc <WebServerProcess+0x194>)
 800352c:	f00c f9a4 	bl	800f878 <strstr>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <WebServerProcess+0x116>
	                        stopserver = false;
 8003536:	2300      	movs	r3, #0
 8003538:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 800353c:	e009      	b.n	8003552 <WebServerProcess+0x12a>
	                    } else if (strstr((char *)resp, "stop_server=1")) {
 800353e:	492b      	ldr	r1, [pc, #172]	; (80035ec <WebServerProcess+0x1c4>)
 8003540:	481e      	ldr	r0, [pc, #120]	; (80035bc <WebServerProcess+0x194>)
 8003542:	f00c f999 	bl	800f878 <strstr>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <WebServerProcess+0x12a>
	                        stopserver = true;
 800354c:	2301      	movs	r3, #1
 800354e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	                    }
	                }

	                datosRecibidos = GetSensores();
 8003552:	463b      	mov	r3, r7
 8003554:	4618      	mov	r0, r3
 8003556:	f7fe fdd9 	bl	800210c <GetSensores>
 800355a:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800355e:	463d      	mov	r5, r7
 8003560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003568:	e895 0003 	ldmia.w	r5, {r0, r1}
 800356c:	e884 0003 	stmia.w	r4, {r0, r1}

	                // Generar y enviar JSON
	                if (SendWebPage(LedState, datosRecibidos) != WIFI_STATUS_OK) {
 8003570:	f897 6057 	ldrb.w	r6, [r7, #87]	; 0x57
 8003574:	466d      	mov	r5, sp
 8003576:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800357a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800357c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800357e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003582:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003586:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800358a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800358c:	4630      	mov	r0, r6
 800358e:	f000 f833 	bl	80035f8 <SendWebPage>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <WebServerProcess+0x178>
	                    LOG(("> ERROR: Cannot send JSON response\n"));
 8003598:	480b      	ldr	r0, [pc, #44]	; (80035c8 <WebServerProcess+0x1a0>)
 800359a:	f00b ffc5 	bl	800f528 <puts>
 800359e:	e006      	b.n	80035ae <WebServerProcess+0x186>
	                }
	                else {
	                    LOG(("Sent JSON response after POST command\n"));
 80035a0:	4813      	ldr	r0, [pc, #76]	; (80035f0 <WebServerProcess+0x1c8>)
 80035a2:	f00b ffc1 	bl	800f528 <puts>
 80035a6:	e002      	b.n	80035ae <WebServerProcess+0x186>
	                }
	            }
	        }
	    }
	    else LOG(("Client closed connection\n"));
 80035a8:	4812      	ldr	r0, [pc, #72]	; (80035f4 <WebServerProcess+0x1cc>)
 80035aa:	f00b ffbd 	bl	800f528 <puts>
	    return stopserver;
 80035ae:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56

 }
 80035b2:	4618      	mov	r0, r3
 80035b4:	375c      	adds	r7, #92	; 0x5c
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035ba:	bf00      	nop
 80035bc:	20000de8 	.word	0x20000de8
 80035c0:	08011c0c 	.word	0x08011c0c
 80035c4:	08011c28 	.word	0x08011c28
 80035c8:	08011c2c 	.word	0x08011c2c
 80035cc:	08011c50 	.word	0x08011c50
 80035d0:	08011c78 	.word	0x08011c78
 80035d4:	08011c80 	.word	0x08011c80
 80035d8:	08011c90 	.word	0x08011c90
 80035dc:	08011c98 	.word	0x08011c98
 80035e0:	08011ca0 	.word	0x08011ca0
 80035e4:	08011ca8 	.word	0x08011ca8
 80035e8:	08011cb4 	.word	0x08011cb4
 80035ec:	08011cc4 	.word	0x08011cc4
 80035f0:	08011cd4 	.word	0x08011cd4
 80035f4:	08011cfc 	.word	0x08011cfc

080035f8 <SendWebPage>:
  * @brief  Send HTML page
  * @param  None
  * @retval None
  */
static WIFI_Status_t SendWebPage(uint8_t ledIsOn, struct SensorData dim)
{
 80035f8:	b084      	sub	sp, #16
 80035fa:	b5b0      	push	{r4, r5, r7, lr}
 80035fc:	b092      	sub	sp, #72	; 0x48
 80035fe:	af02      	add	r7, sp, #8
 8003600:	4604      	mov	r4, r0
 8003602:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8003606:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800360a:	4623      	mov	r3, r4
 800360c:	71fb      	strb	r3, [r7, #7]

	  uint16_t SentDataLength;
	  WIFI_Status_t ret;

	  /* Construct web page content */
	  strcpy((char *)http, (char *)"HTTP/1.0 200 OK\r\nContent-Type: application/json\r\nPragma: no-cache\r\n\r\n");
 800360e:	4ace      	ldr	r2, [pc, #824]	; (8003948 <SendWebPage+0x350>)
 8003610:	4bce      	ldr	r3, [pc, #824]	; (800394c <SendWebPage+0x354>)
 8003612:	4610      	mov	r0, r2
 8003614:	4619      	mov	r1, r3
 8003616:	2346      	movs	r3, #70	; 0x46
 8003618:	461a      	mov	r2, r3
 800361a:	f00c f9ba 	bl	800f992 <memcpy>
	  strcat((char *)http, (char *)"{");
 800361e:	48ca      	ldr	r0, [pc, #808]	; (8003948 <SendWebPage+0x350>)
 8003620:	f7fc fe26 	bl	8000270 <strlen>
 8003624:	4603      	mov	r3, r0
 8003626:	461a      	mov	r2, r3
 8003628:	4bc7      	ldr	r3, [pc, #796]	; (8003948 <SendWebPage+0x350>)
 800362a:	4413      	add	r3, r2
 800362c:	49c8      	ldr	r1, [pc, #800]	; (8003950 <SendWebPage+0x358>)
 800362e:	461a      	mov	r2, r3
 8003630:	460b      	mov	r3, r1
 8003632:	881b      	ldrh	r3, [r3, #0]
 8003634:	8013      	strh	r3, [r2, #0]

	  strcat((char *)http, (char *)"\"Sensores\": {");
 8003636:	48c4      	ldr	r0, [pc, #784]	; (8003948 <SendWebPage+0x350>)
 8003638:	f7fc fe1a 	bl	8000270 <strlen>
 800363c:	4603      	mov	r3, r0
 800363e:	461a      	mov	r2, r3
 8003640:	4bc1      	ldr	r3, [pc, #772]	; (8003948 <SendWebPage+0x350>)
 8003642:	4413      	add	r3, r2
 8003644:	4ac3      	ldr	r2, [pc, #780]	; (8003954 <SendWebPage+0x35c>)
 8003646:	461c      	mov	r4, r3
 8003648:	4613      	mov	r3, r2
 800364a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800364c:	6020      	str	r0, [r4, #0]
 800364e:	6061      	str	r1, [r4, #4]
 8003650:	60a2      	str	r2, [r4, #8]
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	81a3      	strh	r3, [r4, #12]
	  strcat((char *)http, (char *)"\"temperature\":");
 8003656:	48bc      	ldr	r0, [pc, #752]	; (8003948 <SendWebPage+0x350>)
 8003658:	f7fc fe0a 	bl	8000270 <strlen>
 800365c:	4603      	mov	r3, r0
 800365e:	461a      	mov	r2, r3
 8003660:	4bb9      	ldr	r3, [pc, #740]	; (8003948 <SendWebPage+0x350>)
 8003662:	4413      	add	r3, r2
 8003664:	4abc      	ldr	r2, [pc, #752]	; (8003958 <SendWebPage+0x360>)
 8003666:	461c      	mov	r4, r3
 8003668:	4613      	mov	r3, r2
 800366a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800366c:	6020      	str	r0, [r4, #0]
 800366e:	6061      	str	r1, [r4, #4]
 8003670:	60a2      	str	r2, [r4, #8]
 8003672:	881a      	ldrh	r2, [r3, #0]
 8003674:	789b      	ldrb	r3, [r3, #2]
 8003676:	81a2      	strh	r2, [r4, #12]
 8003678:	73a3      	strb	r3, [r4, #14]
	  sprintf((char *)character, "%.1f", dim.temperature);
 800367a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800367c:	4618      	mov	r0, r3
 800367e:	f7fc ff63 	bl	8000548 <__aeabi_f2d>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	f107 000c 	add.w	r0, r7, #12
 800368a:	49b4      	ldr	r1, [pc, #720]	; (800395c <SendWebPage+0x364>)
 800368c:	f00b ff54 	bl	800f538 <siprintf>
	  strcat((char *)http, (char *)character);
 8003690:	f107 030c 	add.w	r3, r7, #12
 8003694:	4619      	mov	r1, r3
 8003696:	48ac      	ldr	r0, [pc, #688]	; (8003948 <SendWebPage+0x350>)
 8003698:	f00c f85e 	bl	800f758 <strcat>
	  strcat((char *)http, (char *)",\"humidity\":");
 800369c:	48aa      	ldr	r0, [pc, #680]	; (8003948 <SendWebPage+0x350>)
 800369e:	f7fc fde7 	bl	8000270 <strlen>
 80036a2:	4603      	mov	r3, r0
 80036a4:	461a      	mov	r2, r3
 80036a6:	4ba8      	ldr	r3, [pc, #672]	; (8003948 <SendWebPage+0x350>)
 80036a8:	4413      	add	r3, r2
 80036aa:	4aad      	ldr	r2, [pc, #692]	; (8003960 <SendWebPage+0x368>)
 80036ac:	461c      	mov	r4, r3
 80036ae:	4613      	mov	r3, r2
 80036b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80036b2:	6020      	str	r0, [r4, #0]
 80036b4:	6061      	str	r1, [r4, #4]
 80036b6:	60a2      	str	r2, [r4, #8]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	7323      	strb	r3, [r4, #12]
	  sprintf((char *)character, "%.1f", dim.humidity);
 80036bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fc ff42 	bl	8000548 <__aeabi_f2d>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	f107 000c 	add.w	r0, r7, #12
 80036cc:	49a3      	ldr	r1, [pc, #652]	; (800395c <SendWebPage+0x364>)
 80036ce:	f00b ff33 	bl	800f538 <siprintf>
	  strcat((char *)http, (char *)character);
 80036d2:	f107 030c 	add.w	r3, r7, #12
 80036d6:	4619      	mov	r1, r3
 80036d8:	489b      	ldr	r0, [pc, #620]	; (8003948 <SendWebPage+0x350>)
 80036da:	f00c f83d 	bl	800f758 <strcat>
	  strcat((char *)http, (char *)",\"pressure\":");
 80036de:	489a      	ldr	r0, [pc, #616]	; (8003948 <SendWebPage+0x350>)
 80036e0:	f7fc fdc6 	bl	8000270 <strlen>
 80036e4:	4603      	mov	r3, r0
 80036e6:	461a      	mov	r2, r3
 80036e8:	4b97      	ldr	r3, [pc, #604]	; (8003948 <SendWebPage+0x350>)
 80036ea:	4413      	add	r3, r2
 80036ec:	4a9d      	ldr	r2, [pc, #628]	; (8003964 <SendWebPage+0x36c>)
 80036ee:	461c      	mov	r4, r3
 80036f0:	4613      	mov	r3, r2
 80036f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80036f4:	6020      	str	r0, [r4, #0]
 80036f6:	6061      	str	r1, [r4, #4]
 80036f8:	60a2      	str	r2, [r4, #8]
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	7323      	strb	r3, [r4, #12]
	  sprintf((char *)character, "%.1f", dim.pressure);
 80036fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003700:	4618      	mov	r0, r3
 8003702:	f7fc ff21 	bl	8000548 <__aeabi_f2d>
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	f107 000c 	add.w	r0, r7, #12
 800370e:	4993      	ldr	r1, [pc, #588]	; (800395c <SendWebPage+0x364>)
 8003710:	f00b ff12 	bl	800f538 <siprintf>
	  strcat((char *)http, (char *)character);
 8003714:	f107 030c 	add.w	r3, r7, #12
 8003718:	4619      	mov	r1, r3
 800371a:	488b      	ldr	r0, [pc, #556]	; (8003948 <SendWebPage+0x350>)
 800371c:	f00c f81c 	bl	800f758 <strcat>
	  strcat((char *)http, (char *)"},");
 8003720:	4889      	ldr	r0, [pc, #548]	; (8003948 <SendWebPage+0x350>)
 8003722:	f7fc fda5 	bl	8000270 <strlen>
 8003726:	4603      	mov	r3, r0
 8003728:	461a      	mov	r2, r3
 800372a:	4b87      	ldr	r3, [pc, #540]	; (8003948 <SendWebPage+0x350>)
 800372c:	4413      	add	r3, r2
 800372e:	4a8e      	ldr	r2, [pc, #568]	; (8003968 <SendWebPage+0x370>)
 8003730:	8811      	ldrh	r1, [r2, #0]
 8003732:	7892      	ldrb	r2, [r2, #2]
 8003734:	8019      	strh	r1, [r3, #0]
 8003736:	709a      	strb	r2, [r3, #2]

	  strcat((char *)http, (char *)"\"Accelleration\": {");
 8003738:	4883      	ldr	r0, [pc, #524]	; (8003948 <SendWebPage+0x350>)
 800373a:	f7fc fd99 	bl	8000270 <strlen>
 800373e:	4603      	mov	r3, r0
 8003740:	461a      	mov	r2, r3
 8003742:	4b81      	ldr	r3, [pc, #516]	; (8003948 <SendWebPage+0x350>)
 8003744:	4413      	add	r3, r2
 8003746:	4a89      	ldr	r2, [pc, #548]	; (800396c <SendWebPage+0x374>)
 8003748:	461d      	mov	r5, r3
 800374a:	4614      	mov	r4, r2
 800374c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800374e:	6028      	str	r0, [r5, #0]
 8003750:	6069      	str	r1, [r5, #4]
 8003752:	60aa      	str	r2, [r5, #8]
 8003754:	60eb      	str	r3, [r5, #12]
 8003756:	8823      	ldrh	r3, [r4, #0]
 8003758:	78a2      	ldrb	r2, [r4, #2]
 800375a:	822b      	strh	r3, [r5, #16]
 800375c:	4613      	mov	r3, r2
 800375e:	74ab      	strb	r3, [r5, #18]
	  strcat((char *)http, (char *)"\"acc_x\":");
 8003760:	4879      	ldr	r0, [pc, #484]	; (8003948 <SendWebPage+0x350>)
 8003762:	f7fc fd85 	bl	8000270 <strlen>
 8003766:	4603      	mov	r3, r0
 8003768:	461a      	mov	r2, r3
 800376a:	4b77      	ldr	r3, [pc, #476]	; (8003948 <SendWebPage+0x350>)
 800376c:	4413      	add	r3, r2
 800376e:	4980      	ldr	r1, [pc, #512]	; (8003970 <SendWebPage+0x378>)
 8003770:	461a      	mov	r2, r3
 8003772:	460b      	mov	r3, r1
 8003774:	cb03      	ldmia	r3!, {r0, r1}
 8003776:	6010      	str	r0, [r2, #0]
 8003778:	6051      	str	r1, [r2, #4]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	7213      	strb	r3, [r2, #8]
	  sprintf((char *)character, "%d", (int)dim.accelData[0]);
 800377e:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8003782:	461a      	mov	r2, r3
 8003784:	f107 030c 	add.w	r3, r7, #12
 8003788:	497a      	ldr	r1, [pc, #488]	; (8003974 <SendWebPage+0x37c>)
 800378a:	4618      	mov	r0, r3
 800378c:	f00b fed4 	bl	800f538 <siprintf>
	  strcat((char *)http, (char *)character);
 8003790:	f107 030c 	add.w	r3, r7, #12
 8003794:	4619      	mov	r1, r3
 8003796:	486c      	ldr	r0, [pc, #432]	; (8003948 <SendWebPage+0x350>)
 8003798:	f00b ffde 	bl	800f758 <strcat>
	  strcat((char *)http, (char *)",\"acc_y\":");
 800379c:	486a      	ldr	r0, [pc, #424]	; (8003948 <SendWebPage+0x350>)
 800379e:	f7fc fd67 	bl	8000270 <strlen>
 80037a2:	4603      	mov	r3, r0
 80037a4:	461a      	mov	r2, r3
 80037a6:	4b68      	ldr	r3, [pc, #416]	; (8003948 <SendWebPage+0x350>)
 80037a8:	4413      	add	r3, r2
 80037aa:	4973      	ldr	r1, [pc, #460]	; (8003978 <SendWebPage+0x380>)
 80037ac:	461a      	mov	r2, r3
 80037ae:	460b      	mov	r3, r1
 80037b0:	cb03      	ldmia	r3!, {r0, r1}
 80037b2:	6010      	str	r0, [r2, #0]
 80037b4:	6051      	str	r1, [r2, #4]
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	8113      	strh	r3, [r2, #8]
	  sprintf((char *)character, "%d", (int)dim.accelData[1]);
 80037ba:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 80037be:	461a      	mov	r2, r3
 80037c0:	f107 030c 	add.w	r3, r7, #12
 80037c4:	496b      	ldr	r1, [pc, #428]	; (8003974 <SendWebPage+0x37c>)
 80037c6:	4618      	mov	r0, r3
 80037c8:	f00b feb6 	bl	800f538 <siprintf>
	  strcat((char *)http, (char *)character);
 80037cc:	f107 030c 	add.w	r3, r7, #12
 80037d0:	4619      	mov	r1, r3
 80037d2:	485d      	ldr	r0, [pc, #372]	; (8003948 <SendWebPage+0x350>)
 80037d4:	f00b ffc0 	bl	800f758 <strcat>
	  strcat((char *)http, (char *)",\"acc_z\":");
 80037d8:	485b      	ldr	r0, [pc, #364]	; (8003948 <SendWebPage+0x350>)
 80037da:	f7fc fd49 	bl	8000270 <strlen>
 80037de:	4603      	mov	r3, r0
 80037e0:	461a      	mov	r2, r3
 80037e2:	4b59      	ldr	r3, [pc, #356]	; (8003948 <SendWebPage+0x350>)
 80037e4:	4413      	add	r3, r2
 80037e6:	4965      	ldr	r1, [pc, #404]	; (800397c <SendWebPage+0x384>)
 80037e8:	461a      	mov	r2, r3
 80037ea:	460b      	mov	r3, r1
 80037ec:	cb03      	ldmia	r3!, {r0, r1}
 80037ee:	6010      	str	r0, [r2, #0]
 80037f0:	6051      	str	r1, [r2, #4]
 80037f2:	881b      	ldrh	r3, [r3, #0]
 80037f4:	8113      	strh	r3, [r2, #8]
	  sprintf((char *)character, "%d", (int)dim.accelData[2]);
 80037f6:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80037fa:	461a      	mov	r2, r3
 80037fc:	f107 030c 	add.w	r3, r7, #12
 8003800:	495c      	ldr	r1, [pc, #368]	; (8003974 <SendWebPage+0x37c>)
 8003802:	4618      	mov	r0, r3
 8003804:	f00b fe98 	bl	800f538 <siprintf>
	  strcat((char *)http, (char *)character);
 8003808:	f107 030c 	add.w	r3, r7, #12
 800380c:	4619      	mov	r1, r3
 800380e:	484e      	ldr	r0, [pc, #312]	; (8003948 <SendWebPage+0x350>)
 8003810:	f00b ffa2 	bl	800f758 <strcat>
	  strcat((char *)http, (char *)"},");
 8003814:	484c      	ldr	r0, [pc, #304]	; (8003948 <SendWebPage+0x350>)
 8003816:	f7fc fd2b 	bl	8000270 <strlen>
 800381a:	4603      	mov	r3, r0
 800381c:	461a      	mov	r2, r3
 800381e:	4b4a      	ldr	r3, [pc, #296]	; (8003948 <SendWebPage+0x350>)
 8003820:	4413      	add	r3, r2
 8003822:	4a51      	ldr	r2, [pc, #324]	; (8003968 <SendWebPage+0x370>)
 8003824:	8811      	ldrh	r1, [r2, #0]
 8003826:	7892      	ldrb	r2, [r2, #2]
 8003828:	8019      	strh	r1, [r3, #0]
 800382a:	709a      	strb	r2, [r3, #2]

	  strcat((char *)http, (char *)"\"Gyroscope\": {");
 800382c:	4846      	ldr	r0, [pc, #280]	; (8003948 <SendWebPage+0x350>)
 800382e:	f7fc fd1f 	bl	8000270 <strlen>
 8003832:	4603      	mov	r3, r0
 8003834:	461a      	mov	r2, r3
 8003836:	4b44      	ldr	r3, [pc, #272]	; (8003948 <SendWebPage+0x350>)
 8003838:	4413      	add	r3, r2
 800383a:	4a51      	ldr	r2, [pc, #324]	; (8003980 <SendWebPage+0x388>)
 800383c:	461c      	mov	r4, r3
 800383e:	4613      	mov	r3, r2
 8003840:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003842:	6020      	str	r0, [r4, #0]
 8003844:	6061      	str	r1, [r4, #4]
 8003846:	60a2      	str	r2, [r4, #8]
 8003848:	881a      	ldrh	r2, [r3, #0]
 800384a:	789b      	ldrb	r3, [r3, #2]
 800384c:	81a2      	strh	r2, [r4, #12]
 800384e:	73a3      	strb	r3, [r4, #14]
	  strcat((char *)http, (char *)"\"gyro_x\":");
 8003850:	483d      	ldr	r0, [pc, #244]	; (8003948 <SendWebPage+0x350>)
 8003852:	f7fc fd0d 	bl	8000270 <strlen>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	4b3b      	ldr	r3, [pc, #236]	; (8003948 <SendWebPage+0x350>)
 800385c:	4413      	add	r3, r2
 800385e:	4949      	ldr	r1, [pc, #292]	; (8003984 <SendWebPage+0x38c>)
 8003860:	461a      	mov	r2, r3
 8003862:	460b      	mov	r3, r1
 8003864:	cb03      	ldmia	r3!, {r0, r1}
 8003866:	6010      	str	r0, [r2, #0]
 8003868:	6051      	str	r1, [r2, #4]
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	8113      	strh	r3, [r2, #8]
	  sprintf((char *)character, "%.1f", (float)dim.gyro[0]);
 800386e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003870:	4618      	mov	r0, r3
 8003872:	f7fc fe69 	bl	8000548 <__aeabi_f2d>
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	f107 000c 	add.w	r0, r7, #12
 800387e:	4937      	ldr	r1, [pc, #220]	; (800395c <SendWebPage+0x364>)
 8003880:	f00b fe5a 	bl	800f538 <siprintf>
	  strcat((char *)http, (char *)character);
 8003884:	f107 030c 	add.w	r3, r7, #12
 8003888:	4619      	mov	r1, r3
 800388a:	482f      	ldr	r0, [pc, #188]	; (8003948 <SendWebPage+0x350>)
 800388c:	f00b ff64 	bl	800f758 <strcat>
	  strcat((char *)http, (char *)",\"gyro_y\":");
 8003890:	482d      	ldr	r0, [pc, #180]	; (8003948 <SendWebPage+0x350>)
 8003892:	f7fc fced 	bl	8000270 <strlen>
 8003896:	4603      	mov	r3, r0
 8003898:	461a      	mov	r2, r3
 800389a:	4b2b      	ldr	r3, [pc, #172]	; (8003948 <SendWebPage+0x350>)
 800389c:	4413      	add	r3, r2
 800389e:	493a      	ldr	r1, [pc, #232]	; (8003988 <SendWebPage+0x390>)
 80038a0:	461a      	mov	r2, r3
 80038a2:	460b      	mov	r3, r1
 80038a4:	cb03      	ldmia	r3!, {r0, r1}
 80038a6:	6010      	str	r0, [r2, #0]
 80038a8:	6051      	str	r1, [r2, #4]
 80038aa:	8819      	ldrh	r1, [r3, #0]
 80038ac:	789b      	ldrb	r3, [r3, #2]
 80038ae:	8111      	strh	r1, [r2, #8]
 80038b0:	7293      	strb	r3, [r2, #10]
	  sprintf((char *)character, "%.1f", (float)dim.gyro[1]);
 80038b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fc fe47 	bl	8000548 <__aeabi_f2d>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	f107 000c 	add.w	r0, r7, #12
 80038c2:	4926      	ldr	r1, [pc, #152]	; (800395c <SendWebPage+0x364>)
 80038c4:	f00b fe38 	bl	800f538 <siprintf>
	  strcat((char *)http, (char *)character);
 80038c8:	f107 030c 	add.w	r3, r7, #12
 80038cc:	4619      	mov	r1, r3
 80038ce:	481e      	ldr	r0, [pc, #120]	; (8003948 <SendWebPage+0x350>)
 80038d0:	f00b ff42 	bl	800f758 <strcat>
	  strcat((char *)http, (char *)",\"gyro_z\":");
 80038d4:	481c      	ldr	r0, [pc, #112]	; (8003948 <SendWebPage+0x350>)
 80038d6:	f7fc fccb 	bl	8000270 <strlen>
 80038da:	4603      	mov	r3, r0
 80038dc:	461a      	mov	r2, r3
 80038de:	4b1a      	ldr	r3, [pc, #104]	; (8003948 <SendWebPage+0x350>)
 80038e0:	4413      	add	r3, r2
 80038e2:	492a      	ldr	r1, [pc, #168]	; (800398c <SendWebPage+0x394>)
 80038e4:	461a      	mov	r2, r3
 80038e6:	460b      	mov	r3, r1
 80038e8:	cb03      	ldmia	r3!, {r0, r1}
 80038ea:	6010      	str	r0, [r2, #0]
 80038ec:	6051      	str	r1, [r2, #4]
 80038ee:	8819      	ldrh	r1, [r3, #0]
 80038f0:	789b      	ldrb	r3, [r3, #2]
 80038f2:	8111      	strh	r1, [r2, #8]
 80038f4:	7293      	strb	r3, [r2, #10]
	  sprintf((char *)character, "%.1f", (float)dim.gyro[2]);
 80038f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fc fe25 	bl	8000548 <__aeabi_f2d>
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	f107 000c 	add.w	r0, r7, #12
 8003906:	4915      	ldr	r1, [pc, #84]	; (800395c <SendWebPage+0x364>)
 8003908:	f00b fe16 	bl	800f538 <siprintf>
	  strcat((char *)http, (char *)character);
 800390c:	f107 030c 	add.w	r3, r7, #12
 8003910:	4619      	mov	r1, r3
 8003912:	480d      	ldr	r0, [pc, #52]	; (8003948 <SendWebPage+0x350>)
 8003914:	f00b ff20 	bl	800f758 <strcat>
	  strcat((char *)http, (char *)"},");
 8003918:	480b      	ldr	r0, [pc, #44]	; (8003948 <SendWebPage+0x350>)
 800391a:	f7fc fca9 	bl	8000270 <strlen>
 800391e:	4603      	mov	r3, r0
 8003920:	461a      	mov	r2, r3
 8003922:	4b09      	ldr	r3, [pc, #36]	; (8003948 <SendWebPage+0x350>)
 8003924:	4413      	add	r3, r2
 8003926:	4a10      	ldr	r2, [pc, #64]	; (8003968 <SendWebPage+0x370>)
 8003928:	8811      	ldrh	r1, [r2, #0]
 800392a:	7892      	ldrb	r2, [r2, #2]
 800392c:	8019      	strh	r1, [r3, #0]
 800392e:	709a      	strb	r2, [r3, #2]

	  strcat((char *)http, (char *)"\"Magnetometer\": {");
 8003930:	4805      	ldr	r0, [pc, #20]	; (8003948 <SendWebPage+0x350>)
 8003932:	f7fc fc9d 	bl	8000270 <strlen>
 8003936:	4603      	mov	r3, r0
 8003938:	461a      	mov	r2, r3
 800393a:	4b03      	ldr	r3, [pc, #12]	; (8003948 <SendWebPage+0x350>)
 800393c:	4413      	add	r3, r2
 800393e:	4a14      	ldr	r2, [pc, #80]	; (8003990 <SendWebPage+0x398>)
 8003940:	461d      	mov	r5, r3
 8003942:	4614      	mov	r4, r2
 8003944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003946:	e025      	b.n	8003994 <SendWebPage+0x39c>
 8003948:	200009e4 	.word	0x200009e4
 800394c:	08011d18 	.word	0x08011d18
 8003950:	08011d60 	.word	0x08011d60
 8003954:	08011d64 	.word	0x08011d64
 8003958:	08011d74 	.word	0x08011d74
 800395c:	08011d84 	.word	0x08011d84
 8003960:	08011d8c 	.word	0x08011d8c
 8003964:	08011d9c 	.word	0x08011d9c
 8003968:	08011dac 	.word	0x08011dac
 800396c:	08011db0 	.word	0x08011db0
 8003970:	08011dc4 	.word	0x08011dc4
 8003974:	08011dd0 	.word	0x08011dd0
 8003978:	08011dd4 	.word	0x08011dd4
 800397c:	08011de0 	.word	0x08011de0
 8003980:	08011dec 	.word	0x08011dec
 8003984:	08011dfc 	.word	0x08011dfc
 8003988:	08011e08 	.word	0x08011e08
 800398c:	08011e14 	.word	0x08011e14
 8003990:	08011e20 	.word	0x08011e20
 8003994:	6028      	str	r0, [r5, #0]
 8003996:	6069      	str	r1, [r5, #4]
 8003998:	60aa      	str	r2, [r5, #8]
 800399a:	60eb      	str	r3, [r5, #12]
 800399c:	8823      	ldrh	r3, [r4, #0]
 800399e:	822b      	strh	r3, [r5, #16]
	  strcat((char *)http, (char *)"\"mag_x\":");
 80039a0:	484d      	ldr	r0, [pc, #308]	; (8003ad8 <SendWebPage+0x4e0>)
 80039a2:	f7fc fc65 	bl	8000270 <strlen>
 80039a6:	4603      	mov	r3, r0
 80039a8:	461a      	mov	r2, r3
 80039aa:	4b4b      	ldr	r3, [pc, #300]	; (8003ad8 <SendWebPage+0x4e0>)
 80039ac:	4413      	add	r3, r2
 80039ae:	494b      	ldr	r1, [pc, #300]	; (8003adc <SendWebPage+0x4e4>)
 80039b0:	461a      	mov	r2, r3
 80039b2:	460b      	mov	r3, r1
 80039b4:	cb03      	ldmia	r3!, {r0, r1}
 80039b6:	6010      	str	r0, [r2, #0]
 80039b8:	6051      	str	r1, [r2, #4]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	7213      	strb	r3, [r2, #8]
	  sprintf((char *)character, "%d", (int)dim.magXYZ[0]);
 80039be:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80039c2:	461a      	mov	r2, r3
 80039c4:	f107 030c 	add.w	r3, r7, #12
 80039c8:	4945      	ldr	r1, [pc, #276]	; (8003ae0 <SendWebPage+0x4e8>)
 80039ca:	4618      	mov	r0, r3
 80039cc:	f00b fdb4 	bl	800f538 <siprintf>
	  strcat((char *)http, (char *)character);
 80039d0:	f107 030c 	add.w	r3, r7, #12
 80039d4:	4619      	mov	r1, r3
 80039d6:	4840      	ldr	r0, [pc, #256]	; (8003ad8 <SendWebPage+0x4e0>)
 80039d8:	f00b febe 	bl	800f758 <strcat>
	  strcat((char *)http, (char *)",\"mag_y\":");
 80039dc:	483e      	ldr	r0, [pc, #248]	; (8003ad8 <SendWebPage+0x4e0>)
 80039de:	f7fc fc47 	bl	8000270 <strlen>
 80039e2:	4603      	mov	r3, r0
 80039e4:	461a      	mov	r2, r3
 80039e6:	4b3c      	ldr	r3, [pc, #240]	; (8003ad8 <SendWebPage+0x4e0>)
 80039e8:	4413      	add	r3, r2
 80039ea:	493e      	ldr	r1, [pc, #248]	; (8003ae4 <SendWebPage+0x4ec>)
 80039ec:	461a      	mov	r2, r3
 80039ee:	460b      	mov	r3, r1
 80039f0:	cb03      	ldmia	r3!, {r0, r1}
 80039f2:	6010      	str	r0, [r2, #0]
 80039f4:	6051      	str	r1, [r2, #4]
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	8113      	strh	r3, [r2, #8]
	  sprintf((char *)character, "%d", (int)dim.magXYZ[1]);
 80039fa:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80039fe:	461a      	mov	r2, r3
 8003a00:	f107 030c 	add.w	r3, r7, #12
 8003a04:	4936      	ldr	r1, [pc, #216]	; (8003ae0 <SendWebPage+0x4e8>)
 8003a06:	4618      	mov	r0, r3
 8003a08:	f00b fd96 	bl	800f538 <siprintf>
	  strcat((char *)http, (char *)character);
 8003a0c:	f107 030c 	add.w	r3, r7, #12
 8003a10:	4619      	mov	r1, r3
 8003a12:	4831      	ldr	r0, [pc, #196]	; (8003ad8 <SendWebPage+0x4e0>)
 8003a14:	f00b fea0 	bl	800f758 <strcat>
	  strcat((char *)http, (char *)",\"mag_z\":");
 8003a18:	482f      	ldr	r0, [pc, #188]	; (8003ad8 <SendWebPage+0x4e0>)
 8003a1a:	f7fc fc29 	bl	8000270 <strlen>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	461a      	mov	r2, r3
 8003a22:	4b2d      	ldr	r3, [pc, #180]	; (8003ad8 <SendWebPage+0x4e0>)
 8003a24:	4413      	add	r3, r2
 8003a26:	4930      	ldr	r1, [pc, #192]	; (8003ae8 <SendWebPage+0x4f0>)
 8003a28:	461a      	mov	r2, r3
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	cb03      	ldmia	r3!, {r0, r1}
 8003a2e:	6010      	str	r0, [r2, #0]
 8003a30:	6051      	str	r1, [r2, #4]
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	8113      	strh	r3, [r2, #8]
	  sprintf((char *)character, "%d", (int)dim.magXYZ[2]);
 8003a36:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	f107 030c 	add.w	r3, r7, #12
 8003a40:	4927      	ldr	r1, [pc, #156]	; (8003ae0 <SendWebPage+0x4e8>)
 8003a42:	4618      	mov	r0, r3
 8003a44:	f00b fd78 	bl	800f538 <siprintf>
	  strcat((char *)http, (char *)character);
 8003a48:	f107 030c 	add.w	r3, r7, #12
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4822      	ldr	r0, [pc, #136]	; (8003ad8 <SendWebPage+0x4e0>)
 8003a50:	f00b fe82 	bl	800f758 <strcat>
	  strcat((char *)http, (char *)"}");
 8003a54:	4820      	ldr	r0, [pc, #128]	; (8003ad8 <SendWebPage+0x4e0>)
 8003a56:	f7fc fc0b 	bl	8000270 <strlen>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	4b1e      	ldr	r3, [pc, #120]	; (8003ad8 <SendWebPage+0x4e0>)
 8003a60:	4413      	add	r3, r2
 8003a62:	4922      	ldr	r1, [pc, #136]	; (8003aec <SendWebPage+0x4f4>)
 8003a64:	461a      	mov	r2, r3
 8003a66:	460b      	mov	r3, r1
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	8013      	strh	r3, [r2, #0]

	  strcat((char *)http, (char *)"}");
 8003a6c:	481a      	ldr	r0, [pc, #104]	; (8003ad8 <SendWebPage+0x4e0>)
 8003a6e:	f7fc fbff 	bl	8000270 <strlen>
 8003a72:	4603      	mov	r3, r0
 8003a74:	461a      	mov	r2, r3
 8003a76:	4b18      	ldr	r3, [pc, #96]	; (8003ad8 <SendWebPage+0x4e0>)
 8003a78:	4413      	add	r3, r2
 8003a7a:	491c      	ldr	r1, [pc, #112]	; (8003aec <SendWebPage+0x4f4>)
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	460b      	mov	r3, r1
 8003a80:	881b      	ldrh	r3, [r3, #0]
 8003a82:	8013      	strh	r3, [r2, #0]
	  }
	*/
	  //strcat((char *)http, (char *)"</strong><p><input type=\"submit\"></form></span>");
	  //strcat((char *)http, (char *)"</body>\r\n</html>\r\n");

	  ret = WIFI_SendData(0, (uint8_t *)http, strlen((char *)http), &SentDataLength, WIFI_WRITE_TIMEOUT);
 8003a84:	4814      	ldr	r0, [pc, #80]	; (8003ad8 <SendWebPage+0x4e0>)
 8003a86:	f7fc fbf3 	bl	8000270 <strlen>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	f107 030a 	add.w	r3, r7, #10
 8003a92:	f242 7110 	movw	r1, #10000	; 0x2710
 8003a96:	9100      	str	r1, [sp, #0]
 8003a98:	490f      	ldr	r1, [pc, #60]	; (8003ad8 <SendWebPage+0x4e0>)
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	f007 ff02 	bl	800b8a4 <WIFI_SendData>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	  if((ret == WIFI_STATUS_OK) && (SentDataLength != strlen((char *)http))) {
 8003aa6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10a      	bne.n	8003ac4 <SendWebPage+0x4cc>
 8003aae:	897b      	ldrh	r3, [r7, #10]
 8003ab0:	461c      	mov	r4, r3
 8003ab2:	4809      	ldr	r0, [pc, #36]	; (8003ad8 <SendWebPage+0x4e0>)
 8003ab4:	f7fc fbdc 	bl	8000270 <strlen>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	429c      	cmp	r4, r3
 8003abc:	d002      	beq.n	8003ac4 <SendWebPage+0x4cc>
	    ret = WIFI_STATUS_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  }

	  return ret;
 8003ac4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3740      	adds	r7, #64	; 0x40
 8003acc:	46bd      	mov	sp, r7
 8003ace:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003ad2:	b004      	add	sp, #16
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	200009e4 	.word	0x200009e4
 8003adc:	08011e34 	.word	0x08011e34
 8003ae0:	08011dd0 	.word	0x08011dd0
 8003ae4:	08011e40 	.word	0x08011e40
 8003ae8:	08011e4c 	.word	0x08011e4c
 8003aec:	08011e58 	.word	0x08011e58

08003af0 <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003af4:	2002      	movs	r0, #2
 8003af6:	f000 fda1 	bl	800463c <HAL_GPIO_EXTI_IRQHandler>
 portYIELD_FROM_ISR(pdFALSE);
}
 8003afa:	bf00      	nop
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b082      	sub	sp, #8
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	4603      	mov	r3, r0
 8003b06:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8003b08:	88fb      	ldrh	r3, [r7, #6]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d102      	bne.n	8003b14 <HAL_GPIO_EXTI_Callback+0x16>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8003b0e:	f007 fd97 	bl	800b640 <SPI_WIFI_ISR>
      break;
 8003b12:	e000      	b.n	8003b16 <HAL_GPIO_EXTI_Callback+0x18>
    }
    default:
    {
      break;
 8003b14:	bf00      	nop
    }
  }
  portYIELD_FROM_ISR(pdFALSE);
}
 8003b16:	bf00      	nop
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <SPI3_IRQHandler>:
  * @param  None
  * @retval None
  */
extern  SPI_HandleTypeDef hspi;
void SPI3_IRQHandler(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8003b24:	4802      	ldr	r0, [pc, #8]	; (8003b30 <SPI3_IRQHandler+0x10>)
 8003b26:	f003 feb1 	bl	800788c <HAL_SPI_IRQHandler>
  portYIELD_FROM_ISR(pdFALSE);
}
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	20001214 	.word	0x20001214

08003b34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b38:	f7ff fb2e 	bl	8003198 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003b3c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003b3e:	e003      	b.n	8003b48 <LoopCopyDataInit>

08003b40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003b40:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003b42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003b44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003b46:	3104      	adds	r1, #4

08003b48 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003b48:	480a      	ldr	r0, [pc, #40]	; (8003b74 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003b4a:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003b4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003b4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003b50:	d3f6      	bcc.n	8003b40 <CopyDataInit>
	ldr	r2, =_sbss
 8003b52:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003b54:	e002      	b.n	8003b5c <LoopFillZerobss>

08003b56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003b56:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003b58:	f842 3b04 	str.w	r3, [r2], #4

08003b5c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003b5c:	4b08      	ldr	r3, [pc, #32]	; (8003b80 <LoopForever+0x16>)
	cmp	r2, r3
 8003b5e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003b60:	d3f9      	bcc.n	8003b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b62:	f00b feef 	bl	800f944 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b66:	f7fe faf9 	bl	800215c <main>

08003b6a <LoopForever>:

LoopForever:
    b LoopForever
 8003b6a:	e7fe      	b.n	8003b6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003b6c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003b70:	08012758 	.word	0x08012758
	ldr	r0, =_sdata
 8003b74:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003b78:	2000029c 	.word	0x2000029c
	ldr	r2, =_sbss
 8003b7c:	2000029c 	.word	0x2000029c
	ldr	r3, = _ebss
 8003b80:	200035d4 	.word	0x200035d4

08003b84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b84:	e7fe      	b.n	8003b84 <ADC1_2_IRQHandler>

08003b86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b082      	sub	sp, #8
 8003b8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b90:	2003      	movs	r0, #3
 8003b92:	f000 f902 	bl	8003d9a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b96:	2000      	movs	r0, #0
 8003b98:	f7ff f98a 	bl	8002eb0 <HAL_InitTick>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	71fb      	strb	r3, [r7, #7]
 8003ba6:	e001      	b.n	8003bac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ba8:	f7fe ff1e 	bl	80029e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003bac:	79fb      	ldrb	r3, [r7, #7]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <HAL_IncTick+0x20>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <HAL_IncTick+0x24>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	4a04      	ldr	r2, [pc, #16]	; (8003bdc <HAL_IncTick+0x24>)
 8003bca:	6013      	str	r3, [r2, #0]
}
 8003bcc:	bf00      	nop
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	200000cc 	.word	0x200000cc
 8003bdc:	200011e8 	.word	0x200011e8

08003be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  return uwTick;
 8003be4:	4b03      	ldr	r3, [pc, #12]	; (8003bf4 <HAL_GetTick+0x14>)
 8003be6:	681b      	ldr	r3, [r3, #0]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	200011e8 	.word	0x200011e8

08003bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c00:	f7ff ffee 	bl	8003be0 <HAL_GetTick>
 8003c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c10:	d005      	beq.n	8003c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003c12:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <HAL_Delay+0x44>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c1e:	bf00      	nop
 8003c20:	f7ff ffde 	bl	8003be0 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d8f7      	bhi.n	8003c20 <HAL_Delay+0x28>
  {
  }
}
 8003c30:	bf00      	nop
 8003c32:	bf00      	nop
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	200000cc 	.word	0x200000cc

08003c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c50:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <__NVIC_SetPriorityGrouping+0x44>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c72:	4a04      	ldr	r2, [pc, #16]	; (8003c84 <__NVIC_SetPriorityGrouping+0x44>)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	60d3      	str	r3, [r2, #12]
}
 8003c78:	bf00      	nop
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	e000ed00 	.word	0xe000ed00

08003c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c8c:	4b04      	ldr	r3, [pc, #16]	; (8003ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	0a1b      	lsrs	r3, r3, #8
 8003c92:	f003 0307 	and.w	r3, r3, #7
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	e000ed00 	.word	0xe000ed00

08003ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	db0b      	blt.n	8003cce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	f003 021f 	and.w	r2, r3, #31
 8003cbc:	4907      	ldr	r1, [pc, #28]	; (8003cdc <__NVIC_EnableIRQ+0x38>)
 8003cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc2:	095b      	lsrs	r3, r3, #5
 8003cc4:	2001      	movs	r0, #1
 8003cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8003cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	e000e100 	.word	0xe000e100

08003ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	6039      	str	r1, [r7, #0]
 8003cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	db0a      	blt.n	8003d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	490c      	ldr	r1, [pc, #48]	; (8003d2c <__NVIC_SetPriority+0x4c>)
 8003cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfe:	0112      	lsls	r2, r2, #4
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	440b      	add	r3, r1
 8003d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d08:	e00a      	b.n	8003d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	4908      	ldr	r1, [pc, #32]	; (8003d30 <__NVIC_SetPriority+0x50>)
 8003d10:	79fb      	ldrb	r3, [r7, #7]
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	3b04      	subs	r3, #4
 8003d18:	0112      	lsls	r2, r2, #4
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	761a      	strb	r2, [r3, #24]
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	e000e100 	.word	0xe000e100
 8003d30:	e000ed00 	.word	0xe000ed00

08003d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b089      	sub	sp, #36	; 0x24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f1c3 0307 	rsb	r3, r3, #7
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	bf28      	it	cs
 8003d52:	2304      	movcs	r3, #4
 8003d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	2b06      	cmp	r3, #6
 8003d5c:	d902      	bls.n	8003d64 <NVIC_EncodePriority+0x30>
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	3b03      	subs	r3, #3
 8003d62:	e000      	b.n	8003d66 <NVIC_EncodePriority+0x32>
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d68:	f04f 32ff 	mov.w	r2, #4294967295
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	43da      	mvns	r2, r3
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	401a      	ands	r2, r3
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	fa01 f303 	lsl.w	r3, r1, r3
 8003d86:	43d9      	mvns	r1, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d8c:	4313      	orrs	r3, r2
         );
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3724      	adds	r7, #36	; 0x24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b082      	sub	sp, #8
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7ff ff4c 	bl	8003c40 <__NVIC_SetPriorityGrouping>
}
 8003da8:	bf00      	nop
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4603      	mov	r3, r0
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
 8003dbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003dc2:	f7ff ff61 	bl	8003c88 <__NVIC_GetPriorityGrouping>
 8003dc6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	68b9      	ldr	r1, [r7, #8]
 8003dcc:	6978      	ldr	r0, [r7, #20]
 8003dce:	f7ff ffb1 	bl	8003d34 <NVIC_EncodePriority>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dd8:	4611      	mov	r1, r2
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff ff80 	bl	8003ce0 <__NVIC_SetPriority>
}
 8003de0:	bf00      	nop
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff ff54 	bl	8003ca4 <__NVIC_EnableIRQ>
}
 8003dfc:	bf00      	nop
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e0ac      	b.n	8003f70 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 f8b2 	bl	8003f84 <DFSDM_GetChannelFromInstance>
 8003e20:	4603      	mov	r3, r0
 8003e22:	4a55      	ldr	r2, [pc, #340]	; (8003f78 <HAL_DFSDM_ChannelInit+0x174>)
 8003e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e09f      	b.n	8003f70 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7fe fe01 	bl	8002a38 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003e36:	4b51      	ldr	r3, [pc, #324]	; (8003f7c <HAL_DFSDM_ChannelInit+0x178>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	4a4f      	ldr	r2, [pc, #316]	; (8003f7c <HAL_DFSDM_ChannelInit+0x178>)
 8003e3e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003e40:	4b4e      	ldr	r3, [pc, #312]	; (8003f7c <HAL_DFSDM_ChannelInit+0x178>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d125      	bne.n	8003e94 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003e48:	4b4d      	ldr	r3, [pc, #308]	; (8003f80 <HAL_DFSDM_ChannelInit+0x17c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a4c      	ldr	r2, [pc, #304]	; (8003f80 <HAL_DFSDM_ChannelInit+0x17c>)
 8003e4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e52:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003e54:	4b4a      	ldr	r3, [pc, #296]	; (8003f80 <HAL_DFSDM_ChannelInit+0x17c>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	4948      	ldr	r1, [pc, #288]	; (8003f80 <HAL_DFSDM_ChannelInit+0x17c>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003e62:	4b47      	ldr	r3, [pc, #284]	; (8003f80 <HAL_DFSDM_ChannelInit+0x17c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a46      	ldr	r2, [pc, #280]	; (8003f80 <HAL_DFSDM_ChannelInit+0x17c>)
 8003e68:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003e6c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	791b      	ldrb	r3, [r3, #4]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d108      	bne.n	8003e88 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003e76:	4b42      	ldr	r3, [pc, #264]	; (8003f80 <HAL_DFSDM_ChannelInit+0x17c>)
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	041b      	lsls	r3, r3, #16
 8003e82:	493f      	ldr	r1, [pc, #252]	; (8003f80 <HAL_DFSDM_ChannelInit+0x17c>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003e88:	4b3d      	ldr	r3, [pc, #244]	; (8003f80 <HAL_DFSDM_ChannelInit+0x17c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a3c      	ldr	r2, [pc, #240]	; (8003f80 <HAL_DFSDM_ChannelInit+0x17c>)
 8003e8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e92:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003ea2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6819      	ldr	r1, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003eb2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003eb8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 020f 	bic.w	r2, r2, #15
 8003ed0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6819      	ldr	r1, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003ef8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6899      	ldr	r1, [r3, #8]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f002 0207 	and.w	r2, r2, #7
 8003f24:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6859      	ldr	r1, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f50:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 f810 	bl	8003f84 <DFSDM_GetChannelFromInstance>
 8003f64:	4602      	mov	r2, r0
 8003f66:	4904      	ldr	r1, [pc, #16]	; (8003f78 <HAL_DFSDM_ChannelInit+0x174>)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	200011f0 	.word	0x200011f0
 8003f7c:	200011ec 	.word	0x200011ec
 8003f80:	40016000 	.word	0x40016000

08003f84 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a1c      	ldr	r2, [pc, #112]	; (8004000 <DFSDM_GetChannelFromInstance+0x7c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d102      	bne.n	8003f9a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003f94:	2300      	movs	r3, #0
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e02b      	b.n	8003ff2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a19      	ldr	r2, [pc, #100]	; (8004004 <DFSDM_GetChannelFromInstance+0x80>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d102      	bne.n	8003fa8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	e024      	b.n	8003ff2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a17      	ldr	r2, [pc, #92]	; (8004008 <DFSDM_GetChannelFromInstance+0x84>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d102      	bne.n	8003fb6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	e01d      	b.n	8003ff2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a14      	ldr	r2, [pc, #80]	; (800400c <DFSDM_GetChannelFromInstance+0x88>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d102      	bne.n	8003fc4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003fbe:	2304      	movs	r3, #4
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	e016      	b.n	8003ff2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a12      	ldr	r2, [pc, #72]	; (8004010 <DFSDM_GetChannelFromInstance+0x8c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d102      	bne.n	8003fd2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003fcc:	2305      	movs	r3, #5
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	e00f      	b.n	8003ff2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a0f      	ldr	r2, [pc, #60]	; (8004014 <DFSDM_GetChannelFromInstance+0x90>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d102      	bne.n	8003fe0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003fda:	2306      	movs	r3, #6
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	e008      	b.n	8003ff2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a0d      	ldr	r2, [pc, #52]	; (8004018 <DFSDM_GetChannelFromInstance+0x94>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d102      	bne.n	8003fee <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003fe8:	2307      	movs	r3, #7
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	e001      	b.n	8003ff2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	40016000 	.word	0x40016000
 8004004:	40016020 	.word	0x40016020
 8004008:	40016040 	.word	0x40016040
 800400c:	40016080 	.word	0x40016080
 8004010:	400160a0 	.word	0x400160a0
 8004014:	400160c0 	.word	0x400160c0
 8004018:	400160e0 	.word	0x400160e0

0800401c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d005      	beq.n	8004040 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2204      	movs	r2, #4
 8004038:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	73fb      	strb	r3, [r7, #15]
 800403e:	e029      	b.n	8004094 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 020e 	bic.w	r2, r2, #14
 800404e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0201 	bic.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004064:	f003 021c 	and.w	r2, r3, #28
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	2101      	movs	r1, #1
 800406e:	fa01 f202 	lsl.w	r2, r1, r2
 8004072:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	4798      	blx	r3
    }
  }
  return status;
 8004094:	7bfb      	ldrb	r3, [r7, #15]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
	...

080040a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040ae:	e17f      	b.n	80043b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	2101      	movs	r1, #1
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	fa01 f303 	lsl.w	r3, r1, r3
 80040bc:	4013      	ands	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 8171 	beq.w	80043aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d00b      	beq.n	80040e8 <HAL_GPIO_Init+0x48>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d007      	beq.n	80040e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040dc:	2b11      	cmp	r3, #17
 80040de:	d003      	beq.n	80040e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b12      	cmp	r3, #18
 80040e6:	d130      	bne.n	800414a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	2203      	movs	r2, #3
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	43db      	mvns	r3, r3
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4013      	ands	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4313      	orrs	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800411e:	2201      	movs	r2, #1
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	43db      	mvns	r3, r3
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4013      	ands	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	091b      	lsrs	r3, r3, #4
 8004134:	f003 0201 	and.w	r2, r3, #1
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	2b03      	cmp	r3, #3
 8004154:	d118      	bne.n	8004188 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800415c:	2201      	movs	r2, #1
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	43db      	mvns	r3, r3
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4013      	ands	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	08db      	lsrs	r3, r3, #3
 8004172:	f003 0201 	and.w	r2, r3, #1
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	2203      	movs	r2, #3
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4013      	ands	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d003      	beq.n	80041c8 <HAL_GPIO_Init+0x128>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b12      	cmp	r3, #18
 80041c6:	d123      	bne.n	8004210 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	08da      	lsrs	r2, r3, #3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3208      	adds	r2, #8
 80041d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	220f      	movs	r2, #15
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	43db      	mvns	r3, r3
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4013      	ands	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	08da      	lsrs	r2, r3, #3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	3208      	adds	r2, #8
 800420a:	6939      	ldr	r1, [r7, #16]
 800420c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	2203      	movs	r2, #3
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	43db      	mvns	r3, r3
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	4013      	ands	r3, r2
 8004226:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f003 0203 	and.w	r2, r3, #3
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 80ac 	beq.w	80043aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004252:	4b5f      	ldr	r3, [pc, #380]	; (80043d0 <HAL_GPIO_Init+0x330>)
 8004254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004256:	4a5e      	ldr	r2, [pc, #376]	; (80043d0 <HAL_GPIO_Init+0x330>)
 8004258:	f043 0301 	orr.w	r3, r3, #1
 800425c:	6613      	str	r3, [r2, #96]	; 0x60
 800425e:	4b5c      	ldr	r3, [pc, #368]	; (80043d0 <HAL_GPIO_Init+0x330>)
 8004260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	60bb      	str	r3, [r7, #8]
 8004268:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800426a:	4a5a      	ldr	r2, [pc, #360]	; (80043d4 <HAL_GPIO_Init+0x334>)
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	089b      	lsrs	r3, r3, #2
 8004270:	3302      	adds	r3, #2
 8004272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004276:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	220f      	movs	r2, #15
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	43db      	mvns	r3, r3
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	4013      	ands	r3, r2
 800428c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004294:	d025      	beq.n	80042e2 <HAL_GPIO_Init+0x242>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a4f      	ldr	r2, [pc, #316]	; (80043d8 <HAL_GPIO_Init+0x338>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d01f      	beq.n	80042de <HAL_GPIO_Init+0x23e>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a4e      	ldr	r2, [pc, #312]	; (80043dc <HAL_GPIO_Init+0x33c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d019      	beq.n	80042da <HAL_GPIO_Init+0x23a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a4d      	ldr	r2, [pc, #308]	; (80043e0 <HAL_GPIO_Init+0x340>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d013      	beq.n	80042d6 <HAL_GPIO_Init+0x236>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a4c      	ldr	r2, [pc, #304]	; (80043e4 <HAL_GPIO_Init+0x344>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00d      	beq.n	80042d2 <HAL_GPIO_Init+0x232>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a4b      	ldr	r2, [pc, #300]	; (80043e8 <HAL_GPIO_Init+0x348>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d007      	beq.n	80042ce <HAL_GPIO_Init+0x22e>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a4a      	ldr	r2, [pc, #296]	; (80043ec <HAL_GPIO_Init+0x34c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d101      	bne.n	80042ca <HAL_GPIO_Init+0x22a>
 80042c6:	2306      	movs	r3, #6
 80042c8:	e00c      	b.n	80042e4 <HAL_GPIO_Init+0x244>
 80042ca:	2307      	movs	r3, #7
 80042cc:	e00a      	b.n	80042e4 <HAL_GPIO_Init+0x244>
 80042ce:	2305      	movs	r3, #5
 80042d0:	e008      	b.n	80042e4 <HAL_GPIO_Init+0x244>
 80042d2:	2304      	movs	r3, #4
 80042d4:	e006      	b.n	80042e4 <HAL_GPIO_Init+0x244>
 80042d6:	2303      	movs	r3, #3
 80042d8:	e004      	b.n	80042e4 <HAL_GPIO_Init+0x244>
 80042da:	2302      	movs	r3, #2
 80042dc:	e002      	b.n	80042e4 <HAL_GPIO_Init+0x244>
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <HAL_GPIO_Init+0x244>
 80042e2:	2300      	movs	r3, #0
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	f002 0203 	and.w	r2, r2, #3
 80042ea:	0092      	lsls	r2, r2, #2
 80042ec:	4093      	lsls	r3, r2
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042f4:	4937      	ldr	r1, [pc, #220]	; (80043d4 <HAL_GPIO_Init+0x334>)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	089b      	lsrs	r3, r3, #2
 80042fa:	3302      	adds	r3, #2
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004302:	4b3b      	ldr	r3, [pc, #236]	; (80043f0 <HAL_GPIO_Init+0x350>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	43db      	mvns	r3, r3
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	4013      	ands	r3, r2
 8004310:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004326:	4a32      	ldr	r2, [pc, #200]	; (80043f0 <HAL_GPIO_Init+0x350>)
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800432c:	4b30      	ldr	r3, [pc, #192]	; (80043f0 <HAL_GPIO_Init+0x350>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	43db      	mvns	r3, r3
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4013      	ands	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004350:	4a27      	ldr	r2, [pc, #156]	; (80043f0 <HAL_GPIO_Init+0x350>)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004356:	4b26      	ldr	r3, [pc, #152]	; (80043f0 <HAL_GPIO_Init+0x350>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	43db      	mvns	r3, r3
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4013      	ands	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800437a:	4a1d      	ldr	r2, [pc, #116]	; (80043f0 <HAL_GPIO_Init+0x350>)
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004380:	4b1b      	ldr	r3, [pc, #108]	; (80043f0 <HAL_GPIO_Init+0x350>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	43db      	mvns	r3, r3
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	4013      	ands	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043a4:	4a12      	ldr	r2, [pc, #72]	; (80043f0 <HAL_GPIO_Init+0x350>)
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	3301      	adds	r3, #1
 80043ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	fa22 f303 	lsr.w	r3, r2, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f47f ae78 	bne.w	80040b0 <HAL_GPIO_Init+0x10>
  }
}
 80043c0:	bf00      	nop
 80043c2:	bf00      	nop
 80043c4:	371c      	adds	r7, #28
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40021000 	.word	0x40021000
 80043d4:	40010000 	.word	0x40010000
 80043d8:	48000400 	.word	0x48000400
 80043dc:	48000800 	.word	0x48000800
 80043e0:	48000c00 	.word	0x48000c00
 80043e4:	48001000 	.word	0x48001000
 80043e8:	48001400 	.word	0x48001400
 80043ec:	48001800 	.word	0x48001800
 80043f0:	40010400 	.word	0x40010400

080043f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004402:	e0cd      	b.n	80045a0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004404:	2201      	movs	r2, #1
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	4013      	ands	r3, r2
 8004410:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 80c0 	beq.w	800459a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800441a:	4a68      	ldr	r2, [pc, #416]	; (80045bc <HAL_GPIO_DeInit+0x1c8>)
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	089b      	lsrs	r3, r3, #2
 8004420:	3302      	adds	r3, #2
 8004422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004426:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	220f      	movs	r2, #15
 8004432:	fa02 f303 	lsl.w	r3, r2, r3
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	4013      	ands	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004442:	d025      	beq.n	8004490 <HAL_GPIO_DeInit+0x9c>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a5e      	ldr	r2, [pc, #376]	; (80045c0 <HAL_GPIO_DeInit+0x1cc>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d01f      	beq.n	800448c <HAL_GPIO_DeInit+0x98>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a5d      	ldr	r2, [pc, #372]	; (80045c4 <HAL_GPIO_DeInit+0x1d0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d019      	beq.n	8004488 <HAL_GPIO_DeInit+0x94>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a5c      	ldr	r2, [pc, #368]	; (80045c8 <HAL_GPIO_DeInit+0x1d4>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d013      	beq.n	8004484 <HAL_GPIO_DeInit+0x90>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a5b      	ldr	r2, [pc, #364]	; (80045cc <HAL_GPIO_DeInit+0x1d8>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00d      	beq.n	8004480 <HAL_GPIO_DeInit+0x8c>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a5a      	ldr	r2, [pc, #360]	; (80045d0 <HAL_GPIO_DeInit+0x1dc>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d007      	beq.n	800447c <HAL_GPIO_DeInit+0x88>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a59      	ldr	r2, [pc, #356]	; (80045d4 <HAL_GPIO_DeInit+0x1e0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d101      	bne.n	8004478 <HAL_GPIO_DeInit+0x84>
 8004474:	2306      	movs	r3, #6
 8004476:	e00c      	b.n	8004492 <HAL_GPIO_DeInit+0x9e>
 8004478:	2307      	movs	r3, #7
 800447a:	e00a      	b.n	8004492 <HAL_GPIO_DeInit+0x9e>
 800447c:	2305      	movs	r3, #5
 800447e:	e008      	b.n	8004492 <HAL_GPIO_DeInit+0x9e>
 8004480:	2304      	movs	r3, #4
 8004482:	e006      	b.n	8004492 <HAL_GPIO_DeInit+0x9e>
 8004484:	2303      	movs	r3, #3
 8004486:	e004      	b.n	8004492 <HAL_GPIO_DeInit+0x9e>
 8004488:	2302      	movs	r3, #2
 800448a:	e002      	b.n	8004492 <HAL_GPIO_DeInit+0x9e>
 800448c:	2301      	movs	r3, #1
 800448e:	e000      	b.n	8004492 <HAL_GPIO_DeInit+0x9e>
 8004490:	2300      	movs	r3, #0
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	f002 0203 	and.w	r2, r2, #3
 8004498:	0092      	lsls	r2, r2, #2
 800449a:	4093      	lsls	r3, r2
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d132      	bne.n	8004508 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80044a2:	4b4d      	ldr	r3, [pc, #308]	; (80045d8 <HAL_GPIO_DeInit+0x1e4>)
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	43db      	mvns	r3, r3
 80044aa:	494b      	ldr	r1, [pc, #300]	; (80045d8 <HAL_GPIO_DeInit+0x1e4>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80044b0:	4b49      	ldr	r3, [pc, #292]	; (80045d8 <HAL_GPIO_DeInit+0x1e4>)
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	43db      	mvns	r3, r3
 80044b8:	4947      	ldr	r1, [pc, #284]	; (80045d8 <HAL_GPIO_DeInit+0x1e4>)
 80044ba:	4013      	ands	r3, r2
 80044bc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80044be:	4b46      	ldr	r3, [pc, #280]	; (80045d8 <HAL_GPIO_DeInit+0x1e4>)
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	43db      	mvns	r3, r3
 80044c6:	4944      	ldr	r1, [pc, #272]	; (80045d8 <HAL_GPIO_DeInit+0x1e4>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80044cc:	4b42      	ldr	r3, [pc, #264]	; (80045d8 <HAL_GPIO_DeInit+0x1e4>)
 80044ce:	68da      	ldr	r2, [r3, #12]
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	43db      	mvns	r3, r3
 80044d4:	4940      	ldr	r1, [pc, #256]	; (80045d8 <HAL_GPIO_DeInit+0x1e4>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f003 0303 	and.w	r3, r3, #3
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	220f      	movs	r2, #15
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80044ea:	4a34      	ldr	r2, [pc, #208]	; (80045bc <HAL_GPIO_DeInit+0x1c8>)
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	089b      	lsrs	r3, r3, #2
 80044f0:	3302      	adds	r3, #2
 80044f2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	43da      	mvns	r2, r3
 80044fa:	4830      	ldr	r0, [pc, #192]	; (80045bc <HAL_GPIO_DeInit+0x1c8>)
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	089b      	lsrs	r3, r3, #2
 8004500:	400a      	ands	r2, r1
 8004502:	3302      	adds	r3, #2
 8004504:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	2103      	movs	r1, #3
 8004512:	fa01 f303 	lsl.w	r3, r1, r3
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	08da      	lsrs	r2, r3, #3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3208      	adds	r2, #8
 8004524:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	220f      	movs	r2, #15
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	43db      	mvns	r3, r3
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	08d2      	lsrs	r2, r2, #3
 800453c:	4019      	ands	r1, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3208      	adds	r2, #8
 8004542:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	2103      	movs	r1, #3
 8004550:	fa01 f303 	lsl.w	r3, r1, r3
 8004554:	43db      	mvns	r3, r3
 8004556:	401a      	ands	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	2101      	movs	r1, #1
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	fa01 f303 	lsl.w	r3, r1, r3
 8004568:	43db      	mvns	r3, r3
 800456a:	401a      	ands	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	2103      	movs	r1, #3
 800457a:	fa01 f303 	lsl.w	r3, r1, r3
 800457e:	43db      	mvns	r3, r3
 8004580:	401a      	ands	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800458a:	2101      	movs	r1, #1
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	fa01 f303 	lsl.w	r3, r1, r3
 8004592:	43db      	mvns	r3, r3
 8004594:	401a      	ands	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	3301      	adds	r3, #1
 800459e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	fa22 f303 	lsr.w	r3, r2, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f47f af2b 	bne.w	8004404 <HAL_GPIO_DeInit+0x10>
  }
}
 80045ae:	bf00      	nop
 80045b0:	bf00      	nop
 80045b2:	371c      	adds	r7, #28
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	40010000 	.word	0x40010000
 80045c0:	48000400 	.word	0x48000400
 80045c4:	48000800 	.word	0x48000800
 80045c8:	48000c00 	.word	0x48000c00
 80045cc:	48001000 	.word	0x48001000
 80045d0:	48001400 	.word	0x48001400
 80045d4:	48001800 	.word	0x48001800
 80045d8:	40010400 	.word	0x40010400

080045dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	460b      	mov	r3, r1
 80045e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	887b      	ldrh	r3, [r7, #2]
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
 80045f8:	e001      	b.n	80045fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045fa:	2300      	movs	r3, #0
 80045fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	807b      	strh	r3, [r7, #2]
 8004618:	4613      	mov	r3, r2
 800461a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800461c:	787b      	ldrb	r3, [r7, #1]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004622:	887a      	ldrh	r2, [r7, #2]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004628:	e002      	b.n	8004630 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800462a:	887a      	ldrh	r2, [r7, #2]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004646:	4b08      	ldr	r3, [pc, #32]	; (8004668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004648:	695a      	ldr	r2, [r3, #20]
 800464a:	88fb      	ldrh	r3, [r7, #6]
 800464c:	4013      	ands	r3, r2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d006      	beq.n	8004660 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004652:	4a05      	ldr	r2, [pc, #20]	; (8004668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004654:	88fb      	ldrh	r3, [r7, #6]
 8004656:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004658:	88fb      	ldrh	r3, [r7, #6]
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff fa4f 	bl	8003afe <HAL_GPIO_EXTI_Callback>
  }
}
 8004660:	bf00      	nop
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40010400 	.word	0x40010400

0800466c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e081      	b.n	8004782 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7fe fa14 	bl	8002ac0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2224      	movs	r2, #36	; 0x24
 800469c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0201 	bic.w	r2, r2, #1
 80046ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d107      	bne.n	80046e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046e2:	609a      	str	r2, [r3, #8]
 80046e4:	e006      	b.n	80046f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80046f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d104      	bne.n	8004706 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004704:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6812      	ldr	r2, [r2, #0]
 8004710:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004718:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004728:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691a      	ldr	r2, [r3, #16]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	ea42 0103 	orr.w	r1, r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	021a      	lsls	r2, r3, #8
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	69d9      	ldr	r1, [r3, #28]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1a      	ldr	r2, [r3, #32]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2220      	movs	r2, #32
 800476e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b082      	sub	sp, #8
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e021      	b.n	80047e0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2224      	movs	r2, #36	; 0x24
 80047a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0201 	bic.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7fe f9c7 	bl	8002b48 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b088      	sub	sp, #32
 80047ec:	af02      	add	r7, sp, #8
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	4608      	mov	r0, r1
 80047f2:	4611      	mov	r1, r2
 80047f4:	461a      	mov	r2, r3
 80047f6:	4603      	mov	r3, r0
 80047f8:	817b      	strh	r3, [r7, #10]
 80047fa:	460b      	mov	r3, r1
 80047fc:	813b      	strh	r3, [r7, #8]
 80047fe:	4613      	mov	r3, r2
 8004800:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b20      	cmp	r3, #32
 800480c:	f040 80f9 	bne.w	8004a02 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <HAL_I2C_Mem_Write+0x34>
 8004816:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004818:	2b00      	cmp	r3, #0
 800481a:	d105      	bne.n	8004828 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004822:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e0ed      	b.n	8004a04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800482e:	2b01      	cmp	r3, #1
 8004830:	d101      	bne.n	8004836 <HAL_I2C_Mem_Write+0x4e>
 8004832:	2302      	movs	r3, #2
 8004834:	e0e6      	b.n	8004a04 <HAL_I2C_Mem_Write+0x21c>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800483e:	f7ff f9cf 	bl	8003be0 <HAL_GetTick>
 8004842:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	2319      	movs	r3, #25
 800484a:	2201      	movs	r2, #1
 800484c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 fac3 	bl	8004ddc <I2C_WaitOnFlagUntilTimeout>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e0d1      	b.n	8004a04 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2221      	movs	r2, #33	; 0x21
 8004864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2240      	movs	r2, #64	; 0x40
 800486c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a3a      	ldr	r2, [r7, #32]
 800487a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004880:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004888:	88f8      	ldrh	r0, [r7, #6]
 800488a:	893a      	ldrh	r2, [r7, #8]
 800488c:	8979      	ldrh	r1, [r7, #10]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	9301      	str	r3, [sp, #4]
 8004892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	4603      	mov	r3, r0
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 f9d3 	bl	8004c44 <I2C_RequestMemoryWrite>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e0a9      	b.n	8004a04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2bff      	cmp	r3, #255	; 0xff
 80048b8:	d90e      	bls.n	80048d8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	22ff      	movs	r2, #255	; 0xff
 80048be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	8979      	ldrh	r1, [r7, #10]
 80048c8:	2300      	movs	r3, #0
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 fba5 	bl	8005020 <I2C_TransferConfig>
 80048d6:	e00f      	b.n	80048f8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	8979      	ldrh	r1, [r7, #10]
 80048ea:	2300      	movs	r3, #0
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 fb94 	bl	8005020 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 faad 	bl	8004e5c <I2C_WaitOnTXISFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e07b      	b.n	8004a04 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	781a      	ldrb	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d034      	beq.n	80049b0 <HAL_I2C_Mem_Write+0x1c8>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800494a:	2b00      	cmp	r3, #0
 800494c:	d130      	bne.n	80049b0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004954:	2200      	movs	r2, #0
 8004956:	2180      	movs	r1, #128	; 0x80
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 fa3f 	bl	8004ddc <I2C_WaitOnFlagUntilTimeout>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e04d      	b.n	8004a04 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496c:	b29b      	uxth	r3, r3
 800496e:	2bff      	cmp	r3, #255	; 0xff
 8004970:	d90e      	bls.n	8004990 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	22ff      	movs	r2, #255	; 0xff
 8004976:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800497c:	b2da      	uxtb	r2, r3
 800497e:	8979      	ldrh	r1, [r7, #10]
 8004980:	2300      	movs	r3, #0
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 fb49 	bl	8005020 <I2C_TransferConfig>
 800498e:	e00f      	b.n	80049b0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	8979      	ldrh	r1, [r7, #10]
 80049a2:	2300      	movs	r3, #0
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 fb38 	bl	8005020 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d19e      	bne.n	80048f8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 fa8c 	bl	8004edc <I2C_WaitOnSTOPFlagUntilTimeout>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e01a      	b.n	8004a04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2220      	movs	r2, #32
 80049d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6859      	ldr	r1, [r3, #4]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <HAL_I2C_Mem_Write+0x224>)
 80049e2:	400b      	ands	r3, r1
 80049e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	e000      	b.n	8004a04 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004a02:	2302      	movs	r3, #2
  }
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	fe00e800 	.word	0xfe00e800

08004a10 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b088      	sub	sp, #32
 8004a14:	af02      	add	r7, sp, #8
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	4608      	mov	r0, r1
 8004a1a:	4611      	mov	r1, r2
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	4603      	mov	r3, r0
 8004a20:	817b      	strh	r3, [r7, #10]
 8004a22:	460b      	mov	r3, r1
 8004a24:	813b      	strh	r3, [r7, #8]
 8004a26:	4613      	mov	r3, r2
 8004a28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	f040 80fd 	bne.w	8004c32 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <HAL_I2C_Mem_Read+0x34>
 8004a3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d105      	bne.n	8004a50 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a4a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e0f1      	b.n	8004c34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d101      	bne.n	8004a5e <HAL_I2C_Mem_Read+0x4e>
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	e0ea      	b.n	8004c34 <HAL_I2C_Mem_Read+0x224>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a66:	f7ff f8bb 	bl	8003be0 <HAL_GetTick>
 8004a6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	2319      	movs	r3, #25
 8004a72:	2201      	movs	r2, #1
 8004a74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 f9af 	bl	8004ddc <I2C_WaitOnFlagUntilTimeout>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e0d5      	b.n	8004c34 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2222      	movs	r2, #34	; 0x22
 8004a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2240      	movs	r2, #64	; 0x40
 8004a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a3a      	ldr	r2, [r7, #32]
 8004aa2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004aa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ab0:	88f8      	ldrh	r0, [r7, #6]
 8004ab2:	893a      	ldrh	r2, [r7, #8]
 8004ab4:	8979      	ldrh	r1, [r7, #10]
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	9301      	str	r3, [sp, #4]
 8004aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	4603      	mov	r3, r0
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 f913 	bl	8004cec <I2C_RequestMemoryRead>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d005      	beq.n	8004ad8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e0ad      	b.n	8004c34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	2bff      	cmp	r3, #255	; 0xff
 8004ae0:	d90e      	bls.n	8004b00 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	22ff      	movs	r2, #255	; 0xff
 8004ae6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	8979      	ldrh	r1, [r7, #10]
 8004af0:	4b52      	ldr	r3, [pc, #328]	; (8004c3c <HAL_I2C_Mem_Read+0x22c>)
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 fa91 	bl	8005020 <I2C_TransferConfig>
 8004afe:	e00f      	b.n	8004b20 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	8979      	ldrh	r1, [r7, #10]
 8004b12:	4b4a      	ldr	r3, [pc, #296]	; (8004c3c <HAL_I2C_Mem_Read+0x22c>)
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 fa80 	bl	8005020 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b26:	2200      	movs	r2, #0
 8004b28:	2104      	movs	r1, #4
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 f956 	bl	8004ddc <I2C_WaitOnFlagUntilTimeout>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e07c      	b.n	8004c34 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	b2d2      	uxtb	r2, r2
 8004b46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	1c5a      	adds	r2, r3, #1
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b56:	3b01      	subs	r3, #1
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d034      	beq.n	8004be0 <HAL_I2C_Mem_Read+0x1d0>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d130      	bne.n	8004be0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b84:	2200      	movs	r2, #0
 8004b86:	2180      	movs	r1, #128	; 0x80
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f000 f927 	bl	8004ddc <I2C_WaitOnFlagUntilTimeout>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e04d      	b.n	8004c34 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	2bff      	cmp	r3, #255	; 0xff
 8004ba0:	d90e      	bls.n	8004bc0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	22ff      	movs	r2, #255	; 0xff
 8004ba6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	8979      	ldrh	r1, [r7, #10]
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 fa31 	bl	8005020 <I2C_TransferConfig>
 8004bbe:	e00f      	b.n	8004be0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	8979      	ldrh	r1, [r7, #10]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 fa20 	bl	8005020 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d19a      	bne.n	8004b20 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 f974 	bl	8004edc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e01a      	b.n	8004c34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2220      	movs	r2, #32
 8004c04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6859      	ldr	r1, [r3, #4]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <HAL_I2C_Mem_Read+0x230>)
 8004c12:	400b      	ands	r3, r1
 8004c14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	e000      	b.n	8004c34 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004c32:	2302      	movs	r3, #2
  }
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	80002400 	.word	0x80002400
 8004c40:	fe00e800 	.word	0xfe00e800

08004c44 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af02      	add	r7, sp, #8
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	4608      	mov	r0, r1
 8004c4e:	4611      	mov	r1, r2
 8004c50:	461a      	mov	r2, r3
 8004c52:	4603      	mov	r3, r0
 8004c54:	817b      	strh	r3, [r7, #10]
 8004c56:	460b      	mov	r3, r1
 8004c58:	813b      	strh	r3, [r7, #8]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004c5e:	88fb      	ldrh	r3, [r7, #6]
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	8979      	ldrh	r1, [r7, #10]
 8004c64:	4b20      	ldr	r3, [pc, #128]	; (8004ce8 <I2C_RequestMemoryWrite+0xa4>)
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 f9d7 	bl	8005020 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c72:	69fa      	ldr	r2, [r7, #28]
 8004c74:	69b9      	ldr	r1, [r7, #24]
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 f8f0 	bl	8004e5c <I2C_WaitOnTXISFlagUntilTimeout>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e02c      	b.n	8004ce0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c86:	88fb      	ldrh	r3, [r7, #6]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d105      	bne.n	8004c98 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c8c:	893b      	ldrh	r3, [r7, #8]
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	629a      	str	r2, [r3, #40]	; 0x28
 8004c96:	e015      	b.n	8004cc4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c98:	893b      	ldrh	r3, [r7, #8]
 8004c9a:	0a1b      	lsrs	r3, r3, #8
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ca6:	69fa      	ldr	r2, [r7, #28]
 8004ca8:	69b9      	ldr	r1, [r7, #24]
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 f8d6 	bl	8004e5c <I2C_WaitOnTXISFlagUntilTimeout>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e012      	b.n	8004ce0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cba:	893b      	ldrh	r3, [r7, #8]
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	2180      	movs	r1, #128	; 0x80
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 f884 	bl	8004ddc <I2C_WaitOnFlagUntilTimeout>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	80002000 	.word	0x80002000

08004cec <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af02      	add	r7, sp, #8
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	4608      	mov	r0, r1
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	817b      	strh	r3, [r7, #10]
 8004cfe:	460b      	mov	r3, r1
 8004d00:	813b      	strh	r3, [r7, #8]
 8004d02:	4613      	mov	r3, r2
 8004d04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004d06:	88fb      	ldrh	r3, [r7, #6]
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	8979      	ldrh	r1, [r7, #10]
 8004d0c:	4b20      	ldr	r3, [pc, #128]	; (8004d90 <I2C_RequestMemoryRead+0xa4>)
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	2300      	movs	r3, #0
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 f984 	bl	8005020 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d18:	69fa      	ldr	r2, [r7, #28]
 8004d1a:	69b9      	ldr	r1, [r7, #24]
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 f89d 	bl	8004e5c <I2C_WaitOnTXISFlagUntilTimeout>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e02c      	b.n	8004d86 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d2c:	88fb      	ldrh	r3, [r7, #6]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d105      	bne.n	8004d3e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d32:	893b      	ldrh	r3, [r7, #8]
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	629a      	str	r2, [r3, #40]	; 0x28
 8004d3c:	e015      	b.n	8004d6a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004d3e:	893b      	ldrh	r3, [r7, #8]
 8004d40:	0a1b      	lsrs	r3, r3, #8
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d4c:	69fa      	ldr	r2, [r7, #28]
 8004d4e:	69b9      	ldr	r1, [r7, #24]
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 f883 	bl	8004e5c <I2C_WaitOnTXISFlagUntilTimeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e012      	b.n	8004d86 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d60:	893b      	ldrh	r3, [r7, #8]
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	2200      	movs	r2, #0
 8004d72:	2140      	movs	r1, #64	; 0x40
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 f831 	bl	8004ddc <I2C_WaitOnFlagUntilTimeout>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e000      	b.n	8004d86 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	80002000 	.word	0x80002000

08004d94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d103      	bne.n	8004db2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2200      	movs	r2, #0
 8004db0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d007      	beq.n	8004dd0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699a      	ldr	r2, [r3, #24]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0201 	orr.w	r2, r2, #1
 8004dce:	619a      	str	r2, [r3, #24]
  }
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	603b      	str	r3, [r7, #0]
 8004de8:	4613      	mov	r3, r2
 8004dea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dec:	e022      	b.n	8004e34 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df4:	d01e      	beq.n	8004e34 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df6:	f7fe fef3 	bl	8003be0 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d302      	bcc.n	8004e0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d113      	bne.n	8004e34 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e10:	f043 0220 	orr.w	r2, r3, #32
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e00f      	b.n	8004e54 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699a      	ldr	r2, [r3, #24]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	bf0c      	ite	eq
 8004e44:	2301      	moveq	r3, #1
 8004e46:	2300      	movne	r3, #0
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	79fb      	ldrb	r3, [r7, #7]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d0cd      	beq.n	8004dee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e68:	e02c      	b.n	8004ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	68b9      	ldr	r1, [r7, #8]
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f870 	bl	8004f54 <I2C_IsAcknowledgeFailed>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e02a      	b.n	8004ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e84:	d01e      	beq.n	8004ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e86:	f7fe feab 	bl	8003be0 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d302      	bcc.n	8004e9c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d113      	bne.n	8004ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea0:	f043 0220 	orr.w	r2, r3, #32
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e007      	b.n	8004ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d1cb      	bne.n	8004e6a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ee8:	e028      	b.n	8004f3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	68b9      	ldr	r1, [r7, #8]
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 f830 	bl	8004f54 <I2C_IsAcknowledgeFailed>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e026      	b.n	8004f4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004efe:	f7fe fe6f 	bl	8003be0 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d302      	bcc.n	8004f14 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d113      	bne.n	8004f3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f18:	f043 0220 	orr.w	r2, r3, #32
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e007      	b.n	8004f4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	f003 0320 	and.w	r3, r3, #32
 8004f46:	2b20      	cmp	r3, #32
 8004f48:	d1cf      	bne.n	8004eea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	f003 0310 	and.w	r3, r3, #16
 8004f6a:	2b10      	cmp	r3, #16
 8004f6c:	d151      	bne.n	8005012 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f6e:	e022      	b.n	8004fb6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f76:	d01e      	beq.n	8004fb6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f78:	f7fe fe32 	bl	8003be0 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d302      	bcc.n	8004f8e <I2C_IsAcknowledgeFailed+0x3a>
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d113      	bne.n	8004fb6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f92:	f043 0220 	orr.w	r2, r3, #32
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e02e      	b.n	8005014 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	f003 0320 	and.w	r3, r3, #32
 8004fc0:	2b20      	cmp	r3, #32
 8004fc2:	d1d5      	bne.n	8004f70 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2210      	movs	r2, #16
 8004fca:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f7ff fedd 	bl	8004d94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6859      	ldr	r1, [r3, #4]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	4b0d      	ldr	r3, [pc, #52]	; (800501c <I2C_IsAcknowledgeFailed+0xc8>)
 8004fe6:	400b      	ands	r3, r1
 8004fe8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fee:	f043 0204 	orr.w	r2, r3, #4
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e000      	b.n	8005014 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	fe00e800 	.word	0xfe00e800

08005020 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	607b      	str	r3, [r7, #4]
 800502a:	460b      	mov	r3, r1
 800502c:	817b      	strh	r3, [r7, #10]
 800502e:	4613      	mov	r3, r2
 8005030:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	0d5b      	lsrs	r3, r3, #21
 800503c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005040:	4b0d      	ldr	r3, [pc, #52]	; (8005078 <I2C_TransferConfig+0x58>)
 8005042:	430b      	orrs	r3, r1
 8005044:	43db      	mvns	r3, r3
 8005046:	ea02 0103 	and.w	r1, r2, r3
 800504a:	897b      	ldrh	r3, [r7, #10]
 800504c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005050:	7a7b      	ldrb	r3, [r7, #9]
 8005052:	041b      	lsls	r3, r3, #16
 8005054:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005058:	431a      	orrs	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	431a      	orrs	r2, r3
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	431a      	orrs	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800506a:	bf00      	nop
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	03ff63ff 	.word	0x03ff63ff

0800507c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b20      	cmp	r3, #32
 8005090:	d138      	bne.n	8005104 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005098:	2b01      	cmp	r3, #1
 800509a:	d101      	bne.n	80050a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800509c:	2302      	movs	r3, #2
 800509e:	e032      	b.n	8005106 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2224      	movs	r2, #36	; 0x24
 80050ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0201 	bic.w	r2, r2, #1
 80050be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6819      	ldr	r1, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f042 0201 	orr.w	r2, r2, #1
 80050ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005100:	2300      	movs	r3, #0
 8005102:	e000      	b.n	8005106 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005104:	2302      	movs	r3, #2
  }
}
 8005106:	4618      	mov	r0, r3
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005112:	b480      	push	{r7}
 8005114:	b085      	sub	sp, #20
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b20      	cmp	r3, #32
 8005126:	d139      	bne.n	800519c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800512e:	2b01      	cmp	r3, #1
 8005130:	d101      	bne.n	8005136 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005132:	2302      	movs	r3, #2
 8005134:	e033      	b.n	800519e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2224      	movs	r2, #36	; 0x24
 8005142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 0201 	bic.w	r2, r2, #1
 8005154:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005164:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	021b      	lsls	r3, r3, #8
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0201 	orr.w	r2, r2, #1
 8005186:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005198:	2300      	movs	r3, #0
 800519a:	e000      	b.n	800519e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800519c:	2302      	movs	r3, #2
  }
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80051aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ac:	b08f      	sub	sp, #60	; 0x3c
 80051ae:	af0a      	add	r7, sp, #40	; 0x28
 80051b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e116      	b.n	80053ea <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d106      	bne.n	80051dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7fd fdfe 	bl	8002dd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2203      	movs	r2, #3
 80051e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d102      	bne.n	80051f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f004 fb3f 	bl	800987e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	603b      	str	r3, [r7, #0]
 8005206:	687e      	ldr	r6, [r7, #4]
 8005208:	466d      	mov	r5, sp
 800520a:	f106 0410 	add.w	r4, r6, #16
 800520e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005216:	e894 0003 	ldmia.w	r4, {r0, r1}
 800521a:	e885 0003 	stmia.w	r5, {r0, r1}
 800521e:	1d33      	adds	r3, r6, #4
 8005220:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005222:	6838      	ldr	r0, [r7, #0]
 8005224:	f004 fad9 	bl	80097da <USB_CoreInit>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d005      	beq.n	800523a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2202      	movs	r2, #2
 8005232:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e0d7      	b.n	80053ea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2100      	movs	r1, #0
 8005240:	4618      	mov	r0, r3
 8005242:	f004 fb2d 	bl	80098a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005246:	2300      	movs	r3, #0
 8005248:	73fb      	strb	r3, [r7, #15]
 800524a:	e04a      	b.n	80052e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800524c:	7bfa      	ldrb	r2, [r7, #15]
 800524e:	6879      	ldr	r1, [r7, #4]
 8005250:	4613      	mov	r3, r2
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	1a9b      	subs	r3, r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	440b      	add	r3, r1
 800525a:	333d      	adds	r3, #61	; 0x3d
 800525c:	2201      	movs	r2, #1
 800525e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005260:	7bfa      	ldrb	r2, [r7, #15]
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	4613      	mov	r3, r2
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	1a9b      	subs	r3, r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	333c      	adds	r3, #60	; 0x3c
 8005270:	7bfa      	ldrb	r2, [r7, #15]
 8005272:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005274:	7bfa      	ldrb	r2, [r7, #15]
 8005276:	7bfb      	ldrb	r3, [r7, #15]
 8005278:	b298      	uxth	r0, r3
 800527a:	6879      	ldr	r1, [r7, #4]
 800527c:	4613      	mov	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	1a9b      	subs	r3, r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	3342      	adds	r3, #66	; 0x42
 8005288:	4602      	mov	r2, r0
 800528a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800528c:	7bfa      	ldrb	r2, [r7, #15]
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	4613      	mov	r3, r2
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	1a9b      	subs	r3, r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	333f      	adds	r3, #63	; 0x3f
 800529c:	2200      	movs	r2, #0
 800529e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80052a0:	7bfa      	ldrb	r2, [r7, #15]
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	4613      	mov	r3, r2
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	1a9b      	subs	r3, r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	440b      	add	r3, r1
 80052ae:	3344      	adds	r3, #68	; 0x44
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80052b4:	7bfa      	ldrb	r2, [r7, #15]
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	4613      	mov	r3, r2
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	1a9b      	subs	r3, r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	440b      	add	r3, r1
 80052c2:	3348      	adds	r3, #72	; 0x48
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80052c8:	7bfa      	ldrb	r2, [r7, #15]
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	4613      	mov	r3, r2
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	1a9b      	subs	r3, r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	3350      	adds	r3, #80	; 0x50
 80052d8:	2200      	movs	r2, #0
 80052da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
 80052de:	3301      	adds	r3, #1
 80052e0:	73fb      	strb	r3, [r7, #15]
 80052e2:	7bfa      	ldrb	r2, [r7, #15]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d3af      	bcc.n	800524c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052ec:	2300      	movs	r3, #0
 80052ee:	73fb      	strb	r3, [r7, #15]
 80052f0:	e044      	b.n	800537c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80052f2:	7bfa      	ldrb	r2, [r7, #15]
 80052f4:	6879      	ldr	r1, [r7, #4]
 80052f6:	4613      	mov	r3, r2
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	1a9b      	subs	r3, r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	440b      	add	r3, r1
 8005300:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005304:	2200      	movs	r2, #0
 8005306:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005308:	7bfa      	ldrb	r2, [r7, #15]
 800530a:	6879      	ldr	r1, [r7, #4]
 800530c:	4613      	mov	r3, r2
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	1a9b      	subs	r3, r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	440b      	add	r3, r1
 8005316:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800531a:	7bfa      	ldrb	r2, [r7, #15]
 800531c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800531e:	7bfa      	ldrb	r2, [r7, #15]
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	1a9b      	subs	r3, r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005330:	2200      	movs	r2, #0
 8005332:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005334:	7bfa      	ldrb	r2, [r7, #15]
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	4613      	mov	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	1a9b      	subs	r3, r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	440b      	add	r3, r1
 8005342:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005346:	2200      	movs	r2, #0
 8005348:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800534a:	7bfa      	ldrb	r2, [r7, #15]
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	4613      	mov	r3, r2
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	1a9b      	subs	r3, r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	440b      	add	r3, r1
 8005358:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005360:	7bfa      	ldrb	r2, [r7, #15]
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	4613      	mov	r3, r2
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	1a9b      	subs	r3, r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	440b      	add	r3, r1
 800536e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005376:	7bfb      	ldrb	r3, [r7, #15]
 8005378:	3301      	adds	r3, #1
 800537a:	73fb      	strb	r3, [r7, #15]
 800537c:	7bfa      	ldrb	r2, [r7, #15]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	429a      	cmp	r2, r3
 8005384:	d3b5      	bcc.n	80052f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	603b      	str	r3, [r7, #0]
 800538c:	687e      	ldr	r6, [r7, #4]
 800538e:	466d      	mov	r5, sp
 8005390:	f106 0410 	add.w	r4, r6, #16
 8005394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800539a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800539c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80053a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80053a4:	1d33      	adds	r3, r6, #4
 80053a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053a8:	6838      	ldr	r0, [r7, #0]
 80053aa:	f004 faa3 	bl	80098f4 <USB_DevInit>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d005      	beq.n	80053c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e014      	b.n	80053ea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d102      	bne.n	80053de <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f80a 	bl	80053f2 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f004 fc33 	bl	8009c4e <USB_DevDisconnect>

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053f2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b085      	sub	sp, #20
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005424:	f043 0303 	orr.w	r3, r3, #3
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005440:	4b05      	ldr	r3, [pc, #20]	; (8005458 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a04      	ldr	r2, [pc, #16]	; (8005458 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800544a:	6013      	str	r3, [r2, #0]
}
 800544c:	bf00      	nop
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	40007000 	.word	0x40007000

0800545c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005460:	4b04      	ldr	r3, [pc, #16]	; (8005474 <HAL_PWREx_GetVoltageRange+0x18>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005468:	4618      	mov	r0, r3
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40007000 	.word	0x40007000

08005478 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005486:	d130      	bne.n	80054ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005488:	4b23      	ldr	r3, [pc, #140]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005494:	d038      	beq.n	8005508 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005496:	4b20      	ldr	r3, [pc, #128]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800549e:	4a1e      	ldr	r2, [pc, #120]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054a6:	4b1d      	ldr	r3, [pc, #116]	; (800551c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2232      	movs	r2, #50	; 0x32
 80054ac:	fb02 f303 	mul.w	r3, r2, r3
 80054b0:	4a1b      	ldr	r2, [pc, #108]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	0c9b      	lsrs	r3, r3, #18
 80054b8:	3301      	adds	r3, #1
 80054ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054bc:	e002      	b.n	80054c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3b01      	subs	r3, #1
 80054c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054c4:	4b14      	ldr	r3, [pc, #80]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d0:	d102      	bne.n	80054d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1f2      	bne.n	80054be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054d8:	4b0f      	ldr	r3, [pc, #60]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e4:	d110      	bne.n	8005508 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e00f      	b.n	800550a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80054ea:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054f6:	d007      	beq.n	8005508 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80054f8:	4b07      	ldr	r3, [pc, #28]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005500:	4a05      	ldr	r2, [pc, #20]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005506:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3714      	adds	r7, #20
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	40007000 	.word	0x40007000
 800551c:	200000c4 	.word	0x200000c4
 8005520:	431bde83 	.word	0x431bde83

08005524 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005528:	4b05      	ldr	r3, [pc, #20]	; (8005540 <HAL_PWREx_EnableVddUSB+0x1c>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	4a04      	ldr	r2, [pc, #16]	; (8005540 <HAL_PWREx_EnableVddUSB+0x1c>)
 800552e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005532:	6053      	str	r3, [r2, #4]
}
 8005534:	bf00      	nop
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	40007000 	.word	0x40007000

08005544 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af02      	add	r7, sp, #8
 800554a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800554c:	f7fe fb48 	bl	8003be0 <HAL_GetTick>
 8005550:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e063      	b.n	8005624 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10b      	bne.n	8005580 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7fd fb0d 	bl	8002b90 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005576:	f241 3188 	movw	r1, #5000	; 0x1388
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f858 	bl	8005630 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	3b01      	subs	r3, #1
 8005590:	021a      	lsls	r2, r3, #8
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	2120      	movs	r1, #32
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f850 	bl	800564c <QSPI_WaitFlagStateUntilTimeout>
 80055ac:	4603      	mov	r3, r0
 80055ae:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80055b0:	7afb      	ldrb	r3, [r7, #11]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d131      	bne.n	800561a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80055c0:	f023 0310 	bic.w	r3, r3, #16
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6852      	ldr	r2, [r2, #4]
 80055c8:	0611      	lsls	r1, r2, #24
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	68d2      	ldr	r2, [r2, #12]
 80055ce:	4311      	orrs	r1, r2
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	6812      	ldr	r2, [r2, #0]
 80055d4:	430b      	orrs	r3, r1
 80055d6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	4b13      	ldr	r3, [pc, #76]	; (800562c <HAL_QSPI_Init+0xe8>)
 80055e0:	4013      	ands	r3, r2
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	6912      	ldr	r2, [r2, #16]
 80055e6:	0411      	lsls	r1, r2, #16
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	6952      	ldr	r2, [r2, #20]
 80055ec:	4311      	orrs	r1, r2
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	6992      	ldr	r2, [r2, #24]
 80055f2:	4311      	orrs	r1, r2
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	6812      	ldr	r2, [r2, #0]
 80055f8:	430b      	orrs	r3, r1
 80055fa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0201 	orr.w	r2, r2, #1
 800560a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8005622:	7afb      	ldrb	r3, [r7, #11]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	ffe0f8fe 	.word	0xffe0f8fe

08005630 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	603b      	str	r3, [r7, #0]
 8005658:	4613      	mov	r3, r2
 800565a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800565c:	e01a      	b.n	8005694 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005664:	d016      	beq.n	8005694 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005666:	f7fe fabb 	bl	8003be0 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	429a      	cmp	r2, r3
 8005674:	d302      	bcc.n	800567c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10b      	bne.n	8005694 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2204      	movs	r2, #4
 8005680:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005688:	f043 0201 	orr.w	r2, r3, #1
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e00e      	b.n	80056b2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689a      	ldr	r2, [r3, #8]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	4013      	ands	r3, r2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	bf14      	ite	ne
 80056a2:	2301      	movne	r3, #1
 80056a4:	2300      	moveq	r3, #0
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	461a      	mov	r2, r3
 80056aa:	79fb      	ldrb	r3, [r7, #7]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d1d6      	bne.n	800565e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
	...

080056bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b088      	sub	sp, #32
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e3d8      	b.n	8005e80 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056ce:	4b97      	ldr	r3, [pc, #604]	; (800592c <HAL_RCC_OscConfig+0x270>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f003 030c 	and.w	r3, r3, #12
 80056d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056d8:	4b94      	ldr	r3, [pc, #592]	; (800592c <HAL_RCC_OscConfig+0x270>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f003 0303 	and.w	r3, r3, #3
 80056e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0310 	and.w	r3, r3, #16
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 80e4 	beq.w	80058b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d007      	beq.n	8005706 <HAL_RCC_OscConfig+0x4a>
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	2b0c      	cmp	r3, #12
 80056fa:	f040 808b 	bne.w	8005814 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2b01      	cmp	r3, #1
 8005702:	f040 8087 	bne.w	8005814 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005706:	4b89      	ldr	r3, [pc, #548]	; (800592c <HAL_RCC_OscConfig+0x270>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d005      	beq.n	800571e <HAL_RCC_OscConfig+0x62>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e3b0      	b.n	8005e80 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1a      	ldr	r2, [r3, #32]
 8005722:	4b82      	ldr	r3, [pc, #520]	; (800592c <HAL_RCC_OscConfig+0x270>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0308 	and.w	r3, r3, #8
 800572a:	2b00      	cmp	r3, #0
 800572c:	d004      	beq.n	8005738 <HAL_RCC_OscConfig+0x7c>
 800572e:	4b7f      	ldr	r3, [pc, #508]	; (800592c <HAL_RCC_OscConfig+0x270>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005736:	e005      	b.n	8005744 <HAL_RCC_OscConfig+0x88>
 8005738:	4b7c      	ldr	r3, [pc, #496]	; (800592c <HAL_RCC_OscConfig+0x270>)
 800573a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800573e:	091b      	lsrs	r3, r3, #4
 8005740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005744:	4293      	cmp	r3, r2
 8005746:	d223      	bcs.n	8005790 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	4618      	mov	r0, r3
 800574e:	f000 fd75 	bl	800623c <RCC_SetFlashLatencyFromMSIRange>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e391      	b.n	8005e80 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800575c:	4b73      	ldr	r3, [pc, #460]	; (800592c <HAL_RCC_OscConfig+0x270>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a72      	ldr	r2, [pc, #456]	; (800592c <HAL_RCC_OscConfig+0x270>)
 8005762:	f043 0308 	orr.w	r3, r3, #8
 8005766:	6013      	str	r3, [r2, #0]
 8005768:	4b70      	ldr	r3, [pc, #448]	; (800592c <HAL_RCC_OscConfig+0x270>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	496d      	ldr	r1, [pc, #436]	; (800592c <HAL_RCC_OscConfig+0x270>)
 8005776:	4313      	orrs	r3, r2
 8005778:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800577a:	4b6c      	ldr	r3, [pc, #432]	; (800592c <HAL_RCC_OscConfig+0x270>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	021b      	lsls	r3, r3, #8
 8005788:	4968      	ldr	r1, [pc, #416]	; (800592c <HAL_RCC_OscConfig+0x270>)
 800578a:	4313      	orrs	r3, r2
 800578c:	604b      	str	r3, [r1, #4]
 800578e:	e025      	b.n	80057dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005790:	4b66      	ldr	r3, [pc, #408]	; (800592c <HAL_RCC_OscConfig+0x270>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a65      	ldr	r2, [pc, #404]	; (800592c <HAL_RCC_OscConfig+0x270>)
 8005796:	f043 0308 	orr.w	r3, r3, #8
 800579a:	6013      	str	r3, [r2, #0]
 800579c:	4b63      	ldr	r3, [pc, #396]	; (800592c <HAL_RCC_OscConfig+0x270>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	4960      	ldr	r1, [pc, #384]	; (800592c <HAL_RCC_OscConfig+0x270>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057ae:	4b5f      	ldr	r3, [pc, #380]	; (800592c <HAL_RCC_OscConfig+0x270>)
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	021b      	lsls	r3, r3, #8
 80057bc:	495b      	ldr	r1, [pc, #364]	; (800592c <HAL_RCC_OscConfig+0x270>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d109      	bne.n	80057dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 fd35 	bl	800623c <RCC_SetFlashLatencyFromMSIRange>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d001      	beq.n	80057dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e351      	b.n	8005e80 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80057dc:	f000 fc38 	bl	8006050 <HAL_RCC_GetSysClockFreq>
 80057e0:	4602      	mov	r2, r0
 80057e2:	4b52      	ldr	r3, [pc, #328]	; (800592c <HAL_RCC_OscConfig+0x270>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	091b      	lsrs	r3, r3, #4
 80057e8:	f003 030f 	and.w	r3, r3, #15
 80057ec:	4950      	ldr	r1, [pc, #320]	; (8005930 <HAL_RCC_OscConfig+0x274>)
 80057ee:	5ccb      	ldrb	r3, [r1, r3]
 80057f0:	f003 031f 	and.w	r3, r3, #31
 80057f4:	fa22 f303 	lsr.w	r3, r2, r3
 80057f8:	4a4e      	ldr	r2, [pc, #312]	; (8005934 <HAL_RCC_OscConfig+0x278>)
 80057fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80057fc:	4b4e      	ldr	r3, [pc, #312]	; (8005938 <HAL_RCC_OscConfig+0x27c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4618      	mov	r0, r3
 8005802:	f7fd fb55 	bl	8002eb0 <HAL_InitTick>
 8005806:	4603      	mov	r3, r0
 8005808:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800580a:	7bfb      	ldrb	r3, [r7, #15]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d052      	beq.n	80058b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005810:	7bfb      	ldrb	r3, [r7, #15]
 8005812:	e335      	b.n	8005e80 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d032      	beq.n	8005882 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800581c:	4b43      	ldr	r3, [pc, #268]	; (800592c <HAL_RCC_OscConfig+0x270>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a42      	ldr	r2, [pc, #264]	; (800592c <HAL_RCC_OscConfig+0x270>)
 8005822:	f043 0301 	orr.w	r3, r3, #1
 8005826:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005828:	f7fe f9da 	bl	8003be0 <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800582e:	e008      	b.n	8005842 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005830:	f7fe f9d6 	bl	8003be0 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d901      	bls.n	8005842 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e31e      	b.n	8005e80 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005842:	4b3a      	ldr	r3, [pc, #232]	; (800592c <HAL_RCC_OscConfig+0x270>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0f0      	beq.n	8005830 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800584e:	4b37      	ldr	r3, [pc, #220]	; (800592c <HAL_RCC_OscConfig+0x270>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a36      	ldr	r2, [pc, #216]	; (800592c <HAL_RCC_OscConfig+0x270>)
 8005854:	f043 0308 	orr.w	r3, r3, #8
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	4b34      	ldr	r3, [pc, #208]	; (800592c <HAL_RCC_OscConfig+0x270>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	4931      	ldr	r1, [pc, #196]	; (800592c <HAL_RCC_OscConfig+0x270>)
 8005868:	4313      	orrs	r3, r2
 800586a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800586c:	4b2f      	ldr	r3, [pc, #188]	; (800592c <HAL_RCC_OscConfig+0x270>)
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	69db      	ldr	r3, [r3, #28]
 8005878:	021b      	lsls	r3, r3, #8
 800587a:	492c      	ldr	r1, [pc, #176]	; (800592c <HAL_RCC_OscConfig+0x270>)
 800587c:	4313      	orrs	r3, r2
 800587e:	604b      	str	r3, [r1, #4]
 8005880:	e01a      	b.n	80058b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005882:	4b2a      	ldr	r3, [pc, #168]	; (800592c <HAL_RCC_OscConfig+0x270>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a29      	ldr	r2, [pc, #164]	; (800592c <HAL_RCC_OscConfig+0x270>)
 8005888:	f023 0301 	bic.w	r3, r3, #1
 800588c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800588e:	f7fe f9a7 	bl	8003be0 <HAL_GetTick>
 8005892:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005894:	e008      	b.n	80058a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005896:	f7fe f9a3 	bl	8003be0 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e2eb      	b.n	8005e80 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80058a8:	4b20      	ldr	r3, [pc, #128]	; (800592c <HAL_RCC_OscConfig+0x270>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1f0      	bne.n	8005896 <HAL_RCC_OscConfig+0x1da>
 80058b4:	e000      	b.n	80058b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80058b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d074      	beq.n	80059ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	d005      	beq.n	80058d6 <HAL_RCC_OscConfig+0x21a>
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	2b0c      	cmp	r3, #12
 80058ce:	d10e      	bne.n	80058ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	2b03      	cmp	r3, #3
 80058d4:	d10b      	bne.n	80058ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058d6:	4b15      	ldr	r3, [pc, #84]	; (800592c <HAL_RCC_OscConfig+0x270>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d064      	beq.n	80059ac <HAL_RCC_OscConfig+0x2f0>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d160      	bne.n	80059ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e2c8      	b.n	8005e80 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f6:	d106      	bne.n	8005906 <HAL_RCC_OscConfig+0x24a>
 80058f8:	4b0c      	ldr	r3, [pc, #48]	; (800592c <HAL_RCC_OscConfig+0x270>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a0b      	ldr	r2, [pc, #44]	; (800592c <HAL_RCC_OscConfig+0x270>)
 80058fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005902:	6013      	str	r3, [r2, #0]
 8005904:	e026      	b.n	8005954 <HAL_RCC_OscConfig+0x298>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800590e:	d115      	bne.n	800593c <HAL_RCC_OscConfig+0x280>
 8005910:	4b06      	ldr	r3, [pc, #24]	; (800592c <HAL_RCC_OscConfig+0x270>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a05      	ldr	r2, [pc, #20]	; (800592c <HAL_RCC_OscConfig+0x270>)
 8005916:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800591a:	6013      	str	r3, [r2, #0]
 800591c:	4b03      	ldr	r3, [pc, #12]	; (800592c <HAL_RCC_OscConfig+0x270>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a02      	ldr	r2, [pc, #8]	; (800592c <HAL_RCC_OscConfig+0x270>)
 8005922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005926:	6013      	str	r3, [r2, #0]
 8005928:	e014      	b.n	8005954 <HAL_RCC_OscConfig+0x298>
 800592a:	bf00      	nop
 800592c:	40021000 	.word	0x40021000
 8005930:	08012338 	.word	0x08012338
 8005934:	200000c4 	.word	0x200000c4
 8005938:	200000c8 	.word	0x200000c8
 800593c:	4ba0      	ldr	r3, [pc, #640]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a9f      	ldr	r2, [pc, #636]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	4b9d      	ldr	r3, [pc, #628]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a9c      	ldr	r2, [pc, #624]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 800594e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005952:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d013      	beq.n	8005984 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595c:	f7fe f940 	bl	8003be0 <HAL_GetTick>
 8005960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005964:	f7fe f93c 	bl	8003be0 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b64      	cmp	r3, #100	; 0x64
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e284      	b.n	8005e80 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005976:	4b92      	ldr	r3, [pc, #584]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0f0      	beq.n	8005964 <HAL_RCC_OscConfig+0x2a8>
 8005982:	e014      	b.n	80059ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005984:	f7fe f92c 	bl	8003be0 <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800598c:	f7fe f928 	bl	8003be0 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b64      	cmp	r3, #100	; 0x64
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e270      	b.n	8005e80 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800599e:	4b88      	ldr	r3, [pc, #544]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1f0      	bne.n	800598c <HAL_RCC_OscConfig+0x2d0>
 80059aa:	e000      	b.n	80059ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d060      	beq.n	8005a7c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d005      	beq.n	80059cc <HAL_RCC_OscConfig+0x310>
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	2b0c      	cmp	r3, #12
 80059c4:	d119      	bne.n	80059fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d116      	bne.n	80059fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059cc:	4b7c      	ldr	r3, [pc, #496]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d005      	beq.n	80059e4 <HAL_RCC_OscConfig+0x328>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e24d      	b.n	8005e80 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059e4:	4b76      	ldr	r3, [pc, #472]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	061b      	lsls	r3, r3, #24
 80059f2:	4973      	ldr	r1, [pc, #460]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059f8:	e040      	b.n	8005a7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d023      	beq.n	8005a4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a02:	4b6f      	ldr	r3, [pc, #444]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a6e      	ldr	r2, [pc, #440]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0e:	f7fe f8e7 	bl	8003be0 <HAL_GetTick>
 8005a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a14:	e008      	b.n	8005a28 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a16:	f7fe f8e3 	bl	8003be0 <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d901      	bls.n	8005a28 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e22b      	b.n	8005e80 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a28:	4b65      	ldr	r3, [pc, #404]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d0f0      	beq.n	8005a16 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a34:	4b62      	ldr	r3, [pc, #392]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	061b      	lsls	r3, r3, #24
 8005a42:	495f      	ldr	r1, [pc, #380]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	604b      	str	r3, [r1, #4]
 8005a48:	e018      	b.n	8005a7c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a4a:	4b5d      	ldr	r3, [pc, #372]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a5c      	ldr	r2, [pc, #368]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a56:	f7fe f8c3 	bl	8003be0 <HAL_GetTick>
 8005a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a5c:	e008      	b.n	8005a70 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a5e:	f7fe f8bf 	bl	8003be0 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d901      	bls.n	8005a70 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e207      	b.n	8005e80 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a70:	4b53      	ldr	r3, [pc, #332]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1f0      	bne.n	8005a5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d03c      	beq.n	8005b02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d01c      	beq.n	8005aca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a90:	4b4b      	ldr	r3, [pc, #300]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a96:	4a4a      	ldr	r2, [pc, #296]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005a98:	f043 0301 	orr.w	r3, r3, #1
 8005a9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa0:	f7fe f89e 	bl	8003be0 <HAL_GetTick>
 8005aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aa8:	f7fe f89a 	bl	8003be0 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e1e2      	b.n	8005e80 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005aba:	4b41      	ldr	r3, [pc, #260]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d0ef      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x3ec>
 8005ac8:	e01b      	b.n	8005b02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005aca:	4b3d      	ldr	r3, [pc, #244]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ad0:	4a3b      	ldr	r2, [pc, #236]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005ad2:	f023 0301 	bic.w	r3, r3, #1
 8005ad6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ada:	f7fe f881 	bl	8003be0 <HAL_GetTick>
 8005ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ae0:	e008      	b.n	8005af4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ae2:	f7fe f87d 	bl	8003be0 <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d901      	bls.n	8005af4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e1c5      	b.n	8005e80 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005af4:	4b32      	ldr	r3, [pc, #200]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1ef      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0304 	and.w	r3, r3, #4
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 80a6 	beq.w	8005c5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b10:	2300      	movs	r3, #0
 8005b12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005b14:	4b2a      	ldr	r3, [pc, #168]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10d      	bne.n	8005b3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b20:	4b27      	ldr	r3, [pc, #156]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b24:	4a26      	ldr	r2, [pc, #152]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b2a:	6593      	str	r3, [r2, #88]	; 0x58
 8005b2c:	4b24      	ldr	r3, [pc, #144]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b34:	60bb      	str	r3, [r7, #8]
 8005b36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b3c:	4b21      	ldr	r3, [pc, #132]	; (8005bc4 <HAL_RCC_OscConfig+0x508>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d118      	bne.n	8005b7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b48:	4b1e      	ldr	r3, [pc, #120]	; (8005bc4 <HAL_RCC_OscConfig+0x508>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a1d      	ldr	r2, [pc, #116]	; (8005bc4 <HAL_RCC_OscConfig+0x508>)
 8005b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b54:	f7fe f844 	bl	8003be0 <HAL_GetTick>
 8005b58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b5a:	e008      	b.n	8005b6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b5c:	f7fe f840 	bl	8003be0 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d901      	bls.n	8005b6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e188      	b.n	8005e80 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b6e:	4b15      	ldr	r3, [pc, #84]	; (8005bc4 <HAL_RCC_OscConfig+0x508>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0f0      	beq.n	8005b5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d108      	bne.n	8005b94 <HAL_RCC_OscConfig+0x4d8>
 8005b82:	4b0f      	ldr	r3, [pc, #60]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b88:	4a0d      	ldr	r2, [pc, #52]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005b8a:	f043 0301 	orr.w	r3, r3, #1
 8005b8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b92:	e029      	b.n	8005be8 <HAL_RCC_OscConfig+0x52c>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	2b05      	cmp	r3, #5
 8005b9a:	d115      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x50c>
 8005b9c:	4b08      	ldr	r3, [pc, #32]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba2:	4a07      	ldr	r2, [pc, #28]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005ba4:	f043 0304 	orr.w	r3, r3, #4
 8005ba8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bac:	4b04      	ldr	r3, [pc, #16]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb2:	4a03      	ldr	r2, [pc, #12]	; (8005bc0 <HAL_RCC_OscConfig+0x504>)
 8005bb4:	f043 0301 	orr.w	r3, r3, #1
 8005bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bbc:	e014      	b.n	8005be8 <HAL_RCC_OscConfig+0x52c>
 8005bbe:	bf00      	nop
 8005bc0:	40021000 	.word	0x40021000
 8005bc4:	40007000 	.word	0x40007000
 8005bc8:	4b91      	ldr	r3, [pc, #580]	; (8005e10 <HAL_RCC_OscConfig+0x754>)
 8005bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bce:	4a90      	ldr	r2, [pc, #576]	; (8005e10 <HAL_RCC_OscConfig+0x754>)
 8005bd0:	f023 0301 	bic.w	r3, r3, #1
 8005bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bd8:	4b8d      	ldr	r3, [pc, #564]	; (8005e10 <HAL_RCC_OscConfig+0x754>)
 8005bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bde:	4a8c      	ldr	r2, [pc, #560]	; (8005e10 <HAL_RCC_OscConfig+0x754>)
 8005be0:	f023 0304 	bic.w	r3, r3, #4
 8005be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d016      	beq.n	8005c1e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf0:	f7fd fff6 	bl	8003be0 <HAL_GetTick>
 8005bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bf6:	e00a      	b.n	8005c0e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bf8:	f7fd fff2 	bl	8003be0 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e138      	b.n	8005e80 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c0e:	4b80      	ldr	r3, [pc, #512]	; (8005e10 <HAL_RCC_OscConfig+0x754>)
 8005c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d0ed      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x53c>
 8005c1c:	e015      	b.n	8005c4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c1e:	f7fd ffdf 	bl	8003be0 <HAL_GetTick>
 8005c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c24:	e00a      	b.n	8005c3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c26:	f7fd ffdb 	bl	8003be0 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d901      	bls.n	8005c3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e121      	b.n	8005e80 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c3c:	4b74      	ldr	r3, [pc, #464]	; (8005e10 <HAL_RCC_OscConfig+0x754>)
 8005c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1ed      	bne.n	8005c26 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c4a:	7ffb      	ldrb	r3, [r7, #31]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d105      	bne.n	8005c5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c50:	4b6f      	ldr	r3, [pc, #444]	; (8005e10 <HAL_RCC_OscConfig+0x754>)
 8005c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c54:	4a6e      	ldr	r2, [pc, #440]	; (8005e10 <HAL_RCC_OscConfig+0x754>)
 8005c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c5a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 810c 	beq.w	8005e7e <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	f040 80d4 	bne.w	8005e18 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005c70:	4b67      	ldr	r3, [pc, #412]	; (8005e10 <HAL_RCC_OscConfig+0x754>)
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f003 0203 	and.w	r2, r3, #3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d130      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d127      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d11f      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cb0:	2a07      	cmp	r2, #7
 8005cb2:	bf14      	ite	ne
 8005cb4:	2201      	movne	r2, #1
 8005cb6:	2200      	moveq	r2, #0
 8005cb8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d113      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc8:	085b      	lsrs	r3, r3, #1
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d109      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cdc:	085b      	lsrs	r3, r3, #1
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d06e      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	2b0c      	cmp	r3, #12
 8005cea:	d069      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005cec:	4b48      	ldr	r3, [pc, #288]	; (8005e10 <HAL_RCC_OscConfig+0x754>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d105      	bne.n	8005d04 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005cf8:	4b45      	ldr	r3, [pc, #276]	; (8005e10 <HAL_RCC_OscConfig+0x754>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e0bb      	b.n	8005e80 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005d08:	4b41      	ldr	r3, [pc, #260]	; (8005e10 <HAL_RCC_OscConfig+0x754>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a40      	ldr	r2, [pc, #256]	; (8005e10 <HAL_RCC_OscConfig+0x754>)
 8005d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d12:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d14:	f7fd ff64 	bl	8003be0 <HAL_GetTick>
 8005d18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d1a:	e008      	b.n	8005d2e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d1c:	f7fd ff60 	bl	8003be0 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e0a8      	b.n	8005e80 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d2e:	4b38      	ldr	r3, [pc, #224]	; (8005e10 <HAL_RCC_OscConfig+0x754>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1f0      	bne.n	8005d1c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d3a:	4b35      	ldr	r3, [pc, #212]	; (8005e10 <HAL_RCC_OscConfig+0x754>)
 8005d3c:	68da      	ldr	r2, [r3, #12]
 8005d3e:	4b35      	ldr	r3, [pc, #212]	; (8005e14 <HAL_RCC_OscConfig+0x758>)
 8005d40:	4013      	ands	r3, r2
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d4a:	3a01      	subs	r2, #1
 8005d4c:	0112      	lsls	r2, r2, #4
 8005d4e:	4311      	orrs	r1, r2
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d54:	0212      	lsls	r2, r2, #8
 8005d56:	4311      	orrs	r1, r2
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d5c:	0852      	lsrs	r2, r2, #1
 8005d5e:	3a01      	subs	r2, #1
 8005d60:	0552      	lsls	r2, r2, #21
 8005d62:	4311      	orrs	r1, r2
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005d68:	0852      	lsrs	r2, r2, #1
 8005d6a:	3a01      	subs	r2, #1
 8005d6c:	0652      	lsls	r2, r2, #25
 8005d6e:	4311      	orrs	r1, r2
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d74:	0912      	lsrs	r2, r2, #4
 8005d76:	0452      	lsls	r2, r2, #17
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	4925      	ldr	r1, [pc, #148]	; (8005e10 <HAL_RCC_OscConfig+0x754>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005d80:	4b23      	ldr	r3, [pc, #140]	; (8005e10 <HAL_RCC_OscConfig+0x754>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a22      	ldr	r2, [pc, #136]	; (8005e10 <HAL_RCC_OscConfig+0x754>)
 8005d86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d8c:	4b20      	ldr	r3, [pc, #128]	; (8005e10 <HAL_RCC_OscConfig+0x754>)
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	4a1f      	ldr	r2, [pc, #124]	; (8005e10 <HAL_RCC_OscConfig+0x754>)
 8005d92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d98:	f7fd ff22 	bl	8003be0 <HAL_GetTick>
 8005d9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da0:	f7fd ff1e 	bl	8003be0 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e066      	b.n	8005e80 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005db2:	4b17      	ldr	r3, [pc, #92]	; (8005e10 <HAL_RCC_OscConfig+0x754>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0f0      	beq.n	8005da0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005dbe:	e05e      	b.n	8005e7e <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e05d      	b.n	8005e80 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dc4:	4b12      	ldr	r3, [pc, #72]	; (8005e10 <HAL_RCC_OscConfig+0x754>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d156      	bne.n	8005e7e <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005dd0:	4b0f      	ldr	r3, [pc, #60]	; (8005e10 <HAL_RCC_OscConfig+0x754>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a0e      	ldr	r2, [pc, #56]	; (8005e10 <HAL_RCC_OscConfig+0x754>)
 8005dd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ddc:	4b0c      	ldr	r3, [pc, #48]	; (8005e10 <HAL_RCC_OscConfig+0x754>)
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	4a0b      	ldr	r2, [pc, #44]	; (8005e10 <HAL_RCC_OscConfig+0x754>)
 8005de2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005de6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005de8:	f7fd fefa 	bl	8003be0 <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005df0:	f7fd fef6 	bl	8003be0 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e03e      	b.n	8005e80 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e02:	4b03      	ldr	r3, [pc, #12]	; (8005e10 <HAL_RCC_OscConfig+0x754>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d0f0      	beq.n	8005df0 <HAL_RCC_OscConfig+0x734>
 8005e0e:	e036      	b.n	8005e7e <HAL_RCC_OscConfig+0x7c2>
 8005e10:	40021000 	.word	0x40021000
 8005e14:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	2b0c      	cmp	r3, #12
 8005e1c:	d02d      	beq.n	8005e7a <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e1e:	4b1a      	ldr	r3, [pc, #104]	; (8005e88 <HAL_RCC_OscConfig+0x7cc>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a19      	ldr	r2, [pc, #100]	; (8005e88 <HAL_RCC_OscConfig+0x7cc>)
 8005e24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e28:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005e2a:	4b17      	ldr	r3, [pc, #92]	; (8005e88 <HAL_RCC_OscConfig+0x7cc>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d105      	bne.n	8005e42 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005e36:	4b14      	ldr	r3, [pc, #80]	; (8005e88 <HAL_RCC_OscConfig+0x7cc>)
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	4a13      	ldr	r2, [pc, #76]	; (8005e88 <HAL_RCC_OscConfig+0x7cc>)
 8005e3c:	f023 0303 	bic.w	r3, r3, #3
 8005e40:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005e42:	4b11      	ldr	r3, [pc, #68]	; (8005e88 <HAL_RCC_OscConfig+0x7cc>)
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	4a10      	ldr	r2, [pc, #64]	; (8005e88 <HAL_RCC_OscConfig+0x7cc>)
 8005e48:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e50:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e52:	f7fd fec5 	bl	8003be0 <HAL_GetTick>
 8005e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e58:	e008      	b.n	8005e6c <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e5a:	f7fd fec1 	bl	8003be0 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d901      	bls.n	8005e6c <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e009      	b.n	8005e80 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e6c:	4b06      	ldr	r3, [pc, #24]	; (8005e88 <HAL_RCC_OscConfig+0x7cc>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1f0      	bne.n	8005e5a <HAL_RCC_OscConfig+0x79e>
 8005e78:	e001      	b.n	8005e7e <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e000      	b.n	8005e80 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3720      	adds	r7, #32
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	40021000 	.word	0x40021000

08005e8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e0c8      	b.n	8006032 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ea0:	4b66      	ldr	r3, [pc, #408]	; (800603c <HAL_RCC_ClockConfig+0x1b0>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0307 	and.w	r3, r3, #7
 8005ea8:	683a      	ldr	r2, [r7, #0]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d910      	bls.n	8005ed0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eae:	4b63      	ldr	r3, [pc, #396]	; (800603c <HAL_RCC_ClockConfig+0x1b0>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f023 0207 	bic.w	r2, r3, #7
 8005eb6:	4961      	ldr	r1, [pc, #388]	; (800603c <HAL_RCC_ClockConfig+0x1b0>)
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ebe:	4b5f      	ldr	r3, [pc, #380]	; (800603c <HAL_RCC_ClockConfig+0x1b0>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d001      	beq.n	8005ed0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e0b0      	b.n	8006032 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d04c      	beq.n	8005f76 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	2b03      	cmp	r3, #3
 8005ee2:	d107      	bne.n	8005ef4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ee4:	4b56      	ldr	r3, [pc, #344]	; (8006040 <HAL_RCC_ClockConfig+0x1b4>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d121      	bne.n	8005f34 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e09e      	b.n	8006032 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d107      	bne.n	8005f0c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005efc:	4b50      	ldr	r3, [pc, #320]	; (8006040 <HAL_RCC_ClockConfig+0x1b4>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d115      	bne.n	8005f34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e092      	b.n	8006032 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d107      	bne.n	8005f24 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f14:	4b4a      	ldr	r3, [pc, #296]	; (8006040 <HAL_RCC_ClockConfig+0x1b4>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0302 	and.w	r3, r3, #2
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d109      	bne.n	8005f34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e086      	b.n	8006032 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f24:	4b46      	ldr	r3, [pc, #280]	; (8006040 <HAL_RCC_ClockConfig+0x1b4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e07e      	b.n	8006032 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f34:	4b42      	ldr	r3, [pc, #264]	; (8006040 <HAL_RCC_ClockConfig+0x1b4>)
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f023 0203 	bic.w	r2, r3, #3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	493f      	ldr	r1, [pc, #252]	; (8006040 <HAL_RCC_ClockConfig+0x1b4>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f46:	f7fd fe4b 	bl	8003be0 <HAL_GetTick>
 8005f4a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f4c:	e00a      	b.n	8005f64 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f4e:	f7fd fe47 	bl	8003be0 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d901      	bls.n	8005f64 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e066      	b.n	8006032 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f64:	4b36      	ldr	r3, [pc, #216]	; (8006040 <HAL_RCC_ClockConfig+0x1b4>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f003 020c 	and.w	r2, r3, #12
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d1eb      	bne.n	8005f4e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d008      	beq.n	8005f94 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f82:	4b2f      	ldr	r3, [pc, #188]	; (8006040 <HAL_RCC_ClockConfig+0x1b4>)
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	492c      	ldr	r1, [pc, #176]	; (8006040 <HAL_RCC_ClockConfig+0x1b4>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f94:	4b29      	ldr	r3, [pc, #164]	; (800603c <HAL_RCC_ClockConfig+0x1b0>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0307 	and.w	r3, r3, #7
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d210      	bcs.n	8005fc4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fa2:	4b26      	ldr	r3, [pc, #152]	; (800603c <HAL_RCC_ClockConfig+0x1b0>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f023 0207 	bic.w	r2, r3, #7
 8005faa:	4924      	ldr	r1, [pc, #144]	; (800603c <HAL_RCC_ClockConfig+0x1b0>)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fb2:	4b22      	ldr	r3, [pc, #136]	; (800603c <HAL_RCC_ClockConfig+0x1b0>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0307 	and.w	r3, r3, #7
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d001      	beq.n	8005fc4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e036      	b.n	8006032 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d008      	beq.n	8005fe2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fd0:	4b1b      	ldr	r3, [pc, #108]	; (8006040 <HAL_RCC_ClockConfig+0x1b4>)
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	4918      	ldr	r1, [pc, #96]	; (8006040 <HAL_RCC_ClockConfig+0x1b4>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d009      	beq.n	8006002 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fee:	4b14      	ldr	r3, [pc, #80]	; (8006040 <HAL_RCC_ClockConfig+0x1b4>)
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	4910      	ldr	r1, [pc, #64]	; (8006040 <HAL_RCC_ClockConfig+0x1b4>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006002:	f000 f825 	bl	8006050 <HAL_RCC_GetSysClockFreq>
 8006006:	4602      	mov	r2, r0
 8006008:	4b0d      	ldr	r3, [pc, #52]	; (8006040 <HAL_RCC_ClockConfig+0x1b4>)
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	091b      	lsrs	r3, r3, #4
 800600e:	f003 030f 	and.w	r3, r3, #15
 8006012:	490c      	ldr	r1, [pc, #48]	; (8006044 <HAL_RCC_ClockConfig+0x1b8>)
 8006014:	5ccb      	ldrb	r3, [r1, r3]
 8006016:	f003 031f 	and.w	r3, r3, #31
 800601a:	fa22 f303 	lsr.w	r3, r2, r3
 800601e:	4a0a      	ldr	r2, [pc, #40]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8006020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006022:	4b0a      	ldr	r3, [pc, #40]	; (800604c <HAL_RCC_ClockConfig+0x1c0>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4618      	mov	r0, r3
 8006028:	f7fc ff42 	bl	8002eb0 <HAL_InitTick>
 800602c:	4603      	mov	r3, r0
 800602e:	72fb      	strb	r3, [r7, #11]

  return status;
 8006030:	7afb      	ldrb	r3, [r7, #11]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	40022000 	.word	0x40022000
 8006040:	40021000 	.word	0x40021000
 8006044:	08012338 	.word	0x08012338
 8006048:	200000c4 	.word	0x200000c4
 800604c:	200000c8 	.word	0x200000c8

08006050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006050:	b480      	push	{r7}
 8006052:	b089      	sub	sp, #36	; 0x24
 8006054:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	61fb      	str	r3, [r7, #28]
 800605a:	2300      	movs	r3, #0
 800605c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800605e:	4b3e      	ldr	r3, [pc, #248]	; (8006158 <HAL_RCC_GetSysClockFreq+0x108>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f003 030c 	and.w	r3, r3, #12
 8006066:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006068:	4b3b      	ldr	r3, [pc, #236]	; (8006158 <HAL_RCC_GetSysClockFreq+0x108>)
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	f003 0303 	and.w	r3, r3, #3
 8006070:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d005      	beq.n	8006084 <HAL_RCC_GetSysClockFreq+0x34>
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	2b0c      	cmp	r3, #12
 800607c:	d121      	bne.n	80060c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d11e      	bne.n	80060c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006084:	4b34      	ldr	r3, [pc, #208]	; (8006158 <HAL_RCC_GetSysClockFreq+0x108>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0308 	and.w	r3, r3, #8
 800608c:	2b00      	cmp	r3, #0
 800608e:	d107      	bne.n	80060a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006090:	4b31      	ldr	r3, [pc, #196]	; (8006158 <HAL_RCC_GetSysClockFreq+0x108>)
 8006092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006096:	0a1b      	lsrs	r3, r3, #8
 8006098:	f003 030f 	and.w	r3, r3, #15
 800609c:	61fb      	str	r3, [r7, #28]
 800609e:	e005      	b.n	80060ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80060a0:	4b2d      	ldr	r3, [pc, #180]	; (8006158 <HAL_RCC_GetSysClockFreq+0x108>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	091b      	lsrs	r3, r3, #4
 80060a6:	f003 030f 	and.w	r3, r3, #15
 80060aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80060ac:	4a2b      	ldr	r2, [pc, #172]	; (800615c <HAL_RCC_GetSysClockFreq+0x10c>)
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10d      	bne.n	80060d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80060c0:	e00a      	b.n	80060d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	2b04      	cmp	r3, #4
 80060c6:	d102      	bne.n	80060ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80060c8:	4b25      	ldr	r3, [pc, #148]	; (8006160 <HAL_RCC_GetSysClockFreq+0x110>)
 80060ca:	61bb      	str	r3, [r7, #24]
 80060cc:	e004      	b.n	80060d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	2b08      	cmp	r3, #8
 80060d2:	d101      	bne.n	80060d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80060d4:	4b23      	ldr	r3, [pc, #140]	; (8006164 <HAL_RCC_GetSysClockFreq+0x114>)
 80060d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	2b0c      	cmp	r3, #12
 80060dc:	d134      	bne.n	8006148 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80060de:	4b1e      	ldr	r3, [pc, #120]	; (8006158 <HAL_RCC_GetSysClockFreq+0x108>)
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f003 0303 	and.w	r3, r3, #3
 80060e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d003      	beq.n	80060f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2b03      	cmp	r3, #3
 80060f2:	d003      	beq.n	80060fc <HAL_RCC_GetSysClockFreq+0xac>
 80060f4:	e005      	b.n	8006102 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80060f6:	4b1a      	ldr	r3, [pc, #104]	; (8006160 <HAL_RCC_GetSysClockFreq+0x110>)
 80060f8:	617b      	str	r3, [r7, #20]
      break;
 80060fa:	e005      	b.n	8006108 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80060fc:	4b19      	ldr	r3, [pc, #100]	; (8006164 <HAL_RCC_GetSysClockFreq+0x114>)
 80060fe:	617b      	str	r3, [r7, #20]
      break;
 8006100:	e002      	b.n	8006108 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	617b      	str	r3, [r7, #20]
      break;
 8006106:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006108:	4b13      	ldr	r3, [pc, #76]	; (8006158 <HAL_RCC_GetSysClockFreq+0x108>)
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	091b      	lsrs	r3, r3, #4
 800610e:	f003 0307 	and.w	r3, r3, #7
 8006112:	3301      	adds	r3, #1
 8006114:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006116:	4b10      	ldr	r3, [pc, #64]	; (8006158 <HAL_RCC_GetSysClockFreq+0x108>)
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	0a1b      	lsrs	r3, r3, #8
 800611c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	fb03 f202 	mul.w	r2, r3, r2
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	fbb2 f3f3 	udiv	r3, r2, r3
 800612c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800612e:	4b0a      	ldr	r3, [pc, #40]	; (8006158 <HAL_RCC_GetSysClockFreq+0x108>)
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	0e5b      	lsrs	r3, r3, #25
 8006134:	f003 0303 	and.w	r3, r3, #3
 8006138:	3301      	adds	r3, #1
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	fbb2 f3f3 	udiv	r3, r2, r3
 8006146:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006148:	69bb      	ldr	r3, [r7, #24]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3724      	adds	r7, #36	; 0x24
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	40021000 	.word	0x40021000
 800615c:	08012350 	.word	0x08012350
 8006160:	00f42400 	.word	0x00f42400
 8006164:	007a1200 	.word	0x007a1200

08006168 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006168:	b480      	push	{r7}
 800616a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800616c:	4b03      	ldr	r3, [pc, #12]	; (800617c <HAL_RCC_GetHCLKFreq+0x14>)
 800616e:	681b      	ldr	r3, [r3, #0]
}
 8006170:	4618      	mov	r0, r3
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	200000c4 	.word	0x200000c4

08006180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006184:	f7ff fff0 	bl	8006168 <HAL_RCC_GetHCLKFreq>
 8006188:	4602      	mov	r2, r0
 800618a:	4b06      	ldr	r3, [pc, #24]	; (80061a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	0a1b      	lsrs	r3, r3, #8
 8006190:	f003 0307 	and.w	r3, r3, #7
 8006194:	4904      	ldr	r1, [pc, #16]	; (80061a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006196:	5ccb      	ldrb	r3, [r1, r3]
 8006198:	f003 031f 	and.w	r3, r3, #31
 800619c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	40021000 	.word	0x40021000
 80061a8:	08012348 	.word	0x08012348

080061ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80061b0:	f7ff ffda 	bl	8006168 <HAL_RCC_GetHCLKFreq>
 80061b4:	4602      	mov	r2, r0
 80061b6:	4b06      	ldr	r3, [pc, #24]	; (80061d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	0adb      	lsrs	r3, r3, #11
 80061bc:	f003 0307 	and.w	r3, r3, #7
 80061c0:	4904      	ldr	r1, [pc, #16]	; (80061d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80061c2:	5ccb      	ldrb	r3, [r1, r3]
 80061c4:	f003 031f 	and.w	r3, r3, #31
 80061c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	40021000 	.word	0x40021000
 80061d4:	08012348 	.word	0x08012348

080061d8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	220f      	movs	r2, #15
 80061e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80061e8:	4b12      	ldr	r3, [pc, #72]	; (8006234 <HAL_RCC_GetClockConfig+0x5c>)
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f003 0203 	and.w	r2, r3, #3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80061f4:	4b0f      	ldr	r3, [pc, #60]	; (8006234 <HAL_RCC_GetClockConfig+0x5c>)
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006200:	4b0c      	ldr	r3, [pc, #48]	; (8006234 <HAL_RCC_GetClockConfig+0x5c>)
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800620c:	4b09      	ldr	r3, [pc, #36]	; (8006234 <HAL_RCC_GetClockConfig+0x5c>)
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	08db      	lsrs	r3, r3, #3
 8006212:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800621a:	4b07      	ldr	r3, [pc, #28]	; (8006238 <HAL_RCC_GetClockConfig+0x60>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0207 	and.w	r2, r3, #7
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	601a      	str	r2, [r3, #0]
}
 8006226:	bf00      	nop
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	40021000 	.word	0x40021000
 8006238:	40022000 	.word	0x40022000

0800623c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006244:	2300      	movs	r3, #0
 8006246:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006248:	4b2a      	ldr	r3, [pc, #168]	; (80062f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800624a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800624c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d003      	beq.n	800625c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006254:	f7ff f902 	bl	800545c <HAL_PWREx_GetVoltageRange>
 8006258:	6178      	str	r0, [r7, #20]
 800625a:	e014      	b.n	8006286 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800625c:	4b25      	ldr	r3, [pc, #148]	; (80062f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800625e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006260:	4a24      	ldr	r2, [pc, #144]	; (80062f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006266:	6593      	str	r3, [r2, #88]	; 0x58
 8006268:	4b22      	ldr	r3, [pc, #136]	; (80062f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800626a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800626c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006274:	f7ff f8f2 	bl	800545c <HAL_PWREx_GetVoltageRange>
 8006278:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800627a:	4b1e      	ldr	r3, [pc, #120]	; (80062f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800627c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800627e:	4a1d      	ldr	r2, [pc, #116]	; (80062f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006284:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800628c:	d10b      	bne.n	80062a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b80      	cmp	r3, #128	; 0x80
 8006292:	d919      	bls.n	80062c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2ba0      	cmp	r3, #160	; 0xa0
 8006298:	d902      	bls.n	80062a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800629a:	2302      	movs	r3, #2
 800629c:	613b      	str	r3, [r7, #16]
 800629e:	e013      	b.n	80062c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80062a0:	2301      	movs	r3, #1
 80062a2:	613b      	str	r3, [r7, #16]
 80062a4:	e010      	b.n	80062c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b80      	cmp	r3, #128	; 0x80
 80062aa:	d902      	bls.n	80062b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80062ac:	2303      	movs	r3, #3
 80062ae:	613b      	str	r3, [r7, #16]
 80062b0:	e00a      	b.n	80062c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b80      	cmp	r3, #128	; 0x80
 80062b6:	d102      	bne.n	80062be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80062b8:	2302      	movs	r3, #2
 80062ba:	613b      	str	r3, [r7, #16]
 80062bc:	e004      	b.n	80062c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b70      	cmp	r3, #112	; 0x70
 80062c2:	d101      	bne.n	80062c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80062c4:	2301      	movs	r3, #1
 80062c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80062c8:	4b0b      	ldr	r3, [pc, #44]	; (80062f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f023 0207 	bic.w	r2, r3, #7
 80062d0:	4909      	ldr	r1, [pc, #36]	; (80062f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80062d8:	4b07      	ldr	r3, [pc, #28]	; (80062f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0307 	and.w	r3, r3, #7
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d001      	beq.n	80062ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e000      	b.n	80062ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	40021000 	.word	0x40021000
 80062f8:	40022000 	.word	0x40022000

080062fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006304:	2300      	movs	r3, #0
 8006306:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006308:	2300      	movs	r3, #0
 800630a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006314:	2b00      	cmp	r3, #0
 8006316:	d041      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800631c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006320:	d02a      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006322:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006326:	d824      	bhi.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006328:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800632c:	d008      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800632e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006332:	d81e      	bhi.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00a      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006338:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800633c:	d010      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800633e:	e018      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006340:	4b86      	ldr	r3, [pc, #536]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	4a85      	ldr	r2, [pc, #532]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800634a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800634c:	e015      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	3304      	adds	r3, #4
 8006352:	2100      	movs	r1, #0
 8006354:	4618      	mov	r0, r3
 8006356:	f000 facb 	bl	80068f0 <RCCEx_PLLSAI1_Config>
 800635a:	4603      	mov	r3, r0
 800635c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800635e:	e00c      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	3320      	adds	r3, #32
 8006364:	2100      	movs	r1, #0
 8006366:	4618      	mov	r0, r3
 8006368:	f000 fbb6 	bl	8006ad8 <RCCEx_PLLSAI2_Config>
 800636c:	4603      	mov	r3, r0
 800636e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006370:	e003      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	74fb      	strb	r3, [r7, #19]
      break;
 8006376:	e000      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006378:	bf00      	nop
    }

    if(ret == HAL_OK)
 800637a:	7cfb      	ldrb	r3, [r7, #19]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10b      	bne.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006380:	4b76      	ldr	r3, [pc, #472]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006386:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800638e:	4973      	ldr	r1, [pc, #460]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006390:	4313      	orrs	r3, r2
 8006392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006396:	e001      	b.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006398:	7cfb      	ldrb	r3, [r7, #19]
 800639a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d041      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80063b0:	d02a      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80063b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80063b6:	d824      	bhi.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80063b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063bc:	d008      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80063be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063c2:	d81e      	bhi.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00a      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80063c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063cc:	d010      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80063ce:	e018      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80063d0:	4b62      	ldr	r3, [pc, #392]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	4a61      	ldr	r2, [pc, #388]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80063dc:	e015      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3304      	adds	r3, #4
 80063e2:	2100      	movs	r1, #0
 80063e4:	4618      	mov	r0, r3
 80063e6:	f000 fa83 	bl	80068f0 <RCCEx_PLLSAI1_Config>
 80063ea:	4603      	mov	r3, r0
 80063ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80063ee:	e00c      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	3320      	adds	r3, #32
 80063f4:	2100      	movs	r1, #0
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 fb6e 	bl	8006ad8 <RCCEx_PLLSAI2_Config>
 80063fc:	4603      	mov	r3, r0
 80063fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006400:	e003      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	74fb      	strb	r3, [r7, #19]
      break;
 8006406:	e000      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006408:	bf00      	nop
    }

    if(ret == HAL_OK)
 800640a:	7cfb      	ldrb	r3, [r7, #19]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10b      	bne.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006410:	4b52      	ldr	r3, [pc, #328]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006416:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800641e:	494f      	ldr	r1, [pc, #316]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006420:	4313      	orrs	r3, r2
 8006422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006426:	e001      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006428:	7cfb      	ldrb	r3, [r7, #19]
 800642a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 80a0 	beq.w	800657a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800643a:	2300      	movs	r3, #0
 800643c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800643e:	4b47      	ldr	r3, [pc, #284]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800644a:	2301      	movs	r3, #1
 800644c:	e000      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800644e:	2300      	movs	r3, #0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00d      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006454:	4b41      	ldr	r3, [pc, #260]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006458:	4a40      	ldr	r2, [pc, #256]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800645a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800645e:	6593      	str	r3, [r2, #88]	; 0x58
 8006460:	4b3e      	ldr	r3, [pc, #248]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006468:	60bb      	str	r3, [r7, #8]
 800646a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800646c:	2301      	movs	r3, #1
 800646e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006470:	4b3b      	ldr	r3, [pc, #236]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a3a      	ldr	r2, [pc, #232]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800647a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800647c:	f7fd fbb0 	bl	8003be0 <HAL_GetTick>
 8006480:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006482:	e009      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006484:	f7fd fbac 	bl	8003be0 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b02      	cmp	r3, #2
 8006490:	d902      	bls.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	74fb      	strb	r3, [r7, #19]
        break;
 8006496:	e005      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006498:	4b31      	ldr	r3, [pc, #196]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d0ef      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80064a4:	7cfb      	ldrb	r3, [r7, #19]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d15c      	bne.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80064aa:	4b2c      	ldr	r3, [pc, #176]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d01f      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x200>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d019      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80064c8:	4b24      	ldr	r3, [pc, #144]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80064d4:	4b21      	ldr	r3, [pc, #132]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064da:	4a20      	ldr	r2, [pc, #128]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80064e4:	4b1d      	ldr	r3, [pc, #116]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ea:	4a1c      	ldr	r2, [pc, #112]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80064f4:	4a19      	ldr	r2, [pc, #100]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	d016      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006506:	f7fd fb6b 	bl	8003be0 <HAL_GetTick>
 800650a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800650c:	e00b      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800650e:	f7fd fb67 	bl	8003be0 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	f241 3288 	movw	r2, #5000	; 0x1388
 800651c:	4293      	cmp	r3, r2
 800651e:	d902      	bls.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	74fb      	strb	r3, [r7, #19]
            break;
 8006524:	e006      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006526:	4b0d      	ldr	r3, [pc, #52]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b00      	cmp	r3, #0
 8006532:	d0ec      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006534:	7cfb      	ldrb	r3, [r7, #19]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10c      	bne.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800653a:	4b08      	ldr	r3, [pc, #32]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800653c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006540:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800654a:	4904      	ldr	r1, [pc, #16]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800654c:	4313      	orrs	r3, r2
 800654e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006552:	e009      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006554:	7cfb      	ldrb	r3, [r7, #19]
 8006556:	74bb      	strb	r3, [r7, #18]
 8006558:	e006      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800655a:	bf00      	nop
 800655c:	40021000 	.word	0x40021000
 8006560:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006564:	7cfb      	ldrb	r3, [r7, #19]
 8006566:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006568:	7c7b      	ldrb	r3, [r7, #17]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d105      	bne.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800656e:	4b9e      	ldr	r3, [pc, #632]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006572:	4a9d      	ldr	r2, [pc, #628]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006578:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00a      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006586:	4b98      	ldr	r3, [pc, #608]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658c:	f023 0203 	bic.w	r2, r3, #3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006594:	4994      	ldr	r1, [pc, #592]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006596:	4313      	orrs	r3, r2
 8006598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0302 	and.w	r3, r3, #2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00a      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80065a8:	4b8f      	ldr	r3, [pc, #572]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ae:	f023 020c 	bic.w	r2, r3, #12
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b6:	498c      	ldr	r1, [pc, #560]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0304 	and.w	r3, r3, #4
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00a      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80065ca:	4b87      	ldr	r3, [pc, #540]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d8:	4983      	ldr	r1, [pc, #524]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0308 	and.w	r3, r3, #8
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00a      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80065ec:	4b7e      	ldr	r3, [pc, #504]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065fa:	497b      	ldr	r1, [pc, #492]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0310 	and.w	r3, r3, #16
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00a      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800660e:	4b76      	ldr	r3, [pc, #472]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006614:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800661c:	4972      	ldr	r1, [pc, #456]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800661e:	4313      	orrs	r3, r2
 8006620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0320 	and.w	r3, r3, #32
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00a      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006630:	4b6d      	ldr	r3, [pc, #436]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006636:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800663e:	496a      	ldr	r1, [pc, #424]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006640:	4313      	orrs	r3, r2
 8006642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00a      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006652:	4b65      	ldr	r3, [pc, #404]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006658:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006660:	4961      	ldr	r1, [pc, #388]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006662:	4313      	orrs	r3, r2
 8006664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00a      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006674:	4b5c      	ldr	r3, [pc, #368]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800667a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006682:	4959      	ldr	r1, [pc, #356]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006684:	4313      	orrs	r3, r2
 8006686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00a      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006696:	4b54      	ldr	r3, [pc, #336]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a4:	4950      	ldr	r1, [pc, #320]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00a      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80066b8:	4b4b      	ldr	r3, [pc, #300]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c6:	4948      	ldr	r1, [pc, #288]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00a      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80066da:	4b43      	ldr	r3, [pc, #268]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e8:	493f      	ldr	r1, [pc, #252]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d028      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066fc:	4b3a      	ldr	r3, [pc, #232]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006702:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800670a:	4937      	ldr	r1, [pc, #220]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800670c:	4313      	orrs	r3, r2
 800670e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006716:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800671a:	d106      	bne.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800671c:	4b32      	ldr	r3, [pc, #200]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	4a31      	ldr	r2, [pc, #196]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006726:	60d3      	str	r3, [r2, #12]
 8006728:	e011      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800672e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006732:	d10c      	bne.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	3304      	adds	r3, #4
 8006738:	2101      	movs	r1, #1
 800673a:	4618      	mov	r0, r3
 800673c:	f000 f8d8 	bl	80068f0 <RCCEx_PLLSAI1_Config>
 8006740:	4603      	mov	r3, r0
 8006742:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006744:	7cfb      	ldrb	r3, [r7, #19]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800674a:	7cfb      	ldrb	r3, [r7, #19]
 800674c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d028      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800675a:	4b23      	ldr	r3, [pc, #140]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800675c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006760:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006768:	491f      	ldr	r1, [pc, #124]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800676a:	4313      	orrs	r3, r2
 800676c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006774:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006778:	d106      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800677a:	4b1b      	ldr	r3, [pc, #108]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	4a1a      	ldr	r2, [pc, #104]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006780:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006784:	60d3      	str	r3, [r2, #12]
 8006786:	e011      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006790:	d10c      	bne.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	3304      	adds	r3, #4
 8006796:	2101      	movs	r1, #1
 8006798:	4618      	mov	r0, r3
 800679a:	f000 f8a9 	bl	80068f0 <RCCEx_PLLSAI1_Config>
 800679e:	4603      	mov	r3, r0
 80067a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80067a2:	7cfb      	ldrb	r3, [r7, #19]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d001      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80067a8:	7cfb      	ldrb	r3, [r7, #19]
 80067aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d02b      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067b8:	4b0b      	ldr	r3, [pc, #44]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067c6:	4908      	ldr	r1, [pc, #32]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067d6:	d109      	bne.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067d8:	4b03      	ldr	r3, [pc, #12]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	4a02      	ldr	r2, [pc, #8]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067e2:	60d3      	str	r3, [r2, #12]
 80067e4:	e014      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80067e6:	bf00      	nop
 80067e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067f4:	d10c      	bne.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	3304      	adds	r3, #4
 80067fa:	2101      	movs	r1, #1
 80067fc:	4618      	mov	r0, r3
 80067fe:	f000 f877 	bl	80068f0 <RCCEx_PLLSAI1_Config>
 8006802:	4603      	mov	r3, r0
 8006804:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006806:	7cfb      	ldrb	r3, [r7, #19]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d001      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800680c:	7cfb      	ldrb	r3, [r7, #19]
 800680e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d02f      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800681c:	4b2b      	ldr	r3, [pc, #172]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800681e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006822:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800682a:	4928      	ldr	r1, [pc, #160]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800682c:	4313      	orrs	r3, r2
 800682e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800683a:	d10d      	bne.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	3304      	adds	r3, #4
 8006840:	2102      	movs	r1, #2
 8006842:	4618      	mov	r0, r3
 8006844:	f000 f854 	bl	80068f0 <RCCEx_PLLSAI1_Config>
 8006848:	4603      	mov	r3, r0
 800684a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800684c:	7cfb      	ldrb	r3, [r7, #19]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d014      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006852:	7cfb      	ldrb	r3, [r7, #19]
 8006854:	74bb      	strb	r3, [r7, #18]
 8006856:	e011      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800685c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006860:	d10c      	bne.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	3320      	adds	r3, #32
 8006866:	2102      	movs	r1, #2
 8006868:	4618      	mov	r0, r3
 800686a:	f000 f935 	bl	8006ad8 <RCCEx_PLLSAI2_Config>
 800686e:	4603      	mov	r3, r0
 8006870:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006872:	7cfb      	ldrb	r3, [r7, #19]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006878:	7cfb      	ldrb	r3, [r7, #19]
 800687a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00a      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006888:	4b10      	ldr	r3, [pc, #64]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800688a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800688e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006896:	490d      	ldr	r1, [pc, #52]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006898:	4313      	orrs	r3, r2
 800689a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00b      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80068aa:	4b08      	ldr	r3, [pc, #32]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80068ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068ba:	4904      	ldr	r1, [pc, #16]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80068bc:	4313      	orrs	r3, r2
 80068be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80068c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3718      	adds	r7, #24
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	40021000 	.word	0x40021000

080068d0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80068d0:	b480      	push	{r7}
 80068d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80068d4:	4b05      	ldr	r3, [pc, #20]	; (80068ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a04      	ldr	r2, [pc, #16]	; (80068ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80068da:	f043 0304 	orr.w	r3, r3, #4
 80068de:	6013      	str	r3, [r2, #0]
}
 80068e0:	bf00      	nop
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	40021000 	.word	0x40021000

080068f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80068fe:	4b75      	ldr	r3, [pc, #468]	; (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	f003 0303 	and.w	r3, r3, #3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d018      	beq.n	800693c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800690a:	4b72      	ldr	r3, [pc, #456]	; (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f003 0203 	and.w	r2, r3, #3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	429a      	cmp	r2, r3
 8006918:	d10d      	bne.n	8006936 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
       ||
 800691e:	2b00      	cmp	r3, #0
 8006920:	d009      	beq.n	8006936 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006922:	4b6c      	ldr	r3, [pc, #432]	; (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	091b      	lsrs	r3, r3, #4
 8006928:	f003 0307 	and.w	r3, r3, #7
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
       ||
 8006932:	429a      	cmp	r2, r3
 8006934:	d047      	beq.n	80069c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	73fb      	strb	r3, [r7, #15]
 800693a:	e044      	b.n	80069c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b03      	cmp	r3, #3
 8006942:	d018      	beq.n	8006976 <RCCEx_PLLSAI1_Config+0x86>
 8006944:	2b03      	cmp	r3, #3
 8006946:	d825      	bhi.n	8006994 <RCCEx_PLLSAI1_Config+0xa4>
 8006948:	2b01      	cmp	r3, #1
 800694a:	d002      	beq.n	8006952 <RCCEx_PLLSAI1_Config+0x62>
 800694c:	2b02      	cmp	r3, #2
 800694e:	d009      	beq.n	8006964 <RCCEx_PLLSAI1_Config+0x74>
 8006950:	e020      	b.n	8006994 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006952:	4b60      	ldr	r3, [pc, #384]	; (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d11d      	bne.n	800699a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006962:	e01a      	b.n	800699a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006964:	4b5b      	ldr	r3, [pc, #364]	; (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800696c:	2b00      	cmp	r3, #0
 800696e:	d116      	bne.n	800699e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006974:	e013      	b.n	800699e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006976:	4b57      	ldr	r3, [pc, #348]	; (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10f      	bne.n	80069a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006982:	4b54      	ldr	r3, [pc, #336]	; (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d109      	bne.n	80069a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006992:	e006      	b.n	80069a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	73fb      	strb	r3, [r7, #15]
      break;
 8006998:	e004      	b.n	80069a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800699a:	bf00      	nop
 800699c:	e002      	b.n	80069a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800699e:	bf00      	nop
 80069a0:	e000      	b.n	80069a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80069a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10d      	bne.n	80069c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80069aa:	4b4a      	ldr	r3, [pc, #296]	; (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6819      	ldr	r1, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	3b01      	subs	r3, #1
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	430b      	orrs	r3, r1
 80069c0:	4944      	ldr	r1, [pc, #272]	; (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80069c6:	7bfb      	ldrb	r3, [r7, #15]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d17d      	bne.n	8006ac8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80069cc:	4b41      	ldr	r3, [pc, #260]	; (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a40      	ldr	r2, [pc, #256]	; (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80069d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069d8:	f7fd f902 	bl	8003be0 <HAL_GetTick>
 80069dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069de:	e009      	b.n	80069f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069e0:	f7fd f8fe 	bl	8003be0 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d902      	bls.n	80069f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	73fb      	strb	r3, [r7, #15]
        break;
 80069f2:	e005      	b.n	8006a00 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069f4:	4b37      	ldr	r3, [pc, #220]	; (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1ef      	bne.n	80069e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d160      	bne.n	8006ac8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d111      	bne.n	8006a30 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a0c:	4b31      	ldr	r3, [pc, #196]	; (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	6892      	ldr	r2, [r2, #8]
 8006a1c:	0211      	lsls	r1, r2, #8
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	68d2      	ldr	r2, [r2, #12]
 8006a22:	0912      	lsrs	r2, r2, #4
 8006a24:	0452      	lsls	r2, r2, #17
 8006a26:	430a      	orrs	r2, r1
 8006a28:	492a      	ldr	r1, [pc, #168]	; (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	610b      	str	r3, [r1, #16]
 8006a2e:	e027      	b.n	8006a80 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d112      	bne.n	8006a5c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a36:	4b27      	ldr	r3, [pc, #156]	; (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006a3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	6892      	ldr	r2, [r2, #8]
 8006a46:	0211      	lsls	r1, r2, #8
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	6912      	ldr	r2, [r2, #16]
 8006a4c:	0852      	lsrs	r2, r2, #1
 8006a4e:	3a01      	subs	r2, #1
 8006a50:	0552      	lsls	r2, r2, #21
 8006a52:	430a      	orrs	r2, r1
 8006a54:	491f      	ldr	r1, [pc, #124]	; (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	610b      	str	r3, [r1, #16]
 8006a5a:	e011      	b.n	8006a80 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a5c:	4b1d      	ldr	r3, [pc, #116]	; (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006a64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	6892      	ldr	r2, [r2, #8]
 8006a6c:	0211      	lsls	r1, r2, #8
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	6952      	ldr	r2, [r2, #20]
 8006a72:	0852      	lsrs	r2, r2, #1
 8006a74:	3a01      	subs	r2, #1
 8006a76:	0652      	lsls	r2, r2, #25
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	4916      	ldr	r1, [pc, #88]	; (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006a80:	4b14      	ldr	r3, [pc, #80]	; (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a13      	ldr	r2, [pc, #76]	; (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a8c:	f7fd f8a8 	bl	8003be0 <HAL_GetTick>
 8006a90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a92:	e009      	b.n	8006aa8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a94:	f7fd f8a4 	bl	8003be0 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d902      	bls.n	8006aa8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	73fb      	strb	r3, [r7, #15]
          break;
 8006aa6:	e005      	b.n	8006ab4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006aa8:	4b0a      	ldr	r3, [pc, #40]	; (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0ef      	beq.n	8006a94 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006ab4:	7bfb      	ldrb	r3, [r7, #15]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d106      	bne.n	8006ac8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006aba:	4b06      	ldr	r3, [pc, #24]	; (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006abc:	691a      	ldr	r2, [r3, #16]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	4904      	ldr	r1, [pc, #16]	; (8006ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	40021000 	.word	0x40021000

08006ad8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006ae6:	4b6a      	ldr	r3, [pc, #424]	; (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	f003 0303 	and.w	r3, r3, #3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d018      	beq.n	8006b24 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006af2:	4b67      	ldr	r3, [pc, #412]	; (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	f003 0203 	and.w	r2, r3, #3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d10d      	bne.n	8006b1e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
       ||
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d009      	beq.n	8006b1e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006b0a:	4b61      	ldr	r3, [pc, #388]	; (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	091b      	lsrs	r3, r3, #4
 8006b10:	f003 0307 	and.w	r3, r3, #7
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
       ||
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d047      	beq.n	8006bae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	73fb      	strb	r3, [r7, #15]
 8006b22:	e044      	b.n	8006bae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b03      	cmp	r3, #3
 8006b2a:	d018      	beq.n	8006b5e <RCCEx_PLLSAI2_Config+0x86>
 8006b2c:	2b03      	cmp	r3, #3
 8006b2e:	d825      	bhi.n	8006b7c <RCCEx_PLLSAI2_Config+0xa4>
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d002      	beq.n	8006b3a <RCCEx_PLLSAI2_Config+0x62>
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d009      	beq.n	8006b4c <RCCEx_PLLSAI2_Config+0x74>
 8006b38:	e020      	b.n	8006b7c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b3a:	4b55      	ldr	r3, [pc, #340]	; (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d11d      	bne.n	8006b82 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b4a:	e01a      	b.n	8006b82 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b4c:	4b50      	ldr	r3, [pc, #320]	; (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d116      	bne.n	8006b86 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b5c:	e013      	b.n	8006b86 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006b5e:	4b4c      	ldr	r3, [pc, #304]	; (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10f      	bne.n	8006b8a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006b6a:	4b49      	ldr	r3, [pc, #292]	; (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d109      	bne.n	8006b8a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b7a:	e006      	b.n	8006b8a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b80:	e004      	b.n	8006b8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006b82:	bf00      	nop
 8006b84:	e002      	b.n	8006b8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006b86:	bf00      	nop
 8006b88:	e000      	b.n	8006b8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006b8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10d      	bne.n	8006bae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006b92:	4b3f      	ldr	r3, [pc, #252]	; (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6819      	ldr	r1, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	011b      	lsls	r3, r3, #4
 8006ba6:	430b      	orrs	r3, r1
 8006ba8:	4939      	ldr	r1, [pc, #228]	; (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d167      	bne.n	8006c84 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006bb4:	4b36      	ldr	r3, [pc, #216]	; (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a35      	ldr	r2, [pc, #212]	; (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bc0:	f7fd f80e 	bl	8003be0 <HAL_GetTick>
 8006bc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006bc6:	e009      	b.n	8006bdc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006bc8:	f7fd f80a 	bl	8003be0 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d902      	bls.n	8006bdc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	73fb      	strb	r3, [r7, #15]
        break;
 8006bda:	e005      	b.n	8006be8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006bdc:	4b2c      	ldr	r3, [pc, #176]	; (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1ef      	bne.n	8006bc8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d14a      	bne.n	8006c84 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d111      	bne.n	8006c18 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006bf4:	4b26      	ldr	r3, [pc, #152]	; (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bf6:	695b      	ldr	r3, [r3, #20]
 8006bf8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	6892      	ldr	r2, [r2, #8]
 8006c04:	0211      	lsls	r1, r2, #8
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	68d2      	ldr	r2, [r2, #12]
 8006c0a:	0912      	lsrs	r2, r2, #4
 8006c0c:	0452      	lsls	r2, r2, #17
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	491f      	ldr	r1, [pc, #124]	; (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	614b      	str	r3, [r1, #20]
 8006c16:	e011      	b.n	8006c3c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006c18:	4b1d      	ldr	r3, [pc, #116]	; (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006c20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	6892      	ldr	r2, [r2, #8]
 8006c28:	0211      	lsls	r1, r2, #8
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	6912      	ldr	r2, [r2, #16]
 8006c2e:	0852      	lsrs	r2, r2, #1
 8006c30:	3a01      	subs	r2, #1
 8006c32:	0652      	lsls	r2, r2, #25
 8006c34:	430a      	orrs	r2, r1
 8006c36:	4916      	ldr	r1, [pc, #88]	; (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006c3c:	4b14      	ldr	r3, [pc, #80]	; (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a13      	ldr	r2, [pc, #76]	; (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c48:	f7fc ffca 	bl	8003be0 <HAL_GetTick>
 8006c4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c4e:	e009      	b.n	8006c64 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006c50:	f7fc ffc6 	bl	8003be0 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d902      	bls.n	8006c64 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	73fb      	strb	r3, [r7, #15]
          break;
 8006c62:	e005      	b.n	8006c70 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c64:	4b0a      	ldr	r3, [pc, #40]	; (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d0ef      	beq.n	8006c50 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d106      	bne.n	8006c84 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006c76:	4b06      	ldr	r3, [pc, #24]	; (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c78:	695a      	ldr	r2, [r3, #20]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	4904      	ldr	r1, [pc, #16]	; (8006c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	40021000 	.word	0x40021000

08006c94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e095      	b.n	8006dd2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d108      	bne.n	8006cc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cb6:	d009      	beq.n	8006ccc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	61da      	str	r2, [r3, #28]
 8006cbe:	e005      	b.n	8006ccc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d106      	bne.n	8006cec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f7fb ff96 	bl	8002c18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2202      	movs	r2, #2
 8006cf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d0c:	d902      	bls.n	8006d14 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60fb      	str	r3, [r7, #12]
 8006d12:	e002      	b.n	8006d1a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d18:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006d22:	d007      	beq.n	8006d34 <HAL_SPI_Init+0xa0>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d2c:	d002      	beq.n	8006d34 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006d44:	431a      	orrs	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	431a      	orrs	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d62:	431a      	orrs	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	69db      	ldr	r3, [r3, #28]
 8006d68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d76:	ea42 0103 	orr.w	r1, r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	0c1b      	lsrs	r3, r3, #16
 8006d90:	f003 0204 	and.w	r2, r3, #4
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d98:	f003 0310 	and.w	r3, r3, #16
 8006d9c:	431a      	orrs	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da2:	f003 0308 	and.w	r3, r3, #8
 8006da6:	431a      	orrs	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006db0:	ea42 0103 	orr.w	r1, r2, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b082      	sub	sp, #8
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e01a      	b.n	8006e22 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2202      	movs	r2, #2
 8006df0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e02:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7fb ff4b 	bl	8002ca0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b088      	sub	sp, #32
 8006e2e:	af02      	add	r7, sp, #8
 8006e30:	60f8      	str	r0, [r7, #12]
 8006e32:	60b9      	str	r1, [r7, #8]
 8006e34:	603b      	str	r3, [r7, #0]
 8006e36:	4613      	mov	r3, r2
 8006e38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e46:	d112      	bne.n	8006e6e <HAL_SPI_Receive+0x44>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10e      	bne.n	8006e6e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2204      	movs	r2, #4
 8006e54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006e58:	88fa      	ldrh	r2, [r7, #6]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	68b9      	ldr	r1, [r7, #8]
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f000 f910 	bl	800708a <HAL_SPI_TransmitReceive>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	e109      	b.n	8007082 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d101      	bne.n	8006e7c <HAL_SPI_Receive+0x52>
 8006e78:	2302      	movs	r3, #2
 8006e7a:	e102      	b.n	8007082 <HAL_SPI_Receive+0x258>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e84:	f7fc feac 	bl	8003be0 <HAL_GetTick>
 8006e88:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d002      	beq.n	8006e9c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006e96:	2302      	movs	r3, #2
 8006e98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e9a:	e0e9      	b.n	8007070 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d002      	beq.n	8006ea8 <HAL_SPI_Receive+0x7e>
 8006ea2:	88fb      	ldrh	r3, [r7, #6]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d102      	bne.n	8006eae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006eac:	e0e0      	b.n	8007070 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2204      	movs	r2, #4
 8006eb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	88fa      	ldrh	r2, [r7, #6]
 8006ec6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	88fa      	ldrh	r2, [r7, #6]
 8006ece:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ef8:	d908      	bls.n	8006f0c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	685a      	ldr	r2, [r3, #4]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f08:	605a      	str	r2, [r3, #4]
 8006f0a:	e007      	b.n	8006f1c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685a      	ldr	r2, [r3, #4]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f1a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f24:	d10f      	bne.n	8006f46 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f44:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f50:	2b40      	cmp	r3, #64	; 0x40
 8006f52:	d007      	beq.n	8006f64 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f62:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f6c:	d867      	bhi.n	800703e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006f6e:	e030      	b.n	8006fd2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d117      	bne.n	8006fae <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f103 020c 	add.w	r2, r3, #12
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8a:	7812      	ldrb	r2, [r2, #0]
 8006f8c:	b2d2      	uxtb	r2, r2
 8006f8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f94:	1c5a      	adds	r2, r3, #1
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006fac:	e011      	b.n	8006fd2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fae:	f7fc fe17 	bl	8003be0 <HAL_GetTick>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	683a      	ldr	r2, [r7, #0]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d803      	bhi.n	8006fc6 <HAL_SPI_Receive+0x19c>
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc4:	d102      	bne.n	8006fcc <HAL_SPI_Receive+0x1a2>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d102      	bne.n	8006fd2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006fd0:	e04e      	b.n	8007070 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1c8      	bne.n	8006f70 <HAL_SPI_Receive+0x146>
 8006fde:	e034      	b.n	800704a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d115      	bne.n	800701a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68da      	ldr	r2, [r3, #12]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff8:	b292      	uxth	r2, r2
 8006ffa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007000:	1c9a      	adds	r2, r3, #2
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800700c:	b29b      	uxth	r3, r3
 800700e:	3b01      	subs	r3, #1
 8007010:	b29a      	uxth	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007018:	e011      	b.n	800703e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800701a:	f7fc fde1 	bl	8003be0 <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	683a      	ldr	r2, [r7, #0]
 8007026:	429a      	cmp	r2, r3
 8007028:	d803      	bhi.n	8007032 <HAL_SPI_Receive+0x208>
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007030:	d102      	bne.n	8007038 <HAL_SPI_Receive+0x20e>
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d102      	bne.n	800703e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800703c:	e018      	b.n	8007070 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007044:	b29b      	uxth	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1ca      	bne.n	8006fe0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f000 ffee 	bl	8008030 <SPI_EndRxTransaction>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d002      	beq.n	8007060 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2220      	movs	r2, #32
 800705e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007064:	2b00      	cmp	r3, #0
 8007066:	d002      	beq.n	800706e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	75fb      	strb	r3, [r7, #23]
 800706c:	e000      	b.n	8007070 <HAL_SPI_Receive+0x246>
  }

error :
 800706e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007080:	7dfb      	ldrb	r3, [r7, #23]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3718      	adds	r7, #24
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b08a      	sub	sp, #40	; 0x28
 800708e:	af00      	add	r7, sp, #0
 8007090:	60f8      	str	r0, [r7, #12]
 8007092:	60b9      	str	r1, [r7, #8]
 8007094:	607a      	str	r2, [r7, #4]
 8007096:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007098:	2301      	movs	r3, #1
 800709a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800709c:	2300      	movs	r3, #0
 800709e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d101      	bne.n	80070b0 <HAL_SPI_TransmitReceive+0x26>
 80070ac:	2302      	movs	r3, #2
 80070ae:	e1fb      	b.n	80074a8 <HAL_SPI_TransmitReceive+0x41e>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070b8:	f7fc fd92 	bl	8003be0 <HAL_GetTick>
 80070bc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80070c4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80070cc:	887b      	ldrh	r3, [r7, #2]
 80070ce:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80070d0:	887b      	ldrh	r3, [r7, #2]
 80070d2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80070d4:	7efb      	ldrb	r3, [r7, #27]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d00e      	beq.n	80070f8 <HAL_SPI_TransmitReceive+0x6e>
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070e0:	d106      	bne.n	80070f0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d102      	bne.n	80070f0 <HAL_SPI_TransmitReceive+0x66>
 80070ea:	7efb      	ldrb	r3, [r7, #27]
 80070ec:	2b04      	cmp	r3, #4
 80070ee:	d003      	beq.n	80070f8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80070f0:	2302      	movs	r3, #2
 80070f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80070f6:	e1cd      	b.n	8007494 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d005      	beq.n	800710a <HAL_SPI_TransmitReceive+0x80>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <HAL_SPI_TransmitReceive+0x80>
 8007104:	887b      	ldrh	r3, [r7, #2]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d103      	bne.n	8007112 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007110:	e1c0      	b.n	8007494 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007118:	b2db      	uxtb	r3, r3
 800711a:	2b04      	cmp	r3, #4
 800711c:	d003      	beq.n	8007126 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2205      	movs	r2, #5
 8007122:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	887a      	ldrh	r2, [r7, #2]
 8007136:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	887a      	ldrh	r2, [r7, #2]
 800713e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	887a      	ldrh	r2, [r7, #2]
 800714c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	887a      	ldrh	r2, [r7, #2]
 8007152:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007168:	d802      	bhi.n	8007170 <HAL_SPI_TransmitReceive+0xe6>
 800716a:	8a3b      	ldrh	r3, [r7, #16]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d908      	bls.n	8007182 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800717e:	605a      	str	r2, [r3, #4]
 8007180:	e007      	b.n	8007192 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007190:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719c:	2b40      	cmp	r3, #64	; 0x40
 800719e:	d007      	beq.n	80071b0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071b8:	d97c      	bls.n	80072b4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d002      	beq.n	80071c8 <HAL_SPI_TransmitReceive+0x13e>
 80071c2:	8a7b      	ldrh	r3, [r7, #18]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d169      	bne.n	800729c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071cc:	881a      	ldrh	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d8:	1c9a      	adds	r2, r3, #2
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	3b01      	subs	r3, #1
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071ec:	e056      	b.n	800729c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f003 0302 	and.w	r3, r3, #2
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d11b      	bne.n	8007234 <HAL_SPI_TransmitReceive+0x1aa>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007200:	b29b      	uxth	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d016      	beq.n	8007234 <HAL_SPI_TransmitReceive+0x1aa>
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	2b01      	cmp	r3, #1
 800720a:	d113      	bne.n	8007234 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007210:	881a      	ldrh	r2, [r3, #0]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721c:	1c9a      	adds	r2, r3, #2
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007226:	b29b      	uxth	r3, r3
 8007228:	3b01      	subs	r3, #1
 800722a:	b29a      	uxth	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007230:	2300      	movs	r3, #0
 8007232:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b01      	cmp	r3, #1
 8007240:	d11c      	bne.n	800727c <HAL_SPI_TransmitReceive+0x1f2>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007248:	b29b      	uxth	r3, r3
 800724a:	2b00      	cmp	r3, #0
 800724c:	d016      	beq.n	800727c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68da      	ldr	r2, [r3, #12]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007258:	b292      	uxth	r2, r2
 800725a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007260:	1c9a      	adds	r2, r3, #2
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800726c:	b29b      	uxth	r3, r3
 800726e:	3b01      	subs	r3, #1
 8007270:	b29a      	uxth	r2, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007278:	2301      	movs	r3, #1
 800727a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800727c:	f7fc fcb0 	bl	8003be0 <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007288:	429a      	cmp	r2, r3
 800728a:	d807      	bhi.n	800729c <HAL_SPI_TransmitReceive+0x212>
 800728c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007292:	d003      	beq.n	800729c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800729a:	e0fb      	b.n	8007494 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1a3      	bne.n	80071ee <HAL_SPI_TransmitReceive+0x164>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d19d      	bne.n	80071ee <HAL_SPI_TransmitReceive+0x164>
 80072b2:	e0df      	b.n	8007474 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d003      	beq.n	80072c4 <HAL_SPI_TransmitReceive+0x23a>
 80072bc:	8a7b      	ldrh	r3, [r7, #18]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	f040 80cb 	bne.w	800745a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d912      	bls.n	80072f4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d2:	881a      	ldrh	r2, [r3, #0]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072de:	1c9a      	adds	r2, r3, #2
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	3b02      	subs	r3, #2
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072f2:	e0b2      	b.n	800745a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	330c      	adds	r3, #12
 80072fe:	7812      	ldrb	r2, [r2, #0]
 8007300:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007306:	1c5a      	adds	r2, r3, #1
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007310:	b29b      	uxth	r3, r3
 8007312:	3b01      	subs	r3, #1
 8007314:	b29a      	uxth	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800731a:	e09e      	b.n	800745a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b02      	cmp	r3, #2
 8007328:	d134      	bne.n	8007394 <HAL_SPI_TransmitReceive+0x30a>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800732e:	b29b      	uxth	r3, r3
 8007330:	2b00      	cmp	r3, #0
 8007332:	d02f      	beq.n	8007394 <HAL_SPI_TransmitReceive+0x30a>
 8007334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007336:	2b01      	cmp	r3, #1
 8007338:	d12c      	bne.n	8007394 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800733e:	b29b      	uxth	r3, r3
 8007340:	2b01      	cmp	r3, #1
 8007342:	d912      	bls.n	800736a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007348:	881a      	ldrh	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007354:	1c9a      	adds	r2, r3, #2
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800735e:	b29b      	uxth	r3, r3
 8007360:	3b02      	subs	r3, #2
 8007362:	b29a      	uxth	r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007368:	e012      	b.n	8007390 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	330c      	adds	r3, #12
 8007374:	7812      	ldrb	r2, [r2, #0]
 8007376:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737c:	1c5a      	adds	r2, r3, #1
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007386:	b29b      	uxth	r3, r3
 8007388:	3b01      	subs	r3, #1
 800738a:	b29a      	uxth	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007390:	2300      	movs	r3, #0
 8007392:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d148      	bne.n	8007434 <HAL_SPI_TransmitReceive+0x3aa>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d042      	beq.n	8007434 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d923      	bls.n	8007402 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68da      	ldr	r2, [r3, #12]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c4:	b292      	uxth	r2, r2
 80073c6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073cc:	1c9a      	adds	r2, r3, #2
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073d8:	b29b      	uxth	r3, r3
 80073da:	3b02      	subs	r3, #2
 80073dc:	b29a      	uxth	r2, r3
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d81f      	bhi.n	8007430 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685a      	ldr	r2, [r3, #4]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073fe:	605a      	str	r2, [r3, #4]
 8007400:	e016      	b.n	8007430 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f103 020c 	add.w	r2, r3, #12
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740e:	7812      	ldrb	r2, [r2, #0]
 8007410:	b2d2      	uxtb	r2, r2
 8007412:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007418:	1c5a      	adds	r2, r3, #1
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007424:	b29b      	uxth	r3, r3
 8007426:	3b01      	subs	r3, #1
 8007428:	b29a      	uxth	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007430:	2301      	movs	r3, #1
 8007432:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007434:	f7fc fbd4 	bl	8003be0 <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007440:	429a      	cmp	r2, r3
 8007442:	d803      	bhi.n	800744c <HAL_SPI_TransmitReceive+0x3c2>
 8007444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744a:	d102      	bne.n	8007452 <HAL_SPI_TransmitReceive+0x3c8>
 800744c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744e:	2b00      	cmp	r3, #0
 8007450:	d103      	bne.n	800745a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007458:	e01c      	b.n	8007494 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800745e:	b29b      	uxth	r3, r3
 8007460:	2b00      	cmp	r3, #0
 8007462:	f47f af5b 	bne.w	800731c <HAL_SPI_TransmitReceive+0x292>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800746c:	b29b      	uxth	r3, r3
 800746e:	2b00      	cmp	r3, #0
 8007470:	f47f af54 	bne.w	800731c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007474:	69fa      	ldr	r2, [r7, #28]
 8007476:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 fe31 	bl	80080e0 <SPI_EndRxTxTransaction>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d006      	beq.n	8007492 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2220      	movs	r2, #32
 800748e:	661a      	str	r2, [r3, #96]	; 0x60
 8007490:	e000      	b.n	8007494 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007492:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80074a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3728      	adds	r7, #40	; 0x28
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	4613      	mov	r3, r2
 80074bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d101      	bne.n	80074d0 <HAL_SPI_Transmit_IT+0x20>
 80074cc:	2302      	movs	r3, #2
 80074ce:	e072      	b.n	80075b6 <HAL_SPI_Transmit_IT+0x106>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d002      	beq.n	80074e4 <HAL_SPI_Transmit_IT+0x34>
 80074de:	88fb      	ldrh	r3, [r7, #6]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d102      	bne.n	80074ea <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074e8:	e060      	b.n	80075ac <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d002      	beq.n	80074fc <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80074f6:	2302      	movs	r3, #2
 80074f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074fa:	e057      	b.n	80075ac <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2203      	movs	r2, #3
 8007500:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	88fa      	ldrh	r2, [r7, #6]
 8007514:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	88fa      	ldrh	r2, [r7, #6]
 800751a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007540:	d903      	bls.n	800754a <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	4a1f      	ldr	r2, [pc, #124]	; (80075c4 <HAL_SPI_Transmit_IT+0x114>)
 8007546:	651a      	str	r2, [r3, #80]	; 0x50
 8007548:	e002      	b.n	8007550 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	4a1e      	ldr	r2, [pc, #120]	; (80075c8 <HAL_SPI_Transmit_IT+0x118>)
 800754e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007558:	d10f      	bne.n	800757a <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007568:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007578:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8007588:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007594:	2b40      	cmp	r3, #64	; 0x40
 8007596:	d008      	beq.n	80075aa <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075a6:	601a      	str	r2, [r3, #0]
 80075a8:	e000      	b.n	80075ac <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 80075aa:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80075b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	371c      	adds	r7, #28
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	08007dbf 	.word	0x08007dbf
 80075c8:	08007d79 	.word	0x08007d79

080075cc <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	4613      	mov	r3, r2
 80075d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80075da:	2300      	movs	r3, #0
 80075dc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d110      	bne.n	8007608 <HAL_SPI_Receive_IT+0x3c>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075ee:	d10b      	bne.n	8007608 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2204      	movs	r2, #4
 80075f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80075f8:	88fb      	ldrh	r3, [r7, #6]
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	68b9      	ldr	r1, [r7, #8]
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f000 f894 	bl	800772c <HAL_SPI_TransmitReceive_IT>
 8007604:	4603      	mov	r3, r0
 8007606:	e089      	b.n	800771c <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800760e:	2b01      	cmp	r3, #1
 8007610:	d101      	bne.n	8007616 <HAL_SPI_Receive_IT+0x4a>
 8007612:	2302      	movs	r3, #2
 8007614:	e082      	b.n	800771c <HAL_SPI_Receive_IT+0x150>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b01      	cmp	r3, #1
 8007628:	d002      	beq.n	8007630 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800762a:	2302      	movs	r3, #2
 800762c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800762e:	e070      	b.n	8007712 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d002      	beq.n	800763c <HAL_SPI_Receive_IT+0x70>
 8007636:	88fb      	ldrh	r3, [r7, #6]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d102      	bne.n	8007642 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007640:	e067      	b.n	8007712 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2204      	movs	r2, #4
 8007646:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	88fa      	ldrh	r2, [r7, #6]
 800765a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	88fa      	ldrh	r2, [r7, #6]
 8007662:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007686:	d90b      	bls.n	80076a0 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685a      	ldr	r2, [r3, #4]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007696:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	4a22      	ldr	r2, [pc, #136]	; (8007724 <HAL_SPI_Receive_IT+0x158>)
 800769c:	64da      	str	r2, [r3, #76]	; 0x4c
 800769e:	e00a      	b.n	80076b6 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	685a      	ldr	r2, [r3, #4]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076ae:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4a1d      	ldr	r2, [pc, #116]	; (8007728 <HAL_SPI_Receive_IT+0x15c>)
 80076b4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076be:	d10f      	bne.n	80076e0 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80076de:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	685a      	ldr	r2, [r3, #4]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80076ee:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076fa:	2b40      	cmp	r3, #64	; 0x40
 80076fc:	d008      	beq.n	8007710 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800770c:	601a      	str	r2, [r3, #0]
 800770e:	e000      	b.n	8007712 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8007710:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800771a:	7dfb      	ldrb	r3, [r7, #23]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3718      	adds	r7, #24
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	08007d2d 	.word	0x08007d2d
 8007728:	08007cdd 	.word	0x08007cdd

0800772c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800772c:	b480      	push	{r7}
 800772e:	b087      	sub	sp, #28
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
 8007738:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007744:	2b01      	cmp	r3, #1
 8007746:	d101      	bne.n	800774c <HAL_SPI_TransmitReceive_IT+0x20>
 8007748:	2302      	movs	r3, #2
 800774a:	e091      	b.n	8007870 <HAL_SPI_TransmitReceive_IT+0x144>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800775a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007762:	7dbb      	ldrb	r3, [r7, #22]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d00d      	beq.n	8007784 <HAL_SPI_TransmitReceive_IT+0x58>
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800776e:	d106      	bne.n	800777e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d102      	bne.n	800777e <HAL_SPI_TransmitReceive_IT+0x52>
 8007778:	7dbb      	ldrb	r3, [r7, #22]
 800777a:	2b04      	cmp	r3, #4
 800777c:	d002      	beq.n	8007784 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800777e:	2302      	movs	r3, #2
 8007780:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007782:	e070      	b.n	8007866 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d005      	beq.n	8007796 <HAL_SPI_TransmitReceive_IT+0x6a>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d002      	beq.n	8007796 <HAL_SPI_TransmitReceive_IT+0x6a>
 8007790:	887b      	ldrh	r3, [r7, #2]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d102      	bne.n	800779c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	75fb      	strb	r3, [r7, #23]
    goto error;
 800779a:	e064      	b.n	8007866 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b04      	cmp	r3, #4
 80077a6:	d003      	beq.n	80077b0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2205      	movs	r2, #5
 80077ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	887a      	ldrh	r2, [r7, #2]
 80077c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	887a      	ldrh	r2, [r7, #2]
 80077c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	887a      	ldrh	r2, [r7, #2]
 80077d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	887a      	ldrh	r2, [r7, #2]
 80077da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80077e6:	d906      	bls.n	80077f6 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	4a24      	ldr	r2, [pc, #144]	; (800787c <HAL_SPI_TransmitReceive_IT+0x150>)
 80077ec:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	4a23      	ldr	r2, [pc, #140]	; (8007880 <HAL_SPI_TransmitReceive_IT+0x154>)
 80077f2:	651a      	str	r2, [r3, #80]	; 0x50
 80077f4:	e005      	b.n	8007802 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	4a22      	ldr	r2, [pc, #136]	; (8007884 <HAL_SPI_TransmitReceive_IT+0x158>)
 80077fa:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	4a22      	ldr	r2, [pc, #136]	; (8007888 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8007800:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800780a:	d802      	bhi.n	8007812 <HAL_SPI_TransmitReceive_IT+0xe6>
 800780c:	887b      	ldrh	r3, [r7, #2]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d908      	bls.n	8007824 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007820:	605a      	str	r2, [r3, #4]
 8007822:	e007      	b.n	8007834 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	685a      	ldr	r2, [r3, #4]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007832:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	685a      	ldr	r2, [r3, #4]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8007842:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784e:	2b40      	cmp	r3, #64	; 0x40
 8007850:	d008      	beq.n	8007864 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	e000      	b.n	8007866 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8007864:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800786e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007870:	4618      	mov	r0, r3
 8007872:	371c      	adds	r7, #28
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr
 800787c:	08007c17 	.word	0x08007c17
 8007880:	08007c7d 	.word	0x08007c7d
 8007884:	08007ac7 	.word	0x08007ac7
 8007888:	08007b85 	.word	0x08007b85

0800788c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b088      	sub	sp, #32
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10e      	bne.n	80078cc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d009      	beq.n	80078cc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d004      	beq.n	80078cc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	4798      	blx	r3
    return;
 80078ca:	e0ce      	b.n	8007a6a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	f003 0302 	and.w	r3, r3, #2
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d009      	beq.n	80078ea <HAL_SPI_IRQHandler+0x5e>
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d004      	beq.n	80078ea <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	4798      	blx	r3
    return;
 80078e8:	e0bf      	b.n	8007a6a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	f003 0320 	and.w	r3, r3, #32
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10a      	bne.n	800790a <HAL_SPI_IRQHandler+0x7e>
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d105      	bne.n	800790a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 80b0 	beq.w	8007a6a <HAL_SPI_IRQHandler+0x1de>
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	f003 0320 	and.w	r3, r3, #32
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 80aa 	beq.w	8007a6a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800791c:	2b00      	cmp	r3, #0
 800791e:	d023      	beq.n	8007968 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b03      	cmp	r3, #3
 800792a:	d011      	beq.n	8007950 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007930:	f043 0204 	orr.w	r2, r3, #4
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007938:	2300      	movs	r3, #0
 800793a:	617b      	str	r3, [r7, #20]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	617b      	str	r3, [r7, #20]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	617b      	str	r3, [r7, #20]
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	e00b      	b.n	8007968 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007950:	2300      	movs	r3, #0
 8007952:	613b      	str	r3, [r7, #16]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	613b      	str	r3, [r7, #16]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	613b      	str	r3, [r7, #16]
 8007964:	693b      	ldr	r3, [r7, #16]
        return;
 8007966:	e080      	b.n	8007a6a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	f003 0320 	and.w	r3, r3, #32
 800796e:	2b00      	cmp	r3, #0
 8007970:	d014      	beq.n	800799c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007976:	f043 0201 	orr.w	r2, r3, #1
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800797e:	2300      	movs	r3, #0
 8007980:	60fb      	str	r3, [r7, #12]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	60fb      	str	r3, [r7, #12]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007998:	601a      	str	r2, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00c      	beq.n	80079c0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079aa:	f043 0208 	orr.w	r2, r3, #8
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80079b2:	2300      	movs	r3, #0
 80079b4:	60bb      	str	r3, [r7, #8]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	60bb      	str	r3, [r7, #8]
 80079be:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d04f      	beq.n	8007a68 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	685a      	ldr	r2, [r3, #4]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80079d6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	f003 0302 	and.w	r3, r3, #2
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d104      	bne.n	80079f4 <HAL_SPI_IRQHandler+0x168>
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	f003 0301 	and.w	r3, r3, #1
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d034      	beq.n	8007a5e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f022 0203 	bic.w	r2, r2, #3
 8007a02:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d011      	beq.n	8007a30 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a10:	4a17      	ldr	r2, [pc, #92]	; (8007a70 <HAL_SPI_IRQHandler+0x1e4>)
 8007a12:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7fc faff 	bl	800401c <HAL_DMA_Abort_IT>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d005      	beq.n	8007a30 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d016      	beq.n	8007a66 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3c:	4a0c      	ldr	r2, [pc, #48]	; (8007a70 <HAL_SPI_IRQHandler+0x1e4>)
 8007a3e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fc fae9 	bl	800401c <HAL_DMA_Abort_IT>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00a      	beq.n	8007a66 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007a5c:	e003      	b.n	8007a66 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 f812 	bl	8007a88 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007a64:	e000      	b.n	8007a68 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007a66:	bf00      	nop
    return;
 8007a68:	bf00      	nop
  }
}
 8007a6a:	3720      	adds	r7, #32
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	08007a9d 	.word	0x08007a9d

08007a74 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f7ff ffe5 	bl	8007a88 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007abe:	bf00      	nop
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b082      	sub	sp, #8
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d923      	bls.n	8007b22 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68da      	ldr	r2, [r3, #12]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae4:	b292      	uxth	r2, r2
 8007ae6:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aec:	1c9a      	adds	r2, r3, #2
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	3b02      	subs	r3, #2
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d11f      	bne.n	8007b50 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	685a      	ldr	r2, [r3, #4]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b1e:	605a      	str	r2, [r3, #4]
 8007b20:	e016      	b.n	8007b50 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f103 020c 	add.w	r2, r3, #12
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2e:	7812      	ldrb	r2, [r2, #0]
 8007b30:	b2d2      	uxtb	r2, r2
 8007b32:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b38:	1c5a      	adds	r2, r3, #1
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	3b01      	subs	r3, #1
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10f      	bne.n	8007b7c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007b6a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d102      	bne.n	8007b7c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 faf8 	bl	800816c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007b7c:	bf00      	nop
 8007b7e:	3708      	adds	r7, #8
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d912      	bls.n	8007bbc <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9a:	881a      	ldrh	r2, [r3, #0]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba6:	1c9a      	adds	r2, r3, #2
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	3b02      	subs	r3, #2
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007bba:	e012      	b.n	8007be2 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	330c      	adds	r3, #12
 8007bc6:	7812      	ldrb	r2, [r2, #0]
 8007bc8:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bce:	1c5a      	adds	r2, r3, #1
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d110      	bne.n	8007c0e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	685a      	ldr	r2, [r3, #4]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bfa:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d102      	bne.n	8007c0e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 faaf 	bl	800816c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007c0e:	bf00      	nop
 8007c10:	3708      	adds	r7, #8
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b082      	sub	sp, #8
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68da      	ldr	r2, [r3, #12]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c28:	b292      	uxth	r2, r2
 8007c2a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c30:	1c9a      	adds	r2, r3, #2
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	b29a      	uxth	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10f      	bne.n	8007c74 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685a      	ldr	r2, [r3, #4]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c62:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d102      	bne.n	8007c74 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fa7c 	bl	800816c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007c74:	bf00      	nop
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c88:	881a      	ldrh	r2, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c94:	1c9a      	adds	r2, r3, #2
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d110      	bne.n	8007cd4 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	685a      	ldr	r2, [r3, #4]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cc0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d102      	bne.n	8007cd4 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fa4c 	bl	800816c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007cd4:	bf00      	nop
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f103 020c 	add.w	r2, r3, #12
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf0:	7812      	ldrb	r2, [r2, #0]
 8007cf2:	b2d2      	uxtb	r2, r2
 8007cf4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfa:	1c5a      	adds	r2, r3, #1
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d102      	bne.n	8007d24 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fa66 	bl	80081f0 <SPI_CloseRx_ISR>
  }
}
 8007d24:	bf00      	nop
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68da      	ldr	r2, [r3, #12]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3e:	b292      	uxth	r2, r2
 8007d40:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d46:	1c9a      	adds	r2, r3, #2
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	3b01      	subs	r3, #1
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d102      	bne.n	8007d70 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fa40 	bl	80081f0 <SPI_CloseRx_ISR>
  }
}
 8007d70:	bf00      	nop
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	330c      	adds	r3, #12
 8007d8a:	7812      	ldrb	r2, [r2, #0]
 8007d8c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d92:	1c5a      	adds	r2, r3, #1
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d102      	bne.n	8007db6 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fa4d 	bl	8008250 <SPI_CloseTx_ISR>
  }
}
 8007db6:	bf00      	nop
 8007db8:	3708      	adds	r7, #8
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b082      	sub	sp, #8
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dca:	881a      	ldrh	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd6:	1c9a      	adds	r2, r3, #2
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	3b01      	subs	r3, #1
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d102      	bne.n	8007dfa <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 fa2b 	bl	8008250 <SPI_CloseTx_ISR>
  }
}
 8007dfa:	bf00      	nop
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
	...

08007e04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b088      	sub	sp, #32
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	603b      	str	r3, [r7, #0]
 8007e10:	4613      	mov	r3, r2
 8007e12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e14:	f7fb fee4 	bl	8003be0 <HAL_GetTick>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1c:	1a9b      	subs	r3, r3, r2
 8007e1e:	683a      	ldr	r2, [r7, #0]
 8007e20:	4413      	add	r3, r2
 8007e22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e24:	f7fb fedc 	bl	8003be0 <HAL_GetTick>
 8007e28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e2a:	4b39      	ldr	r3, [pc, #228]	; (8007f10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	015b      	lsls	r3, r3, #5
 8007e30:	0d1b      	lsrs	r3, r3, #20
 8007e32:	69fa      	ldr	r2, [r7, #28]
 8007e34:	fb02 f303 	mul.w	r3, r2, r3
 8007e38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e3a:	e054      	b.n	8007ee6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e42:	d050      	beq.n	8007ee6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e44:	f7fb fecc 	bl	8003be0 <HAL_GetTick>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	69fa      	ldr	r2, [r7, #28]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d902      	bls.n	8007e5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d13d      	bne.n	8007ed6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e72:	d111      	bne.n	8007e98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e7c:	d004      	beq.n	8007e88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e86:	d107      	bne.n	8007e98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ea0:	d10f      	bne.n	8007ec2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007eb0:	601a      	str	r2, [r3, #0]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ec0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e017      	b.n	8007f06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d101      	bne.n	8007ee0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007edc:	2300      	movs	r3, #0
 8007ede:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	689a      	ldr	r2, [r3, #8]
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	4013      	ands	r3, r2
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	bf0c      	ite	eq
 8007ef6:	2301      	moveq	r3, #1
 8007ef8:	2300      	movne	r3, #0
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	461a      	mov	r2, r3
 8007efe:	79fb      	ldrb	r3, [r7, #7]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d19b      	bne.n	8007e3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3720      	adds	r7, #32
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	200000c4 	.word	0x200000c4

08007f14 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b088      	sub	sp, #32
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
 8007f20:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007f22:	f7fb fe5d 	bl	8003be0 <HAL_GetTick>
 8007f26:	4602      	mov	r2, r0
 8007f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2a:	1a9b      	subs	r3, r3, r2
 8007f2c:	683a      	ldr	r2, [r7, #0]
 8007f2e:	4413      	add	r3, r2
 8007f30:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007f32:	f7fb fe55 	bl	8003be0 <HAL_GetTick>
 8007f36:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007f38:	4b3c      	ldr	r3, [pc, #240]	; (800802c <SPI_WaitFifoStateUntilTimeout+0x118>)
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4413      	add	r3, r2
 8007f42:	00da      	lsls	r2, r3, #3
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	0d1b      	lsrs	r3, r3, #20
 8007f48:	69fa      	ldr	r2, [r7, #28]
 8007f4a:	fb02 f303 	mul.w	r3, r2, r3
 8007f4e:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8007f50:	e05f      	b.n	8008012 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007f58:	d106      	bne.n	8007f68 <SPI_WaitFifoStateUntilTimeout+0x54>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d103      	bne.n	8007f68 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	330c      	adds	r3, #12
 8007f66:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f6e:	d050      	beq.n	8008012 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f70:	f7fb fe36 	bl	8003be0 <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	69fa      	ldr	r2, [r7, #28]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d902      	bls.n	8007f86 <SPI_WaitFifoStateUntilTimeout+0x72>
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d13d      	bne.n	8008002 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	685a      	ldr	r2, [r3, #4]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f9e:	d111      	bne.n	8007fc4 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fa8:	d004      	beq.n	8007fb4 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fb2:	d107      	bne.n	8007fc4 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fcc:	d10f      	bne.n	8007fee <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e010      	b.n	8008024 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d101      	bne.n	800800c <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8008008:	2300      	movs	r3, #0
 800800a:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	3b01      	subs	r3, #1
 8008010:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	689a      	ldr	r2, [r3, #8]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	4013      	ands	r3, r2
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	429a      	cmp	r2, r3
 8008020:	d197      	bne.n	8007f52 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3720      	adds	r7, #32
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	200000c4 	.word	0x200000c4

08008030 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af02      	add	r7, sp, #8
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008044:	d111      	bne.n	800806a <SPI_EndRxTransaction+0x3a>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800804e:	d004      	beq.n	800805a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008058:	d107      	bne.n	800806a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008068:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	2200      	movs	r2, #0
 8008072:	2180      	movs	r1, #128	; 0x80
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f7ff fec5 	bl	8007e04 <SPI_WaitFlagStateUntilTimeout>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d007      	beq.n	8008090 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008084:	f043 0220 	orr.w	r2, r3, #32
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800808c:	2303      	movs	r3, #3
 800808e:	e023      	b.n	80080d8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008098:	d11d      	bne.n	80080d6 <SPI_EndRxTransaction+0xa6>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080a2:	d004      	beq.n	80080ae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080ac:	d113      	bne.n	80080d6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f7ff ff2a 	bl	8007f14 <SPI_WaitFifoStateUntilTimeout>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d007      	beq.n	80080d6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080ca:	f043 0220 	orr.w	r2, r3, #32
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e000      	b.n	80080d8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af02      	add	r7, sp, #8
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f7ff ff0b 	bl	8007f14 <SPI_WaitFifoStateUntilTimeout>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d007      	beq.n	8008114 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008108:	f043 0220 	orr.w	r2, r3, #32
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008110:	2303      	movs	r3, #3
 8008112:	e027      	b.n	8008164 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	2200      	movs	r2, #0
 800811c:	2180      	movs	r1, #128	; 0x80
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f7ff fe70 	bl	8007e04 <SPI_WaitFlagStateUntilTimeout>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d007      	beq.n	800813a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800812e:	f043 0220 	orr.w	r2, r3, #32
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e014      	b.n	8008164 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	2200      	movs	r2, #0
 8008142:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f7ff fee4 	bl	8007f14 <SPI_WaitFifoStateUntilTimeout>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d007      	beq.n	8008162 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008156:	f043 0220 	orr.w	r2, r3, #32
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e000      	b.n	8008164 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008174:	f7fb fd34 	bl	8003be0 <HAL_GetTick>
 8008178:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	685a      	ldr	r2, [r3, #4]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f022 0220 	bic.w	r2, r2, #32
 8008188:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	2164      	movs	r1, #100	; 0x64
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f7ff ffa6 	bl	80080e0 <SPI_EndRxTxTransaction>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d005      	beq.n	80081a6 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800819e:	f043 0220 	orr.w	r2, r3, #32
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d115      	bne.n	80081da <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	2b04      	cmp	r3, #4
 80081b8:	d107      	bne.n	80081ca <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f003 fa14 	bl	800b5f0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80081c8:	e00e      	b.n	80081e8 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7ff fc4e 	bl	8007a74 <HAL_SPI_TxRxCpltCallback>
}
 80081d8:	e006      	b.n	80081e8 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f7ff fc50 	bl	8007a88 <HAL_SPI_ErrorCallback>
}
 80081e8:	bf00      	nop
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685a      	ldr	r2, [r3, #4]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008206:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8008208:	f7fb fcea 	bl	8003be0 <HAL_GetTick>
 800820c:	4603      	mov	r3, r0
 800820e:	461a      	mov	r2, r3
 8008210:	2164      	movs	r1, #100	; 0x64
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7ff ff0c 	bl	8008030 <SPI_EndRxTransaction>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d005      	beq.n	800822a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008222:	f043 0220 	orr.w	r2, r3, #32
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008236:	2b00      	cmp	r3, #0
 8008238:	d103      	bne.n	8008242 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f003 f9d8 	bl	800b5f0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008240:	e002      	b.n	8008248 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f7ff fc20 	bl	8007a88 <HAL_SPI_ErrorCallback>
}
 8008248:	bf00      	nop
 800824a:	3708      	adds	r7, #8
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008258:	f7fb fcc2 	bl	8003be0 <HAL_GetTick>
 800825c:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	685a      	ldr	r2, [r3, #4]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800826c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	2164      	movs	r1, #100	; 0x64
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7ff ff34 	bl	80080e0 <SPI_EndRxTxTransaction>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d005      	beq.n	800828a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008282:	f043 0220 	orr.w	r2, r3, #32
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10a      	bne.n	80082a8 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008292:	2300      	movs	r3, #0
 8008294:	60bb      	str	r3, [r7, #8]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	60bb      	str	r3, [r7, #8]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	60bb      	str	r3, [r7, #8]
 80082a6:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d003      	beq.n	80082c0 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f7ff fbe5 	bl	8007a88 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80082be:	e002      	b.n	80082c6 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f003 f9a9 	bl	800b618 <HAL_SPI_TxCpltCallback>
}
 80082c6:	bf00      	nop
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b082      	sub	sp, #8
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d101      	bne.n	80082e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e049      	b.n	8008374 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d106      	bne.n	80082fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f841 	bl	800837c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2202      	movs	r2, #2
 80082fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	3304      	adds	r3, #4
 800830a:	4619      	mov	r1, r3
 800830c:	4610      	mov	r0, r2
 800830e:	f000 f9f7 	bl	8008700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2201      	movs	r2, #1
 8008316:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2201      	movs	r2, #1
 8008326:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2201      	movs	r2, #1
 8008356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2201      	movs	r2, #1
 800836e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d001      	beq.n	80083a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e04f      	b.n	8008448 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2202      	movs	r2, #2
 80083ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f042 0201 	orr.w	r2, r2, #1
 80083be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a23      	ldr	r2, [pc, #140]	; (8008454 <HAL_TIM_Base_Start_IT+0xc4>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d01d      	beq.n	8008406 <HAL_TIM_Base_Start_IT+0x76>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083d2:	d018      	beq.n	8008406 <HAL_TIM_Base_Start_IT+0x76>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a1f      	ldr	r2, [pc, #124]	; (8008458 <HAL_TIM_Base_Start_IT+0xc8>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d013      	beq.n	8008406 <HAL_TIM_Base_Start_IT+0x76>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a1e      	ldr	r2, [pc, #120]	; (800845c <HAL_TIM_Base_Start_IT+0xcc>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d00e      	beq.n	8008406 <HAL_TIM_Base_Start_IT+0x76>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a1c      	ldr	r2, [pc, #112]	; (8008460 <HAL_TIM_Base_Start_IT+0xd0>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d009      	beq.n	8008406 <HAL_TIM_Base_Start_IT+0x76>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a1b      	ldr	r2, [pc, #108]	; (8008464 <HAL_TIM_Base_Start_IT+0xd4>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d004      	beq.n	8008406 <HAL_TIM_Base_Start_IT+0x76>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a19      	ldr	r2, [pc, #100]	; (8008468 <HAL_TIM_Base_Start_IT+0xd8>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d115      	bne.n	8008432 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	689a      	ldr	r2, [r3, #8]
 800840c:	4b17      	ldr	r3, [pc, #92]	; (800846c <HAL_TIM_Base_Start_IT+0xdc>)
 800840e:	4013      	ands	r3, r2
 8008410:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2b06      	cmp	r3, #6
 8008416:	d015      	beq.n	8008444 <HAL_TIM_Base_Start_IT+0xb4>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800841e:	d011      	beq.n	8008444 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f042 0201 	orr.w	r2, r2, #1
 800842e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008430:	e008      	b.n	8008444 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f042 0201 	orr.w	r2, r2, #1
 8008440:	601a      	str	r2, [r3, #0]
 8008442:	e000      	b.n	8008446 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008444:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3714      	adds	r7, #20
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr
 8008454:	40012c00 	.word	0x40012c00
 8008458:	40000400 	.word	0x40000400
 800845c:	40000800 	.word	0x40000800
 8008460:	40000c00 	.word	0x40000c00
 8008464:	40013400 	.word	0x40013400
 8008468:	40014000 	.word	0x40014000
 800846c:	00010007 	.word	0x00010007

08008470 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	f003 0302 	and.w	r3, r3, #2
 8008482:	2b02      	cmp	r3, #2
 8008484:	d122      	bne.n	80084cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	f003 0302 	and.w	r3, r3, #2
 8008490:	2b02      	cmp	r3, #2
 8008492:	d11b      	bne.n	80084cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f06f 0202 	mvn.w	r2, #2
 800849c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2201      	movs	r2, #1
 80084a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	f003 0303 	and.w	r3, r3, #3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d003      	beq.n	80084ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f905 	bl	80086c2 <HAL_TIM_IC_CaptureCallback>
 80084b8:	e005      	b.n	80084c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f8f7 	bl	80086ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f908 	bl	80086d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	f003 0304 	and.w	r3, r3, #4
 80084d6:	2b04      	cmp	r3, #4
 80084d8:	d122      	bne.n	8008520 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	f003 0304 	and.w	r3, r3, #4
 80084e4:	2b04      	cmp	r3, #4
 80084e6:	d11b      	bne.n	8008520 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f06f 0204 	mvn.w	r2, #4
 80084f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2202      	movs	r2, #2
 80084f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008502:	2b00      	cmp	r3, #0
 8008504:	d003      	beq.n	800850e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f8db 	bl	80086c2 <HAL_TIM_IC_CaptureCallback>
 800850c:	e005      	b.n	800851a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f8cd 	bl	80086ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f8de 	bl	80086d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	f003 0308 	and.w	r3, r3, #8
 800852a:	2b08      	cmp	r3, #8
 800852c:	d122      	bne.n	8008574 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	f003 0308 	and.w	r3, r3, #8
 8008538:	2b08      	cmp	r3, #8
 800853a:	d11b      	bne.n	8008574 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f06f 0208 	mvn.w	r2, #8
 8008544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2204      	movs	r2, #4
 800854a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	69db      	ldr	r3, [r3, #28]
 8008552:	f003 0303 	and.w	r3, r3, #3
 8008556:	2b00      	cmp	r3, #0
 8008558:	d003      	beq.n	8008562 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f8b1 	bl	80086c2 <HAL_TIM_IC_CaptureCallback>
 8008560:	e005      	b.n	800856e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 f8a3 	bl	80086ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f8b4 	bl	80086d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	f003 0310 	and.w	r3, r3, #16
 800857e:	2b10      	cmp	r3, #16
 8008580:	d122      	bne.n	80085c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	f003 0310 	and.w	r3, r3, #16
 800858c:	2b10      	cmp	r3, #16
 800858e:	d11b      	bne.n	80085c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f06f 0210 	mvn.w	r2, #16
 8008598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2208      	movs	r2, #8
 800859e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	69db      	ldr	r3, [r3, #28]
 80085a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d003      	beq.n	80085b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f887 	bl	80086c2 <HAL_TIM_IC_CaptureCallback>
 80085b4:	e005      	b.n	80085c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f879 	bl	80086ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f88a 	bl	80086d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	f003 0301 	and.w	r3, r3, #1
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d10e      	bne.n	80085f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	f003 0301 	and.w	r3, r3, #1
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d107      	bne.n	80085f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f06f 0201 	mvn.w	r2, #1
 80085ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f7fa f990 	bl	8002914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085fe:	2b80      	cmp	r3, #128	; 0x80
 8008600:	d10e      	bne.n	8008620 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800860c:	2b80      	cmp	r3, #128	; 0x80
 800860e:	d107      	bne.n	8008620 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f914 	bl	8008848 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800862a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800862e:	d10e      	bne.n	800864e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800863a:	2b80      	cmp	r3, #128	; 0x80
 800863c:	d107      	bne.n	800864e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f907 	bl	800885c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008658:	2b40      	cmp	r3, #64	; 0x40
 800865a:	d10e      	bne.n	800867a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008666:	2b40      	cmp	r3, #64	; 0x40
 8008668:	d107      	bne.n	800867a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 f838 	bl	80086ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	f003 0320 	and.w	r3, r3, #32
 8008684:	2b20      	cmp	r3, #32
 8008686:	d10e      	bne.n	80086a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	f003 0320 	and.w	r3, r3, #32
 8008692:	2b20      	cmp	r3, #32
 8008694:	d107      	bne.n	80086a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f06f 0220 	mvn.w	r2, #32
 800869e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 f8c7 	bl	8008834 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086a6:	bf00      	nop
 80086a8:	3708      	adds	r7, #8
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b083      	sub	sp, #12
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086b6:	bf00      	nop
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr

080086c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b083      	sub	sp, #12
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086ca:	bf00      	nop
 80086cc:	370c      	adds	r7, #12
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086d6:	b480      	push	{r7}
 80086d8:	b083      	sub	sp, #12
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086de:	bf00      	nop
 80086e0:	370c      	adds	r7, #12
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr

080086ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086ea:	b480      	push	{r7}
 80086ec:	b083      	sub	sp, #12
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086f2:	bf00      	nop
 80086f4:	370c      	adds	r7, #12
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
	...

08008700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a40      	ldr	r2, [pc, #256]	; (8008814 <TIM_Base_SetConfig+0x114>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d013      	beq.n	8008740 <TIM_Base_SetConfig+0x40>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800871e:	d00f      	beq.n	8008740 <TIM_Base_SetConfig+0x40>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a3d      	ldr	r2, [pc, #244]	; (8008818 <TIM_Base_SetConfig+0x118>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d00b      	beq.n	8008740 <TIM_Base_SetConfig+0x40>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a3c      	ldr	r2, [pc, #240]	; (800881c <TIM_Base_SetConfig+0x11c>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d007      	beq.n	8008740 <TIM_Base_SetConfig+0x40>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a3b      	ldr	r2, [pc, #236]	; (8008820 <TIM_Base_SetConfig+0x120>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d003      	beq.n	8008740 <TIM_Base_SetConfig+0x40>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a3a      	ldr	r2, [pc, #232]	; (8008824 <TIM_Base_SetConfig+0x124>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d108      	bne.n	8008752 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	4313      	orrs	r3, r2
 8008750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a2f      	ldr	r2, [pc, #188]	; (8008814 <TIM_Base_SetConfig+0x114>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d01f      	beq.n	800879a <TIM_Base_SetConfig+0x9a>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008760:	d01b      	beq.n	800879a <TIM_Base_SetConfig+0x9a>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a2c      	ldr	r2, [pc, #176]	; (8008818 <TIM_Base_SetConfig+0x118>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d017      	beq.n	800879a <TIM_Base_SetConfig+0x9a>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a2b      	ldr	r2, [pc, #172]	; (800881c <TIM_Base_SetConfig+0x11c>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d013      	beq.n	800879a <TIM_Base_SetConfig+0x9a>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a2a      	ldr	r2, [pc, #168]	; (8008820 <TIM_Base_SetConfig+0x120>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d00f      	beq.n	800879a <TIM_Base_SetConfig+0x9a>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a29      	ldr	r2, [pc, #164]	; (8008824 <TIM_Base_SetConfig+0x124>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d00b      	beq.n	800879a <TIM_Base_SetConfig+0x9a>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a28      	ldr	r2, [pc, #160]	; (8008828 <TIM_Base_SetConfig+0x128>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d007      	beq.n	800879a <TIM_Base_SetConfig+0x9a>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a27      	ldr	r2, [pc, #156]	; (800882c <TIM_Base_SetConfig+0x12c>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d003      	beq.n	800879a <TIM_Base_SetConfig+0x9a>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a26      	ldr	r2, [pc, #152]	; (8008830 <TIM_Base_SetConfig+0x130>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d108      	bne.n	80087ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	689a      	ldr	r2, [r3, #8]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a10      	ldr	r2, [pc, #64]	; (8008814 <TIM_Base_SetConfig+0x114>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d00f      	beq.n	80087f8 <TIM_Base_SetConfig+0xf8>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a12      	ldr	r2, [pc, #72]	; (8008824 <TIM_Base_SetConfig+0x124>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d00b      	beq.n	80087f8 <TIM_Base_SetConfig+0xf8>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a11      	ldr	r2, [pc, #68]	; (8008828 <TIM_Base_SetConfig+0x128>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d007      	beq.n	80087f8 <TIM_Base_SetConfig+0xf8>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a10      	ldr	r2, [pc, #64]	; (800882c <TIM_Base_SetConfig+0x12c>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d003      	beq.n	80087f8 <TIM_Base_SetConfig+0xf8>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a0f      	ldr	r2, [pc, #60]	; (8008830 <TIM_Base_SetConfig+0x130>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d103      	bne.n	8008800 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	691a      	ldr	r2, [r3, #16]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	615a      	str	r2, [r3, #20]
}
 8008806:	bf00      	nop
 8008808:	3714      	adds	r7, #20
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	40012c00 	.word	0x40012c00
 8008818:	40000400 	.word	0x40000400
 800881c:	40000800 	.word	0x40000800
 8008820:	40000c00 	.word	0x40000c00
 8008824:	40013400 	.word	0x40013400
 8008828:	40014000 	.word	0x40014000
 800882c:	40014400 	.word	0x40014400
 8008830:	40014800 	.word	0x40014800

08008834 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d101      	bne.n	8008882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e040      	b.n	8008904 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008886:	2b00      	cmp	r3, #0
 8008888:	d106      	bne.n	8008898 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7fa fa22 	bl	8002cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2224      	movs	r2, #36	; 0x24
 800889c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f022 0201 	bic.w	r2, r2, #1
 80088ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 faa6 	bl	8008e00 <UART_SetConfig>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d101      	bne.n	80088be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e022      	b.n	8008904 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d002      	beq.n	80088cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fd54 	bl	8009374 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	685a      	ldr	r2, [r3, #4]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	689a      	ldr	r2, [r3, #8]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f042 0201 	orr.w	r2, r2, #1
 80088fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fddb 	bl	80094b8 <UART_CheckIdleState>
 8008902:	4603      	mov	r3, r0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b08a      	sub	sp, #40	; 0x28
 8008910:	af02      	add	r7, sp, #8
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	603b      	str	r3, [r7, #0]
 8008918:	4613      	mov	r3, r2
 800891a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008920:	2b20      	cmp	r3, #32
 8008922:	f040 80bb 	bne.w	8008a9c <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d002      	beq.n	8008932 <HAL_UART_Receive+0x26>
 800892c:	88fb      	ldrh	r3, [r7, #6]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d101      	bne.n	8008936 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e0b3      	b.n	8008a9e <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800893c:	2b01      	cmp	r3, #1
 800893e:	d101      	bne.n	8008944 <HAL_UART_Receive+0x38>
 8008940:	2302      	movs	r3, #2
 8008942:	e0ac      	b.n	8008a9e <HAL_UART_Receive+0x192>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2200      	movs	r2, #0
 8008950:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2222      	movs	r2, #34	; 0x22
 8008956:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008958:	f7fb f942 	bl	8003be0 <HAL_GetTick>
 800895c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	88fa      	ldrh	r2, [r7, #6]
 8008962:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	88fa      	ldrh	r2, [r7, #6]
 800896a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008976:	d10e      	bne.n	8008996 <HAL_UART_Receive+0x8a>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d105      	bne.n	800898c <HAL_UART_Receive+0x80>
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008986:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800898a:	e02d      	b.n	80089e8 <HAL_UART_Receive+0xdc>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	22ff      	movs	r2, #255	; 0xff
 8008990:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008994:	e028      	b.n	80089e8 <HAL_UART_Receive+0xdc>
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10d      	bne.n	80089ba <HAL_UART_Receive+0xae>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d104      	bne.n	80089b0 <HAL_UART_Receive+0xa4>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	22ff      	movs	r2, #255	; 0xff
 80089aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80089ae:	e01b      	b.n	80089e8 <HAL_UART_Receive+0xdc>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	227f      	movs	r2, #127	; 0x7f
 80089b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80089b8:	e016      	b.n	80089e8 <HAL_UART_Receive+0xdc>
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089c2:	d10d      	bne.n	80089e0 <HAL_UART_Receive+0xd4>
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d104      	bne.n	80089d6 <HAL_UART_Receive+0xca>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	227f      	movs	r2, #127	; 0x7f
 80089d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80089d4:	e008      	b.n	80089e8 <HAL_UART_Receive+0xdc>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	223f      	movs	r2, #63	; 0x3f
 80089da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80089de:	e003      	b.n	80089e8 <HAL_UART_Receive+0xdc>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80089ee:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089f8:	d108      	bne.n	8008a0c <HAL_UART_Receive+0x100>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d104      	bne.n	8008a0c <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8008a02:	2300      	movs	r3, #0
 8008a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	61bb      	str	r3, [r7, #24]
 8008a0a:	e003      	b.n	8008a14 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a10:	2300      	movs	r3, #0
 8008a12:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008a1c:	e033      	b.n	8008a86 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	2200      	movs	r2, #0
 8008a26:	2120      	movs	r1, #32
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f000 fd8a 	bl	8009542 <UART_WaitOnFlagUntilTimeout>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d001      	beq.n	8008a38 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e032      	b.n	8008a9e <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d10c      	bne.n	8008a58 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	8a7b      	ldrh	r3, [r7, #18]
 8008a48:	4013      	ands	r3, r2
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	3302      	adds	r3, #2
 8008a54:	61bb      	str	r3, [r7, #24]
 8008a56:	e00d      	b.n	8008a74 <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	b2da      	uxtb	r2, r3
 8008a62:	8a7b      	ldrh	r3, [r7, #18]
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	4013      	ands	r3, r2
 8008a68:	b2da      	uxtb	r2, r3
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	3301      	adds	r3, #1
 8008a72:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1c5      	bne.n	8008a1e <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2220      	movs	r2, #32
 8008a96:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	e000      	b.n	8008a9e <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8008a9c:	2302      	movs	r3, #2
  }
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3720      	adds	r7, #32
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
	...

08008aa8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aba:	2b20      	cmp	r3, #32
 8008abc:	d144      	bne.n	8008b48 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d002      	beq.n	8008aca <HAL_UART_Transmit_IT+0x22>
 8008ac4:	88fb      	ldrh	r3, [r7, #6]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d101      	bne.n	8008ace <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	e03d      	b.n	8008b4a <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d101      	bne.n	8008adc <HAL_UART_Transmit_IT+0x34>
 8008ad8:	2302      	movs	r3, #2
 8008ada:	e036      	b.n	8008b4a <HAL_UART_Transmit_IT+0xa2>
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	68ba      	ldr	r2, [r7, #8]
 8008ae8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	88fa      	ldrh	r2, [r7, #6]
 8008aee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	88fa      	ldrh	r2, [r7, #6]
 8008af6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2200      	movs	r2, #0
 8008afe:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2200      	movs	r2, #0
 8008b04:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2221      	movs	r2, #33	; 0x21
 8008b0a:	675a      	str	r2, [r3, #116]	; 0x74
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b14:	d107      	bne.n	8008b26 <HAL_UART_Transmit_IT+0x7e>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d103      	bne.n	8008b26 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	4a0d      	ldr	r2, [pc, #52]	; (8008b58 <HAL_UART_Transmit_IT+0xb0>)
 8008b22:	665a      	str	r2, [r3, #100]	; 0x64
 8008b24:	e002      	b.n	8008b2c <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	4a0c      	ldr	r2, [pc, #48]	; (8008b5c <HAL_UART_Transmit_IT+0xb4>)
 8008b2a:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008b42:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	e000      	b.n	8008b4a <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8008b48:	2302      	movs	r3, #2
  }
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3714      	adds	r7, #20
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	08009719 	.word	0x08009719
 8008b5c:	080096a5 	.word	0x080096a5

08008b60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b088      	sub	sp, #32
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008b80:	69fa      	ldr	r2, [r7, #28]
 8008b82:	f640 030f 	movw	r3, #2063	; 0x80f
 8008b86:	4013      	ands	r3, r2
 8008b88:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d113      	bne.n	8008bb8 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	f003 0320 	and.w	r3, r3, #32
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00e      	beq.n	8008bb8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	f003 0320 	and.w	r3, r3, #32
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d009      	beq.n	8008bb8 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f000 8113 	beq.w	8008dd4 <HAL_UART_IRQHandler+0x274>
      {
        huart->RxISR(huart);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	4798      	blx	r3
      }
      return;
 8008bb6:	e10d      	b.n	8008dd4 <HAL_UART_IRQHandler+0x274>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f000 80d6 	beq.w	8008d6c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d105      	bne.n	8008bd6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008bca:	69ba      	ldr	r2, [r7, #24]
 8008bcc:	4b85      	ldr	r3, [pc, #532]	; (8008de4 <HAL_UART_IRQHandler+0x284>)
 8008bce:	4013      	ands	r3, r2
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f000 80cb 	beq.w	8008d6c <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008bd6:	69fb      	ldr	r3, [r7, #28]
 8008bd8:	f003 0301 	and.w	r3, r3, #1
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00e      	beq.n	8008bfe <HAL_UART_IRQHandler+0x9e>
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d009      	beq.n	8008bfe <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bf6:	f043 0201 	orr.w	r2, r3, #1
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	f003 0302 	and.w	r3, r3, #2
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00e      	beq.n	8008c26 <HAL_UART_IRQHandler+0xc6>
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	f003 0301 	and.w	r3, r3, #1
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d009      	beq.n	8008c26 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2202      	movs	r2, #2
 8008c18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c1e:	f043 0204 	orr.w	r2, r3, #4
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	f003 0304 	and.w	r3, r3, #4
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00e      	beq.n	8008c4e <HAL_UART_IRQHandler+0xee>
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	f003 0301 	and.w	r3, r3, #1
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d009      	beq.n	8008c4e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2204      	movs	r2, #4
 8008c40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c46:	f043 0202 	orr.w	r2, r3, #2
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	f003 0308 	and.w	r3, r3, #8
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d013      	beq.n	8008c80 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	f003 0320 	and.w	r3, r3, #32
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d104      	bne.n	8008c6c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d009      	beq.n	8008c80 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2208      	movs	r2, #8
 8008c72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c78:	f043 0208 	orr.w	r2, r3, #8
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00f      	beq.n	8008caa <HAL_UART_IRQHandler+0x14a>
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00a      	beq.n	8008caa <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ca2:	f043 0220 	orr.w	r2, r3, #32
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f000 8092 	beq.w	8008dd8 <HAL_UART_IRQHandler+0x278>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	f003 0320 	and.w	r3, r3, #32
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00c      	beq.n	8008cd8 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	f003 0320 	and.w	r3, r3, #32
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d007      	beq.n	8008cd8 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d003      	beq.n	8008cd8 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cdc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce8:	2b40      	cmp	r3, #64	; 0x40
 8008cea:	d004      	beq.n	8008cf6 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d031      	beq.n	8008d5a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fc9e 	bl	8009638 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d06:	2b40      	cmp	r3, #64	; 0x40
 8008d08:	d123      	bne.n	8008d52 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	689a      	ldr	r2, [r3, #8]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d18:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d013      	beq.n	8008d4a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d26:	4a30      	ldr	r2, [pc, #192]	; (8008de8 <HAL_UART_IRQHandler+0x288>)
 8008d28:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7fb f974 	bl	800401c <HAL_DMA_Abort_IT>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d016      	beq.n	8008d68 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008d44:	4610      	mov	r0, r2
 8008d46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d48:	e00e      	b.n	8008d68 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 f84e 	bl	8008dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d50:	e00a      	b.n	8008d68 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f84a 	bl	8008dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d58:	e006      	b.n	8008d68 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f846 	bl	8008dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8008d66:	e037      	b.n	8008dd8 <HAL_UART_IRQHandler+0x278>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d68:	bf00      	nop
    return;
 8008d6a:	e035      	b.n	8008dd8 <HAL_UART_IRQHandler+0x278>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00d      	beq.n	8008d92 <HAL_UART_IRQHandler+0x232>
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d008      	beq.n	8008d92 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008d88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fd1b 	bl	80097c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d90:	e025      	b.n	8008dde <HAL_UART_IRQHandler+0x27e>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00d      	beq.n	8008db8 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d008      	beq.n	8008db8 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d016      	beq.n	8008ddc <HAL_UART_IRQHandler+0x27c>
    {
      huart->TxISR(huart);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	4798      	blx	r3
    }
    return;
 8008db6:	e011      	b.n	8008ddc <HAL_UART_IRQHandler+0x27c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00d      	beq.n	8008dde <HAL_UART_IRQHandler+0x27e>
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d008      	beq.n	8008dde <HAL_UART_IRQHandler+0x27e>
  {
    UART_EndTransmit_IT(huart);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 fce1 	bl	8009794 <UART_EndTransmit_IT>
    return;
 8008dd2:	e004      	b.n	8008dde <HAL_UART_IRQHandler+0x27e>
      return;
 8008dd4:	bf00      	nop
 8008dd6:	e002      	b.n	8008dde <HAL_UART_IRQHandler+0x27e>
    return;
 8008dd8:	bf00      	nop
 8008dda:	e000      	b.n	8008dde <HAL_UART_IRQHandler+0x27e>
    return;
 8008ddc:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008dde:	3720      	adds	r7, #32
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	04000120 	.word	0x04000120
 8008de8:	08009679 	.word	0x08009679

08008dec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008df4:	bf00      	nop
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e04:	b08a      	sub	sp, #40	; 0x28
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	689a      	ldr	r2, [r3, #8]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	431a      	orrs	r2, r3
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	695b      	ldr	r3, [r3, #20]
 8008e1e:	431a      	orrs	r2, r3
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	69db      	ldr	r3, [r3, #28]
 8008e24:	4313      	orrs	r3, r2
 8008e26:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	4ba4      	ldr	r3, [pc, #656]	; (80090c0 <UART_SetConfig+0x2c0>)
 8008e30:	4013      	ands	r3, r2
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	6812      	ldr	r2, [r2, #0]
 8008e36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e38:	430b      	orrs	r3, r1
 8008e3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	68da      	ldr	r2, [r3, #12]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	430a      	orrs	r2, r1
 8008e50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	699b      	ldr	r3, [r3, #24]
 8008e56:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a99      	ldr	r2, [pc, #612]	; (80090c4 <UART_SetConfig+0x2c4>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d004      	beq.n	8008e6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6a1b      	ldr	r3, [r3, #32]
 8008e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e7c:	430a      	orrs	r2, r1
 8008e7e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a90      	ldr	r2, [pc, #576]	; (80090c8 <UART_SetConfig+0x2c8>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d126      	bne.n	8008ed8 <UART_SetConfig+0xd8>
 8008e8a:	4b90      	ldr	r3, [pc, #576]	; (80090cc <UART_SetConfig+0x2cc>)
 8008e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e90:	f003 0303 	and.w	r3, r3, #3
 8008e94:	2b03      	cmp	r3, #3
 8008e96:	d81b      	bhi.n	8008ed0 <UART_SetConfig+0xd0>
 8008e98:	a201      	add	r2, pc, #4	; (adr r2, 8008ea0 <UART_SetConfig+0xa0>)
 8008e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9e:	bf00      	nop
 8008ea0:	08008eb1 	.word	0x08008eb1
 8008ea4:	08008ec1 	.word	0x08008ec1
 8008ea8:	08008eb9 	.word	0x08008eb9
 8008eac:	08008ec9 	.word	0x08008ec9
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008eb6:	e116      	b.n	80090e6 <UART_SetConfig+0x2e6>
 8008eb8:	2302      	movs	r3, #2
 8008eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ebe:	e112      	b.n	80090e6 <UART_SetConfig+0x2e6>
 8008ec0:	2304      	movs	r3, #4
 8008ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ec6:	e10e      	b.n	80090e6 <UART_SetConfig+0x2e6>
 8008ec8:	2308      	movs	r3, #8
 8008eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ece:	e10a      	b.n	80090e6 <UART_SetConfig+0x2e6>
 8008ed0:	2310      	movs	r3, #16
 8008ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ed6:	e106      	b.n	80090e6 <UART_SetConfig+0x2e6>
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a7c      	ldr	r2, [pc, #496]	; (80090d0 <UART_SetConfig+0x2d0>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d138      	bne.n	8008f54 <UART_SetConfig+0x154>
 8008ee2:	4b7a      	ldr	r3, [pc, #488]	; (80090cc <UART_SetConfig+0x2cc>)
 8008ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ee8:	f003 030c 	and.w	r3, r3, #12
 8008eec:	2b0c      	cmp	r3, #12
 8008eee:	d82d      	bhi.n	8008f4c <UART_SetConfig+0x14c>
 8008ef0:	a201      	add	r2, pc, #4	; (adr r2, 8008ef8 <UART_SetConfig+0xf8>)
 8008ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef6:	bf00      	nop
 8008ef8:	08008f2d 	.word	0x08008f2d
 8008efc:	08008f4d 	.word	0x08008f4d
 8008f00:	08008f4d 	.word	0x08008f4d
 8008f04:	08008f4d 	.word	0x08008f4d
 8008f08:	08008f3d 	.word	0x08008f3d
 8008f0c:	08008f4d 	.word	0x08008f4d
 8008f10:	08008f4d 	.word	0x08008f4d
 8008f14:	08008f4d 	.word	0x08008f4d
 8008f18:	08008f35 	.word	0x08008f35
 8008f1c:	08008f4d 	.word	0x08008f4d
 8008f20:	08008f4d 	.word	0x08008f4d
 8008f24:	08008f4d 	.word	0x08008f4d
 8008f28:	08008f45 	.word	0x08008f45
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f32:	e0d8      	b.n	80090e6 <UART_SetConfig+0x2e6>
 8008f34:	2302      	movs	r3, #2
 8008f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f3a:	e0d4      	b.n	80090e6 <UART_SetConfig+0x2e6>
 8008f3c:	2304      	movs	r3, #4
 8008f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f42:	e0d0      	b.n	80090e6 <UART_SetConfig+0x2e6>
 8008f44:	2308      	movs	r3, #8
 8008f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f4a:	e0cc      	b.n	80090e6 <UART_SetConfig+0x2e6>
 8008f4c:	2310      	movs	r3, #16
 8008f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f52:	e0c8      	b.n	80090e6 <UART_SetConfig+0x2e6>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a5e      	ldr	r2, [pc, #376]	; (80090d4 <UART_SetConfig+0x2d4>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d125      	bne.n	8008faa <UART_SetConfig+0x1aa>
 8008f5e:	4b5b      	ldr	r3, [pc, #364]	; (80090cc <UART_SetConfig+0x2cc>)
 8008f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008f68:	2b30      	cmp	r3, #48	; 0x30
 8008f6a:	d016      	beq.n	8008f9a <UART_SetConfig+0x19a>
 8008f6c:	2b30      	cmp	r3, #48	; 0x30
 8008f6e:	d818      	bhi.n	8008fa2 <UART_SetConfig+0x1a2>
 8008f70:	2b20      	cmp	r3, #32
 8008f72:	d00a      	beq.n	8008f8a <UART_SetConfig+0x18a>
 8008f74:	2b20      	cmp	r3, #32
 8008f76:	d814      	bhi.n	8008fa2 <UART_SetConfig+0x1a2>
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d002      	beq.n	8008f82 <UART_SetConfig+0x182>
 8008f7c:	2b10      	cmp	r3, #16
 8008f7e:	d008      	beq.n	8008f92 <UART_SetConfig+0x192>
 8008f80:	e00f      	b.n	8008fa2 <UART_SetConfig+0x1a2>
 8008f82:	2300      	movs	r3, #0
 8008f84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f88:	e0ad      	b.n	80090e6 <UART_SetConfig+0x2e6>
 8008f8a:	2302      	movs	r3, #2
 8008f8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f90:	e0a9      	b.n	80090e6 <UART_SetConfig+0x2e6>
 8008f92:	2304      	movs	r3, #4
 8008f94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f98:	e0a5      	b.n	80090e6 <UART_SetConfig+0x2e6>
 8008f9a:	2308      	movs	r3, #8
 8008f9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fa0:	e0a1      	b.n	80090e6 <UART_SetConfig+0x2e6>
 8008fa2:	2310      	movs	r3, #16
 8008fa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fa8:	e09d      	b.n	80090e6 <UART_SetConfig+0x2e6>
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a4a      	ldr	r2, [pc, #296]	; (80090d8 <UART_SetConfig+0x2d8>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d125      	bne.n	8009000 <UART_SetConfig+0x200>
 8008fb4:	4b45      	ldr	r3, [pc, #276]	; (80090cc <UART_SetConfig+0x2cc>)
 8008fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008fbe:	2bc0      	cmp	r3, #192	; 0xc0
 8008fc0:	d016      	beq.n	8008ff0 <UART_SetConfig+0x1f0>
 8008fc2:	2bc0      	cmp	r3, #192	; 0xc0
 8008fc4:	d818      	bhi.n	8008ff8 <UART_SetConfig+0x1f8>
 8008fc6:	2b80      	cmp	r3, #128	; 0x80
 8008fc8:	d00a      	beq.n	8008fe0 <UART_SetConfig+0x1e0>
 8008fca:	2b80      	cmp	r3, #128	; 0x80
 8008fcc:	d814      	bhi.n	8008ff8 <UART_SetConfig+0x1f8>
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d002      	beq.n	8008fd8 <UART_SetConfig+0x1d8>
 8008fd2:	2b40      	cmp	r3, #64	; 0x40
 8008fd4:	d008      	beq.n	8008fe8 <UART_SetConfig+0x1e8>
 8008fd6:	e00f      	b.n	8008ff8 <UART_SetConfig+0x1f8>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fde:	e082      	b.n	80090e6 <UART_SetConfig+0x2e6>
 8008fe0:	2302      	movs	r3, #2
 8008fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fe6:	e07e      	b.n	80090e6 <UART_SetConfig+0x2e6>
 8008fe8:	2304      	movs	r3, #4
 8008fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fee:	e07a      	b.n	80090e6 <UART_SetConfig+0x2e6>
 8008ff0:	2308      	movs	r3, #8
 8008ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ff6:	e076      	b.n	80090e6 <UART_SetConfig+0x2e6>
 8008ff8:	2310      	movs	r3, #16
 8008ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ffe:	e072      	b.n	80090e6 <UART_SetConfig+0x2e6>
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a35      	ldr	r2, [pc, #212]	; (80090dc <UART_SetConfig+0x2dc>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d12a      	bne.n	8009060 <UART_SetConfig+0x260>
 800900a:	4b30      	ldr	r3, [pc, #192]	; (80090cc <UART_SetConfig+0x2cc>)
 800900c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009014:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009018:	d01a      	beq.n	8009050 <UART_SetConfig+0x250>
 800901a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800901e:	d81b      	bhi.n	8009058 <UART_SetConfig+0x258>
 8009020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009024:	d00c      	beq.n	8009040 <UART_SetConfig+0x240>
 8009026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800902a:	d815      	bhi.n	8009058 <UART_SetConfig+0x258>
 800902c:	2b00      	cmp	r3, #0
 800902e:	d003      	beq.n	8009038 <UART_SetConfig+0x238>
 8009030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009034:	d008      	beq.n	8009048 <UART_SetConfig+0x248>
 8009036:	e00f      	b.n	8009058 <UART_SetConfig+0x258>
 8009038:	2300      	movs	r3, #0
 800903a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800903e:	e052      	b.n	80090e6 <UART_SetConfig+0x2e6>
 8009040:	2302      	movs	r3, #2
 8009042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009046:	e04e      	b.n	80090e6 <UART_SetConfig+0x2e6>
 8009048:	2304      	movs	r3, #4
 800904a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800904e:	e04a      	b.n	80090e6 <UART_SetConfig+0x2e6>
 8009050:	2308      	movs	r3, #8
 8009052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009056:	e046      	b.n	80090e6 <UART_SetConfig+0x2e6>
 8009058:	2310      	movs	r3, #16
 800905a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800905e:	e042      	b.n	80090e6 <UART_SetConfig+0x2e6>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a17      	ldr	r2, [pc, #92]	; (80090c4 <UART_SetConfig+0x2c4>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d13a      	bne.n	80090e0 <UART_SetConfig+0x2e0>
 800906a:	4b18      	ldr	r3, [pc, #96]	; (80090cc <UART_SetConfig+0x2cc>)
 800906c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009070:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009074:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009078:	d01a      	beq.n	80090b0 <UART_SetConfig+0x2b0>
 800907a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800907e:	d81b      	bhi.n	80090b8 <UART_SetConfig+0x2b8>
 8009080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009084:	d00c      	beq.n	80090a0 <UART_SetConfig+0x2a0>
 8009086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800908a:	d815      	bhi.n	80090b8 <UART_SetConfig+0x2b8>
 800908c:	2b00      	cmp	r3, #0
 800908e:	d003      	beq.n	8009098 <UART_SetConfig+0x298>
 8009090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009094:	d008      	beq.n	80090a8 <UART_SetConfig+0x2a8>
 8009096:	e00f      	b.n	80090b8 <UART_SetConfig+0x2b8>
 8009098:	2300      	movs	r3, #0
 800909a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800909e:	e022      	b.n	80090e6 <UART_SetConfig+0x2e6>
 80090a0:	2302      	movs	r3, #2
 80090a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090a6:	e01e      	b.n	80090e6 <UART_SetConfig+0x2e6>
 80090a8:	2304      	movs	r3, #4
 80090aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090ae:	e01a      	b.n	80090e6 <UART_SetConfig+0x2e6>
 80090b0:	2308      	movs	r3, #8
 80090b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090b6:	e016      	b.n	80090e6 <UART_SetConfig+0x2e6>
 80090b8:	2310      	movs	r3, #16
 80090ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090be:	e012      	b.n	80090e6 <UART_SetConfig+0x2e6>
 80090c0:	efff69f3 	.word	0xefff69f3
 80090c4:	40008000 	.word	0x40008000
 80090c8:	40013800 	.word	0x40013800
 80090cc:	40021000 	.word	0x40021000
 80090d0:	40004400 	.word	0x40004400
 80090d4:	40004800 	.word	0x40004800
 80090d8:	40004c00 	.word	0x40004c00
 80090dc:	40005000 	.word	0x40005000
 80090e0:	2310      	movs	r3, #16
 80090e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4aa0      	ldr	r2, [pc, #640]	; (800936c <UART_SetConfig+0x56c>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d17a      	bne.n	80091e6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80090f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80090f4:	2b08      	cmp	r3, #8
 80090f6:	d824      	bhi.n	8009142 <UART_SetConfig+0x342>
 80090f8:	a201      	add	r2, pc, #4	; (adr r2, 8009100 <UART_SetConfig+0x300>)
 80090fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fe:	bf00      	nop
 8009100:	08009125 	.word	0x08009125
 8009104:	08009143 	.word	0x08009143
 8009108:	0800912d 	.word	0x0800912d
 800910c:	08009143 	.word	0x08009143
 8009110:	08009133 	.word	0x08009133
 8009114:	08009143 	.word	0x08009143
 8009118:	08009143 	.word	0x08009143
 800911c:	08009143 	.word	0x08009143
 8009120:	0800913b 	.word	0x0800913b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009124:	f7fd f82c 	bl	8006180 <HAL_RCC_GetPCLK1Freq>
 8009128:	61f8      	str	r0, [r7, #28]
        break;
 800912a:	e010      	b.n	800914e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800912c:	4b90      	ldr	r3, [pc, #576]	; (8009370 <UART_SetConfig+0x570>)
 800912e:	61fb      	str	r3, [r7, #28]
        break;
 8009130:	e00d      	b.n	800914e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009132:	f7fc ff8d 	bl	8006050 <HAL_RCC_GetSysClockFreq>
 8009136:	61f8      	str	r0, [r7, #28]
        break;
 8009138:	e009      	b.n	800914e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800913a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800913e:	61fb      	str	r3, [r7, #28]
        break;
 8009140:	e005      	b.n	800914e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009142:	2300      	movs	r3, #0
 8009144:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800914c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	2b00      	cmp	r3, #0
 8009152:	f000 80fd 	beq.w	8009350 <UART_SetConfig+0x550>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	685a      	ldr	r2, [r3, #4]
 800915a:	4613      	mov	r3, r2
 800915c:	005b      	lsls	r3, r3, #1
 800915e:	4413      	add	r3, r2
 8009160:	69fa      	ldr	r2, [r7, #28]
 8009162:	429a      	cmp	r2, r3
 8009164:	d305      	bcc.n	8009172 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800916c:	69fa      	ldr	r2, [r7, #28]
 800916e:	429a      	cmp	r2, r3
 8009170:	d903      	bls.n	800917a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009178:	e0ea      	b.n	8009350 <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	2200      	movs	r2, #0
 800917e:	461c      	mov	r4, r3
 8009180:	4615      	mov	r5, r2
 8009182:	f04f 0200 	mov.w	r2, #0
 8009186:	f04f 0300 	mov.w	r3, #0
 800918a:	022b      	lsls	r3, r5, #8
 800918c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009190:	0222      	lsls	r2, r4, #8
 8009192:	68f9      	ldr	r1, [r7, #12]
 8009194:	6849      	ldr	r1, [r1, #4]
 8009196:	0849      	lsrs	r1, r1, #1
 8009198:	2000      	movs	r0, #0
 800919a:	4688      	mov	r8, r1
 800919c:	4681      	mov	r9, r0
 800919e:	eb12 0a08 	adds.w	sl, r2, r8
 80091a2:	eb43 0b09 	adc.w	fp, r3, r9
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	603b      	str	r3, [r7, #0]
 80091ae:	607a      	str	r2, [r7, #4]
 80091b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091b4:	4650      	mov	r0, sl
 80091b6:	4659      	mov	r1, fp
 80091b8:	f7f7 fcf6 	bl	8000ba8 <__aeabi_uldivmod>
 80091bc:	4602      	mov	r2, r0
 80091be:	460b      	mov	r3, r1
 80091c0:	4613      	mov	r3, r2
 80091c2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091ca:	d308      	bcc.n	80091de <UART_SetConfig+0x3de>
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091d2:	d204      	bcs.n	80091de <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	69ba      	ldr	r2, [r7, #24]
 80091da:	60da      	str	r2, [r3, #12]
 80091dc:	e0b8      	b.n	8009350 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80091e4:	e0b4      	b.n	8009350 <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	69db      	ldr	r3, [r3, #28]
 80091ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091ee:	d15f      	bne.n	80092b0 <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 80091f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80091f4:	2b08      	cmp	r3, #8
 80091f6:	d828      	bhi.n	800924a <UART_SetConfig+0x44a>
 80091f8:	a201      	add	r2, pc, #4	; (adr r2, 8009200 <UART_SetConfig+0x400>)
 80091fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091fe:	bf00      	nop
 8009200:	08009225 	.word	0x08009225
 8009204:	0800922d 	.word	0x0800922d
 8009208:	08009235 	.word	0x08009235
 800920c:	0800924b 	.word	0x0800924b
 8009210:	0800923b 	.word	0x0800923b
 8009214:	0800924b 	.word	0x0800924b
 8009218:	0800924b 	.word	0x0800924b
 800921c:	0800924b 	.word	0x0800924b
 8009220:	08009243 	.word	0x08009243
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009224:	f7fc ffac 	bl	8006180 <HAL_RCC_GetPCLK1Freq>
 8009228:	61f8      	str	r0, [r7, #28]
        break;
 800922a:	e014      	b.n	8009256 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800922c:	f7fc ffbe 	bl	80061ac <HAL_RCC_GetPCLK2Freq>
 8009230:	61f8      	str	r0, [r7, #28]
        break;
 8009232:	e010      	b.n	8009256 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009234:	4b4e      	ldr	r3, [pc, #312]	; (8009370 <UART_SetConfig+0x570>)
 8009236:	61fb      	str	r3, [r7, #28]
        break;
 8009238:	e00d      	b.n	8009256 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800923a:	f7fc ff09 	bl	8006050 <HAL_RCC_GetSysClockFreq>
 800923e:	61f8      	str	r0, [r7, #28]
        break;
 8009240:	e009      	b.n	8009256 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009246:	61fb      	str	r3, [r7, #28]
        break;
 8009248:	e005      	b.n	8009256 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800924a:	2300      	movs	r3, #0
 800924c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009254:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d079      	beq.n	8009350 <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	005a      	lsls	r2, r3, #1
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	085b      	lsrs	r3, r3, #1
 8009266:	441a      	add	r2, r3
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009270:	b29b      	uxth	r3, r3
 8009272:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009274:	69bb      	ldr	r3, [r7, #24]
 8009276:	2b0f      	cmp	r3, #15
 8009278:	d916      	bls.n	80092a8 <UART_SetConfig+0x4a8>
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009280:	d212      	bcs.n	80092a8 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	b29b      	uxth	r3, r3
 8009286:	f023 030f 	bic.w	r3, r3, #15
 800928a:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	085b      	lsrs	r3, r3, #1
 8009290:	b29b      	uxth	r3, r3
 8009292:	f003 0307 	and.w	r3, r3, #7
 8009296:	b29a      	uxth	r2, r3
 8009298:	8afb      	ldrh	r3, [r7, #22]
 800929a:	4313      	orrs	r3, r2
 800929c:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	8afa      	ldrh	r2, [r7, #22]
 80092a4:	60da      	str	r2, [r3, #12]
 80092a6:	e053      	b.n	8009350 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80092ae:	e04f      	b.n	8009350 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 80092b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80092b4:	2b08      	cmp	r3, #8
 80092b6:	d828      	bhi.n	800930a <UART_SetConfig+0x50a>
 80092b8:	a201      	add	r2, pc, #4	; (adr r2, 80092c0 <UART_SetConfig+0x4c0>)
 80092ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092be:	bf00      	nop
 80092c0:	080092e5 	.word	0x080092e5
 80092c4:	080092ed 	.word	0x080092ed
 80092c8:	080092f5 	.word	0x080092f5
 80092cc:	0800930b 	.word	0x0800930b
 80092d0:	080092fb 	.word	0x080092fb
 80092d4:	0800930b 	.word	0x0800930b
 80092d8:	0800930b 	.word	0x0800930b
 80092dc:	0800930b 	.word	0x0800930b
 80092e0:	08009303 	.word	0x08009303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092e4:	f7fc ff4c 	bl	8006180 <HAL_RCC_GetPCLK1Freq>
 80092e8:	61f8      	str	r0, [r7, #28]
        break;
 80092ea:	e014      	b.n	8009316 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092ec:	f7fc ff5e 	bl	80061ac <HAL_RCC_GetPCLK2Freq>
 80092f0:	61f8      	str	r0, [r7, #28]
        break;
 80092f2:	e010      	b.n	8009316 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80092f4:	4b1e      	ldr	r3, [pc, #120]	; (8009370 <UART_SetConfig+0x570>)
 80092f6:	61fb      	str	r3, [r7, #28]
        break;
 80092f8:	e00d      	b.n	8009316 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092fa:	f7fc fea9 	bl	8006050 <HAL_RCC_GetSysClockFreq>
 80092fe:	61f8      	str	r0, [r7, #28]
        break;
 8009300:	e009      	b.n	8009316 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009306:	61fb      	str	r3, [r7, #28]
        break;
 8009308:	e005      	b.n	8009316 <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 800930a:	2300      	movs	r3, #0
 800930c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009314:	bf00      	nop
    }

    if (pclk != 0U)
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d019      	beq.n	8009350 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	085a      	lsrs	r2, r3, #1
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	441a      	add	r2, r3
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	fbb2 f3f3 	udiv	r3, r2, r3
 800932e:	b29b      	uxth	r3, r3
 8009330:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	2b0f      	cmp	r3, #15
 8009336:	d908      	bls.n	800934a <UART_SetConfig+0x54a>
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800933e:	d204      	bcs.n	800934a <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	69ba      	ldr	r2, [r7, #24]
 8009346:	60da      	str	r2, [r3, #12]
 8009348:	e002      	b.n	8009350 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2200      	movs	r2, #0
 8009354:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2200      	movs	r2, #0
 800935a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800935c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009360:	4618      	mov	r0, r3
 8009362:	3728      	adds	r7, #40	; 0x28
 8009364:	46bd      	mov	sp, r7
 8009366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800936a:	bf00      	nop
 800936c:	40008000 	.word	0x40008000
 8009370:	00f42400 	.word	0x00f42400

08009374 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009380:	f003 0301 	and.w	r3, r3, #1
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00a      	beq.n	800939e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	430a      	orrs	r2, r1
 800939c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a2:	f003 0302 	and.w	r3, r3, #2
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00a      	beq.n	80093c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	430a      	orrs	r2, r1
 80093be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c4:	f003 0304 	and.w	r3, r3, #4
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00a      	beq.n	80093e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	430a      	orrs	r2, r1
 80093e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e6:	f003 0308 	and.w	r3, r3, #8
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00a      	beq.n	8009404 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	430a      	orrs	r2, r1
 8009402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009408:	f003 0310 	and.w	r3, r3, #16
 800940c:	2b00      	cmp	r3, #0
 800940e:	d00a      	beq.n	8009426 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	430a      	orrs	r2, r1
 8009424:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942a:	f003 0320 	and.w	r3, r3, #32
 800942e:	2b00      	cmp	r3, #0
 8009430:	d00a      	beq.n	8009448 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	430a      	orrs	r2, r1
 8009446:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009450:	2b00      	cmp	r3, #0
 8009452:	d01a      	beq.n	800948a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	430a      	orrs	r2, r1
 8009468:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009472:	d10a      	bne.n	800948a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	430a      	orrs	r2, r1
 8009488:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00a      	beq.n	80094ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	430a      	orrs	r2, r1
 80094aa:	605a      	str	r2, [r3, #4]
  }
}
 80094ac:	bf00      	nop
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b086      	sub	sp, #24
 80094bc:	af02      	add	r7, sp, #8
 80094be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80094c6:	f7fa fb8b 	bl	8003be0 <HAL_GetTick>
 80094ca:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 0308 	and.w	r3, r3, #8
 80094d6:	2b08      	cmp	r3, #8
 80094d8:	d10e      	bne.n	80094f8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80094de:	9300      	str	r3, [sp, #0]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 f82a 	bl	8009542 <UART_WaitOnFlagUntilTimeout>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d001      	beq.n	80094f8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094f4:	2303      	movs	r3, #3
 80094f6:	e020      	b.n	800953a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f003 0304 	and.w	r3, r3, #4
 8009502:	2b04      	cmp	r3, #4
 8009504:	d10e      	bne.n	8009524 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009506:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2200      	movs	r2, #0
 8009510:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 f814 	bl	8009542 <UART_WaitOnFlagUntilTimeout>
 800951a:	4603      	mov	r3, r0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d001      	beq.n	8009524 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009520:	2303      	movs	r3, #3
 8009522:	e00a      	b.n	800953a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2220      	movs	r2, #32
 8009528:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2220      	movs	r2, #32
 800952e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009542:	b580      	push	{r7, lr}
 8009544:	b084      	sub	sp, #16
 8009546:	af00      	add	r7, sp, #0
 8009548:	60f8      	str	r0, [r7, #12]
 800954a:	60b9      	str	r1, [r7, #8]
 800954c:	603b      	str	r3, [r7, #0]
 800954e:	4613      	mov	r3, r2
 8009550:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009552:	e05d      	b.n	8009610 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800955a:	d059      	beq.n	8009610 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800955c:	f7fa fb40 	bl	8003be0 <HAL_GetTick>
 8009560:	4602      	mov	r2, r0
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	1ad3      	subs	r3, r2, r3
 8009566:	69ba      	ldr	r2, [r7, #24]
 8009568:	429a      	cmp	r2, r3
 800956a:	d302      	bcc.n	8009572 <UART_WaitOnFlagUntilTimeout+0x30>
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d11b      	bne.n	80095aa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009580:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	689a      	ldr	r2, [r3, #8]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f022 0201 	bic.w	r2, r2, #1
 8009590:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2220      	movs	r2, #32
 8009596:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2220      	movs	r2, #32
 800959c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80095a6:	2303      	movs	r3, #3
 80095a8:	e042      	b.n	8009630 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f003 0304 	and.w	r3, r3, #4
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d02b      	beq.n	8009610 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	69db      	ldr	r3, [r3, #28]
 80095be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095c6:	d123      	bne.n	8009610 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80095d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80095e0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	689a      	ldr	r2, [r3, #8]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f022 0201 	bic.w	r2, r2, #1
 80095f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2220      	movs	r2, #32
 80095f6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2220      	movs	r2, #32
 80095fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2220      	movs	r2, #32
 8009602:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800960c:	2303      	movs	r3, #3
 800960e:	e00f      	b.n	8009630 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	69da      	ldr	r2, [r3, #28]
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	4013      	ands	r3, r2
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	429a      	cmp	r2, r3
 800961e:	bf0c      	ite	eq
 8009620:	2301      	moveq	r3, #1
 8009622:	2300      	movne	r3, #0
 8009624:	b2db      	uxtb	r3, r3
 8009626:	461a      	mov	r2, r3
 8009628:	79fb      	ldrb	r3, [r7, #7]
 800962a:	429a      	cmp	r2, r3
 800962c:	d092      	beq.n	8009554 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800964e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	689a      	ldr	r2, [r3, #8]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f022 0201 	bic.w	r2, r2, #1
 800965e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2220      	movs	r2, #32
 8009664:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800966c:	bf00      	nop
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009684:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2200      	movs	r2, #0
 800968a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2200      	movs	r2, #0
 8009692:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f7ff fba8 	bl	8008dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800969c:	bf00      	nop
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096b0:	2b21      	cmp	r3, #33	; 0x21
 80096b2:	d12b      	bne.n	800970c <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d110      	bne.n	80096e2 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096ce:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096de:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80096e0:	e014      	b.n	800970c <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096e6:	781a      	ldrb	r2, [r3, #0]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	b292      	uxth	r2, r2
 80096ee:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096f4:	1c5a      	adds	r2, r3, #1
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009700:	b29b      	uxth	r3, r3
 8009702:	3b01      	subs	r3, #1
 8009704:	b29a      	uxth	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800970c:	bf00      	nop
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009724:	2b21      	cmp	r3, #33	; 0x21
 8009726:	d12f      	bne.n	8009788 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800972e:	b29b      	uxth	r3, r3
 8009730:	2b00      	cmp	r3, #0
 8009732:	d110      	bne.n	8009756 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009742:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009752:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009754:	e018      	b.n	8009788 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800975a:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	881a      	ldrh	r2, [r3, #0]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009768:	b292      	uxth	r2, r2
 800976a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009770:	1c9a      	adds	r2, r3, #2
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800977c:	b29b      	uxth	r3, r3
 800977e:	3b01      	subs	r3, #1
 8009780:	b29a      	uxth	r2, r3
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009788:	bf00      	nop
 800978a:	3714      	adds	r7, #20
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097aa:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2220      	movs	r2, #32
 80097b0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f7f9 f8c5 	bl	8002948 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097be:	bf00      	nop
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80097c6:	b480      	push	{r7}
 80097c8:	b083      	sub	sp, #12
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80097ce:	bf00      	nop
 80097d0:	370c      	adds	r7, #12
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr

080097da <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80097da:	b084      	sub	sp, #16
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	f107 001c 	add.w	r0, r7, #28
 80097e8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80097ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d122      	bne.n	8009838 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009806:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800981a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800981c:	2b01      	cmp	r3, #1
 800981e:	d105      	bne.n	800982c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fa2f 	bl	8009c90 <USB_CoreReset>
 8009832:	4603      	mov	r3, r0
 8009834:	73fb      	strb	r3, [r7, #15]
 8009836:	e01a      	b.n	800986e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 fa23 	bl	8009c90 <USB_CoreReset>
 800984a:	4603      	mov	r3, r0
 800984c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800984e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009850:	2b00      	cmp	r3, #0
 8009852:	d106      	bne.n	8009862 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009858:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	639a      	str	r2, [r3, #56]	; 0x38
 8009860:	e005      	b.n	800986e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009866:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800986e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009870:	4618      	mov	r0, r3
 8009872:	3710      	adds	r7, #16
 8009874:	46bd      	mov	sp, r7
 8009876:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800987a:	b004      	add	sp, #16
 800987c:	4770      	bx	lr

0800987e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800987e:	b480      	push	{r7}
 8009880:	b083      	sub	sp, #12
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	f023 0201 	bic.w	r2, r3, #1
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	370c      	adds	r7, #12
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	460b      	mov	r3, r1
 80098aa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80098b8:	78fb      	ldrb	r3, [r7, #3]
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d106      	bne.n	80098cc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	60da      	str	r2, [r3, #12]
 80098ca:	e00b      	b.n	80098e4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80098cc:	78fb      	ldrb	r3, [r7, #3]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d106      	bne.n	80098e0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	60da      	str	r2, [r3, #12]
 80098de:	e001      	b.n	80098e4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	e003      	b.n	80098ec <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80098e4:	2032      	movs	r0, #50	; 0x32
 80098e6:	f7fa f987 	bl	8003bf8 <HAL_Delay>

  return HAL_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3708      	adds	r7, #8
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80098f4:	b084      	sub	sp, #16
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b086      	sub	sp, #24
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
 80098fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009902:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009906:	2300      	movs	r3, #0
 8009908:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800990e:	2300      	movs	r3, #0
 8009910:	613b      	str	r3, [r7, #16]
 8009912:	e009      	b.n	8009928 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	3340      	adds	r3, #64	; 0x40
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	2200      	movs	r2, #0
 8009920:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	3301      	adds	r3, #1
 8009926:	613b      	str	r3, [r7, #16]
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	2b0e      	cmp	r3, #14
 800992c:	d9f2      	bls.n	8009914 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800992e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009930:	2b00      	cmp	r3, #0
 8009932:	d11c      	bne.n	800996e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	68fa      	ldr	r2, [r7, #12]
 800993e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009942:	f043 0302 	orr.w	r3, r3, #2
 8009946:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800994c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	601a      	str	r2, [r3, #0]
 800996c:	e005      	b.n	800997a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009972:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009980:	461a      	mov	r2, r3
 8009982:	2300      	movs	r3, #0
 8009984:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800998c:	4619      	mov	r1, r3
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009994:	461a      	mov	r2, r3
 8009996:	680b      	ldr	r3, [r1, #0]
 8009998:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800999a:	2103      	movs	r1, #3
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f93d 	bl	8009c1c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80099a2:	2110      	movs	r1, #16
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f8f1 	bl	8009b8c <USB_FlushTxFifo>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d001      	beq.n	80099b4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f90f 	bl	8009bd8 <USB_FlushRxFifo>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d001      	beq.n	80099c4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80099c0:	2301      	movs	r3, #1
 80099c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ca:	461a      	mov	r2, r3
 80099cc:	2300      	movs	r3, #0
 80099ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099d6:	461a      	mov	r2, r3
 80099d8:	2300      	movs	r3, #0
 80099da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099e2:	461a      	mov	r2, r3
 80099e4:	2300      	movs	r3, #0
 80099e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099e8:	2300      	movs	r3, #0
 80099ea:	613b      	str	r3, [r7, #16]
 80099ec:	e043      	b.n	8009a76 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	015a      	lsls	r2, r3, #5
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	4413      	add	r3, r2
 80099f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a04:	d118      	bne.n	8009a38 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d10a      	bne.n	8009a22 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	015a      	lsls	r2, r3, #5
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	4413      	add	r3, r2
 8009a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a18:	461a      	mov	r2, r3
 8009a1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a1e:	6013      	str	r3, [r2, #0]
 8009a20:	e013      	b.n	8009a4a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	015a      	lsls	r2, r3, #5
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	4413      	add	r3, r2
 8009a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a2e:	461a      	mov	r2, r3
 8009a30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009a34:	6013      	str	r3, [r2, #0]
 8009a36:	e008      	b.n	8009a4a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	015a      	lsls	r2, r3, #5
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	4413      	add	r3, r2
 8009a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a44:	461a      	mov	r2, r3
 8009a46:	2300      	movs	r3, #0
 8009a48:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	015a      	lsls	r2, r3, #5
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	4413      	add	r3, r2
 8009a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a56:	461a      	mov	r2, r3
 8009a58:	2300      	movs	r3, #0
 8009a5a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	015a      	lsls	r2, r3, #5
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	4413      	add	r3, r2
 8009a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a68:	461a      	mov	r2, r3
 8009a6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009a6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	3301      	adds	r3, #1
 8009a74:	613b      	str	r3, [r7, #16]
 8009a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a78:	693a      	ldr	r2, [r7, #16]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d3b7      	bcc.n	80099ee <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a7e:	2300      	movs	r3, #0
 8009a80:	613b      	str	r3, [r7, #16]
 8009a82:	e043      	b.n	8009b0c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	015a      	lsls	r2, r3, #5
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a9a:	d118      	bne.n	8009ace <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d10a      	bne.n	8009ab8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	015a      	lsls	r2, r3, #5
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aae:	461a      	mov	r2, r3
 8009ab0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009ab4:	6013      	str	r3, [r2, #0]
 8009ab6:	e013      	b.n	8009ae0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	015a      	lsls	r2, r3, #5
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	4413      	add	r3, r2
 8009ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009aca:	6013      	str	r3, [r2, #0]
 8009acc:	e008      	b.n	8009ae0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	015a      	lsls	r2, r3, #5
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ada:	461a      	mov	r2, r3
 8009adc:	2300      	movs	r3, #0
 8009ade:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	015a      	lsls	r2, r3, #5
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	4413      	add	r3, r2
 8009ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aec:	461a      	mov	r2, r3
 8009aee:	2300      	movs	r3, #0
 8009af0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	015a      	lsls	r2, r3, #5
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	4413      	add	r3, r2
 8009afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009afe:	461a      	mov	r2, r3
 8009b00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	613b      	str	r3, [r7, #16]
 8009b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0e:	693a      	ldr	r2, [r7, #16]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d3b7      	bcc.n	8009a84 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	68fa      	ldr	r2, [r7, #12]
 8009b1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b26:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009b34:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	699b      	ldr	r3, [r3, #24]
 8009b3a:	f043 0210 	orr.w	r2, r3, #16
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	699a      	ldr	r2, [r3, #24]
 8009b46:	4b10      	ldr	r3, [pc, #64]	; (8009b88 <USB_DevInit+0x294>)
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d005      	beq.n	8009b60 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	699b      	ldr	r3, [r3, #24]
 8009b58:	f043 0208 	orr.w	r2, r3, #8
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d107      	bne.n	8009b76 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b6e:	f043 0304 	orr.w	r3, r3, #4
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3718      	adds	r7, #24
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b82:	b004      	add	sp, #16
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	803c3800 	.word	0x803c3800

08009b8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b085      	sub	sp, #20
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009b96:	2300      	movs	r3, #0
 8009b98:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	019b      	lsls	r3, r3, #6
 8009b9e:	f043 0220 	orr.w	r2, r3, #32
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	60fb      	str	r3, [r7, #12]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	4a09      	ldr	r2, [pc, #36]	; (8009bd4 <USB_FlushTxFifo+0x48>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d901      	bls.n	8009bb8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009bb4:	2303      	movs	r3, #3
 8009bb6:	e006      	b.n	8009bc6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	691b      	ldr	r3, [r3, #16]
 8009bbc:	f003 0320 	and.w	r3, r3, #32
 8009bc0:	2b20      	cmp	r3, #32
 8009bc2:	d0f0      	beq.n	8009ba6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3714      	adds	r7, #20
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	00030d40 	.word	0x00030d40

08009bd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009be0:	2300      	movs	r3, #0
 8009be2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2210      	movs	r2, #16
 8009be8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	3301      	adds	r3, #1
 8009bee:	60fb      	str	r3, [r7, #12]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	4a09      	ldr	r2, [pc, #36]	; (8009c18 <USB_FlushRxFifo+0x40>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d901      	bls.n	8009bfc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009bf8:	2303      	movs	r3, #3
 8009bfa:	e006      	b.n	8009c0a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	691b      	ldr	r3, [r3, #16]
 8009c00:	f003 0310 	and.w	r3, r3, #16
 8009c04:	2b10      	cmp	r3, #16
 8009c06:	d0f0      	beq.n	8009bea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009c08:	2300      	movs	r3, #0
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3714      	adds	r7, #20
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	00030d40 	.word	0x00030d40

08009c1c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b085      	sub	sp, #20
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	460b      	mov	r3, r1
 8009c26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	78fb      	ldrb	r3, [r7, #3]
 8009c36:	68f9      	ldr	r1, [r7, #12]
 8009c38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3714      	adds	r7, #20
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr

08009c4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009c4e:	b480      	push	{r7}
 8009c50:	b085      	sub	sp, #20
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c68:	f023 0303 	bic.w	r3, r3, #3
 8009c6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c7c:	f043 0302 	orr.w	r3, r3, #2
 8009c80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009c82:	2300      	movs	r3, #0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3714      	adds	r7, #20
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b085      	sub	sp, #20
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	60fb      	str	r3, [r7, #12]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	4a13      	ldr	r2, [pc, #76]	; (8009cf4 <USB_CoreReset+0x64>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d901      	bls.n	8009cae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009caa:	2303      	movs	r3, #3
 8009cac:	e01b      	b.n	8009ce6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	daf2      	bge.n	8009c9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	691b      	ldr	r3, [r3, #16]
 8009cbe:	f043 0201 	orr.w	r2, r3, #1
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	3301      	adds	r3, #1
 8009cca:	60fb      	str	r3, [r7, #12]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	4a09      	ldr	r2, [pc, #36]	; (8009cf4 <USB_CoreReset+0x64>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d901      	bls.n	8009cd8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009cd4:	2303      	movs	r3, #3
 8009cd6:	e006      	b.n	8009ce6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	f003 0301 	and.w	r3, r3, #1
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d0f0      	beq.n	8009cc6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3714      	adds	r7, #20
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	00030d40 	.word	0x00030d40

08009cf8 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	4603      	mov	r3, r0
 8009d00:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8009d02:	79fb      	ldrb	r3, [r7, #7]
 8009d04:	2b2f      	cmp	r3, #47	; 0x2f
 8009d06:	d906      	bls.n	8009d16 <Hex2Num+0x1e>
 8009d08:	79fb      	ldrb	r3, [r7, #7]
 8009d0a:	2b39      	cmp	r3, #57	; 0x39
 8009d0c:	d803      	bhi.n	8009d16 <Hex2Num+0x1e>
        return a - '0';
 8009d0e:	79fb      	ldrb	r3, [r7, #7]
 8009d10:	3b30      	subs	r3, #48	; 0x30
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	e014      	b.n	8009d40 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8009d16:	79fb      	ldrb	r3, [r7, #7]
 8009d18:	2b60      	cmp	r3, #96	; 0x60
 8009d1a:	d906      	bls.n	8009d2a <Hex2Num+0x32>
 8009d1c:	79fb      	ldrb	r3, [r7, #7]
 8009d1e:	2b66      	cmp	r3, #102	; 0x66
 8009d20:	d803      	bhi.n	8009d2a <Hex2Num+0x32>
        return (a - 'a') + 10;
 8009d22:	79fb      	ldrb	r3, [r7, #7]
 8009d24:	3b57      	subs	r3, #87	; 0x57
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	e00a      	b.n	8009d40 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8009d2a:	79fb      	ldrb	r3, [r7, #7]
 8009d2c:	2b40      	cmp	r3, #64	; 0x40
 8009d2e:	d906      	bls.n	8009d3e <Hex2Num+0x46>
 8009d30:	79fb      	ldrb	r3, [r7, #7]
 8009d32:	2b46      	cmp	r3, #70	; 0x46
 8009d34:	d803      	bhi.n	8009d3e <Hex2Num+0x46>
        return (a - 'A') + 10;
 8009d36:	79fb      	ldrb	r3, [r7, #7]
 8009d38:	3b37      	subs	r3, #55	; 0x37
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	e000      	b.n	8009d40 <Hex2Num+0x48>
    }

    return 0;
 8009d3e:	2300      	movs	r3, #0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 8009d56:	2300      	movs	r3, #0
 8009d58:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8009d5e:	e012      	b.n	8009d86 <ParseHexNumber+0x3a>
        sum <<= 4;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	011b      	lsls	r3, r3, #4
 8009d64:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7ff ffc4 	bl	8009cf8 <Hex2Num>
 8009d70:	4603      	mov	r3, r0
 8009d72:	461a      	mov	r2, r3
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	4413      	add	r3, r2
 8009d78:	60fb      	str	r3, [r7, #12]
        ptr++;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	607b      	str	r3, [r7, #4]
        i++;
 8009d80:	7afb      	ldrb	r3, [r7, #11]
 8009d82:	3301      	adds	r3, #1
 8009d84:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	2b2f      	cmp	r3, #47	; 0x2f
 8009d8c:	d903      	bls.n	8009d96 <ParseHexNumber+0x4a>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	2b39      	cmp	r3, #57	; 0x39
 8009d94:	d9e4      	bls.n	8009d60 <ParseHexNumber+0x14>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	2b60      	cmp	r3, #96	; 0x60
 8009d9c:	d903      	bls.n	8009da6 <ParseHexNumber+0x5a>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	2b66      	cmp	r3, #102	; 0x66
 8009da4:	d9dc      	bls.n	8009d60 <ParseHexNumber+0x14>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	2b40      	cmp	r3, #64	; 0x40
 8009dac:	d903      	bls.n	8009db6 <ParseHexNumber+0x6a>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	2b46      	cmp	r3, #70	; 0x46
 8009db4:	d9d4      	bls.n	8009d60 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d002      	beq.n	8009dc2 <ParseHexNumber+0x76>
        *cnt = i;
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	7afa      	ldrb	r2, [r7, #11]
 8009dc0:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8009dc2:	68fb      	ldr	r3, [r7, #12]
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3710      	adds	r7, #16
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b085      	sub	sp, #20
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	73fb      	strb	r3, [r7, #15]
 8009dda:	2300      	movs	r3, #0
 8009ddc:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8009dde:	2300      	movs	r3, #0
 8009de0:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	2b2d      	cmp	r3, #45	; 0x2d
 8009de8:	d119      	bne.n	8009e1e <ParseNumber+0x52>
        minus = 1;
 8009dea:	2301      	movs	r3, #1
 8009dec:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	3301      	adds	r3, #1
 8009df2:	607b      	str	r3, [r7, #4]
        i++;
 8009df4:	7bbb      	ldrb	r3, [r7, #14]
 8009df6:	3301      	adds	r3, #1
 8009df8:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8009dfa:	e010      	b.n	8009e1e <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8009dfc:	68ba      	ldr	r2, [r7, #8]
 8009dfe:	4613      	mov	r3, r2
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	4413      	add	r3, r2
 8009e04:	005b      	lsls	r3, r3, #1
 8009e06:	461a      	mov	r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	3b30      	subs	r3, #48	; 0x30
 8009e0e:	4413      	add	r3, r2
 8009e10:	60bb      	str	r3, [r7, #8]
        ptr++;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	3301      	adds	r3, #1
 8009e16:	607b      	str	r3, [r7, #4]
        i++;
 8009e18:	7bbb      	ldrb	r3, [r7, #14]
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	2b2f      	cmp	r3, #47	; 0x2f
 8009e24:	d903      	bls.n	8009e2e <ParseNumber+0x62>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	2b39      	cmp	r3, #57	; 0x39
 8009e2c:	d9e6      	bls.n	8009dfc <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d002      	beq.n	8009e3a <ParseNumber+0x6e>
        *cnt = i;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	7bba      	ldrb	r2, [r7, #14]
 8009e38:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8009e3a:	7bfb      	ldrb	r3, [r7, #15]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d002      	beq.n	8009e46 <ParseNumber+0x7a>
        return 0 - sum;
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	425b      	negs	r3, r3
 8009e44:	e000      	b.n	8009e48 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8009e46:	68bb      	ldr	r3, [r7, #8]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3714      	adds	r7, #20
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8009e62:	e019      	b.n	8009e98 <ParseMAC+0x44>
    hexcnt = 1;
 8009e64:	2301      	movs	r3, #1
 8009e66:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	2b3a      	cmp	r3, #58	; 0x3a
 8009e6e:	d00e      	beq.n	8009e8e <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8009e70:	f107 030e 	add.w	r3, r7, #14
 8009e74:	4619      	mov	r1, r3
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f7ff ff68 	bl	8009d4c <ParseHexNumber>
 8009e7c:	4601      	mov	r1, r0
 8009e7e:	7bfb      	ldrb	r3, [r7, #15]
 8009e80:	1c5a      	adds	r2, r3, #1
 8009e82:	73fa      	strb	r2, [r7, #15]
 8009e84:	461a      	mov	r2, r3
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	4413      	add	r3, r2
 8009e8a:	b2ca      	uxtb	r2, r1
 8009e8c:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8009e8e:	7bbb      	ldrb	r3, [r7, #14]
 8009e90:	461a      	mov	r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	4413      	add	r3, r2
 8009e96:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d1e1      	bne.n	8009e64 <ParseMAC+0x10>
  }
}
 8009ea0:	bf00      	nop
 8009ea2:	bf00      	nop
 8009ea4:	3710      	adds	r7, #16
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b084      	sub	sp, #16
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
 8009eb2:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8009eb8:	e019      	b.n	8009eee <ParseIP+0x44>
    hexcnt = 1;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	2b2e      	cmp	r3, #46	; 0x2e
 8009ec4:	d00e      	beq.n	8009ee4 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8009ec6:	f107 030e 	add.w	r3, r7, #14
 8009eca:	4619      	mov	r1, r3
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f7ff ff7d 	bl	8009dcc <ParseNumber>
 8009ed2:	4601      	mov	r1, r0
 8009ed4:	7bfb      	ldrb	r3, [r7, #15]
 8009ed6:	1c5a      	adds	r2, r3, #1
 8009ed8:	73fa      	strb	r2, [r7, #15]
 8009eda:	461a      	mov	r2, r3
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	4413      	add	r3, r2
 8009ee0:	b2ca      	uxtb	r2, r1
 8009ee2:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8009ee4:	7bbb      	ldrb	r3, [r7, #14]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4413      	add	r3, r2
 8009eec:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d1e1      	bne.n	8009eba <ParseIP+0x10>
  }
}
 8009ef6:	bf00      	nop
 8009ef8:	bf00      	nop
 8009efa:	3710      	adds	r7, #16
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	3302      	adds	r3, #2
 8009f12:	4934      	ldr	r1, [pc, #208]	; (8009fe4 <AT_ParseInfo+0xe4>)
 8009f14:	4618      	mov	r0, r3
 8009f16:	f005 fc53 	bl	800f7c0 <strtok>
 8009f1a:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8009f1c:	e05a      	b.n	8009fd4 <AT_ParseInfo+0xd4>
    switch (num++) {
 8009f1e:	7afb      	ldrb	r3, [r7, #11]
 8009f20:	1c5a      	adds	r2, r3, #1
 8009f22:	72fa      	strb	r2, [r7, #11]
 8009f24:	2b06      	cmp	r3, #6
 8009f26:	d84f      	bhi.n	8009fc8 <AT_ParseInfo+0xc8>
 8009f28:	a201      	add	r2, pc, #4	; (adr r2, 8009f30 <AT_ParseInfo+0x30>)
 8009f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f2e:	bf00      	nop
 8009f30:	08009f4d 	.word	0x08009f4d
 8009f34:	08009f5b 	.word	0x08009f5b
 8009f38:	08009f6b 	.word	0x08009f6b
 8009f3c:	08009f7b 	.word	0x08009f7b
 8009f40:	08009f8b 	.word	0x08009f8b
 8009f44:	08009f9b 	.word	0x08009f9b
 8009f48:	08009faf 	.word	0x08009faf
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2220      	movs	r2, #32
 8009f50:	68f9      	ldr	r1, [r7, #12]
 8009f52:	4618      	mov	r0, r3
 8009f54:	f005 fc21 	bl	800f79a <strncpy>
      break;
 8009f58:	e037      	b.n	8009fca <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	3320      	adds	r3, #32
 8009f5e:	2218      	movs	r2, #24
 8009f60:	68f9      	ldr	r1, [r7, #12]
 8009f62:	4618      	mov	r0, r3
 8009f64:	f005 fc19 	bl	800f79a <strncpy>
      break;
 8009f68:	e02f      	b.n	8009fca <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	3338      	adds	r3, #56	; 0x38
 8009f6e:	2210      	movs	r2, #16
 8009f70:	68f9      	ldr	r1, [r7, #12]
 8009f72:	4618      	mov	r0, r3
 8009f74:	f005 fc11 	bl	800f79a <strncpy>
      break;
 8009f78:	e027      	b.n	8009fca <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	3348      	adds	r3, #72	; 0x48
 8009f7e:	2210      	movs	r2, #16
 8009f80:	68f9      	ldr	r1, [r7, #12]
 8009f82:	4618      	mov	r0, r3
 8009f84:	f005 fc09 	bl	800f79a <strncpy>
      break;
 8009f88:	e01f      	b.n	8009fca <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	3358      	adds	r3, #88	; 0x58
 8009f8e:	2210      	movs	r2, #16
 8009f90:	68f9      	ldr	r1, [r7, #12]
 8009f92:	4618      	mov	r0, r3
 8009f94:	f005 fc01 	bl	800f79a <strncpy>
      break;
 8009f98:	e017      	b.n	8009fca <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	68f8      	ldr	r0, [r7, #12]
 8009f9e:	f7ff ff15 	bl	8009dcc <ParseNumber>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8009fac:	e00d      	b.n	8009fca <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 8009fae:	490e      	ldr	r1, [pc, #56]	; (8009fe8 <AT_ParseInfo+0xe8>)
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f005 fc05 	bl	800f7c0 <strtok>
 8009fb6:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	3368      	adds	r3, #104	; 0x68
 8009fbc:	2220      	movs	r2, #32
 8009fbe:	68f9      	ldr	r1, [r7, #12]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f005 fbea 	bl	800f79a <strncpy>
      break;
 8009fc6:	e000      	b.n	8009fca <AT_ParseInfo+0xca>

    default: break;
 8009fc8:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8009fca:	4906      	ldr	r1, [pc, #24]	; (8009fe4 <AT_ParseInfo+0xe4>)
 8009fcc:	2000      	movs	r0, #0
 8009fce:	f005 fbf7 	bl	800f7c0 <strtok>
 8009fd2:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d1a1      	bne.n	8009f1e <AT_ParseInfo+0x1e>
  }
}
 8009fda:	bf00      	nop
 8009fdc:	bf00      	nop
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	08011e8c 	.word	0x08011e8c
 8009fe8:	08011e90 	.word	0x08011e90

08009fec <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	3302      	adds	r3, #2
 8009ffe:	4952      	ldr	r1, [pc, #328]	; (800a148 <AT_ParseConnSettings+0x15c>)
 800a000:	4618      	mov	r0, r3
 800a002:	f005 fbdd 	bl	800f7c0 <strtok>
 800a006:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 800a008:	e095      	b.n	800a136 <AT_ParseConnSettings+0x14a>
    switch (num++) {
 800a00a:	7bfb      	ldrb	r3, [r7, #15]
 800a00c:	1c5a      	adds	r2, r3, #1
 800a00e:	73fa      	strb	r2, [r7, #15]
 800a010:	2b0b      	cmp	r3, #11
 800a012:	d87f      	bhi.n	800a114 <AT_ParseConnSettings+0x128>
 800a014:	a201      	add	r2, pc, #4	; (adr r2, 800a01c <AT_ParseConnSettings+0x30>)
 800a016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a01a:	bf00      	nop
 800a01c:	0800a04d 	.word	0x0800a04d
 800a020:	0800a05b 	.word	0x0800a05b
 800a024:	0800a06b 	.word	0x0800a06b
 800a028:	0800a07f 	.word	0x0800a07f
 800a02c:	0800a093 	.word	0x0800a093
 800a030:	0800a0a7 	.word	0x0800a0a7
 800a034:	0800a0b5 	.word	0x0800a0b5
 800a038:	0800a0c3 	.word	0x0800a0c3
 800a03c:	0800a0d1 	.word	0x0800a0d1
 800a040:	0800a0df 	.word	0x0800a0df
 800a044:	0800a0ed 	.word	0x0800a0ed
 800a048:	0800a101 	.word	0x0800a101
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	2221      	movs	r2, #33	; 0x21
 800a050:	68b9      	ldr	r1, [r7, #8]
 800a052:	4618      	mov	r0, r3
 800a054:	f005 fba1 	bl	800f79a <strncpy>
      break;
 800a058:	e05d      	b.n	800a116 <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	3321      	adds	r3, #33	; 0x21
 800a05e:	2221      	movs	r2, #33	; 0x21
 800a060:	68b9      	ldr	r1, [r7, #8]
 800a062:	4618      	mov	r0, r3
 800a064:	f005 fb99 	bl	800f79a <strncpy>
      break;
 800a068:	e055      	b.n	800a116 <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 800a06a:	2100      	movs	r1, #0
 800a06c:	68b8      	ldr	r0, [r7, #8]
 800a06e:	f7ff fead 	bl	8009dcc <ParseNumber>
 800a072:	4603      	mov	r3, r0
 800a074:	b2da      	uxtb	r2, r3
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 800a07c:	e04b      	b.n	800a116 <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 800a07e:	2100      	movs	r1, #0
 800a080:	68b8      	ldr	r0, [r7, #8]
 800a082:	f7ff fea3 	bl	8009dcc <ParseNumber>
 800a086:	4603      	mov	r3, r0
 800a088:	b2da      	uxtb	r2, r3
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 800a090:	e041      	b.n	800a116 <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 800a092:	2100      	movs	r1, #0
 800a094:	68b8      	ldr	r0, [r7, #8]
 800a096:	f7ff fe99 	bl	8009dcc <ParseNumber>
 800a09a:	4603      	mov	r3, r0
 800a09c:	b2da      	uxtb	r2, r3
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 800a0a4:	e037      	b.n	800a116 <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	3348      	adds	r3, #72	; 0x48
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	68b8      	ldr	r0, [r7, #8]
 800a0ae:	f7ff fefc 	bl	8009eaa <ParseIP>
      break;
 800a0b2:	e030      	b.n	800a116 <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	334c      	adds	r3, #76	; 0x4c
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	68b8      	ldr	r0, [r7, #8]
 800a0bc:	f7ff fef5 	bl	8009eaa <ParseIP>
      break;
 800a0c0:	e029      	b.n	800a116 <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	3350      	adds	r3, #80	; 0x50
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	68b8      	ldr	r0, [r7, #8]
 800a0ca:	f7ff feee 	bl	8009eaa <ParseIP>
      break;
 800a0ce:	e022      	b.n	800a116 <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	3354      	adds	r3, #84	; 0x54
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	68b8      	ldr	r0, [r7, #8]
 800a0d8:	f7ff fee7 	bl	8009eaa <ParseIP>
      break;
 800a0dc:	e01b      	b.n	800a116 <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	3358      	adds	r3, #88	; 0x58
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	68b8      	ldr	r0, [r7, #8]
 800a0e6:	f7ff fee0 	bl	8009eaa <ParseIP>
      break;
 800a0ea:	e014      	b.n	800a116 <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 800a0ec:	2100      	movs	r1, #0
 800a0ee:	68b8      	ldr	r0, [r7, #8]
 800a0f0:	f7ff fe6c 	bl	8009dcc <ParseNumber>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	b2da      	uxtb	r2, r3
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 800a0fe:	e00a      	b.n	800a116 <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 800a100:	2100      	movs	r1, #0
 800a102:	68b8      	ldr	r0, [r7, #8]
 800a104:	f7ff fe62 	bl	8009dcc <ParseNumber>
 800a108:	4603      	mov	r3, r0
 800a10a:	b2da      	uxtb	r2, r3
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 800a112:	e000      	b.n	800a116 <AT_ParseConnSettings+0x12a>

    default:
      break;
 800a114:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800a116:	490c      	ldr	r1, [pc, #48]	; (800a148 <AT_ParseConnSettings+0x15c>)
 800a118:	2000      	movs	r0, #0
 800a11a:	f005 fb51 	bl	800f7c0 <strtok>
 800a11e:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d007      	beq.n	800a136 <AT_ParseConnSettings+0x14a>
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	3b01      	subs	r3, #1
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	2b2c      	cmp	r3, #44	; 0x2c
 800a12e:	d102      	bne.n	800a136 <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 800a130:	7bfb      	ldrb	r3, [r7, #15]
 800a132:	3301      	adds	r3, #1
 800a134:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f47f af66 	bne.w	800a00a <AT_ParseConnSettings+0x1e>
    }
  }
}
 800a13e:	bf00      	nop
 800a140:	bf00      	nop
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	08011e8c 	.word	0x08011e8c

0800a14c <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	3302      	adds	r3, #2
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	2b31      	cmp	r3, #49	; 0x31
 800a15e:	bf0c      	ite	eq
 800a160:	2301      	moveq	r3, #1
 800a162:	2300      	movne	r3, #0
 800a164:	b2db      	uxtb	r3, r3
 800a166:	461a      	mov	r2, r3
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	701a      	strb	r2, [r3, #0]
}
 800a16c:	bf00      	nop
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 800a178:	b590      	push	{r4, r7, lr}
 800a17a:	b087      	sub	sp, #28
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	607a      	str	r2, [r7, #4]
  int ret = 0;
 800a184:	2300      	movs	r3, #0
 800a186:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 800a188:	2300      	movs	r3, #0
 800a18a:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800a192:	68b8      	ldr	r0, [r7, #8]
 800a194:	f7f6 f86c 	bl	8000270 <strlen>
 800a198:	4603      	mov	r3, r0
 800a19a:	b299      	uxth	r1, r3
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	68b8      	ldr	r0, [r7, #8]
 800a1a6:	47a0      	blx	r4
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	dd3e      	ble.n	800a230 <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800a1be:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	4798      	blx	r3
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 800a1ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	dd27      	ble.n	800a222 <AT_ExecuteCommand+0xaa>
 800a1d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a1d6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a1da:	dc22      	bgt.n	800a222 <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 800a1dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a1e0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a1e4:	d105      	bne.n	800a1f2 <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 800a1e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 800a1f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	4413      	add	r3, r2
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 800a1fe:	490f      	ldr	r1, [pc, #60]	; (800a23c <AT_ExecuteCommand+0xc4>)
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f005 fb39 	bl	800f878 <strstr>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d001      	beq.n	800a210 <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 800a20c:	2300      	movs	r3, #0
 800a20e:	e010      	b.n	800a232 <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 800a210:	490b      	ldr	r1, [pc, #44]	; (800a240 <AT_ExecuteCommand+0xc8>)
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f005 fb30 	bl	800f878 <strstr>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d001      	beq.n	800a222 <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800a21e:	2305      	movs	r3, #5
 800a220:	e007      	b.n	800a232 <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800a222:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a226:	f113 0f04 	cmn.w	r3, #4
 800a22a:	d101      	bne.n	800a230 <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 800a22c:	2306      	movs	r3, #6
 800a22e:	e000      	b.n	800a232 <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 800a230:	2304      	movs	r3, #4
}
 800a232:	4618      	mov	r0, r3
 800a234:	371c      	adds	r7, #28
 800a236:	46bd      	mov	sp, r7
 800a238:	bd90      	pop	{r4, r7, pc}
 800a23a:	bf00      	nop
 800a23c:	08011ea0 	.word	0x08011ea0
 800a240:	08011eac 	.word	0x08011eac

0800a244 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b086      	sub	sp, #24
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
 800a250:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 800a252:	2300      	movs	r3, #0
 800a254:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 800a256:	2300      	movs	r3, #0
 800a258:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 800a25a:	2300      	movs	r3, #0
 800a25c:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 800a25e:	68b8      	ldr	r0, [r7, #8]
 800a260:	f7f6 f806 	bl	8000270 <strlen>
 800a264:	4603      	mov	r3, r0
 800a266:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 800a268:	8a7b      	ldrh	r3, [r7, #18]
 800a26a:	f003 0301 	and.w	r3, r3, #1
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d001      	beq.n	800a276 <AT_RequestSendData+0x32>
 800a272:	2302      	movs	r3, #2
 800a274:	e053      	b.n	800a31e <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800a282:	8a79      	ldrh	r1, [r7, #18]
 800a284:	68b8      	ldr	r0, [r7, #8]
 800a286:	4798      	blx	r3
 800a288:	4603      	mov	r3, r0
 800a28a:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 800a28c:	8a3a      	ldrh	r2, [r7, #16]
 800a28e:	8a7b      	ldrh	r3, [r7, #18]
 800a290:	429a      	cmp	r2, r3
 800a292:	d143      	bne.n	800a31c <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800a2a0:	8879      	ldrh	r1, [r7, #2]
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	4798      	blx	r3
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 800a2aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a2ae:	887b      	ldrh	r3, [r7, #2]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d131      	bne.n	800a318 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	6a38      	ldr	r0, [r7, #32]
 800a2c4:	4798      	blx	r3
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 800a2ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	dd19      	ble.n	800a306 <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 800a2d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a2d6:	6a3a      	ldr	r2, [r7, #32]
 800a2d8:	4413      	add	r3, r2
 800a2da:	2200      	movs	r2, #0
 800a2dc:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 800a2de:	4912      	ldr	r1, [pc, #72]	; (800a328 <AT_RequestSendData+0xe4>)
 800a2e0:	6a38      	ldr	r0, [r7, #32]
 800a2e2:	f005 fac9 	bl	800f878 <strstr>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d001      	beq.n	800a2f0 <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	e016      	b.n	800a31e <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 800a2f0:	490e      	ldr	r1, [pc, #56]	; (800a32c <AT_RequestSendData+0xe8>)
 800a2f2:	6a38      	ldr	r0, [r7, #32]
 800a2f4:	f005 fac0 	bl	800f878 <strstr>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d001      	beq.n	800a302 <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800a2fe:	2305      	movs	r3, #5
 800a300:	e00d      	b.n	800a31e <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 800a302:	2302      	movs	r3, #2
 800a304:	e00b      	b.n	800a31e <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800a306:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a30a:	f113 0f04 	cmn.w	r3, #4
 800a30e:	d101      	bne.n	800a314 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 800a310:	2306      	movs	r3, #6
 800a312:	e004      	b.n	800a31e <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 800a314:	2302      	movs	r3, #2
 800a316:	e002      	b.n	800a31e <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 800a318:	2302      	movs	r3, #2
 800a31a:	e000      	b.n	800a31e <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 800a31c:	2304      	movs	r3, #4
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3718      	adds	r7, #24
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	08011ea0 	.word	0x08011ea0
 800a32c:	08011eac 	.word	0x08011eac

0800a330 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 800a330:	b590      	push	{r4, r7, lr}
 800a332:	b087      	sub	sp, #28
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
 800a33c:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a344:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800a34c:	68b8      	ldr	r0, [r7, #8]
 800a34e:	f7f5 ff8f 	bl	8000270 <strlen>
 800a352:	4603      	mov	r3, r0
 800a354:	b299      	uxth	r1, r3
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800a35c:	461a      	mov	r2, r3
 800a35e:	68b8      	ldr	r0, [r7, #8]
 800a360:	47a0      	blx	r4
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	dd6f      	ble.n	800a448 <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800a36e:	68fa      	ldr	r2, [r7, #12]
 800a370:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800a374:	2100      	movs	r1, #0
 800a376:	6938      	ldr	r0, [r7, #16]
 800a378:	4798      	blx	r3
 800a37a:	4603      	mov	r3, r0
 800a37c:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	2b0d      	cmp	r3, #13
 800a384:	d104      	bne.n	800a390 <AT_RequestReceiveData+0x60>
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	3301      	adds	r3, #1
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	2b0a      	cmp	r3, #10
 800a38e:	d001      	beq.n	800a394 <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 800a390:	2304      	movs	r3, #4
 800a392:	e05a      	b.n	800a44a <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	3b02      	subs	r3, #2
 800a398:	617b      	str	r3, [r7, #20]
    p+=2;
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	3302      	adds	r3, #2
 800a39e:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	2b07      	cmp	r3, #7
 800a3a4:	d94a      	bls.n	800a43c <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 800a3a6:	e002      	b.n	800a3ae <AT_RequestReceiveData+0x7e>
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	617b      	str	r3, [r7, #20]
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d006      	beq.n	800a3c2 <AT_RequestReceiveData+0x92>
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	693a      	ldr	r2, [r7, #16]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	2b15      	cmp	r3, #21
 800a3c0:	d0f2      	beq.n	800a3a8 <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	693a      	ldr	r2, [r7, #16]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	3b08      	subs	r3, #8
 800a3d0:	693a      	ldr	r2, [r7, #16]
 800a3d2:	4413      	add	r3, r2
 800a3d4:	491f      	ldr	r1, [pc, #124]	; (800a454 <AT_RequestReceiveData+0x124>)
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f005 fa4e 	bl	800f878 <strstr>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d016      	beq.n	800a410 <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	3b08      	subs	r3, #8
 800a3e8:	b29a      	uxth	r2, r3
 800a3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ec:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 800a3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f0:	881b      	ldrh	r3, [r3, #0]
 800a3f2:	887a      	ldrh	r2, [r7, #2]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d202      	bcs.n	800a3fe <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 800a3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fa:	887a      	ldrh	r2, [r7, #2]
 800a3fc:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 800a3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a400:	881b      	ldrh	r3, [r3, #0]
 800a402:	461a      	mov	r2, r3
 800a404:	6939      	ldr	r1, [r7, #16]
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f005 fac3 	bl	800f992 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 800a40c:	2300      	movs	r3, #0
 800a40e:	e01c      	b.n	800a44a <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	3b04      	subs	r3, #4
 800a414:	693a      	ldr	r2, [r7, #16]
 800a416:	4413      	add	r3, r2
 800a418:	2204      	movs	r2, #4
 800a41a:	490f      	ldr	r1, [pc, #60]	; (800a458 <AT_RequestReceiveData+0x128>)
 800a41c:	4618      	mov	r0, r3
 800a41e:	f005 f983 	bl	800f728 <memcmp>
 800a422:	4603      	mov	r3, r0
 800a424:	2b00      	cmp	r3, #0
 800a426:	d104      	bne.n	800a432 <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 800a428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42a:	2200      	movs	r2, #0
 800a42c:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800a42e:	2305      	movs	r3, #5
 800a430:	e00b      	b.n	800a44a <AT_RequestReceiveData+0x11a>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 800a432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a434:	2200      	movs	r2, #0
 800a436:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800a438:	2305      	movs	r3, #5
 800a43a:	e006      	b.n	800a44a <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	f113 0f04 	cmn.w	r3, #4
 800a442:	d101      	bne.n	800a448 <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 800a444:	2306      	movs	r3, #6
 800a446:	e000      	b.n	800a44a <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 800a448:	2304      	movs	r3, #4
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	371c      	adds	r7, #28
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd90      	pop	{r4, r7, pc}
 800a452:	bf00      	nop
 800a454:	08011ea0 	.word	0x08011ea0
 800a458:	08011eb4 	.word	0x08011eb4

0800a45c <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800a464:	2302      	movs	r3, #2
 800a466:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f247 5230 	movw	r2, #30000	; 0x7530
 800a46e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a478:	2000      	movs	r0, #0
 800a47a:	4798      	blx	r3
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d113      	bne.n	800a4aa <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a488:	461a      	mov	r2, r3
 800a48a:	490a      	ldr	r1, [pc, #40]	; (800a4b4 <ES_WIFI_Init+0x58>)
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f7ff fe73 	bl	800a178 <AT_ExecuteCommand>
 800a492:	4603      	mov	r3, r0
 800a494:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 800a496:	7bfb      	ldrb	r3, [r7, #15]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d106      	bne.n	800a4aa <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f7ff fd2b 	bl	8009f00 <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 800a4aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	08011ebc 	.word	0x08011ebc

0800a4b8 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	607a      	str	r2, [r7, #4]
 800a4c4:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d00b      	beq.n	800a4e4 <ES_WIFI_RegisterBusIO+0x2c>
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d008      	beq.n	800a4e4 <ES_WIFI_RegisterBusIO+0x2c>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d005      	beq.n	800a4e4 <ES_WIFI_RegisterBusIO+0x2c>
 800a4d8:	69bb      	ldr	r3, [r7, #24]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d002      	beq.n	800a4e4 <ES_WIFI_RegisterBusIO+0x2c>
 800a4de:	69fb      	ldr	r3, [r7, #28]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d101      	bne.n	800a4e8 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 800a4e4:	2302      	movs	r3, #2
 800a4e6:	e014      	b.n	800a512 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	69ba      	ldr	r2, [r7, #24]
 800a4fc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	69fa      	ldr	r2, [r7, #28]
 800a504:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	683a      	ldr	r2, [r7, #0]
 800a50c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	3714      	adds	r7, #20
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr
	...

0800a520 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b086      	sub	sp, #24
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	607a      	str	r2, [r7, #4]
 800a52c:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a534:	68ba      	ldr	r2, [r7, #8]
 800a536:	4932      	ldr	r1, [pc, #200]	; (800a600 <ES_WIFI_Connect+0xe0>)
 800a538:	4618      	mov	r0, r3
 800a53a:	f004 fffd 	bl	800f538 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a54a:	461a      	mov	r2, r3
 800a54c:	68f8      	ldr	r0, [r7, #12]
 800a54e:	f7ff fe13 	bl	800a178 <AT_ExecuteCommand>
 800a552:	4603      	mov	r3, r0
 800a554:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 800a556:	7dfb      	ldrb	r3, [r7, #23]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d14b      	bne.n	800a5f4 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	4927      	ldr	r1, [pc, #156]	; (800a604 <ES_WIFI_Connect+0xe4>)
 800a566:	4618      	mov	r0, r3
 800a568:	f004 ffe6 	bl	800f538 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a578:	461a      	mov	r2, r3
 800a57a:	68f8      	ldr	r0, [r7, #12]
 800a57c:	f7ff fdfc 	bl	800a178 <AT_ExecuteCommand>
 800a580:	4603      	mov	r3, r0
 800a582:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 800a584:	7dfb      	ldrb	r3, [r7, #23]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d134      	bne.n	800a5f4 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	78fa      	ldrb	r2, [r7, #3]
 800a58e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a598:	78fa      	ldrb	r2, [r7, #3]
 800a59a:	491b      	ldr	r1, [pc, #108]	; (800a608 <ES_WIFI_Connect+0xe8>)
 800a59c:	4618      	mov	r0, r3
 800a59e:	f004 ffcb 	bl	800f538 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f7ff fde1 	bl	800a178 <AT_ExecuteCommand>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800a5ba:	7dfb      	ldrb	r3, [r7, #23]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d119      	bne.n	800a5f4 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a5c6:	4911      	ldr	r1, [pc, #68]	; (800a60c <ES_WIFI_Connect+0xec>)
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f004 ffb5 	bl	800f538 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a5da:	461a      	mov	r2, r3
 800a5dc:	68f8      	ldr	r0, [r7, #12]
 800a5de:	f7ff fdcb 	bl	800a178 <AT_ExecuteCommand>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 800a5e6:	7dfb      	ldrb	r3, [r7, #23]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d103      	bne.n	800a5f4 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 800a5f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3718      	adds	r7, #24
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	08011ed4 	.word	0x08011ed4
 800a604:	08011edc 	.word	0x08011edc
 800a608:	08011ee4 	.word	0x08011ee4
 800a60c:	08011eec 	.word	0x08011eec

0800a610 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a61e:	4911      	ldr	r1, [pc, #68]	; (800a664 <ES_WIFI_IsConnected+0x54>)
 800a620:	4618      	mov	r0, r3
 800a622:	f004 ff89 	bl	800f538 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a632:	461a      	mov	r2, r3
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f7ff fd9f 	bl	800a178 <AT_ExecuteCommand>
 800a63a:	4603      	mov	r3, r0
 800a63c:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 800a63e:	7bfb      	ldrb	r3, [r7, #15]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d108      	bne.n	800a656 <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	33d2      	adds	r3, #210	; 0xd2
 800a64e:	4619      	mov	r1, r3
 800a650:	4610      	mov	r0, r2
 800a652:	f7ff fd7b 	bl	800a14c <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3710      	adds	r7, #16
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}
 800a664:	08011ef0 	.word	0x08011ef0

0800a668 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b084      	sub	sp, #16
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a676:	4910      	ldr	r1, [pc, #64]	; (800a6b8 <ES_WIFI_GetNetworkSettings+0x50>)
 800a678:	4618      	mov	r0, r3
 800a67a:	f004 ff5d 	bl	800f538 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a68a:	461a      	mov	r2, r3
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f7ff fd73 	bl	800a178 <AT_ExecuteCommand>
 800a692:	4603      	mov	r3, r0
 800a694:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800a696:	7bfb      	ldrb	r3, [r7, #15]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d108      	bne.n	800a6ae <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	338d      	adds	r3, #141	; 0x8d
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	4610      	mov	r0, r2
 800a6aa:	f7ff fc9f 	bl	8009fec <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 800a6ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3710      	adds	r7, #16
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	08011ef8 	.word	0x08011ef8

0800a6bc <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a6cc:	4912      	ldr	r1, [pc, #72]	; (800a718 <ES_WIFI_GetMACAddress+0x5c>)
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f004 ff32 	bl	800f538 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f7ff fd48 	bl	800a178 <AT_ExecuteCommand>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 800a6ec:	7bfb      	ldrb	r3, [r7, #15]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d10c      	bne.n	800a70c <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a6f8:	3302      	adds	r3, #2
 800a6fa:	4908      	ldr	r1, [pc, #32]	; (800a71c <ES_WIFI_GetMACAddress+0x60>)
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f005 f85f 	bl	800f7c0 <strtok>
 800a702:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 800a704:	6839      	ldr	r1, [r7, #0]
 800a706:	68b8      	ldr	r0, [r7, #8]
 800a708:	f7ff fba4 	bl	8009e54 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 800a70c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	08011f54 	.word	0x08011f54
 800a71c:	08011f58 	.word	0x08011f58

0800a720 <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800a72a:	2300      	movs	r3, #0
 800a72c:	73fb      	strb	r3, [r7, #15]
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	785b      	ldrb	r3, [r3, #1]
 800a738:	461a      	mov	r2, r3
 800a73a:	4949      	ldr	r1, [pc, #292]	; (800a860 <ES_WIFI_StartServerSingleConn+0x140>)
 800a73c:	f004 fefc 	bl	800f538 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a74c:	461a      	mov	r2, r3
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f7ff fd12 	bl	800a178 <AT_ExecuteCommand>
 800a754:	4603      	mov	r3, r0
 800a756:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 800a758:	7bfb      	ldrb	r3, [r7, #15]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d001      	beq.n	800a762 <ES_WIFI_StartServerSingleConn+0x42>
  {
    UNLOCK_WIFI();
    return ret;
 800a75e:	7bfb      	ldrb	r3, [r7, #15]
 800a760:	e079      	b.n	800a856 <ES_WIFI_StartServerSingleConn+0x136>
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	2b01      	cmp	r3, #1
 800a768:	d016      	beq.n	800a798 <ES_WIFI_StartServerSingleConn+0x78>
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	2b02      	cmp	r3, #2
 800a770:	d012      	beq.n	800a798 <ES_WIFI_StartServerSingleConn+0x78>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a778:	493a      	ldr	r1, [pc, #232]	; (800a864 <ES_WIFI_StartServerSingleConn+0x144>)
 800a77a:	4618      	mov	r0, r3
 800a77c:	f004 fedc 	bl	800f538 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a78c:	461a      	mov	r2, r3
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f7ff fcf2 	bl	800a178 <AT_ExecuteCommand>
 800a794:	4603      	mov	r3, r0
 800a796:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == ES_WIFI_STATUS_OK)
 800a798:	7bfb      	ldrb	r3, [r7, #15]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d15a      	bne.n	800a854 <ES_WIFI_StartServerSingleConn+0x134>
  {
      sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	492f      	ldr	r1, [pc, #188]	; (800a868 <ES_WIFI_StartServerSingleConn+0x148>)
 800a7ac:	f004 fec4 	bl	800f538 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a7bc:	461a      	mov	r2, r3
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f7ff fcda 	bl	800a178 <AT_ExecuteCommand>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	73fb      	strb	r3, [r7, #15]
      if(ret == ES_WIFI_STATUS_OK)
 800a7c8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d142      	bne.n	800a854 <ES_WIFI_StartServerSingleConn+0x134>
      {
        sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	7c1b      	ldrb	r3, [r3, #16]
 800a7d8:	461a      	mov	r2, r3
 800a7da:	4924      	ldr	r1, [pc, #144]	; (800a86c <ES_WIFI_StartServerSingleConn+0x14c>)
 800a7dc:	f004 feac 	bl	800f538 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f7ff fcc2 	bl	800a178 <AT_ExecuteCommand>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	73fb      	strb	r3, [r7, #15]
        if (ret == ES_WIFI_STATUS_OK)
 800a7f8:	7bfb      	ldrb	r3, [r7, #15]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d12a      	bne.n	800a854 <ES_WIFI_StartServerSingleConn+0x134>
		    {
		      sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	889b      	ldrh	r3, [r3, #4]
 800a808:	461a      	mov	r2, r3
 800a80a:	4919      	ldr	r1, [pc, #100]	; (800a870 <ES_WIFI_StartServerSingleConn+0x150>)
 800a80c:	f004 fe94 	bl	800f538 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a81c:	461a      	mov	r2, r3
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f7ff fcaa 	bl	800a178 <AT_ExecuteCommand>
 800a824:	4603      	mov	r3, r0
 800a826:	73fb      	strb	r3, [r7, #15]
          if (ret == ES_WIFI_STATUS_OK)
 800a828:	7bfb      	ldrb	r3, [r7, #15]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d112      	bne.n	800a854 <ES_WIFI_StartServerSingleConn+0x134>
          {
            // multi accept mode
            sprintf((char*)Obj->CmdData,"P5=11\r");
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a834:	490f      	ldr	r1, [pc, #60]	; (800a874 <ES_WIFI_StartServerSingleConn+0x154>)
 800a836:	4618      	mov	r0, r3
 800a838:	f004 fe7e 	bl	800f538 <siprintf>
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a848:	461a      	mov	r2, r3
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f7ff fc94 	bl	800a178 <AT_ExecuteCommand>
 800a850:	4603      	mov	r3, r0
 800a852:	73fb      	strb	r3, [r7, #15]
          }
        }
      }
	}
  UNLOCK_WIFI();
  return ret;
 800a854:	7bfb      	ldrb	r3, [r7, #15]
}
 800a856:	4618      	mov	r0, r3
 800a858:	3710      	adds	r7, #16
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop
 800a860:	08011fbc 	.word	0x08011fbc
 800a864:	08012004 	.word	0x08012004
 800a868:	08011fc4 	.word	0x08011fc4
 800a86c:	08012010 	.word	0x08012010
 800a870:	08011fcc 	.word	0x08011fcc
 800a874:	08012018 	.word	0x08012018

0800a878 <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj,uint32_t timeout,ES_WIFI_Conn_t *conn)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b08a      	sub	sp, #40	; 0x28
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	607a      	str	r2, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800a884:	2300      	movs	r3, #0
 800a886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t      t;
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;

  tstart=HAL_GetTick();
 800a88a:	f7f9 f9a9 	bl	8003be0 <HAL_GetTick>
 800a88e:	6278      	str	r0, [r7, #36]	; 0x24
  tlast=tstart+timeout;
 800a890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	4413      	add	r3, r2
 800a896:	61fb      	str	r3, [r7, #28]
  if (tlast < tstart )
 800a898:	69fa      	ldr	r2, [r7, #28]
 800a89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d201      	bcs.n	800a8a4 <ES_WIFI_WaitServerConnection+0x2c>
  {
	   tstart=0;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	627b      	str	r3, [r7, #36]	; 0x24

  do
  {
#if (ES_WIFI_USE_UART == 0)
    // mandatory to flush MR async messages
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a8aa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f004 ff49 	bl	800f748 <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a8bc:	4972      	ldr	r1, [pc, #456]	; (800aa88 <ES_WIFI_WaitServerConnection+0x210>)
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f004 fe3a 	bl	800f538 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f7ff fc50 	bl	800a178 <AT_ExecuteCommand>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(ret == ES_WIFI_STATUS_OK)
 800a8de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d136      	bne.n	800a954 <ES_WIFI_WaitServerConnection+0xdc>
    {
      if((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a8ec:	4967      	ldr	r1, [pc, #412]	; (800aa8c <ES_WIFI_WaitServerConnection+0x214>)
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f004 ffc2 	bl	800f878 <strstr>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d03b      	beq.n	800a972 <ES_WIFI_WaitServerConnection+0xfa>
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a900:	4963      	ldr	r1, [pc, #396]	; (800aa90 <ES_WIFI_WaitServerConnection+0x218>)
 800a902:	4618      	mov	r0, r3
 800a904:	f004 ffb8 	bl	800f878 <strstr>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d031      	beq.n	800a972 <ES_WIFI_WaitServerConnection+0xfa>
      {
        if(strstr((char *)Obj->CmdData, "Accepted"))
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a914:	495f      	ldr	r1, [pc, #380]	; (800aa94 <ES_WIFI_WaitServerConnection+0x21c>)
 800a916:	4618      	mov	r0, r3
 800a918:	f004 ffae 	bl	800f878 <strstr>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d127      	bne.n	800a972 <ES_WIFI_WaitServerConnection+0xfa>
        {
         //printf("SOMA Accepted\n");
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a928:	495b      	ldr	r1, [pc, #364]	; (800aa98 <ES_WIFI_WaitServerConnection+0x220>)
 800a92a:	4618      	mov	r0, r3
 800a92c:	f004 ffa4 	bl	800f878 <strstr>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d11d      	bne.n	800a972 <ES_WIFI_WaitServerConnection+0xfa>
        {
          DEBUG("Bad MR stntax msg %s\n", Obj->CmdData);
 800a936:	f240 7241 	movw	r2, #1857	; 0x741
 800a93a:	4958      	ldr	r1, [pc, #352]	; (800aa9c <ES_WIFI_WaitServerConnection+0x224>)
 800a93c:	4858      	ldr	r0, [pc, #352]	; (800aaa0 <ES_WIFI_WaitServerConnection+0x228>)
 800a93e:	f004 fd8d 	bl	800f45c <iprintf>
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a948:	4619      	mov	r1, r3
 800a94a:	4856      	ldr	r0, [pc, #344]	; (800aaa4 <ES_WIFI_WaitServerConnection+0x22c>)
 800a94c:	f004 fd86 	bl	800f45c <iprintf>
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 800a950:	2302      	movs	r3, #2
 800a952:	e095      	b.n	800aa80 <ES_WIFI_WaitServerConnection+0x208>
        }
      }
    }
    else
    {
      DEBUG("MR command failed %s\n", Obj->CmdData);
 800a954:	f240 7249 	movw	r2, #1865	; 0x749
 800a958:	4950      	ldr	r1, [pc, #320]	; (800aa9c <ES_WIFI_WaitServerConnection+0x224>)
 800a95a:	4851      	ldr	r0, [pc, #324]	; (800aaa0 <ES_WIFI_WaitServerConnection+0x228>)
 800a95c:	f004 fd7e 	bl	800f45c <iprintf>
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a966:	4619      	mov	r1, r3
 800a968:	484f      	ldr	r0, [pc, #316]	; (800aaa8 <ES_WIFI_WaitServerConnection+0x230>)
 800a96a:	f004 fd77 	bl	800f45c <iprintf>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
 800a96e:	2302      	movs	r3, #2
 800a970:	e086      	b.n	800aa80 <ES_WIFI_WaitServerConnection+0x208>
    }
#endif

    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a978:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a97c:	2100      	movs	r1, #0
 800a97e:	4618      	mov	r0, r3
 800a980:	f004 fee2 	bl	800f748 <memset>
    sprintf((char*)Obj->CmdData,"P?\r");
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a98a:	4948      	ldr	r1, [pc, #288]	; (800aaac <ES_WIFI_WaitServerConnection+0x234>)
 800a98c:	4618      	mov	r0, r3
 800a98e:	f004 fdd3 	bl	800f538 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a99e:	461a      	mov	r2, r3
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f7ff fbe9 	bl	800a178 <AT_ExecuteCommand>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(ret == ES_WIFI_STATUS_OK)
 800a9ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d13f      	bne.n	800aa34 <ES_WIFI_WaitServerConnection+0x1bc>
    {
      if (strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0)
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a9ba:	220c      	movs	r2, #12
 800a9bc:	493c      	ldr	r1, [pc, #240]	; (800aab0 <ES_WIFI_WaitServerConnection+0x238>)
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f004 fed9 	bl	800f776 <strncmp>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d043      	beq.n	800aa52 <ES_WIFI_WaitServerConnection+0x1da>
      {
        ptr = strtok((char *)Obj->CmdData + 2, ",");
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a9d0:	3302      	adds	r3, #2
 800a9d2:	4938      	ldr	r1, [pc, #224]	; (800aab4 <ES_WIFI_WaitServerConnection+0x23c>)
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f004 fef3 	bl	800f7c0 <strtok>
 800a9da:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); //port
 800a9dc:	4935      	ldr	r1, [pc, #212]	; (800aab4 <ES_WIFI_WaitServerConnection+0x23c>)
 800a9de:	2000      	movs	r0, #0
 800a9e0:	f004 feee 	bl	800f7c0 <strtok>
 800a9e4:	6178      	str	r0, [r7, #20]
        ParseIP((char *)ptr, conn->RemoteIP);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	3306      	adds	r3, #6
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	6978      	ldr	r0, [r7, #20]
 800a9ee:	f7ff fa5c 	bl	8009eaa <ParseIP>
        ptr = strtok(0, ","); //port
 800a9f2:	4930      	ldr	r1, [pc, #192]	; (800aab4 <ES_WIFI_WaitServerConnection+0x23c>)
 800a9f4:	2000      	movs	r0, #0
 800a9f6:	f004 fee3 	bl	800f7c0 <strtok>
 800a9fa:	6178      	str	r0, [r7, #20]
        conn->LocalPort=ParseNumber(ptr,0);
 800a9fc:	2100      	movs	r1, #0
 800a9fe:	6978      	ldr	r0, [r7, #20]
 800aa00:	f7ff f9e4 	bl	8009dcc <ParseNumber>
 800aa04:	4603      	mov	r3, r0
 800aa06:	b29a      	uxth	r2, r3
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	809a      	strh	r2, [r3, #4]
        ptr = strtok(0, ","); //ip
 800aa0c:	4929      	ldr	r1, [pc, #164]	; (800aab4 <ES_WIFI_WaitServerConnection+0x23c>)
 800aa0e:	2000      	movs	r0, #0
 800aa10:	f004 fed6 	bl	800f7c0 <strtok>
 800aa14:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); //remote port
 800aa16:	4927      	ldr	r1, [pc, #156]	; (800aab4 <ES_WIFI_WaitServerConnection+0x23c>)
 800aa18:	2000      	movs	r0, #0
 800aa1a:	f004 fed1 	bl	800f7c0 <strtok>
 800aa1e:	6178      	str	r0, [r7, #20]
        conn->RemotePort=ParseNumber(ptr,0);
 800aa20:	2100      	movs	r1, #0
 800aa22:	6978      	ldr	r0, [r7, #20]
 800aa24:	f7ff f9d2 	bl	8009dcc <ParseNumber>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	b29a      	uxth	r2, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	805a      	strh	r2, [r3, #2]
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 800aa30:	2300      	movs	r3, #0
 800aa32:	e025      	b.n	800aa80 <ES_WIFI_WaitServerConnection+0x208>
      }
    }
    else
    {
      DEBUG("P? command failed %s\n", Obj->CmdData);
 800aa34:	f240 7264 	movw	r2, #1892	; 0x764
 800aa38:	4918      	ldr	r1, [pc, #96]	; (800aa9c <ES_WIFI_WaitServerConnection+0x224>)
 800aa3a:	4819      	ldr	r0, [pc, #100]	; (800aaa0 <ES_WIFI_WaitServerConnection+0x228>)
 800aa3c:	f004 fd0e 	bl	800f45c <iprintf>
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800aa46:	4619      	mov	r1, r3
 800aa48:	481b      	ldr	r0, [pc, #108]	; (800aab8 <ES_WIFI_WaitServerConnection+0x240>)
 800aa4a:	f004 fd07 	bl	800f45c <iprintf>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
 800aa4e:	2302      	movs	r3, #2
 800aa50:	e016      	b.n	800aa80 <ES_WIFI_WaitServerConnection+0x208>
    }

    UNLOCK_WIFI();
    Obj->fops.IO_Delay(100);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800aa58:	2064      	movs	r0, #100	; 0x64
 800aa5a:	4798      	blx	r3
    LOCK_WIFI();
    t = HAL_GetTick();
 800aa5c:	f7f9 f8c0 	bl	8003be0 <HAL_GetTick>
 800aa60:	61b8      	str	r0, [r7, #24]
  }
  while ((timeout==0) ||((t < tlast) || (t < tstart)));
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f43f af1d 	beq.w	800a8a4 <ES_WIFI_WaitServerConnection+0x2c>
 800aa6a:	69ba      	ldr	r2, [r7, #24]
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	f4ff af18 	bcc.w	800a8a4 <ES_WIFI_WaitServerConnection+0x2c>
 800aa74:	69ba      	ldr	r2, [r7, #24]
 800aa76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	f4ff af13 	bcc.w	800a8a4 <ES_WIFI_WaitServerConnection+0x2c>
  return ES_WIFI_STATUS_TIMEOUT;
 800aa7e:	2303      	movs	r3, #3
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3728      	adds	r7, #40	; 0x28
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	08011ecc 	.word	0x08011ecc
 800aa8c:	08012020 	.word	0x08012020
 800aa90:	08012028 	.word	0x08012028
 800aa94:	08012030 	.word	0x08012030
 800aa98:	0801203c 	.word	0x0801203c
 800aa9c:	0801204c 	.word	0x0801204c
 800aaa0:	08012068 	.word	0x08012068
 800aaa4:	08012070 	.word	0x08012070
 800aaa8:	08012088 	.word	0x08012088
 800aaac:	080120a0 	.word	0x080120a0
 800aab0:	080120a4 	.word	0x080120a4
 800aab4:	08011e8c 	.word	0x08011e8c
 800aab8:	080120b4 	.word	0x080120b4

0800aabc <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, int socket)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800aacc:	683a      	ldr	r2, [r7, #0]
 800aace:	4925      	ldr	r1, [pc, #148]	; (800ab64 <ES_WIFI_CloseServerConnection+0xa8>)
 800aad0:	4618      	mov	r0, r3
 800aad2:	f004 fd31 	bl	800f538 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800aae2:	461a      	mov	r2, r3
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f7ff fb47 	bl	800a178 <AT_ExecuteCommand>
 800aaea:	4603      	mov	r3, r0
 800aaec:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 800aaee:	7bfb      	ldrb	r3, [r7, #15]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d00e      	beq.n	800ab12 <ES_WIFI_CloseServerConnection+0x56>
  {
    DEBUG(" Can not select socket %s\n", Obj->CmdData);
 800aaf4:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 800aaf8:	491b      	ldr	r1, [pc, #108]	; (800ab68 <ES_WIFI_CloseServerConnection+0xac>)
 800aafa:	481c      	ldr	r0, [pc, #112]	; (800ab6c <ES_WIFI_CloseServerConnection+0xb0>)
 800aafc:	f004 fcae 	bl	800f45c <iprintf>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ab06:	4619      	mov	r1, r3
 800ab08:	4819      	ldr	r0, [pc, #100]	; (800ab70 <ES_WIFI_CloseServerConnection+0xb4>)
 800ab0a:	f004 fca7 	bl	800f45c <iprintf>
    UNLOCK_WIFI();
    return ret;
 800ab0e:	7bfb      	ldrb	r3, [r7, #15]
 800ab10:	e023      	b.n	800ab5a <ES_WIFI_CloseServerConnection+0x9e>
  }

  sprintf((char*)Obj->CmdData,"P5=10\r");
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ab18:	4916      	ldr	r1, [pc, #88]	; (800ab74 <ES_WIFI_CloseServerConnection+0xb8>)
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f004 fd0c 	bl	800f538 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f7ff fb22 	bl	800a178 <AT_ExecuteCommand>
 800ab34:	4603      	mov	r3, r0
 800ab36:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 800ab38:	7bfb      	ldrb	r3, [r7, #15]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00c      	beq.n	800ab58 <ES_WIFI_CloseServerConnection+0x9c>
  {
    DEBUG(" Open next failed %s\n", Obj->CmdData);
 800ab3e:	f240 7289 	movw	r2, #1929	; 0x789
 800ab42:	4909      	ldr	r1, [pc, #36]	; (800ab68 <ES_WIFI_CloseServerConnection+0xac>)
 800ab44:	4809      	ldr	r0, [pc, #36]	; (800ab6c <ES_WIFI_CloseServerConnection+0xb0>)
 800ab46:	f004 fc89 	bl	800f45c <iprintf>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ab50:	4619      	mov	r1, r3
 800ab52:	4809      	ldr	r0, [pc, #36]	; (800ab78 <ES_WIFI_CloseServerConnection+0xbc>)
 800ab54:	f004 fc82 	bl	800f45c <iprintf>
  }

  UNLOCK_WIFI();
  return ret;
 800ab58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	08011fbc 	.word	0x08011fbc
 800ab68:	0801204c 	.word	0x0801204c
 800ab6c:	08012068 	.word	0x08012068
 800ab70:	080120cc 	.word	0x080120cc
 800ab74:	080120e8 	.word	0x080120e8
 800ab78:	080120f0 	.word	0x080120f0

0800ab7c <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, int socket)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ab8c:	683a      	ldr	r2, [r7, #0]
 800ab8e:	4926      	ldr	r1, [pc, #152]	; (800ac28 <ES_WIFI_StopServerSingleConn+0xac>)
 800ab90:	4618      	mov	r0, r3
 800ab92:	f004 fcd1 	bl	800f538 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800aba2:	461a      	mov	r2, r3
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f7ff fae7 	bl	800a178 <AT_ExecuteCommand>
 800abaa:	4603      	mov	r3, r0
 800abac:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 800abae:	7bfb      	ldrb	r3, [r7, #15]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d00e      	beq.n	800abd2 <ES_WIFI_StopServerSingleConn+0x56>
  {
    DEBUG("Selecting socket failed: %s\n", Obj->CmdData);
 800abb4:	f240 729f 	movw	r2, #1951	; 0x79f
 800abb8:	491c      	ldr	r1, [pc, #112]	; (800ac2c <ES_WIFI_StopServerSingleConn+0xb0>)
 800abba:	481d      	ldr	r0, [pc, #116]	; (800ac30 <ES_WIFI_StopServerSingleConn+0xb4>)
 800abbc:	f004 fc4e 	bl	800f45c <iprintf>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800abc6:	4619      	mov	r1, r3
 800abc8:	481a      	ldr	r0, [pc, #104]	; (800ac34 <ES_WIFI_StopServerSingleConn+0xb8>)
 800abca:	f004 fc47 	bl	800f45c <iprintf>
    UNLOCK_WIFI();
    return ret;
 800abce:	7bfb      	ldrb	r3, [r7, #15]
 800abd0:	e025      	b.n	800ac1e <ES_WIFI_StopServerSingleConn+0xa2>
  }

  sprintf((char*)Obj->CmdData,"P5=0\r");
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800abd8:	4917      	ldr	r1, [pc, #92]	; (800ac38 <ES_WIFI_StopServerSingleConn+0xbc>)
 800abda:	4618      	mov	r0, r3
 800abdc:	f004 fcac 	bl	800f538 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800abec:	461a      	mov	r2, r3
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f7ff fac2 	bl	800a178 <AT_ExecuteCommand>
 800abf4:	4603      	mov	r3, r0
 800abf6:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 800abf8:	7bfb      	ldrb	r3, [r7, #15]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d00e      	beq.n	800ac1c <ES_WIFI_StopServerSingleConn+0xa0>
  {
    DEBUG("Stopping server failed %s\n", Obj->CmdData);
 800abfe:	f44f 62f5 	mov.w	r2, #1960	; 0x7a8
 800ac02:	490a      	ldr	r1, [pc, #40]	; (800ac2c <ES_WIFI_StopServerSingleConn+0xb0>)
 800ac04:	480a      	ldr	r0, [pc, #40]	; (800ac30 <ES_WIFI_StopServerSingleConn+0xb4>)
 800ac06:	f004 fc29 	bl	800f45c <iprintf>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ac10:	4619      	mov	r1, r3
 800ac12:	480a      	ldr	r0, [pc, #40]	; (800ac3c <ES_WIFI_StopServerSingleConn+0xc0>)
 800ac14:	f004 fc22 	bl	800f45c <iprintf>
    UNLOCK_WIFI();
    return ret;
 800ac18:	7bfb      	ldrb	r3, [r7, #15]
 800ac1a:	e000      	b.n	800ac1e <ES_WIFI_StopServerSingleConn+0xa2>
  }

  UNLOCK_WIFI();
  return ret;
 800ac1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3710      	adds	r7, #16
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	08011fbc 	.word	0x08011fbc
 800ac2c:	0801204c 	.word	0x0801204c
 800ac30:	08012068 	.word	0x08012068
 800ac34:	08012108 	.word	0x08012108
 800ac38:	08012128 	.word	0x08012128
 800ac3c:	08012130 	.word	0x08012130

0800ac40 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b088      	sub	sp, #32
 800ac44:	af02      	add	r7, sp, #8
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	607a      	str	r2, [r7, #4]
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	72fb      	strb	r3, [r7, #11]
 800ac50:	4613      	mov	r3, r2
 800ac52:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800ac54:	2302      	movs	r3, #2
 800ac56:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800ac58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d102      	bne.n	800ac64 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	617b      	str	r3, [r7, #20]
 800ac62:	e001      	b.n	800ac68 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800ac64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac66:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 800ac68:	893b      	ldrh	r3, [r7, #8]
 800ac6a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800ac6e:	d302      	bcc.n	800ac76 <ES_WIFI_SendData+0x36>
 800ac70:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800ac74:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 800ac76:	6a3b      	ldr	r3, [r7, #32]
 800ac78:	893a      	ldrh	r2, [r7, #8]
 800ac7a:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ac82:	7afa      	ldrb	r2, [r7, #11]
 800ac84:	4942      	ldr	r1, [pc, #264]	; (800ad90 <ES_WIFI_SendData+0x150>)
 800ac86:	4618      	mov	r0, r3
 800ac88:	f004 fc56 	bl	800f538 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ac98:	461a      	mov	r2, r3
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	f7ff fa6c 	bl	800a178 <AT_ExecuteCommand>
 800aca0:	4603      	mov	r3, r0
 800aca2:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 800aca4:	7cfb      	ldrb	r3, [r7, #19]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d15e      	bne.n	800ad68 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800acb0:	697a      	ldr	r2, [r7, #20]
 800acb2:	4938      	ldr	r1, [pc, #224]	; (800ad94 <ES_WIFI_SendData+0x154>)
 800acb4:	4618      	mov	r0, r3
 800acb6:	f004 fc3f 	bl	800f538 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800acc6:	461a      	mov	r2, r3
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	f7ff fa55 	bl	800a178 <AT_ExecuteCommand>
 800acce:	4603      	mov	r3, r0
 800acd0:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800acd2:	7cfb      	ldrb	r3, [r7, #19]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d13d      	bne.n	800ad54 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800acde:	893a      	ldrh	r2, [r7, #8]
 800ace0:	492d      	ldr	r1, [pc, #180]	; (800ad98 <ES_WIFI_SendData+0x158>)
 800ace2:	4618      	mov	r0, r3
 800ace4:	f004 fc28 	bl	800f538 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800acf4:	893a      	ldrh	r2, [r7, #8]
 800acf6:	9300      	str	r3, [sp, #0]
 800acf8:	4613      	mov	r3, r2
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	f7ff faa1 	bl	800a244 <AT_RequestSendData>
 800ad02:	4603      	mov	r3, r0
 800ad04:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 800ad06:	7cfb      	ldrb	r3, [r7, #19]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d119      	bne.n	800ad40 <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ad12:	4922      	ldr	r1, [pc, #136]	; (800ad9c <ES_WIFI_SendData+0x15c>)
 800ad14:	4618      	mov	r0, r3
 800ad16:	f004 fdaf 	bl	800f878 <strstr>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d02c      	beq.n	800ad7a <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 800ad20:	f640 025c 	movw	r2, #2140	; 0x85c
 800ad24:	491e      	ldr	r1, [pc, #120]	; (800ada0 <ES_WIFI_SendData+0x160>)
 800ad26:	481f      	ldr	r0, [pc, #124]	; (800ada4 <ES_WIFI_SendData+0x164>)
 800ad28:	f004 fb98 	bl	800f45c <iprintf>
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ad32:	4619      	mov	r1, r3
 800ad34:	481c      	ldr	r0, [pc, #112]	; (800ada8 <ES_WIFI_SendData+0x168>)
 800ad36:	f004 fb91 	bl	800f45c <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 800ad3a:	2302      	movs	r3, #2
 800ad3c:	74fb      	strb	r3, [r7, #19]
 800ad3e:	e01c      	b.n	800ad7a <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 800ad40:	f640 0262 	movw	r2, #2146	; 0x862
 800ad44:	4916      	ldr	r1, [pc, #88]	; (800ada0 <ES_WIFI_SendData+0x160>)
 800ad46:	4817      	ldr	r0, [pc, #92]	; (800ada4 <ES_WIFI_SendData+0x164>)
 800ad48:	f004 fb88 	bl	800f45c <iprintf>
 800ad4c:	4817      	ldr	r0, [pc, #92]	; (800adac <ES_WIFI_SendData+0x16c>)
 800ad4e:	f004 fbeb 	bl	800f528 <puts>
 800ad52:	e012      	b.n	800ad7a <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 800ad54:	f640 0267 	movw	r2, #2151	; 0x867
 800ad58:	4911      	ldr	r1, [pc, #68]	; (800ada0 <ES_WIFI_SendData+0x160>)
 800ad5a:	4812      	ldr	r0, [pc, #72]	; (800ada4 <ES_WIFI_SendData+0x164>)
 800ad5c:	f004 fb7e 	bl	800f45c <iprintf>
 800ad60:	4813      	ldr	r0, [pc, #76]	; (800adb0 <ES_WIFI_SendData+0x170>)
 800ad62:	f004 fbe1 	bl	800f528 <puts>
 800ad66:	e008      	b.n	800ad7a <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 800ad68:	f640 026c 	movw	r2, #2156	; 0x86c
 800ad6c:	490c      	ldr	r1, [pc, #48]	; (800ada0 <ES_WIFI_SendData+0x160>)
 800ad6e:	480d      	ldr	r0, [pc, #52]	; (800ada4 <ES_WIFI_SendData+0x164>)
 800ad70:	f004 fb74 	bl	800f45c <iprintf>
 800ad74:	480f      	ldr	r0, [pc, #60]	; (800adb4 <ES_WIFI_SendData+0x174>)
 800ad76:	f004 fbd7 	bl	800f528 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 800ad7a:	7cfb      	ldrb	r3, [r7, #19]
 800ad7c:	2b02      	cmp	r3, #2
 800ad7e:	d102      	bne.n	800ad86 <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 800ad80:	6a3b      	ldr	r3, [r7, #32]
 800ad82:	2200      	movs	r2, #0
 800ad84:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 800ad86:	7cfb      	ldrb	r3, [r7, #19]
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3718      	adds	r7, #24
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	08011fbc 	.word	0x08011fbc
 800ad94:	08012174 	.word	0x08012174
 800ad98:	0801217c 	.word	0x0801217c
 800ad9c:	08012188 	.word	0x08012188
 800ada0:	0801204c 	.word	0x0801204c
 800ada4:	08012068 	.word	0x08012068
 800ada8:	08012190 	.word	0x08012190
 800adac:	080121ac 	.word	0x080121ac
 800adb0:	080121c8 	.word	0x080121c8
 800adb4:	080121dc 	.word	0x080121dc

0800adb8 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b088      	sub	sp, #32
 800adbc:	af02      	add	r7, sp, #8
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	607a      	str	r2, [r7, #4]
 800adc2:	461a      	mov	r2, r3
 800adc4:	460b      	mov	r3, r1
 800adc6:	72fb      	strb	r3, [r7, #11]
 800adc8:	4613      	mov	r3, r2
 800adca:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800adcc:	2302      	movs	r3, #2
 800adce:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800add0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add2:	2b00      	cmp	r3, #0
 800add4:	d102      	bne.n	800addc <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 800add6:	2301      	movs	r3, #1
 800add8:	617b      	str	r3, [r7, #20]
 800adda:	e001      	b.n	800ade0 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800addc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adde:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 800ade0:	893b      	ldrh	r3, [r7, #8]
 800ade2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800ade6:	f200 808b 	bhi.w	800af00 <ES_WIFI_ReceiveData+0x148>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800adf0:	7afa      	ldrb	r2, [r7, #11]
 800adf2:	4946      	ldr	r1, [pc, #280]	; (800af0c <ES_WIFI_ReceiveData+0x154>)
 800adf4:	4618      	mov	r0, r3
 800adf6:	f004 fb9f 	bl	800f538 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ae06:	461a      	mov	r2, r3
 800ae08:	68f8      	ldr	r0, [r7, #12]
 800ae0a:	f7ff f9b5 	bl	800a178 <AT_ExecuteCommand>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800ae12:	7cfb      	ldrb	r3, [r7, #19]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d165      	bne.n	800aee4 <ES_WIFI_ReceiveData+0x12c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ae1e:	893a      	ldrh	r2, [r7, #8]
 800ae20:	493b      	ldr	r1, [pc, #236]	; (800af10 <ES_WIFI_ReceiveData+0x158>)
 800ae22:	4618      	mov	r0, r3
 800ae24:	f004 fb88 	bl	800f538 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ae34:	461a      	mov	r2, r3
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f7ff f99e 	bl	800a178 <AT_ExecuteCommand>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 800ae40:	7cfb      	ldrb	r3, [r7, #19]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d141      	bne.n	800aeca <ES_WIFI_ReceiveData+0x112>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ae4c:	697a      	ldr	r2, [r7, #20]
 800ae4e:	4931      	ldr	r1, [pc, #196]	; (800af14 <ES_WIFI_ReceiveData+0x15c>)
 800ae50:	4618      	mov	r0, r3
 800ae52:	f004 fb71 	bl	800f538 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ae62:	461a      	mov	r2, r3
 800ae64:	68f8      	ldr	r0, [r7, #12]
 800ae66:	f7ff f987 	bl	800a178 <AT_ExecuteCommand>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 800ae6e:	7cfb      	ldrb	r3, [r7, #19]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d120      	bne.n	800aeb6 <ES_WIFI_ReceiveData+0xfe>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ae7a:	4927      	ldr	r1, [pc, #156]	; (800af18 <ES_WIFI_ReceiveData+0x160>)
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f004 fb5b 	bl	800f538 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800ae88:	893a      	ldrh	r2, [r7, #8]
 800ae8a:	6a3b      	ldr	r3, [r7, #32]
 800ae8c:	9300      	str	r3, [sp, #0]
 800ae8e:	4613      	mov	r3, r2
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	68f8      	ldr	r0, [r7, #12]
 800ae94:	f7ff fa4c 	bl	800a330 <AT_RequestReceiveData>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 800ae9c:	7cfb      	ldrb	r3, [r7, #19]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d02e      	beq.n	800af00 <ES_WIFI_ReceiveData+0x148>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 800aea2:	f640 02fd 	movw	r2, #2301	; 0x8fd
 800aea6:	491d      	ldr	r1, [pc, #116]	; (800af1c <ES_WIFI_ReceiveData+0x164>)
 800aea8:	481d      	ldr	r0, [pc, #116]	; (800af20 <ES_WIFI_ReceiveData+0x168>)
 800aeaa:	f004 fad7 	bl	800f45c <iprintf>
 800aeae:	481d      	ldr	r0, [pc, #116]	; (800af24 <ES_WIFI_ReceiveData+0x16c>)
 800aeb0:	f004 fb3a 	bl	800f528 <puts>
 800aeb4:	e024      	b.n	800af00 <ES_WIFI_ReceiveData+0x148>
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 800aeb6:	f640 1202 	movw	r2, #2306	; 0x902
 800aeba:	4918      	ldr	r1, [pc, #96]	; (800af1c <ES_WIFI_ReceiveData+0x164>)
 800aebc:	4818      	ldr	r0, [pc, #96]	; (800af20 <ES_WIFI_ReceiveData+0x168>)
 800aebe:	f004 facd 	bl	800f45c <iprintf>
 800aec2:	4819      	ldr	r0, [pc, #100]	; (800af28 <ES_WIFI_ReceiveData+0x170>)
 800aec4:	f004 fb30 	bl	800f528 <puts>
 800aec8:	e01a      	b.n	800af00 <ES_WIFI_ReceiveData+0x148>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
 800aeca:	f640 1207 	movw	r2, #2311	; 0x907
 800aece:	4913      	ldr	r1, [pc, #76]	; (800af1c <ES_WIFI_ReceiveData+0x164>)
 800aed0:	4813      	ldr	r0, [pc, #76]	; (800af20 <ES_WIFI_ReceiveData+0x168>)
 800aed2:	f004 fac3 	bl	800f45c <iprintf>
 800aed6:	4815      	ldr	r0, [pc, #84]	; (800af2c <ES_WIFI_ReceiveData+0x174>)
 800aed8:	f004 fb26 	bl	800f528 <puts>
        *Receivedlen = 0;
 800aedc:	6a3b      	ldr	r3, [r7, #32]
 800aede:	2200      	movs	r2, #0
 800aee0:	801a      	strh	r2, [r3, #0]
 800aee2:	e00d      	b.n	800af00 <ES_WIFI_ReceiveData+0x148>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
 800aee4:	f640 120d 	movw	r2, #2317	; 0x90d
 800aee8:	490c      	ldr	r1, [pc, #48]	; (800af1c <ES_WIFI_ReceiveData+0x164>)
 800aeea:	480d      	ldr	r0, [pc, #52]	; (800af20 <ES_WIFI_ReceiveData+0x168>)
 800aeec:	f004 fab6 	bl	800f45c <iprintf>
 800aef0:	480f      	ldr	r0, [pc, #60]	; (800af30 <ES_WIFI_ReceiveData+0x178>)
 800aef2:	f004 fb19 	bl	800f528 <puts>
      issue15++;
 800aef6:	4b0f      	ldr	r3, [pc, #60]	; (800af34 <ES_WIFI_ReceiveData+0x17c>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	3301      	adds	r3, #1
 800aefc:	4a0d      	ldr	r2, [pc, #52]	; (800af34 <ES_WIFI_ReceiveData+0x17c>)
 800aefe:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 800af00:	7cfb      	ldrb	r3, [r7, #19]
}
 800af02:	4618      	mov	r0, r3
 800af04:	3718      	adds	r7, #24
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	08011fbc 	.word	0x08011fbc
 800af10:	08012200 	.word	0x08012200
 800af14:	08012208 	.word	0x08012208
 800af18:	08012210 	.word	0x08012210
 800af1c:	0801204c 	.word	0x0801204c
 800af20:	08012068 	.word	0x08012068
 800af24:	08012214 	.word	0x08012214
 800af28:	08012234 	.word	0x08012234
 800af2c:	0801224c 	.word	0x0801224c
 800af30:	0801226c 	.word	0x0801226c
 800af34:	20001210 	.word	0x20001210

0800af38 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b08c      	sub	sp, #48	; 0x30
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 800af40:	4b56      	ldr	r3, [pc, #344]	; (800b09c <SPI_WIFI_MspInit+0x164>)
 800af42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af44:	4a55      	ldr	r2, [pc, #340]	; (800b09c <SPI_WIFI_MspInit+0x164>)
 800af46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af4a:	6593      	str	r3, [r2, #88]	; 0x58
 800af4c:	4b53      	ldr	r3, [pc, #332]	; (800b09c <SPI_WIFI_MspInit+0x164>)
 800af4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af54:	61bb      	str	r3, [r7, #24]
 800af56:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800af58:	4b50      	ldr	r3, [pc, #320]	; (800b09c <SPI_WIFI_MspInit+0x164>)
 800af5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af5c:	4a4f      	ldr	r2, [pc, #316]	; (800b09c <SPI_WIFI_MspInit+0x164>)
 800af5e:	f043 0302 	orr.w	r3, r3, #2
 800af62:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af64:	4b4d      	ldr	r3, [pc, #308]	; (800b09c <SPI_WIFI_MspInit+0x164>)
 800af66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af68:	f003 0302 	and.w	r3, r3, #2
 800af6c:	617b      	str	r3, [r7, #20]
 800af6e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800af70:	4b4a      	ldr	r3, [pc, #296]	; (800b09c <SPI_WIFI_MspInit+0x164>)
 800af72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af74:	4a49      	ldr	r2, [pc, #292]	; (800b09c <SPI_WIFI_MspInit+0x164>)
 800af76:	f043 0304 	orr.w	r3, r3, #4
 800af7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af7c:	4b47      	ldr	r3, [pc, #284]	; (800b09c <SPI_WIFI_MspInit+0x164>)
 800af7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af80:	f003 0304 	and.w	r3, r3, #4
 800af84:	613b      	str	r3, [r7, #16]
 800af86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800af88:	4b44      	ldr	r3, [pc, #272]	; (800b09c <SPI_WIFI_MspInit+0x164>)
 800af8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af8c:	4a43      	ldr	r2, [pc, #268]	; (800b09c <SPI_WIFI_MspInit+0x164>)
 800af8e:	f043 0310 	orr.w	r3, r3, #16
 800af92:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af94:	4b41      	ldr	r3, [pc, #260]	; (800b09c <SPI_WIFI_MspInit+0x164>)
 800af96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af98:	f003 0310 	and.w	r3, r3, #16
 800af9c:	60fb      	str	r3, [r7, #12]
 800af9e:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 800afa0:	2200      	movs	r2, #0
 800afa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800afa6:	483e      	ldr	r0, [pc, #248]	; (800b0a0 <SPI_WIFI_MspInit+0x168>)
 800afa8:	f7f9 fb30 	bl	800460c <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 800afac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800afb0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800afb2:	2301      	movs	r3, #1
 800afb4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800afb6:	2300      	movs	r3, #0
 800afb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800afba:	2300      	movs	r3, #0
 800afbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800afbe:	f107 031c 	add.w	r3, r7, #28
 800afc2:	4619      	mov	r1, r3
 800afc4:	4836      	ldr	r0, [pc, #216]	; (800b0a0 <SPI_WIFI_MspInit+0x168>)
 800afc6:	f7f9 f86b 	bl	80040a0 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 800afca:	2302      	movs	r3, #2
 800afcc:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800afce:	4b35      	ldr	r3, [pc, #212]	; (800b0a4 <SPI_WIFI_MspInit+0x16c>)
 800afd0:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800afd2:	2300      	movs	r3, #0
 800afd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800afd6:	2300      	movs	r3, #0
 800afd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800afda:	f107 031c 	add.w	r3, r7, #28
 800afde:	4619      	mov	r1, r3
 800afe0:	4831      	ldr	r0, [pc, #196]	; (800b0a8 <SPI_WIFI_MspInit+0x170>)
 800afe2:	f7f9 f85d 	bl	80040a0 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 800afe6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afea:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800afec:	2301      	movs	r3, #1
 800afee:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800aff0:	2300      	movs	r3, #0
 800aff2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800aff4:	2300      	movs	r3, #0
 800aff6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 800aff8:	2300      	movs	r3, #0
 800affa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800affc:	f107 031c 	add.w	r3, r7, #28
 800b000:	4619      	mov	r1, r3
 800b002:	4829      	ldr	r0, [pc, #164]	; (800b0a8 <SPI_WIFI_MspInit+0x170>)
 800b004:	f7f9 f84c 	bl	80040a0 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 800b008:	2201      	movs	r2, #1
 800b00a:	2101      	movs	r1, #1
 800b00c:	4826      	ldr	r0, [pc, #152]	; (800b0a8 <SPI_WIFI_MspInit+0x170>)
 800b00e:	f7f9 fafd 	bl	800460c <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 800b012:	2301      	movs	r3, #1
 800b014:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800b016:	2301      	movs	r3, #1
 800b018:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800b01a:	2300      	movs	r3, #0
 800b01c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800b01e:	2301      	movs	r3, #1
 800b020:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 800b022:	f107 031c 	add.w	r3, r7, #28
 800b026:	4619      	mov	r1, r3
 800b028:	481f      	ldr	r0, [pc, #124]	; (800b0a8 <SPI_WIFI_MspInit+0x170>)
 800b02a:	f7f9 f839 	bl	80040a0 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 800b02e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b032:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800b034:	2302      	movs	r3, #2
 800b036:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800b038:	2300      	movs	r3, #0
 800b03a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800b03c:	2301      	movs	r3, #1
 800b03e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800b040:	2306      	movs	r3, #6
 800b042:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 800b044:	f107 031c 	add.w	r3, r7, #28
 800b048:	4619      	mov	r1, r3
 800b04a:	4818      	ldr	r0, [pc, #96]	; (800b0ac <SPI_WIFI_MspInit+0x174>)
 800b04c:	f7f9 f828 	bl	80040a0 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 800b050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b054:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800b056:	2302      	movs	r3, #2
 800b058:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800b05a:	2300      	movs	r3, #0
 800b05c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800b05e:	2301      	movs	r3, #1
 800b060:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800b062:	2306      	movs	r3, #6
 800b064:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800b066:	f107 031c 	add.w	r3, r7, #28
 800b06a:	4619      	mov	r1, r3
 800b06c:	480f      	ldr	r0, [pc, #60]	; (800b0ac <SPI_WIFI_MspInit+0x174>)
 800b06e:	f7f9 f817 	bl	80040a0 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 800b072:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b076:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800b078:	2302      	movs	r3, #2
 800b07a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 800b07c:	2301      	movs	r3, #1
 800b07e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800b080:	2301      	movs	r3, #1
 800b082:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800b084:	2306      	movs	r3, #6
 800b086:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800b088:	f107 031c 	add.w	r3, r7, #28
 800b08c:	4619      	mov	r1, r3
 800b08e:	4807      	ldr	r0, [pc, #28]	; (800b0ac <SPI_WIFI_MspInit+0x174>)
 800b090:	f7f9 f806 	bl	80040a0 <HAL_GPIO_Init>
}
 800b094:	bf00      	nop
 800b096:	3730      	adds	r7, #48	; 0x30
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}
 800b09c:	40021000 	.word	0x40021000
 800b0a0:	48000400 	.word	0x48000400
 800b0a4:	10110000 	.word	0x10110000
 800b0a8:	48001000 	.word	0x48001000
 800b0ac:	48000800 	.word	0x48000800

0800b0b0 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 800b0be:	88fb      	ldrh	r3, [r7, #6]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d145      	bne.n	800b150 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 800b0c4:	4b27      	ldr	r3, [pc, #156]	; (800b164 <SPI_WIFI_Init+0xb4>)
 800b0c6:	4a28      	ldr	r2, [pc, #160]	; (800b168 <SPI_WIFI_Init+0xb8>)
 800b0c8:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 800b0ca:	4826      	ldr	r0, [pc, #152]	; (800b164 <SPI_WIFI_Init+0xb4>)
 800b0cc:	f7ff ff34 	bl	800af38 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 800b0d0:	4b24      	ldr	r3, [pc, #144]	; (800b164 <SPI_WIFI_Init+0xb4>)
 800b0d2:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b0d6:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 800b0d8:	4b22      	ldr	r3, [pc, #136]	; (800b164 <SPI_WIFI_Init+0xb4>)
 800b0da:	2200      	movs	r2, #0
 800b0dc:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 800b0de:	4b21      	ldr	r3, [pc, #132]	; (800b164 <SPI_WIFI_Init+0xb4>)
 800b0e0:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800b0e4:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800b0e6:	4b1f      	ldr	r3, [pc, #124]	; (800b164 <SPI_WIFI_Init+0xb4>)
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 800b0ec:	4b1d      	ldr	r3, [pc, #116]	; (800b164 <SPI_WIFI_Init+0xb4>)
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 800b0f2:	4b1c      	ldr	r3, [pc, #112]	; (800b164 <SPI_WIFI_Init+0xb4>)
 800b0f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0f8:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 800b0fa:	4b1a      	ldr	r3, [pc, #104]	; (800b164 <SPI_WIFI_Init+0xb4>)
 800b0fc:	2210      	movs	r2, #16
 800b0fe:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800b100:	4b18      	ldr	r3, [pc, #96]	; (800b164 <SPI_WIFI_Init+0xb4>)
 800b102:	2200      	movs	r2, #0
 800b104:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 800b106:	4b17      	ldr	r3, [pc, #92]	; (800b164 <SPI_WIFI_Init+0xb4>)
 800b108:	2200      	movs	r2, #0
 800b10a:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 800b10c:	4b15      	ldr	r3, [pc, #84]	; (800b164 <SPI_WIFI_Init+0xb4>)
 800b10e:	2200      	movs	r2, #0
 800b110:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 800b112:	4b14      	ldr	r3, [pc, #80]	; (800b164 <SPI_WIFI_Init+0xb4>)
 800b114:	2200      	movs	r2, #0
 800b116:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 800b118:	4812      	ldr	r0, [pc, #72]	; (800b164 <SPI_WIFI_Init+0xb4>)
 800b11a:	f7fb fdbb 	bl	8006c94 <HAL_SPI_Init>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b00      	cmp	r3, #0
 800b122:	d002      	beq.n	800b12a <SPI_WIFI_Init+0x7a>
    {
      return -1;
 800b124:	f04f 33ff 	mov.w	r3, #4294967295
 800b128:	e018      	b.n	800b15c <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 800b12a:	2200      	movs	r2, #0
 800b12c:	2100      	movs	r1, #0
 800b12e:	2007      	movs	r0, #7
 800b130:	f7f8 fe3e 	bl	8003db0 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 800b134:	2007      	movs	r0, #7
 800b136:	f7f8 fe57 	bl	8003de8 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 800b13a:	2200      	movs	r2, #0
 800b13c:	2100      	movs	r1, #0
 800b13e:	2033      	movs	r0, #51	; 0x33
 800b140:	f7f8 fe36 	bl	8003db0 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 800b144:	2033      	movs	r0, #51	; 0x33
 800b146:	f7f8 fe4f 	bl	8003de8 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 800b14a:	200a      	movs	r0, #10
 800b14c:	f000 f9fe 	bl	800b54c <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 800b150:	f000 f80c 	bl	800b16c <SPI_WIFI_ResetModule>
 800b154:	4603      	mov	r3, r0
 800b156:	73fb      	strb	r3, [r7, #15]

  return rc;
 800b158:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3710      	adds	r7, #16
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	20001214 	.word	0x20001214
 800b168:	40003c00 	.word	0x40003c00

0800b16c <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800b172:	f7f8 fd35 	bl	8003be0 <HAL_GetTick>
 800b176:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 800b178:	2300      	movs	r3, #0
 800b17a:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 800b17c:	2200      	movs	r2, #0
 800b17e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b182:	4830      	ldr	r0, [pc, #192]	; (800b244 <SPI_WIFI_ResetModule+0xd8>)
 800b184:	f7f9 fa42 	bl	800460c <HAL_GPIO_WritePin>
 800b188:	200a      	movs	r0, #10
 800b18a:	f7f8 fd35 	bl	8003bf8 <HAL_Delay>
 800b18e:	2201      	movs	r2, #1
 800b190:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b194:	482b      	ldr	r0, [pc, #172]	; (800b244 <SPI_WIFI_ResetModule+0xd8>)
 800b196:	f7f9 fa39 	bl	800460c <HAL_GPIO_WritePin>
 800b19a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b19e:	f7f8 fd2b 	bl	8003bf8 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	2101      	movs	r1, #1
 800b1a6:	4827      	ldr	r0, [pc, #156]	; (800b244 <SPI_WIFI_ResetModule+0xd8>)
 800b1a8:	f7f9 fa30 	bl	800460c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800b1ac:	200f      	movs	r0, #15
 800b1ae:	f000 f9cd 	bl	800b54c <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 800b1b2:	e020      	b.n	800b1f6 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 800b1b4:	7bfb      	ldrb	r3, [r7, #15]
 800b1b6:	463a      	mov	r2, r7
 800b1b8:	18d1      	adds	r1, r2, r3
 800b1ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b1be:	2201      	movs	r2, #1
 800b1c0:	4821      	ldr	r0, [pc, #132]	; (800b248 <SPI_WIFI_ResetModule+0xdc>)
 800b1c2:	f7fb fe32 	bl	8006e2a <HAL_SPI_Receive>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	71fb      	strb	r3, [r7, #7]
    count += 2;
 800b1ca:	7bfb      	ldrb	r3, [r7, #15]
 800b1cc:	3302      	adds	r3, #2
 800b1ce:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 800b1d0:	f7f8 fd06 	bl	8003be0 <HAL_GetTick>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1de:	d202      	bcs.n	800b1e6 <SPI_WIFI_ResetModule+0x7a>
 800b1e0:	79fb      	ldrb	r3, [r7, #7]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d007      	beq.n	800b1f6 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	2101      	movs	r1, #1
 800b1ea:	4816      	ldr	r0, [pc, #88]	; (800b244 <SPI_WIFI_ResetModule+0xd8>)
 800b1ec:	f7f9 fa0e 	bl	800460c <HAL_GPIO_WritePin>
      return -1;
 800b1f0:	f04f 33ff 	mov.w	r3, #4294967295
 800b1f4:	e021      	b.n	800b23a <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 800b1f6:	2102      	movs	r1, #2
 800b1f8:	4812      	ldr	r0, [pc, #72]	; (800b244 <SPI_WIFI_ResetModule+0xd8>)
 800b1fa:	f7f9 f9ef 	bl	80045dc <HAL_GPIO_ReadPin>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b01      	cmp	r3, #1
 800b202:	d0d7      	beq.n	800b1b4 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 800b204:	2201      	movs	r2, #1
 800b206:	2101      	movs	r1, #1
 800b208:	480e      	ldr	r0, [pc, #56]	; (800b244 <SPI_WIFI_ResetModule+0xd8>)
 800b20a:	f7f9 f9ff 	bl	800460c <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800b20e:	783b      	ldrb	r3, [r7, #0]
 800b210:	2b15      	cmp	r3, #21
 800b212:	d10e      	bne.n	800b232 <SPI_WIFI_ResetModule+0xc6>
 800b214:	787b      	ldrb	r3, [r7, #1]
 800b216:	2b15      	cmp	r3, #21
 800b218:	d10b      	bne.n	800b232 <SPI_WIFI_ResetModule+0xc6>
 800b21a:	78bb      	ldrb	r3, [r7, #2]
 800b21c:	2b0d      	cmp	r3, #13
 800b21e:	d108      	bne.n	800b232 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800b220:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800b222:	2b0a      	cmp	r3, #10
 800b224:	d105      	bne.n	800b232 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800b226:	793b      	ldrb	r3, [r7, #4]
 800b228:	2b3e      	cmp	r3, #62	; 0x3e
 800b22a:	d102      	bne.n	800b232 <SPI_WIFI_ResetModule+0xc6>
 800b22c:	797b      	ldrb	r3, [r7, #5]
 800b22e:	2b20      	cmp	r3, #32
 800b230:	d002      	beq.n	800b238 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 800b232:	f04f 33ff 	mov.w	r3, #4294967295
 800b236:	e000      	b.n	800b23a <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 800b238:	2300      	movs	r3, #0
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3710      	adds	r7, #16
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	48001000 	.word	0x48001000
 800b248:	20001214 	.word	0x20001214

0800b24c <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 800b250:	4802      	ldr	r0, [pc, #8]	; (800b25c <SPI_WIFI_DeInit+0x10>)
 800b252:	f7fb fdc2 	bl	8006dda <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 800b256:	2300      	movs	r3, #0
}
 800b258:	4618      	mov	r0, r3
 800b25a:	bd80      	pop	{r7, pc}
 800b25c:	20001214 	.word	0x20001214

0800b260 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 800b268:	f7f8 fcba 	bl	8003be0 <HAL_GetTick>
 800b26c:	4603      	mov	r3, r0
 800b26e:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 800b270:	e00a      	b.n	800b288 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800b272:	f7f8 fcb5 	bl	8003be0 <HAL_GetTick>
 800b276:	4602      	mov	r2, r0
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	1ad2      	subs	r2, r2, r3
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	429a      	cmp	r2, r3
 800b280:	d902      	bls.n	800b288 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800b282:	f04f 33ff 	mov.w	r3, #4294967295
 800b286:	e007      	b.n	800b298 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 800b288:	2102      	movs	r1, #2
 800b28a:	4805      	ldr	r0, [pc, #20]	; (800b2a0 <wait_cmddata_rdy_high+0x40>)
 800b28c:	f7f9 f9a6 	bl	80045dc <HAL_GPIO_ReadPin>
 800b290:	4603      	mov	r3, r0
 800b292:	2b01      	cmp	r3, #1
 800b294:	d1ed      	bne.n	800b272 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 800b296:	2300      	movs	r3, #0
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3710      	adds	r7, #16
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	48001000 	.word	0x48001000

0800b2a4 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b084      	sub	sp, #16
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800b2ac:	f7f8 fc98 	bl	8003be0 <HAL_GetTick>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 800b2b4:	e00a      	b.n	800b2cc <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800b2b6:	f7f8 fc93 	bl	8003be0 <HAL_GetTick>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	1ad2      	subs	r2, r2, r3
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d902      	bls.n	800b2cc <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800b2c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ca:	e004      	b.n	800b2d6 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 800b2cc:	4b04      	ldr	r3, [pc, #16]	; (800b2e0 <wait_cmddata_rdy_rising_event+0x3c>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d0f0      	beq.n	800b2b6 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 800b2d4:	2300      	movs	r3, #0
#endif
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3710      	adds	r7, #16
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	20001280 	.word	0x20001280

0800b2e4 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800b2ec:	f7f8 fc78 	bl	8003be0 <HAL_GetTick>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 800b2f4:	e00a      	b.n	800b30c <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800b2f6:	f7f8 fc73 	bl	8003be0 <HAL_GetTick>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	1ad2      	subs	r2, r2, r3
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	429a      	cmp	r2, r3
 800b304:	d902      	bls.n	800b30c <wait_spi_rx_event+0x28>
    {
      return -1;
 800b306:	f04f 33ff 	mov.w	r3, #4294967295
 800b30a:	e004      	b.n	800b316 <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 800b30c:	4b04      	ldr	r3, [pc, #16]	; (800b320 <wait_spi_rx_event+0x3c>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	2b01      	cmp	r3, #1
 800b312:	d0f0      	beq.n	800b2f6 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 800b314:	2300      	movs	r3, #0
#endif
}
 800b316:	4618      	mov	r0, r3
 800b318:	3710      	adds	r7, #16
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	20001278 	.word	0x20001278

0800b324 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800b32c:	f7f8 fc58 	bl	8003be0 <HAL_GetTick>
 800b330:	4603      	mov	r3, r0
 800b332:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 800b334:	e00a      	b.n	800b34c <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800b336:	f7f8 fc53 	bl	8003be0 <HAL_GetTick>
 800b33a:	4602      	mov	r2, r0
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	1ad2      	subs	r2, r2, r3
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	429a      	cmp	r2, r3
 800b344:	d902      	bls.n	800b34c <wait_spi_tx_event+0x28>
    {
      return -1;
 800b346:	f04f 33ff 	mov.w	r3, #4294967295
 800b34a:	e004      	b.n	800b356 <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 800b34c:	4b04      	ldr	r3, [pc, #16]	; (800b360 <wait_spi_tx_event+0x3c>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	2b01      	cmp	r3, #1
 800b352:	d0f0      	beq.n	800b336 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 800b354:	2300      	movs	r3, #0
#endif
}
 800b356:	4618      	mov	r0, r3
 800b358:	3710      	adds	r7, #16
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	2000127c 	.word	0x2000127c

0800b364 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b086      	sub	sp, #24
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	460b      	mov	r3, r1
 800b36e:	607a      	str	r2, [r7, #4]
 800b370:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800b372:	2300      	movs	r3, #0
 800b374:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 800b376:	2201      	movs	r2, #1
 800b378:	2101      	movs	r1, #1
 800b37a:	4834      	ldr	r0, [pc, #208]	; (800b44c <SPI_WIFI_ReceiveData+0xe8>)
 800b37c:	f7f9 f946 	bl	800460c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 800b380:	2003      	movs	r0, #3
 800b382:	f000 f8e3 	bl	800b54c <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	4618      	mov	r0, r3
 800b38a:	f7ff ff8b 	bl	800b2a4 <wait_cmddata_rdy_rising_event>
 800b38e:	4603      	mov	r3, r0
 800b390:	2b00      	cmp	r3, #0
 800b392:	da02      	bge.n	800b39a <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 800b394:	f06f 0302 	mvn.w	r3, #2
 800b398:	e054      	b.n	800b444 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800b39a:	2200      	movs	r2, #0
 800b39c:	2101      	movs	r1, #1
 800b39e:	482b      	ldr	r0, [pc, #172]	; (800b44c <SPI_WIFI_ReceiveData+0xe8>)
 800b3a0:	f7f9 f934 	bl	800460c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800b3a4:	200f      	movs	r0, #15
 800b3a6:	f000 f8d1 	bl	800b54c <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 800b3aa:	e03d      	b.n	800b428 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 800b3ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b3b0:	897b      	ldrh	r3, [r7, #10]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	db02      	blt.n	800b3bc <SPI_WIFI_ReceiveData+0x58>
 800b3b6:	897b      	ldrh	r3, [r7, #10]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d13c      	bne.n	800b436 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 800b3bc:	4b24      	ldr	r3, [pc, #144]	; (800b450 <SPI_WIFI_ReceiveData+0xec>)
 800b3be:	2201      	movs	r2, #1
 800b3c0:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800b3c2:	f107 0314 	add.w	r3, r7, #20
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	4822      	ldr	r0, [pc, #136]	; (800b454 <SPI_WIFI_ReceiveData+0xf0>)
 800b3cc:	f7fc f8fe 	bl	80075cc <HAL_SPI_Receive_IT>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d007      	beq.n	800b3e6 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	2101      	movs	r1, #1
 800b3da:	481c      	ldr	r0, [pc, #112]	; (800b44c <SPI_WIFI_ReceiveData+0xe8>)
 800b3dc:	f7f9 f916 	bl	800460c <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 800b3e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b3e4:	e02e      	b.n	800b444 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7ff ff7b 	bl	800b2e4 <wait_spi_rx_event>

      pData[0] = tmp[0];
 800b3ee:	7d3a      	ldrb	r2, [r7, #20]
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	7d7a      	ldrb	r2, [r7, #21]
 800b3fa:	701a      	strb	r2, [r3, #0]
      length += 2;
 800b3fc:	8afb      	ldrh	r3, [r7, #22]
 800b3fe:	3302      	adds	r3, #2
 800b400:	b29b      	uxth	r3, r3
 800b402:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	3302      	adds	r3, #2
 800b408:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 800b40a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b40e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b412:	db09      	blt.n	800b428 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 800b414:	2201      	movs	r2, #1
 800b416:	2101      	movs	r1, #1
 800b418:	480c      	ldr	r0, [pc, #48]	; (800b44c <SPI_WIFI_ReceiveData+0xe8>)
 800b41a:	f7f9 f8f7 	bl	800460c <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 800b41e:	f7ff fea5 	bl	800b16c <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800b422:	f06f 0303 	mvn.w	r3, #3
 800b426:	e00d      	b.n	800b444 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 800b428:	2102      	movs	r1, #2
 800b42a:	4808      	ldr	r0, [pc, #32]	; (800b44c <SPI_WIFI_ReceiveData+0xe8>)
 800b42c:	f7f9 f8d6 	bl	80045dc <HAL_GPIO_ReadPin>
 800b430:	4603      	mov	r3, r0
 800b432:	2b01      	cmp	r3, #1
 800b434:	d0ba      	beq.n	800b3ac <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 800b436:	2201      	movs	r2, #1
 800b438:	2101      	movs	r1, #1
 800b43a:	4804      	ldr	r0, [pc, #16]	; (800b44c <SPI_WIFI_ReceiveData+0xe8>)
 800b43c:	f7f9 f8e6 	bl	800460c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 800b440:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800b444:	4618      	mov	r0, r3
 800b446:	3718      	adds	r7, #24
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	48001000 	.word	0x48001000
 800b450:	20001278 	.word	0x20001278
 800b454:	20001214 	.word	0x20001214

0800b458 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b086      	sub	sp, #24
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	460b      	mov	r3, r1
 800b462:	607a      	str	r2, [r7, #4]
 800b464:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	4618      	mov	r0, r3
 800b46a:	f7ff fef9 	bl	800b260 <wait_cmddata_rdy_high>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	da02      	bge.n	800b47a <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 800b474:	f04f 33ff 	mov.w	r3, #4294967295
 800b478:	e04f      	b.n	800b51a <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 800b47a:	4b2a      	ldr	r3, [pc, #168]	; (800b524 <SPI_WIFI_SendData+0xcc>)
 800b47c:	2201      	movs	r2, #1
 800b47e:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800b480:	2200      	movs	r2, #0
 800b482:	2101      	movs	r1, #1
 800b484:	4828      	ldr	r0, [pc, #160]	; (800b528 <SPI_WIFI_SendData+0xd0>)
 800b486:	f7f9 f8c1 	bl	800460c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800b48a:	200f      	movs	r0, #15
 800b48c:	f000 f85e 	bl	800b54c <SPI_WIFI_DelayUs>
  if (len > 1)
 800b490:	897b      	ldrh	r3, [r7, #10]
 800b492:	2b01      	cmp	r3, #1
 800b494:	d919      	bls.n	800b4ca <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 800b496:	4b25      	ldr	r3, [pc, #148]	; (800b52c <SPI_WIFI_SendData+0xd4>)
 800b498:	2201      	movs	r2, #1
 800b49a:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 800b49c:	897b      	ldrh	r3, [r7, #10]
 800b49e:	085b      	lsrs	r3, r3, #1
 800b4a0:	b29b      	uxth	r3, r3
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	68f9      	ldr	r1, [r7, #12]
 800b4a6:	4822      	ldr	r0, [pc, #136]	; (800b530 <SPI_WIFI_SendData+0xd8>)
 800b4a8:	f7fc f802 	bl	80074b0 <HAL_SPI_Transmit_IT>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d007      	beq.n	800b4c2 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	2101      	movs	r1, #1
 800b4b6:	481c      	ldr	r0, [pc, #112]	; (800b528 <SPI_WIFI_SendData+0xd0>)
 800b4b8:	f7f9 f8a8 	bl	800460c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800b4bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b4c0:	e02b      	b.n	800b51a <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7ff ff2d 	bl	800b324 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 800b4ca:	897b      	ldrh	r3, [r7, #10]
 800b4cc:	f003 0301 	and.w	r3, r3, #1
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d020      	beq.n	800b516 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 800b4d4:	897b      	ldrh	r3, [r7, #10]
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	4413      	add	r3, r2
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 800b4e0:	230a      	movs	r3, #10
 800b4e2:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 800b4e4:	4b11      	ldr	r3, [pc, #68]	; (800b52c <SPI_WIFI_SendData+0xd4>)
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800b4ea:	f107 0314 	add.w	r3, r7, #20
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	480f      	ldr	r0, [pc, #60]	; (800b530 <SPI_WIFI_SendData+0xd8>)
 800b4f4:	f7fb ffdc 	bl	80074b0 <HAL_SPI_Transmit_IT>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d007      	beq.n	800b50e <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 800b4fe:	2201      	movs	r2, #1
 800b500:	2101      	movs	r1, #1
 800b502:	4809      	ldr	r0, [pc, #36]	; (800b528 <SPI_WIFI_SendData+0xd0>)
 800b504:	f7f9 f882 	bl	800460c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800b508:	f04f 33ff 	mov.w	r3, #4294967295
 800b50c:	e005      	b.n	800b51a <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	4618      	mov	r0, r3
 800b512:	f7ff ff07 	bl	800b324 <wait_spi_tx_event>
    
  }
  return len;
 800b516:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3718      	adds	r7, #24
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	20001280 	.word	0x20001280
 800b528:	48001000 	.word	0x48001000
 800b52c:	2000127c 	.word	0x2000127c
 800b530:	20001214 	.word	0x20001214

0800b534 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f7f8 fb5b 	bl	8003bf8 <HAL_Delay>
}
 800b542:	bf00      	nop
 800b544:	3708      	adds	r7, #8
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
	...

0800b54c <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b086      	sub	sp, #24
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 800b554:	2300      	movs	r3, #0
 800b556:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 800b558:	2300      	movs	r3, #0
 800b55a:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 800b55c:	4b20      	ldr	r3, [pc, #128]	; (800b5e0 <SPI_WIFI_DelayUs+0x94>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d122      	bne.n	800b5aa <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 800b564:	4b1f      	ldr	r3, [pc, #124]	; (800b5e4 <SPI_WIFI_DelayUs+0x98>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4a1f      	ldr	r2, [pc, #124]	; (800b5e8 <SPI_WIFI_DelayUs+0x9c>)
 800b56a:	fba2 2303 	umull	r2, r3, r2, r3
 800b56e:	099b      	lsrs	r3, r3, #6
 800b570:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 800b572:	2300      	movs	r3, #0
 800b574:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 800b57a:	f7f8 fb31 	bl	8003be0 <HAL_GetTick>
 800b57e:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 800b580:	e002      	b.n	800b588 <SPI_WIFI_DelayUs+0x3c>
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	3b01      	subs	r3, #1
 800b586:	60bb      	str	r3, [r7, #8]
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d1f9      	bne.n	800b582 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 800b58e:	f7f8 fb27 	bl	8003be0 <HAL_GetTick>
 800b592:	4602      	mov	r2, r0
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	1ad3      	subs	r3, r2, r3
 800b598:	4a11      	ldr	r2, [pc, #68]	; (800b5e0 <SPI_WIFI_DelayUs+0x94>)
 800b59a:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 800b59c:	4b10      	ldr	r3, [pc, #64]	; (800b5e0 <SPI_WIFI_DelayUs+0x94>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d102      	bne.n	800b5aa <SPI_WIFI_DelayUs+0x5e>
 800b5a4:	4b0e      	ldr	r3, [pc, #56]	; (800b5e0 <SPI_WIFI_DelayUs+0x94>)
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 800b5aa:	4b0e      	ldr	r3, [pc, #56]	; (800b5e4 <SPI_WIFI_DelayUs+0x98>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	4a0f      	ldr	r2, [pc, #60]	; (800b5ec <SPI_WIFI_DelayUs+0xa0>)
 800b5b0:	fba2 2303 	umull	r2, r3, r2, r3
 800b5b4:	0c9a      	lsrs	r2, r3, #18
 800b5b6:	4b0a      	ldr	r3, [pc, #40]	; (800b5e0 <SPI_WIFI_DelayUs+0x94>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5be:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	697a      	ldr	r2, [r7, #20]
 800b5c4:	fb02 f303 	mul.w	r3, r2, r3
 800b5c8:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 800b5ca:	e002      	b.n	800b5d2 <SPI_WIFI_DelayUs+0x86>
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	3b01      	subs	r3, #1
 800b5d0:	60bb      	str	r3, [r7, #8]
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d1f9      	bne.n	800b5cc <SPI_WIFI_DelayUs+0x80>
  return;
 800b5d8:	bf00      	nop
}
 800b5da:	3718      	adds	r7, #24
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	20001284 	.word	0x20001284
 800b5e4:	200000c4 	.word	0x200000c4
 800b5e8:	10624dd3 	.word	0x10624dd3
 800b5ec:	431bde83 	.word	0x431bde83

0800b5f0 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b083      	sub	sp, #12
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 800b5f8:	4b06      	ldr	r3, [pc, #24]	; (800b614 <HAL_SPI_RxCpltCallback+0x24>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d002      	beq.n	800b606 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 800b600:	4b04      	ldr	r3, [pc, #16]	; (800b614 <HAL_SPI_RxCpltCallback+0x24>)
 800b602:	2200      	movs	r2, #0
 800b604:	601a      	str	r2, [r3, #0]
  }
}
 800b606:	bf00      	nop
 800b608:	370c      	adds	r7, #12
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop
 800b614:	20001278 	.word	0x20001278

0800b618 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b618:	b480      	push	{r7}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 800b620:	4b06      	ldr	r3, [pc, #24]	; (800b63c <HAL_SPI_TxCpltCallback+0x24>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d002      	beq.n	800b62e <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 800b628:	4b04      	ldr	r3, [pc, #16]	; (800b63c <HAL_SPI_TxCpltCallback+0x24>)
 800b62a:	2200      	movs	r2, #0
 800b62c:	601a      	str	r2, [r3, #0]
  }
}
 800b62e:	bf00      	nop
 800b630:	370c      	adds	r7, #12
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr
 800b63a:	bf00      	nop
 800b63c:	2000127c 	.word	0x2000127c

0800b640 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 800b640:	b480      	push	{r7}
 800b642:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 800b644:	4b05      	ldr	r3, [pc, #20]	; (800b65c <SPI_WIFI_ISR+0x1c>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d102      	bne.n	800b652 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 800b64c:	4b03      	ldr	r3, [pc, #12]	; (800b65c <SPI_WIFI_ISR+0x1c>)
 800b64e:	2200      	movs	r2, #0
 800b650:	601a      	str	r2, [r3, #0]
   }
}
 800b652:	bf00      	nop
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr
 800b65c:	20001280 	.word	0x20001280

0800b660 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b666:	2301      	movs	r3, #1
 800b668:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 800b66a:	4b0d      	ldr	r3, [pc, #52]	; (800b6a0 <WIFI_Init+0x40>)
 800b66c:	9301      	str	r3, [sp, #4]
 800b66e:	4b0d      	ldr	r3, [pc, #52]	; (800b6a4 <WIFI_Init+0x44>)
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	4b0d      	ldr	r3, [pc, #52]	; (800b6a8 <WIFI_Init+0x48>)
 800b674:	4a0d      	ldr	r2, [pc, #52]	; (800b6ac <WIFI_Init+0x4c>)
 800b676:	490e      	ldr	r1, [pc, #56]	; (800b6b0 <WIFI_Init+0x50>)
 800b678:	480e      	ldr	r0, [pc, #56]	; (800b6b4 <WIFI_Init+0x54>)
 800b67a:	f7fe ff1d 	bl	800a4b8 <ES_WIFI_RegisterBusIO>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d107      	bne.n	800b694 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800b684:	480b      	ldr	r0, [pc, #44]	; (800b6b4 <WIFI_Init+0x54>)
 800b686:	f7fe fee9 	bl	800a45c <ES_WIFI_Init>
 800b68a:	4603      	mov	r3, r0
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d101      	bne.n	800b694 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 800b690:	2300      	movs	r3, #0
 800b692:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 800b694:	79fb      	ldrb	r3, [r7, #7]
}
 800b696:	4618      	mov	r0, r3
 800b698:	3708      	adds	r7, #8
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	0800b365 	.word	0x0800b365
 800b6a4:	0800b459 	.word	0x0800b459
 800b6a8:	0800b535 	.word	0x0800b535
 800b6ac:	0800b24d 	.word	0x0800b24d
 800b6b0:	0800b0b1 	.word	0x0800b0b1
 800b6b4:	20001288 	.word	0x20001288

0800b6b8 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b086      	sub	sp, #24
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	4613      	mov	r3, r2
 800b6c4:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800b6ca:	79fb      	ldrb	r3, [r7, #7]
 800b6cc:	68ba      	ldr	r2, [r7, #8]
 800b6ce:	68f9      	ldr	r1, [r7, #12]
 800b6d0:	4809      	ldr	r0, [pc, #36]	; (800b6f8 <WIFI_Connect+0x40>)
 800b6d2:	f7fe ff25 	bl	800a520 <ES_WIFI_Connect>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d107      	bne.n	800b6ec <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800b6dc:	4806      	ldr	r0, [pc, #24]	; (800b6f8 <WIFI_Connect+0x40>)
 800b6de:	f7fe ffc3 	bl	800a668 <ES_WIFI_GetNetworkSettings>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d101      	bne.n	800b6ec <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 800b6ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3718      	adds	r7, #24
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	20001288 	.word	0x20001288

0800b6fc <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b704:	2301      	movs	r3, #1
 800b706:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 800b708:	6879      	ldr	r1, [r7, #4]
 800b70a:	4806      	ldr	r0, [pc, #24]	; (800b724 <WIFI_GetMAC_Address+0x28>)
 800b70c:	f7fe ffd6 	bl	800a6bc <ES_WIFI_GetMACAddress>
 800b710:	4603      	mov	r3, r0
 800b712:	2b00      	cmp	r3, #0
 800b714:	d101      	bne.n	800b71a <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800b716:	2300      	movs	r3, #0
 800b718:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800b71a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3710      	adds	r7, #16
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	20001288 	.word	0x20001288

0800b728 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b730:	2301      	movs	r3, #1
 800b732:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 800b734:	4809      	ldr	r0, [pc, #36]	; (800b75c <WIFI_GetIP_Address+0x34>)
 800b736:	f7fe ff6b 	bl	800a610 <ES_WIFI_IsConnected>
 800b73a:	4603      	mov	r3, r0
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	d107      	bne.n	800b750 <WIFI_GetIP_Address+0x28>
 800b740:	4b06      	ldr	r3, [pc, #24]	; (800b75c <WIFI_GetIP_Address+0x34>)
 800b742:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 800b746:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 800b74c:	2300      	movs	r3, #0
 800b74e:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800b750:	7bfb      	ldrb	r3, [r7, #15]
}
 800b752:	4618      	mov	r0, r3
 800b754:	3710      	adds	r7, #16
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop
 800b75c:	20001288 	.word	0x20001288

0800b760 <WIFI_StartServer>:
  * @param  name : name of the connection
  * @param  port : Remote port
  * @retval Operation status
  */
WIFI_Status_t WIFI_StartServer(uint32_t socket, WIFI_Protocol_t protocol, uint16_t backlog ,const char *name, uint16_t port)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b08a      	sub	sp, #40	; 0x28
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	607b      	str	r3, [r7, #4]
 800b76a:	460b      	mov	r3, r1
 800b76c:	72fb      	strb	r3, [r7, #11]
 800b76e:	4613      	mov	r3, r2
 800b770:	813b      	strh	r3, [r7, #8]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b772:	2301      	movs	r3, #1
 800b774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	747b      	strb	r3, [r7, #17]
  conn.LocalPort = port;
 800b77e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b780:	82bb      	strh	r3, [r7, #20]
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800b782:	7afb      	ldrb	r3, [r7, #11]
 800b784:	2b00      	cmp	r3, #0
 800b786:	bf14      	ite	ne
 800b788:	2301      	movne	r3, #1
 800b78a:	2300      	moveq	r3, #0
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	743b      	strb	r3, [r7, #16]
  conn.Backlog = backlog;
 800b790:	893b      	ldrh	r3, [r7, #8]
 800b792:	b2db      	uxtb	r3, r3
 800b794:	f887 3020 	strb.w	r3, [r7, #32]
  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800b798:	f107 0310 	add.w	r3, r7, #16
 800b79c:	4619      	mov	r1, r3
 800b79e:	4807      	ldr	r0, [pc, #28]	; (800b7bc <WIFI_StartServer+0x5c>)
 800b7a0:	f7fe ffbe 	bl	800a720 <ES_WIFI_StartServerSingleConn>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d102      	bne.n	800b7b0 <WIFI_StartServer+0x50>
  {
    ret = WIFI_STATUS_OK;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800b7b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3728      	adds	r7, #40	; 0x28
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}
 800b7bc:	20001288 	.word	0x20001288

0800b7c0 <WIFI_WaitServerConnection>:
  * @brief  Wait for a client connection to the server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_WaitServerConnection(int socket,uint32_t Timeout,uint8_t *RemoteIp,uint16_t *RemotePort)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b08a      	sub	sp, #40	; 0x28
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	607a      	str	r2, [r7, #4]
 800b7cc:	603b      	str	r3, [r7, #0]
  ES_WIFI_Conn_t conn;
  ES_WIFI_Status_t ret;
  
  conn.Number = socket;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	b2db      	uxtb	r3, r3
 800b7d2:	747b      	strb	r3, [r7, #17]

  ret = ES_WIFI_WaitServerConnection(&EsWifiObj,Timeout,&conn);
 800b7d4:	f107 0310 	add.w	r3, r7, #16
 800b7d8:	461a      	mov	r2, r3
 800b7da:	68b9      	ldr	r1, [r7, #8]
 800b7dc:	4819      	ldr	r0, [pc, #100]	; (800b844 <WIFI_WaitServerConnection+0x84>)
 800b7de:	f7ff f84b 	bl	800a878 <ES_WIFI_WaitServerConnection>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ES_WIFI_STATUS_OK == ret)
 800b7e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d10f      	bne.n	800b810 <WIFI_WaitServerConnection+0x50>
  {
    if (RemotePort) *RemotePort=conn.RemotePort;
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d002      	beq.n	800b7fc <WIFI_WaitServerConnection+0x3c>
 800b7f6:	8a7a      	ldrh	r2, [r7, #18]
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	801a      	strh	r2, [r3, #0]
    if (RemoteIp)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d004      	beq.n	800b80c <WIFI_WaitServerConnection+0x4c>
 800b802:	f8d7 3016 	ldr.w	r3, [r7, #22]
 800b806:	461a      	mov	r2, r3
    {
      memcpy(RemoteIp,conn.RemoteIP,sizeof(conn.RemoteIP));
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	601a      	str	r2, [r3, #0]
    }
    return  WIFI_STATUS_OK;
 800b80c:	2300      	movs	r3, #0
 800b80e:	e014      	b.n	800b83a <WIFI_WaitServerConnection+0x7a>
  }
  
  if (ES_WIFI_STATUS_TIMEOUT ==ret)
 800b810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b814:	2b03      	cmp	r3, #3
 800b816:	d10f      	bne.n	800b838 <WIFI_WaitServerConnection+0x78>
  {
    if (RemotePort) *RemotePort=0;
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d002      	beq.n	800b824 <WIFI_WaitServerConnection+0x64>
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	2200      	movs	r2, #0
 800b822:	801a      	strh	r2, [r3, #0]
    if (RemoteIp)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d004      	beq.n	800b834 <WIFI_WaitServerConnection+0x74>
    {
      memset(RemoteIp,0,sizeof(conn.RemoteIP));
 800b82a:	2204      	movs	r2, #4
 800b82c:	2100      	movs	r1, #0
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f003 ff8a 	bl	800f748 <memset>
    }
    return  WIFI_STATUS_TIMEOUT;
 800b834:	2305      	movs	r3, #5
 800b836:	e000      	b.n	800b83a <WIFI_WaitServerConnection+0x7a>
  }

  return WIFI_STATUS_ERROR;
 800b838:	2301      	movs	r3, #1
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3728      	adds	r7, #40	; 0x28
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	20001288 	.word	0x20001288

0800b848 <WIFI_CloseServerConnection>:
/**
  * @brief  Close current connection from a client  to the server
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseServerConnection(int socket)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b850:	2301      	movs	r3, #1
 800b852:	73fb      	strb	r3, [r7, #15]
  if (ES_WIFI_STATUS_OK == ES_WIFI_CloseServerConnection(&EsWifiObj,socket))
 800b854:	6879      	ldr	r1, [r7, #4]
 800b856:	4806      	ldr	r0, [pc, #24]	; (800b870 <WIFI_CloseServerConnection+0x28>)
 800b858:	f7ff f930 	bl	800aabc <ES_WIFI_CloseServerConnection>
 800b85c:	4603      	mov	r3, r0
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d101      	bne.n	800b866 <WIFI_CloseServerConnection+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800b862:	2300      	movs	r3, #0
 800b864:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800b866:	7bfb      	ldrb	r3, [r7, #15]
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3710      	adds	r7, #16
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}
 800b870:	20001288 	.word	0x20001288

0800b874 <WIFI_StopServer>:
  * @brief  Stop a server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_StopServer(uint32_t socket)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b87c:	2301      	movs	r3, #1
 800b87e:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_StopServerSingleConn(&EsWifiObj,socket)== ES_WIFI_STATUS_OK)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	4619      	mov	r1, r3
 800b884:	4806      	ldr	r0, [pc, #24]	; (800b8a0 <WIFI_StopServer+0x2c>)
 800b886:	f7ff f979 	bl	800ab7c <ES_WIFI_StopServerSingleConn>
 800b88a:	4603      	mov	r3, r0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d101      	bne.n	800b894 <WIFI_StopServer+0x20>
  {
    ret = WIFI_STATUS_OK;
 800b890:	2300      	movs	r3, #0
 800b892:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800b894:	7bfb      	ldrb	r3, [r7, #15]
}
 800b896:	4618      	mov	r0, r3
 800b898:	3710      	adds	r7, #16
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	20001288 	.word	0x20001288

0800b8a4 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b088      	sub	sp, #32
 800b8a8:	af02      	add	r7, sp, #8
 800b8aa:	60b9      	str	r1, [r7, #8]
 800b8ac:	607b      	str	r3, [r7, #4]
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	73fb      	strb	r3, [r7, #15]
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800b8ba:	89ba      	ldrh	r2, [r7, #12]
 800b8bc:	7bf9      	ldrb	r1, [r7, #15]
 800b8be:	6a3b      	ldr	r3, [r7, #32]
 800b8c0:	9301      	str	r3, [sp, #4]
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	9300      	str	r3, [sp, #0]
 800b8c6:	4613      	mov	r3, r2
 800b8c8:	68ba      	ldr	r2, [r7, #8]
 800b8ca:	4806      	ldr	r0, [pc, #24]	; (800b8e4 <WIFI_SendData+0x40>)
 800b8cc:	f7ff f9b8 	bl	800ac40 <ES_WIFI_SendData>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d101      	bne.n	800b8da <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 800b8da:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3718      	adds	r7, #24
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}
 800b8e4:	20001288 	.word	0x20001288

0800b8e8 <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b088      	sub	sp, #32
 800b8ec:	af02      	add	r7, sp, #8
 800b8ee:	60b9      	str	r1, [r7, #8]
 800b8f0:	607b      	str	r3, [r7, #4]
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	73fb      	strb	r3, [r7, #15]
 800b8f6:	4613      	mov	r3, r2
 800b8f8:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800b8fe:	89ba      	ldrh	r2, [r7, #12]
 800b900:	7bf9      	ldrb	r1, [r7, #15]
 800b902:	6a3b      	ldr	r3, [r7, #32]
 800b904:	9301      	str	r3, [sp, #4]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	4613      	mov	r3, r2
 800b90c:	68ba      	ldr	r2, [r7, #8]
 800b90e:	4806      	ldr	r0, [pc, #24]	; (800b928 <WIFI_ReceiveData+0x40>)
 800b910:	f7ff fa52 	bl	800adb8 <ES_WIFI_ReceiveData>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d101      	bne.n	800b91e <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 800b91a:	2300      	movs	r3, #0
 800b91c:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 800b91e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b920:	4618      	mov	r0, r3
 800b922:	3718      	adds	r7, #24
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	20001288 	.word	0x20001288

0800b92c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b92c:	b480      	push	{r7}
 800b92e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800b930:	bf00      	nop
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr
	...

0800b93c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b93c:	b480      	push	{r7}
 800b93e:	b085      	sub	sp, #20
 800b940:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b942:	f3ef 8305 	mrs	r3, IPSR
 800b946:	60bb      	str	r3, [r7, #8]
  return(result);
 800b948:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d10f      	bne.n	800b96e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b94e:	f3ef 8310 	mrs	r3, PRIMASK
 800b952:	607b      	str	r3, [r7, #4]
  return(result);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d105      	bne.n	800b966 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b95a:	f3ef 8311 	mrs	r3, BASEPRI
 800b95e:	603b      	str	r3, [r7, #0]
  return(result);
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d007      	beq.n	800b976 <osKernelInitialize+0x3a>
 800b966:	4b0e      	ldr	r3, [pc, #56]	; (800b9a0 <osKernelInitialize+0x64>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	2b02      	cmp	r3, #2
 800b96c:	d103      	bne.n	800b976 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800b96e:	f06f 0305 	mvn.w	r3, #5
 800b972:	60fb      	str	r3, [r7, #12]
 800b974:	e00c      	b.n	800b990 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b976:	4b0a      	ldr	r3, [pc, #40]	; (800b9a0 <osKernelInitialize+0x64>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d105      	bne.n	800b98a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b97e:	4b08      	ldr	r3, [pc, #32]	; (800b9a0 <osKernelInitialize+0x64>)
 800b980:	2201      	movs	r2, #1
 800b982:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b984:	2300      	movs	r3, #0
 800b986:	60fb      	str	r3, [r7, #12]
 800b988:	e002      	b.n	800b990 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800b98a:	f04f 33ff 	mov.w	r3, #4294967295
 800b98e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b990:	68fb      	ldr	r3, [r7, #12]
}
 800b992:	4618      	mov	r0, r3
 800b994:	3714      	adds	r7, #20
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	20001b88 	.word	0x20001b88

0800b9a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9aa:	f3ef 8305 	mrs	r3, IPSR
 800b9ae:	60bb      	str	r3, [r7, #8]
  return(result);
 800b9b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d10f      	bne.n	800b9d6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9b6:	f3ef 8310 	mrs	r3, PRIMASK
 800b9ba:	607b      	str	r3, [r7, #4]
  return(result);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d105      	bne.n	800b9ce <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b9c2:	f3ef 8311 	mrs	r3, BASEPRI
 800b9c6:	603b      	str	r3, [r7, #0]
  return(result);
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d007      	beq.n	800b9de <osKernelStart+0x3a>
 800b9ce:	4b0f      	ldr	r3, [pc, #60]	; (800ba0c <osKernelStart+0x68>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	2b02      	cmp	r3, #2
 800b9d4:	d103      	bne.n	800b9de <osKernelStart+0x3a>
    stat = osErrorISR;
 800b9d6:	f06f 0305 	mvn.w	r3, #5
 800b9da:	60fb      	str	r3, [r7, #12]
 800b9dc:	e010      	b.n	800ba00 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b9de:	4b0b      	ldr	r3, [pc, #44]	; (800ba0c <osKernelStart+0x68>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d109      	bne.n	800b9fa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b9e6:	f7ff ffa1 	bl	800b92c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b9ea:	4b08      	ldr	r3, [pc, #32]	; (800ba0c <osKernelStart+0x68>)
 800b9ec:	2202      	movs	r2, #2
 800b9ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b9f0:	f001 f972 	bl	800ccd8 <vTaskStartScheduler>
      stat = osOK;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	60fb      	str	r3, [r7, #12]
 800b9f8:	e002      	b.n	800ba00 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800b9fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b9fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ba00:	68fb      	ldr	r3, [r7, #12]
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	20001b88 	.word	0x20001b88

0800ba10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ba10:	b480      	push	{r7}
 800ba12:	b085      	sub	sp, #20
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	4a07      	ldr	r2, [pc, #28]	; (800ba3c <vApplicationGetIdleTaskMemory+0x2c>)
 800ba20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	4a06      	ldr	r2, [pc, #24]	; (800ba40 <vApplicationGetIdleTaskMemory+0x30>)
 800ba26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2280      	movs	r2, #128	; 0x80
 800ba2c:	601a      	str	r2, [r3, #0]
}
 800ba2e:	bf00      	nop
 800ba30:	3714      	adds	r7, #20
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop
 800ba3c:	20001b8c 	.word	0x20001b8c
 800ba40:	20001be8 	.word	0x20001be8

0800ba44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ba44:	b480      	push	{r7}
 800ba46:	b085      	sub	sp, #20
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	60f8      	str	r0, [r7, #12]
 800ba4c:	60b9      	str	r1, [r7, #8]
 800ba4e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	4a07      	ldr	r2, [pc, #28]	; (800ba70 <vApplicationGetTimerTaskMemory+0x2c>)
 800ba54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	4a06      	ldr	r2, [pc, #24]	; (800ba74 <vApplicationGetTimerTaskMemory+0x30>)
 800ba5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba62:	601a      	str	r2, [r3, #0]
}
 800ba64:	bf00      	nop
 800ba66:	3714      	adds	r7, #20
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr
 800ba70:	20001de8 	.word	0x20001de8
 800ba74:	20001e44 	.word	0x20001e44

0800ba78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b083      	sub	sp, #12
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f103 0208 	add.w	r2, r3, #8
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f103 0208 	add.w	r2, r3, #8
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f103 0208 	add.w	r2, r3, #8
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2200      	movs	r2, #0
 800baaa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800baac:	bf00      	nop
 800baae:	370c      	adds	r7, #12
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr

0800bab8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2200      	movs	r2, #0
 800bac4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bac6:	bf00      	nop
 800bac8:	370c      	adds	r7, #12
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr

0800bad2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bad2:	b480      	push	{r7}
 800bad4:	b085      	sub	sp, #20
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
 800bada:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	68fa      	ldr	r2, [r7, #12]
 800bae6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	689a      	ldr	r2, [r3, #8]
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	689b      	ldr	r3, [r3, #8]
 800baf4:	683a      	ldr	r2, [r7, #0]
 800baf6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	683a      	ldr	r2, [r7, #0]
 800bafc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	1c5a      	adds	r2, r3, #1
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	601a      	str	r2, [r3, #0]
}
 800bb0e:	bf00      	nop
 800bb10:	3714      	adds	r7, #20
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr

0800bb1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb1a:	b480      	push	{r7}
 800bb1c:	b085      	sub	sp, #20
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
 800bb22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb30:	d103      	bne.n	800bb3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	691b      	ldr	r3, [r3, #16]
 800bb36:	60fb      	str	r3, [r7, #12]
 800bb38:	e00c      	b.n	800bb54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	3308      	adds	r3, #8
 800bb3e:	60fb      	str	r3, [r7, #12]
 800bb40:	e002      	b.n	800bb48 <vListInsert+0x2e>
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	60fb      	str	r3, [r7, #12]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	68ba      	ldr	r2, [r7, #8]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d2f6      	bcs.n	800bb42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	685a      	ldr	r2, [r3, #4]
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	683a      	ldr	r2, [r7, #0]
 800bb62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	68fa      	ldr	r2, [r7, #12]
 800bb68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	683a      	ldr	r2, [r7, #0]
 800bb6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	1c5a      	adds	r2, r3, #1
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	601a      	str	r2, [r3, #0]
}
 800bb80:	bf00      	nop
 800bb82:	3714      	adds	r7, #20
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr

0800bb8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b085      	sub	sp, #20
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	691b      	ldr	r3, [r3, #16]
 800bb98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	6892      	ldr	r2, [r2, #8]
 800bba2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	689b      	ldr	r3, [r3, #8]
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	6852      	ldr	r2, [r2, #4]
 800bbac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d103      	bne.n	800bbc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	689a      	ldr	r2, [r3, #8]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	1e5a      	subs	r2, r3, #1
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3714      	adds	r7, #20
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d10a      	bne.n	800bc0a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf8:	f383 8811 	msr	BASEPRI, r3
 800bbfc:	f3bf 8f6f 	isb	sy
 800bc00:	f3bf 8f4f 	dsb	sy
 800bc04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bc06:	bf00      	nop
 800bc08:	e7fe      	b.n	800bc08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bc0a:	f002 fc03 	bl	800e414 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681a      	ldr	r2, [r3, #0]
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc16:	68f9      	ldr	r1, [r7, #12]
 800bc18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bc1a:	fb01 f303 	mul.w	r3, r1, r3
 800bc1e:	441a      	add	r2, r3
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2200      	movs	r2, #0
 800bc28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc3a:	3b01      	subs	r3, #1
 800bc3c:	68f9      	ldr	r1, [r7, #12]
 800bc3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bc40:	fb01 f303 	mul.w	r3, r1, r3
 800bc44:	441a      	add	r2, r3
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	22ff      	movs	r2, #255	; 0xff
 800bc4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	22ff      	movs	r2, #255	; 0xff
 800bc56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d114      	bne.n	800bc8a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	691b      	ldr	r3, [r3, #16]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d01a      	beq.n	800bc9e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	3310      	adds	r3, #16
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f001 fabd 	bl	800d1ec <xTaskRemoveFromEventList>
 800bc72:	4603      	mov	r3, r0
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d012      	beq.n	800bc9e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bc78:	4b0c      	ldr	r3, [pc, #48]	; (800bcac <xQueueGenericReset+0xcc>)
 800bc7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc7e:	601a      	str	r2, [r3, #0]
 800bc80:	f3bf 8f4f 	dsb	sy
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	e009      	b.n	800bc9e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	3310      	adds	r3, #16
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7ff fef2 	bl	800ba78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	3324      	adds	r3, #36	; 0x24
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7ff feed 	bl	800ba78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bc9e:	f002 fbe9 	bl	800e474 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bca2:	2301      	movs	r3, #1
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3710      	adds	r7, #16
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	e000ed04 	.word	0xe000ed04

0800bcb0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b08e      	sub	sp, #56	; 0x38
 800bcb4:	af02      	add	r7, sp, #8
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	607a      	str	r2, [r7, #4]
 800bcbc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d10a      	bne.n	800bcda <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bcc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc8:	f383 8811 	msr	BASEPRI, r3
 800bccc:	f3bf 8f6f 	isb	sy
 800bcd0:	f3bf 8f4f 	dsb	sy
 800bcd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bcd6:	bf00      	nop
 800bcd8:	e7fe      	b.n	800bcd8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d10a      	bne.n	800bcf6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce4:	f383 8811 	msr	BASEPRI, r3
 800bce8:	f3bf 8f6f 	isb	sy
 800bcec:	f3bf 8f4f 	dsb	sy
 800bcf0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bcf2:	bf00      	nop
 800bcf4:	e7fe      	b.n	800bcf4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d002      	beq.n	800bd02 <xQueueGenericCreateStatic+0x52>
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d001      	beq.n	800bd06 <xQueueGenericCreateStatic+0x56>
 800bd02:	2301      	movs	r3, #1
 800bd04:	e000      	b.n	800bd08 <xQueueGenericCreateStatic+0x58>
 800bd06:	2300      	movs	r3, #0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d10a      	bne.n	800bd22 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd10:	f383 8811 	msr	BASEPRI, r3
 800bd14:	f3bf 8f6f 	isb	sy
 800bd18:	f3bf 8f4f 	dsb	sy
 800bd1c:	623b      	str	r3, [r7, #32]
}
 800bd1e:	bf00      	nop
 800bd20:	e7fe      	b.n	800bd20 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d102      	bne.n	800bd2e <xQueueGenericCreateStatic+0x7e>
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d101      	bne.n	800bd32 <xQueueGenericCreateStatic+0x82>
 800bd2e:	2301      	movs	r3, #1
 800bd30:	e000      	b.n	800bd34 <xQueueGenericCreateStatic+0x84>
 800bd32:	2300      	movs	r3, #0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d10a      	bne.n	800bd4e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bd38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3c:	f383 8811 	msr	BASEPRI, r3
 800bd40:	f3bf 8f6f 	isb	sy
 800bd44:	f3bf 8f4f 	dsb	sy
 800bd48:	61fb      	str	r3, [r7, #28]
}
 800bd4a:	bf00      	nop
 800bd4c:	e7fe      	b.n	800bd4c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bd4e:	2350      	movs	r3, #80	; 0x50
 800bd50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	2b50      	cmp	r3, #80	; 0x50
 800bd56:	d00a      	beq.n	800bd6e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bd58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5c:	f383 8811 	msr	BASEPRI, r3
 800bd60:	f3bf 8f6f 	isb	sy
 800bd64:	f3bf 8f4f 	dsb	sy
 800bd68:	61bb      	str	r3, [r7, #24]
}
 800bd6a:	bf00      	nop
 800bd6c:	e7fe      	b.n	800bd6c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bd6e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d00d      	beq.n	800bd96 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bd82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd88:	9300      	str	r3, [sp, #0]
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	68b9      	ldr	r1, [r7, #8]
 800bd90:	68f8      	ldr	r0, [r7, #12]
 800bd92:	f000 f845 	bl	800be20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bd96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3730      	adds	r7, #48	; 0x30
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b08a      	sub	sp, #40	; 0x28
 800bda4:	af02      	add	r7, sp, #8
 800bda6:	60f8      	str	r0, [r7, #12]
 800bda8:	60b9      	str	r1, [r7, #8]
 800bdaa:	4613      	mov	r3, r2
 800bdac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d10a      	bne.n	800bdca <xQueueGenericCreate+0x2a>
	__asm volatile
 800bdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb8:	f383 8811 	msr	BASEPRI, r3
 800bdbc:	f3bf 8f6f 	isb	sy
 800bdc0:	f3bf 8f4f 	dsb	sy
 800bdc4:	613b      	str	r3, [r7, #16]
}
 800bdc6:	bf00      	nop
 800bdc8:	e7fe      	b.n	800bdc8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d102      	bne.n	800bdd6 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	61fb      	str	r3, [r7, #28]
 800bdd4:	e004      	b.n	800bde0 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	68ba      	ldr	r2, [r7, #8]
 800bdda:	fb02 f303 	mul.w	r3, r2, r3
 800bdde:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	3350      	adds	r3, #80	; 0x50
 800bde4:	4618      	mov	r0, r3
 800bde6:	f002 fc37 	bl	800e658 <pvPortMalloc>
 800bdea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bdec:	69bb      	ldr	r3, [r7, #24]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d011      	beq.n	800be16 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bdf2:	69bb      	ldr	r3, [r7, #24]
 800bdf4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	3350      	adds	r3, #80	; 0x50
 800bdfa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bdfc:	69bb      	ldr	r3, [r7, #24]
 800bdfe:	2200      	movs	r2, #0
 800be00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800be04:	79fa      	ldrb	r2, [r7, #7]
 800be06:	69bb      	ldr	r3, [r7, #24]
 800be08:	9300      	str	r3, [sp, #0]
 800be0a:	4613      	mov	r3, r2
 800be0c:	697a      	ldr	r2, [r7, #20]
 800be0e:	68b9      	ldr	r1, [r7, #8]
 800be10:	68f8      	ldr	r0, [r7, #12]
 800be12:	f000 f805 	bl	800be20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800be16:	69bb      	ldr	r3, [r7, #24]
	}
 800be18:	4618      	mov	r0, r3
 800be1a:	3720      	adds	r7, #32
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	607a      	str	r2, [r7, #4]
 800be2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d103      	bne.n	800be3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	69ba      	ldr	r2, [r7, #24]
 800be38:	601a      	str	r2, [r3, #0]
 800be3a:	e002      	b.n	800be42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800be3c:	69bb      	ldr	r3, [r7, #24]
 800be3e:	687a      	ldr	r2, [r7, #4]
 800be40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800be42:	69bb      	ldr	r3, [r7, #24]
 800be44:	68fa      	ldr	r2, [r7, #12]
 800be46:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800be48:	69bb      	ldr	r3, [r7, #24]
 800be4a:	68ba      	ldr	r2, [r7, #8]
 800be4c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800be4e:	2101      	movs	r1, #1
 800be50:	69b8      	ldr	r0, [r7, #24]
 800be52:	f7ff fec5 	bl	800bbe0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800be56:	69bb      	ldr	r3, [r7, #24]
 800be58:	78fa      	ldrb	r2, [r7, #3]
 800be5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800be5e:	bf00      	nop
 800be60:	3710      	adds	r7, #16
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
	...

0800be68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b08e      	sub	sp, #56	; 0x38
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	60b9      	str	r1, [r7, #8]
 800be72:	607a      	str	r2, [r7, #4]
 800be74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800be76:	2300      	movs	r3, #0
 800be78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be80:	2b00      	cmp	r3, #0
 800be82:	d10a      	bne.n	800be9a <xQueueGenericSend+0x32>
	__asm volatile
 800be84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be96:	bf00      	nop
 800be98:	e7fe      	b.n	800be98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d103      	bne.n	800bea8 <xQueueGenericSend+0x40>
 800bea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d101      	bne.n	800beac <xQueueGenericSend+0x44>
 800bea8:	2301      	movs	r3, #1
 800beaa:	e000      	b.n	800beae <xQueueGenericSend+0x46>
 800beac:	2300      	movs	r3, #0
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d10a      	bne.n	800bec8 <xQueueGenericSend+0x60>
	__asm volatile
 800beb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb6:	f383 8811 	msr	BASEPRI, r3
 800beba:	f3bf 8f6f 	isb	sy
 800bebe:	f3bf 8f4f 	dsb	sy
 800bec2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bec4:	bf00      	nop
 800bec6:	e7fe      	b.n	800bec6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	2b02      	cmp	r3, #2
 800becc:	d103      	bne.n	800bed6 <xQueueGenericSend+0x6e>
 800bece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	d101      	bne.n	800beda <xQueueGenericSend+0x72>
 800bed6:	2301      	movs	r3, #1
 800bed8:	e000      	b.n	800bedc <xQueueGenericSend+0x74>
 800beda:	2300      	movs	r3, #0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d10a      	bne.n	800bef6 <xQueueGenericSend+0x8e>
	__asm volatile
 800bee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee4:	f383 8811 	msr	BASEPRI, r3
 800bee8:	f3bf 8f6f 	isb	sy
 800beec:	f3bf 8f4f 	dsb	sy
 800bef0:	623b      	str	r3, [r7, #32]
}
 800bef2:	bf00      	nop
 800bef4:	e7fe      	b.n	800bef4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bef6:	f001 fb37 	bl	800d568 <xTaskGetSchedulerState>
 800befa:	4603      	mov	r3, r0
 800befc:	2b00      	cmp	r3, #0
 800befe:	d102      	bne.n	800bf06 <xQueueGenericSend+0x9e>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d101      	bne.n	800bf0a <xQueueGenericSend+0xa2>
 800bf06:	2301      	movs	r3, #1
 800bf08:	e000      	b.n	800bf0c <xQueueGenericSend+0xa4>
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d10a      	bne.n	800bf26 <xQueueGenericSend+0xbe>
	__asm volatile
 800bf10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf14:	f383 8811 	msr	BASEPRI, r3
 800bf18:	f3bf 8f6f 	isb	sy
 800bf1c:	f3bf 8f4f 	dsb	sy
 800bf20:	61fb      	str	r3, [r7, #28]
}
 800bf22:	bf00      	nop
 800bf24:	e7fe      	b.n	800bf24 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf26:	f002 fa75 	bl	800e414 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d302      	bcc.n	800bf3c <xQueueGenericSend+0xd4>
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	2b02      	cmp	r3, #2
 800bf3a:	d129      	bne.n	800bf90 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf3c:	683a      	ldr	r2, [r7, #0]
 800bf3e:	68b9      	ldr	r1, [r7, #8]
 800bf40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf42:	f000 fbb9 	bl	800c6b8 <prvCopyDataToQueue>
 800bf46:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d010      	beq.n	800bf72 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf52:	3324      	adds	r3, #36	; 0x24
 800bf54:	4618      	mov	r0, r3
 800bf56:	f001 f949 	bl	800d1ec <xTaskRemoveFromEventList>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d013      	beq.n	800bf88 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bf60:	4b3f      	ldr	r3, [pc, #252]	; (800c060 <xQueueGenericSend+0x1f8>)
 800bf62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf66:	601a      	str	r2, [r3, #0]
 800bf68:	f3bf 8f4f 	dsb	sy
 800bf6c:	f3bf 8f6f 	isb	sy
 800bf70:	e00a      	b.n	800bf88 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d007      	beq.n	800bf88 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bf78:	4b39      	ldr	r3, [pc, #228]	; (800c060 <xQueueGenericSend+0x1f8>)
 800bf7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf7e:	601a      	str	r2, [r3, #0]
 800bf80:	f3bf 8f4f 	dsb	sy
 800bf84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bf88:	f002 fa74 	bl	800e474 <vPortExitCritical>
				return pdPASS;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	e063      	b.n	800c058 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d103      	bne.n	800bf9e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bf96:	f002 fa6d 	bl	800e474 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	e05c      	b.n	800c058 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d106      	bne.n	800bfb2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bfa4:	f107 0314 	add.w	r3, r7, #20
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f001 f983 	bl	800d2b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bfb2:	f002 fa5f 	bl	800e474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bfb6:	f000 fef5 	bl	800cda4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bfba:	f002 fa2b 	bl	800e414 <vPortEnterCritical>
 800bfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfc4:	b25b      	sxtb	r3, r3
 800bfc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfca:	d103      	bne.n	800bfd4 <xQueueGenericSend+0x16c>
 800bfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfce:	2200      	movs	r2, #0
 800bfd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfda:	b25b      	sxtb	r3, r3
 800bfdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfe0:	d103      	bne.n	800bfea <xQueueGenericSend+0x182>
 800bfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bfea:	f002 fa43 	bl	800e474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bfee:	1d3a      	adds	r2, r7, #4
 800bff0:	f107 0314 	add.w	r3, r7, #20
 800bff4:	4611      	mov	r1, r2
 800bff6:	4618      	mov	r0, r3
 800bff8:	f001 f972 	bl	800d2e0 <xTaskCheckForTimeOut>
 800bffc:	4603      	mov	r3, r0
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d124      	bne.n	800c04c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c002:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c004:	f000 fc50 	bl	800c8a8 <prvIsQueueFull>
 800c008:	4603      	mov	r3, r0
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d018      	beq.n	800c040 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c010:	3310      	adds	r3, #16
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	4611      	mov	r1, r2
 800c016:	4618      	mov	r0, r3
 800c018:	f001 f898 	bl	800d14c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c01c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c01e:	f000 fbdb 	bl	800c7d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c022:	f000 fecd 	bl	800cdc0 <xTaskResumeAll>
 800c026:	4603      	mov	r3, r0
 800c028:	2b00      	cmp	r3, #0
 800c02a:	f47f af7c 	bne.w	800bf26 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c02e:	4b0c      	ldr	r3, [pc, #48]	; (800c060 <xQueueGenericSend+0x1f8>)
 800c030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c034:	601a      	str	r2, [r3, #0]
 800c036:	f3bf 8f4f 	dsb	sy
 800c03a:	f3bf 8f6f 	isb	sy
 800c03e:	e772      	b.n	800bf26 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c042:	f000 fbc9 	bl	800c7d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c046:	f000 febb 	bl	800cdc0 <xTaskResumeAll>
 800c04a:	e76c      	b.n	800bf26 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c04c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c04e:	f000 fbc3 	bl	800c7d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c052:	f000 feb5 	bl	800cdc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c056:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3738      	adds	r7, #56	; 0x38
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	e000ed04 	.word	0xe000ed04

0800c064 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b08e      	sub	sp, #56	; 0x38
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	607a      	str	r2, [r7, #4]
 800c070:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d10a      	bne.n	800c092 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c080:	f383 8811 	msr	BASEPRI, r3
 800c084:	f3bf 8f6f 	isb	sy
 800c088:	f3bf 8f4f 	dsb	sy
 800c08c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c08e:	bf00      	nop
 800c090:	e7fe      	b.n	800c090 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d103      	bne.n	800c0a0 <xQueueGenericSendFromISR+0x3c>
 800c098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d101      	bne.n	800c0a4 <xQueueGenericSendFromISR+0x40>
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	e000      	b.n	800c0a6 <xQueueGenericSendFromISR+0x42>
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d10a      	bne.n	800c0c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ae:	f383 8811 	msr	BASEPRI, r3
 800c0b2:	f3bf 8f6f 	isb	sy
 800c0b6:	f3bf 8f4f 	dsb	sy
 800c0ba:	623b      	str	r3, [r7, #32]
}
 800c0bc:	bf00      	nop
 800c0be:	e7fe      	b.n	800c0be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	2b02      	cmp	r3, #2
 800c0c4:	d103      	bne.n	800c0ce <xQueueGenericSendFromISR+0x6a>
 800c0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	d101      	bne.n	800c0d2 <xQueueGenericSendFromISR+0x6e>
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	e000      	b.n	800c0d4 <xQueueGenericSendFromISR+0x70>
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d10a      	bne.n	800c0ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0dc:	f383 8811 	msr	BASEPRI, r3
 800c0e0:	f3bf 8f6f 	isb	sy
 800c0e4:	f3bf 8f4f 	dsb	sy
 800c0e8:	61fb      	str	r3, [r7, #28]
}
 800c0ea:	bf00      	nop
 800c0ec:	e7fe      	b.n	800c0ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c0ee:	f002 fa73 	bl	800e5d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c0f2:	f3ef 8211 	mrs	r2, BASEPRI
 800c0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fa:	f383 8811 	msr	BASEPRI, r3
 800c0fe:	f3bf 8f6f 	isb	sy
 800c102:	f3bf 8f4f 	dsb	sy
 800c106:	61ba      	str	r2, [r7, #24]
 800c108:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c10a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c10c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c116:	429a      	cmp	r2, r3
 800c118:	d302      	bcc.n	800c120 <xQueueGenericSendFromISR+0xbc>
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	2b02      	cmp	r3, #2
 800c11e:	d12c      	bne.n	800c17a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c122:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c12a:	683a      	ldr	r2, [r7, #0]
 800c12c:	68b9      	ldr	r1, [r7, #8]
 800c12e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c130:	f000 fac2 	bl	800c6b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c134:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c13c:	d112      	bne.n	800c164 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c142:	2b00      	cmp	r3, #0
 800c144:	d016      	beq.n	800c174 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c148:	3324      	adds	r3, #36	; 0x24
 800c14a:	4618      	mov	r0, r3
 800c14c:	f001 f84e 	bl	800d1ec <xTaskRemoveFromEventList>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d00e      	beq.n	800c174 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d00b      	beq.n	800c174 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2201      	movs	r2, #1
 800c160:	601a      	str	r2, [r3, #0]
 800c162:	e007      	b.n	800c174 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c164:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c168:	3301      	adds	r3, #1
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	b25a      	sxtb	r2, r3
 800c16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c174:	2301      	movs	r3, #1
 800c176:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c178:	e001      	b.n	800c17e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c17a:	2300      	movs	r3, #0
 800c17c:	637b      	str	r3, [r7, #52]	; 0x34
 800c17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c180:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c188:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c18a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3738      	adds	r7, #56	; 0x38
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b08e      	sub	sp, #56	; 0x38
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d10a      	bne.n	800c1be <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ac:	f383 8811 	msr	BASEPRI, r3
 800c1b0:	f3bf 8f6f 	isb	sy
 800c1b4:	f3bf 8f4f 	dsb	sy
 800c1b8:	623b      	str	r3, [r7, #32]
}
 800c1ba:	bf00      	nop
 800c1bc:	e7fe      	b.n	800c1bc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d00a      	beq.n	800c1dc <xQueueGiveFromISR+0x48>
	__asm volatile
 800c1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ca:	f383 8811 	msr	BASEPRI, r3
 800c1ce:	f3bf 8f6f 	isb	sy
 800c1d2:	f3bf 8f4f 	dsb	sy
 800c1d6:	61fb      	str	r3, [r7, #28]
}
 800c1d8:	bf00      	nop
 800c1da:	e7fe      	b.n	800c1da <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d103      	bne.n	800c1ec <xQueueGiveFromISR+0x58>
 800c1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e6:	689b      	ldr	r3, [r3, #8]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d101      	bne.n	800c1f0 <xQueueGiveFromISR+0x5c>
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	e000      	b.n	800c1f2 <xQueueGiveFromISR+0x5e>
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d10a      	bne.n	800c20c <xQueueGiveFromISR+0x78>
	__asm volatile
 800c1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1fa:	f383 8811 	msr	BASEPRI, r3
 800c1fe:	f3bf 8f6f 	isb	sy
 800c202:	f3bf 8f4f 	dsb	sy
 800c206:	61bb      	str	r3, [r7, #24]
}
 800c208:	bf00      	nop
 800c20a:	e7fe      	b.n	800c20a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c20c:	f002 f9e4 	bl	800e5d8 <vPortValidateInterruptPriority>
	__asm volatile
 800c210:	f3ef 8211 	mrs	r2, BASEPRI
 800c214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c218:	f383 8811 	msr	BASEPRI, r3
 800c21c:	f3bf 8f6f 	isb	sy
 800c220:	f3bf 8f4f 	dsb	sy
 800c224:	617a      	str	r2, [r7, #20]
 800c226:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c228:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c22a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c230:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c238:	429a      	cmp	r2, r3
 800c23a:	d22b      	bcs.n	800c294 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c248:	1c5a      	adds	r2, r3, #1
 800c24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c24e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c252:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c256:	d112      	bne.n	800c27e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d016      	beq.n	800c28e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c262:	3324      	adds	r3, #36	; 0x24
 800c264:	4618      	mov	r0, r3
 800c266:	f000 ffc1 	bl	800d1ec <xTaskRemoveFromEventList>
 800c26a:	4603      	mov	r3, r0
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d00e      	beq.n	800c28e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00b      	beq.n	800c28e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	2201      	movs	r2, #1
 800c27a:	601a      	str	r2, [r3, #0]
 800c27c:	e007      	b.n	800c28e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c27e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c282:	3301      	adds	r3, #1
 800c284:	b2db      	uxtb	r3, r3
 800c286:	b25a      	sxtb	r2, r3
 800c288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c28e:	2301      	movs	r3, #1
 800c290:	637b      	str	r3, [r7, #52]	; 0x34
 800c292:	e001      	b.n	800c298 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c294:	2300      	movs	r3, #0
 800c296:	637b      	str	r3, [r7, #52]	; 0x34
 800c298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c29a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f383 8811 	msr	BASEPRI, r3
}
 800c2a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c2a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3738      	adds	r7, #56	; 0x38
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
	...

0800c2b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b08c      	sub	sp, #48	; 0x30
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	60f8      	str	r0, [r7, #12]
 800c2b8:	60b9      	str	r1, [r7, #8]
 800c2ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d10a      	bne.n	800c2e0 <xQueueReceive+0x30>
	__asm volatile
 800c2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ce:	f383 8811 	msr	BASEPRI, r3
 800c2d2:	f3bf 8f6f 	isb	sy
 800c2d6:	f3bf 8f4f 	dsb	sy
 800c2da:	623b      	str	r3, [r7, #32]
}
 800c2dc:	bf00      	nop
 800c2de:	e7fe      	b.n	800c2de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d103      	bne.n	800c2ee <xQueueReceive+0x3e>
 800c2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d101      	bne.n	800c2f2 <xQueueReceive+0x42>
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	e000      	b.n	800c2f4 <xQueueReceive+0x44>
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d10a      	bne.n	800c30e <xQueueReceive+0x5e>
	__asm volatile
 800c2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2fc:	f383 8811 	msr	BASEPRI, r3
 800c300:	f3bf 8f6f 	isb	sy
 800c304:	f3bf 8f4f 	dsb	sy
 800c308:	61fb      	str	r3, [r7, #28]
}
 800c30a:	bf00      	nop
 800c30c:	e7fe      	b.n	800c30c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c30e:	f001 f92b 	bl	800d568 <xTaskGetSchedulerState>
 800c312:	4603      	mov	r3, r0
 800c314:	2b00      	cmp	r3, #0
 800c316:	d102      	bne.n	800c31e <xQueueReceive+0x6e>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d101      	bne.n	800c322 <xQueueReceive+0x72>
 800c31e:	2301      	movs	r3, #1
 800c320:	e000      	b.n	800c324 <xQueueReceive+0x74>
 800c322:	2300      	movs	r3, #0
 800c324:	2b00      	cmp	r3, #0
 800c326:	d10a      	bne.n	800c33e <xQueueReceive+0x8e>
	__asm volatile
 800c328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32c:	f383 8811 	msr	BASEPRI, r3
 800c330:	f3bf 8f6f 	isb	sy
 800c334:	f3bf 8f4f 	dsb	sy
 800c338:	61bb      	str	r3, [r7, #24]
}
 800c33a:	bf00      	nop
 800c33c:	e7fe      	b.n	800c33c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c33e:	f002 f869 	bl	800e414 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c346:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d01f      	beq.n	800c38e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c34e:	68b9      	ldr	r1, [r7, #8]
 800c350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c352:	f000 fa1b 	bl	800c78c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c358:	1e5a      	subs	r2, r3, #1
 800c35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c35c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c360:	691b      	ldr	r3, [r3, #16]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d00f      	beq.n	800c386 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c368:	3310      	adds	r3, #16
 800c36a:	4618      	mov	r0, r3
 800c36c:	f000 ff3e 	bl	800d1ec <xTaskRemoveFromEventList>
 800c370:	4603      	mov	r3, r0
 800c372:	2b00      	cmp	r3, #0
 800c374:	d007      	beq.n	800c386 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c376:	4b3d      	ldr	r3, [pc, #244]	; (800c46c <xQueueReceive+0x1bc>)
 800c378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c37c:	601a      	str	r2, [r3, #0]
 800c37e:	f3bf 8f4f 	dsb	sy
 800c382:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c386:	f002 f875 	bl	800e474 <vPortExitCritical>
				return pdPASS;
 800c38a:	2301      	movs	r3, #1
 800c38c:	e069      	b.n	800c462 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d103      	bne.n	800c39c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c394:	f002 f86e 	bl	800e474 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c398:	2300      	movs	r3, #0
 800c39a:	e062      	b.n	800c462 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d106      	bne.n	800c3b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c3a2:	f107 0310 	add.w	r3, r7, #16
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f000 ff84 	bl	800d2b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c3b0:	f002 f860 	bl	800e474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c3b4:	f000 fcf6 	bl	800cda4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c3b8:	f002 f82c 	bl	800e414 <vPortEnterCritical>
 800c3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c3c2:	b25b      	sxtb	r3, r3
 800c3c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3c8:	d103      	bne.n	800c3d2 <xQueueReceive+0x122>
 800c3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3d8:	b25b      	sxtb	r3, r3
 800c3da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3de:	d103      	bne.n	800c3e8 <xQueueReceive+0x138>
 800c3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c3e8:	f002 f844 	bl	800e474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c3ec:	1d3a      	adds	r2, r7, #4
 800c3ee:	f107 0310 	add.w	r3, r7, #16
 800c3f2:	4611      	mov	r1, r2
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f000 ff73 	bl	800d2e0 <xTaskCheckForTimeOut>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d123      	bne.n	800c448 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c402:	f000 fa3b 	bl	800c87c <prvIsQueueEmpty>
 800c406:	4603      	mov	r3, r0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d017      	beq.n	800c43c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40e:	3324      	adds	r3, #36	; 0x24
 800c410:	687a      	ldr	r2, [r7, #4]
 800c412:	4611      	mov	r1, r2
 800c414:	4618      	mov	r0, r3
 800c416:	f000 fe99 	bl	800d14c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c41a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c41c:	f000 f9dc 	bl	800c7d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c420:	f000 fcce 	bl	800cdc0 <xTaskResumeAll>
 800c424:	4603      	mov	r3, r0
 800c426:	2b00      	cmp	r3, #0
 800c428:	d189      	bne.n	800c33e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c42a:	4b10      	ldr	r3, [pc, #64]	; (800c46c <xQueueReceive+0x1bc>)
 800c42c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c430:	601a      	str	r2, [r3, #0]
 800c432:	f3bf 8f4f 	dsb	sy
 800c436:	f3bf 8f6f 	isb	sy
 800c43a:	e780      	b.n	800c33e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c43c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c43e:	f000 f9cb 	bl	800c7d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c442:	f000 fcbd 	bl	800cdc0 <xTaskResumeAll>
 800c446:	e77a      	b.n	800c33e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c44a:	f000 f9c5 	bl	800c7d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c44e:	f000 fcb7 	bl	800cdc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c454:	f000 fa12 	bl	800c87c <prvIsQueueEmpty>
 800c458:	4603      	mov	r3, r0
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	f43f af6f 	beq.w	800c33e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c460:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c462:	4618      	mov	r0, r3
 800c464:	3730      	adds	r7, #48	; 0x30
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	e000ed04 	.word	0xe000ed04

0800c470 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b08e      	sub	sp, #56	; 0x38
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c47a:	2300      	movs	r3, #0
 800c47c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c482:	2300      	movs	r3, #0
 800c484:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d10a      	bne.n	800c4a2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c490:	f383 8811 	msr	BASEPRI, r3
 800c494:	f3bf 8f6f 	isb	sy
 800c498:	f3bf 8f4f 	dsb	sy
 800c49c:	623b      	str	r3, [r7, #32]
}
 800c49e:	bf00      	nop
 800c4a0:	e7fe      	b.n	800c4a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d00a      	beq.n	800c4c0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ae:	f383 8811 	msr	BASEPRI, r3
 800c4b2:	f3bf 8f6f 	isb	sy
 800c4b6:	f3bf 8f4f 	dsb	sy
 800c4ba:	61fb      	str	r3, [r7, #28]
}
 800c4bc:	bf00      	nop
 800c4be:	e7fe      	b.n	800c4be <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c4c0:	f001 f852 	bl	800d568 <xTaskGetSchedulerState>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d102      	bne.n	800c4d0 <xQueueSemaphoreTake+0x60>
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d101      	bne.n	800c4d4 <xQueueSemaphoreTake+0x64>
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	e000      	b.n	800c4d6 <xQueueSemaphoreTake+0x66>
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d10a      	bne.n	800c4f0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4de:	f383 8811 	msr	BASEPRI, r3
 800c4e2:	f3bf 8f6f 	isb	sy
 800c4e6:	f3bf 8f4f 	dsb	sy
 800c4ea:	61bb      	str	r3, [r7, #24]
}
 800c4ec:	bf00      	nop
 800c4ee:	e7fe      	b.n	800c4ee <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c4f0:	f001 ff90 	bl	800e414 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4f8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d024      	beq.n	800c54a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c502:	1e5a      	subs	r2, r3, #1
 800c504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c506:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d104      	bne.n	800c51a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c510:	f001 f9a0 	bl	800d854 <pvTaskIncrementMutexHeldCount>
 800c514:	4602      	mov	r2, r0
 800c516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c518:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c51c:	691b      	ldr	r3, [r3, #16]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d00f      	beq.n	800c542 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c524:	3310      	adds	r3, #16
 800c526:	4618      	mov	r0, r3
 800c528:	f000 fe60 	bl	800d1ec <xTaskRemoveFromEventList>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d007      	beq.n	800c542 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c532:	4b54      	ldr	r3, [pc, #336]	; (800c684 <xQueueSemaphoreTake+0x214>)
 800c534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c538:	601a      	str	r2, [r3, #0]
 800c53a:	f3bf 8f4f 	dsb	sy
 800c53e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c542:	f001 ff97 	bl	800e474 <vPortExitCritical>
				return pdPASS;
 800c546:	2301      	movs	r3, #1
 800c548:	e097      	b.n	800c67a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d111      	bne.n	800c574 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c552:	2b00      	cmp	r3, #0
 800c554:	d00a      	beq.n	800c56c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c55a:	f383 8811 	msr	BASEPRI, r3
 800c55e:	f3bf 8f6f 	isb	sy
 800c562:	f3bf 8f4f 	dsb	sy
 800c566:	617b      	str	r3, [r7, #20]
}
 800c568:	bf00      	nop
 800c56a:	e7fe      	b.n	800c56a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c56c:	f001 ff82 	bl	800e474 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c570:	2300      	movs	r3, #0
 800c572:	e082      	b.n	800c67a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c576:	2b00      	cmp	r3, #0
 800c578:	d106      	bne.n	800c588 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c57a:	f107 030c 	add.w	r3, r7, #12
 800c57e:	4618      	mov	r0, r3
 800c580:	f000 fe98 	bl	800d2b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c584:	2301      	movs	r3, #1
 800c586:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c588:	f001 ff74 	bl	800e474 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c58c:	f000 fc0a 	bl	800cda4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c590:	f001 ff40 	bl	800e414 <vPortEnterCritical>
 800c594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c596:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c59a:	b25b      	sxtb	r3, r3
 800c59c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5a0:	d103      	bne.n	800c5aa <xQueueSemaphoreTake+0x13a>
 800c5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c5b0:	b25b      	sxtb	r3, r3
 800c5b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5b6:	d103      	bne.n	800c5c0 <xQueueSemaphoreTake+0x150>
 800c5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c5c0:	f001 ff58 	bl	800e474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c5c4:	463a      	mov	r2, r7
 800c5c6:	f107 030c 	add.w	r3, r7, #12
 800c5ca:	4611      	mov	r1, r2
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f000 fe87 	bl	800d2e0 <xTaskCheckForTimeOut>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d132      	bne.n	800c63e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c5d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5da:	f000 f94f 	bl	800c87c <prvIsQueueEmpty>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d026      	beq.n	800c632 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d109      	bne.n	800c600 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c5ec:	f001 ff12 	bl	800e414 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f2:	689b      	ldr	r3, [r3, #8]
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f000 ffd5 	bl	800d5a4 <xTaskPriorityInherit>
 800c5fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c5fc:	f001 ff3a 	bl	800e474 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c602:	3324      	adds	r3, #36	; 0x24
 800c604:	683a      	ldr	r2, [r7, #0]
 800c606:	4611      	mov	r1, r2
 800c608:	4618      	mov	r0, r3
 800c60a:	f000 fd9f 	bl	800d14c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c60e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c610:	f000 f8e2 	bl	800c7d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c614:	f000 fbd4 	bl	800cdc0 <xTaskResumeAll>
 800c618:	4603      	mov	r3, r0
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	f47f af68 	bne.w	800c4f0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c620:	4b18      	ldr	r3, [pc, #96]	; (800c684 <xQueueSemaphoreTake+0x214>)
 800c622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c626:	601a      	str	r2, [r3, #0]
 800c628:	f3bf 8f4f 	dsb	sy
 800c62c:	f3bf 8f6f 	isb	sy
 800c630:	e75e      	b.n	800c4f0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c632:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c634:	f000 f8d0 	bl	800c7d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c638:	f000 fbc2 	bl	800cdc0 <xTaskResumeAll>
 800c63c:	e758      	b.n	800c4f0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c63e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c640:	f000 f8ca 	bl	800c7d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c644:	f000 fbbc 	bl	800cdc0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c648:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c64a:	f000 f917 	bl	800c87c <prvIsQueueEmpty>
 800c64e:	4603      	mov	r3, r0
 800c650:	2b00      	cmp	r3, #0
 800c652:	f43f af4d 	beq.w	800c4f0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d00d      	beq.n	800c678 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c65c:	f001 feda 	bl	800e414 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c660:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c662:	f000 f811 	bl	800c688 <prvGetDisinheritPriorityAfterTimeout>
 800c666:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66a:	689b      	ldr	r3, [r3, #8]
 800c66c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c66e:	4618      	mov	r0, r3
 800c670:	f001 f86e 	bl	800d750 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c674:	f001 fefe 	bl	800e474 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c678:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3738      	adds	r7, #56	; 0x38
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop
 800c684:	e000ed04 	.word	0xe000ed04

0800c688 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c688:	b480      	push	{r7}
 800c68a:	b085      	sub	sp, #20
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c694:	2b00      	cmp	r3, #0
 800c696:	d006      	beq.n	800c6a6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c6a2:	60fb      	str	r3, [r7, #12]
 800c6a4:	e001      	b.n	800c6aa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
	}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3714      	adds	r7, #20
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b6:	4770      	bx	lr

0800c6b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b086      	sub	sp, #24
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	60f8      	str	r0, [r7, #12]
 800c6c0:	60b9      	str	r1, [r7, #8]
 800c6c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d10d      	bne.n	800c6f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d14d      	bne.n	800c77a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	689b      	ldr	r3, [r3, #8]
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f000 ffc6 	bl	800d674 <xTaskPriorityDisinherit>
 800c6e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	609a      	str	r2, [r3, #8]
 800c6f0:	e043      	b.n	800c77a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d119      	bne.n	800c72c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	6858      	ldr	r0, [r3, #4]
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c700:	461a      	mov	r2, r3
 800c702:	68b9      	ldr	r1, [r7, #8]
 800c704:	f003 f945 	bl	800f992 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	685a      	ldr	r2, [r3, #4]
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c710:	441a      	add	r2, r3
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	685a      	ldr	r2, [r3, #4]
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	689b      	ldr	r3, [r3, #8]
 800c71e:	429a      	cmp	r2, r3
 800c720:	d32b      	bcc.n	800c77a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681a      	ldr	r2, [r3, #0]
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	605a      	str	r2, [r3, #4]
 800c72a:	e026      	b.n	800c77a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	68d8      	ldr	r0, [r3, #12]
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c734:	461a      	mov	r2, r3
 800c736:	68b9      	ldr	r1, [r7, #8]
 800c738:	f003 f92b 	bl	800f992 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	68da      	ldr	r2, [r3, #12]
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c744:	425b      	negs	r3, r3
 800c746:	441a      	add	r2, r3
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	68da      	ldr	r2, [r3, #12]
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	429a      	cmp	r2, r3
 800c756:	d207      	bcs.n	800c768 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	689a      	ldr	r2, [r3, #8]
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c760:	425b      	negs	r3, r3
 800c762:	441a      	add	r2, r3
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2b02      	cmp	r3, #2
 800c76c:	d105      	bne.n	800c77a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d002      	beq.n	800c77a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	3b01      	subs	r3, #1
 800c778:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	1c5a      	adds	r2, r3, #1
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c782:	697b      	ldr	r3, [r7, #20]
}
 800c784:	4618      	mov	r0, r3
 800c786:	3718      	adds	r7, #24
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}

0800c78c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d018      	beq.n	800c7d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	68da      	ldr	r2, [r3, #12]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7a6:	441a      	add	r2, r3
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	68da      	ldr	r2, [r3, #12]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	689b      	ldr	r3, [r3, #8]
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d303      	bcc.n	800c7c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	68d9      	ldr	r1, [r3, #12]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	6838      	ldr	r0, [r7, #0]
 800c7cc:	f003 f8e1 	bl	800f992 <memcpy>
	}
}
 800c7d0:	bf00      	nop
 800c7d2:	3708      	adds	r7, #8
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c7e0:	f001 fe18 	bl	800e414 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7ec:	e011      	b.n	800c812 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d012      	beq.n	800c81c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	3324      	adds	r3, #36	; 0x24
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f000 fcf6 	bl	800d1ec <xTaskRemoveFromEventList>
 800c800:	4603      	mov	r3, r0
 800c802:	2b00      	cmp	r3, #0
 800c804:	d001      	beq.n	800c80a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c806:	f000 fdcd 	bl	800d3a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c80a:	7bfb      	ldrb	r3, [r7, #15]
 800c80c:	3b01      	subs	r3, #1
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c816:	2b00      	cmp	r3, #0
 800c818:	dce9      	bgt.n	800c7ee <prvUnlockQueue+0x16>
 800c81a:	e000      	b.n	800c81e <prvUnlockQueue+0x46>
					break;
 800c81c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	22ff      	movs	r2, #255	; 0xff
 800c822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c826:	f001 fe25 	bl	800e474 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c82a:	f001 fdf3 	bl	800e414 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c834:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c836:	e011      	b.n	800c85c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	691b      	ldr	r3, [r3, #16]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d012      	beq.n	800c866 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	3310      	adds	r3, #16
 800c844:	4618      	mov	r0, r3
 800c846:	f000 fcd1 	bl	800d1ec <xTaskRemoveFromEventList>
 800c84a:	4603      	mov	r3, r0
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d001      	beq.n	800c854 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c850:	f000 fda8 	bl	800d3a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c854:	7bbb      	ldrb	r3, [r7, #14]
 800c856:	3b01      	subs	r3, #1
 800c858:	b2db      	uxtb	r3, r3
 800c85a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c85c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c860:	2b00      	cmp	r3, #0
 800c862:	dce9      	bgt.n	800c838 <prvUnlockQueue+0x60>
 800c864:	e000      	b.n	800c868 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c866:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	22ff      	movs	r2, #255	; 0xff
 800c86c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c870:	f001 fe00 	bl	800e474 <vPortExitCritical>
}
 800c874:	bf00      	nop
 800c876:	3710      	adds	r7, #16
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c884:	f001 fdc6 	bl	800e414 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d102      	bne.n	800c896 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c890:	2301      	movs	r3, #1
 800c892:	60fb      	str	r3, [r7, #12]
 800c894:	e001      	b.n	800c89a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c896:	2300      	movs	r3, #0
 800c898:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c89a:	f001 fdeb 	bl	800e474 <vPortExitCritical>

	return xReturn;
 800c89e:	68fb      	ldr	r3, [r7, #12]
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3710      	adds	r7, #16
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b084      	sub	sp, #16
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c8b0:	f001 fdb0 	bl	800e414 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d102      	bne.n	800c8c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	60fb      	str	r3, [r7, #12]
 800c8c4:	e001      	b.n	800c8ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c8ca:	f001 fdd3 	bl	800e474 <vPortExitCritical>

	return xReturn;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3710      	adds	r7, #16
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}

0800c8d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c8d8:	b480      	push	{r7}
 800c8da:	b085      	sub	sp, #20
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	60fb      	str	r3, [r7, #12]
 800c8e6:	e014      	b.n	800c912 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c8e8:	4a0f      	ldr	r2, [pc, #60]	; (800c928 <vQueueAddToRegistry+0x50>)
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d10b      	bne.n	800c90c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c8f4:	490c      	ldr	r1, [pc, #48]	; (800c928 <vQueueAddToRegistry+0x50>)
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	683a      	ldr	r2, [r7, #0]
 800c8fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c8fe:	4a0a      	ldr	r2, [pc, #40]	; (800c928 <vQueueAddToRegistry+0x50>)
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	00db      	lsls	r3, r3, #3
 800c904:	4413      	add	r3, r2
 800c906:	687a      	ldr	r2, [r7, #4]
 800c908:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c90a:	e006      	b.n	800c91a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	3301      	adds	r3, #1
 800c910:	60fb      	str	r3, [r7, #12]
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	2b07      	cmp	r3, #7
 800c916:	d9e7      	bls.n	800c8e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c918:	bf00      	nop
 800c91a:	bf00      	nop
 800c91c:	3714      	adds	r7, #20
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr
 800c926:	bf00      	nop
 800c928:	20002244 	.word	0x20002244

0800c92c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b086      	sub	sp, #24
 800c930:	af00      	add	r7, sp, #0
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c93c:	f001 fd6a 	bl	800e414 <vPortEnterCritical>
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c946:	b25b      	sxtb	r3, r3
 800c948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c94c:	d103      	bne.n	800c956 <vQueueWaitForMessageRestricted+0x2a>
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	2200      	movs	r2, #0
 800c952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c95c:	b25b      	sxtb	r3, r3
 800c95e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c962:	d103      	bne.n	800c96c <vQueueWaitForMessageRestricted+0x40>
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	2200      	movs	r2, #0
 800c968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c96c:	f001 fd82 	bl	800e474 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c974:	2b00      	cmp	r3, #0
 800c976:	d106      	bne.n	800c986 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	3324      	adds	r3, #36	; 0x24
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	68b9      	ldr	r1, [r7, #8]
 800c980:	4618      	mov	r0, r3
 800c982:	f000 fc07 	bl	800d194 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c986:	6978      	ldr	r0, [r7, #20]
 800c988:	f7ff ff26 	bl	800c7d8 <prvUnlockQueue>
	}
 800c98c:	bf00      	nop
 800c98e:	3718      	adds	r7, #24
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c994:	b580      	push	{r7, lr}
 800c996:	b08e      	sub	sp, #56	; 0x38
 800c998:	af04      	add	r7, sp, #16
 800c99a:	60f8      	str	r0, [r7, #12]
 800c99c:	60b9      	str	r1, [r7, #8]
 800c99e:	607a      	str	r2, [r7, #4]
 800c9a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c9a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d10a      	bne.n	800c9be <xTaskCreateStatic+0x2a>
	__asm volatile
 800c9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ac:	f383 8811 	msr	BASEPRI, r3
 800c9b0:	f3bf 8f6f 	isb	sy
 800c9b4:	f3bf 8f4f 	dsb	sy
 800c9b8:	623b      	str	r3, [r7, #32]
}
 800c9ba:	bf00      	nop
 800c9bc:	e7fe      	b.n	800c9bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d10a      	bne.n	800c9da <xTaskCreateStatic+0x46>
	__asm volatile
 800c9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c8:	f383 8811 	msr	BASEPRI, r3
 800c9cc:	f3bf 8f6f 	isb	sy
 800c9d0:	f3bf 8f4f 	dsb	sy
 800c9d4:	61fb      	str	r3, [r7, #28]
}
 800c9d6:	bf00      	nop
 800c9d8:	e7fe      	b.n	800c9d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c9da:	235c      	movs	r3, #92	; 0x5c
 800c9dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	2b5c      	cmp	r3, #92	; 0x5c
 800c9e2:	d00a      	beq.n	800c9fa <xTaskCreateStatic+0x66>
	__asm volatile
 800c9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e8:	f383 8811 	msr	BASEPRI, r3
 800c9ec:	f3bf 8f6f 	isb	sy
 800c9f0:	f3bf 8f4f 	dsb	sy
 800c9f4:	61bb      	str	r3, [r7, #24]
}
 800c9f6:	bf00      	nop
 800c9f8:	e7fe      	b.n	800c9f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c9fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d01e      	beq.n	800ca40 <xTaskCreateStatic+0xac>
 800ca02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d01b      	beq.n	800ca40 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ca0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ca12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca14:	2202      	movs	r2, #2
 800ca16:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	9303      	str	r3, [sp, #12]
 800ca1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca20:	9302      	str	r3, [sp, #8]
 800ca22:	f107 0314 	add.w	r3, r7, #20
 800ca26:	9301      	str	r3, [sp, #4]
 800ca28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca2a:	9300      	str	r3, [sp, #0]
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	687a      	ldr	r2, [r7, #4]
 800ca30:	68b9      	ldr	r1, [r7, #8]
 800ca32:	68f8      	ldr	r0, [r7, #12]
 800ca34:	f000 f850 	bl	800cad8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca3a:	f000 f8dd 	bl	800cbf8 <prvAddNewTaskToReadyList>
 800ca3e:	e001      	b.n	800ca44 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ca40:	2300      	movs	r3, #0
 800ca42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ca44:	697b      	ldr	r3, [r7, #20]
	}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3728      	adds	r7, #40	; 0x28
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}

0800ca4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ca4e:	b580      	push	{r7, lr}
 800ca50:	b08c      	sub	sp, #48	; 0x30
 800ca52:	af04      	add	r7, sp, #16
 800ca54:	60f8      	str	r0, [r7, #12]
 800ca56:	60b9      	str	r1, [r7, #8]
 800ca58:	603b      	str	r3, [r7, #0]
 800ca5a:	4613      	mov	r3, r2
 800ca5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ca5e:	88fb      	ldrh	r3, [r7, #6]
 800ca60:	009b      	lsls	r3, r3, #2
 800ca62:	4618      	mov	r0, r3
 800ca64:	f001 fdf8 	bl	800e658 <pvPortMalloc>
 800ca68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d00e      	beq.n	800ca8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ca70:	205c      	movs	r0, #92	; 0x5c
 800ca72:	f001 fdf1 	bl	800e658 <pvPortMalloc>
 800ca76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d003      	beq.n	800ca86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ca7e:	69fb      	ldr	r3, [r7, #28]
 800ca80:	697a      	ldr	r2, [r7, #20]
 800ca82:	631a      	str	r2, [r3, #48]	; 0x30
 800ca84:	e005      	b.n	800ca92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ca86:	6978      	ldr	r0, [r7, #20]
 800ca88:	f001 feaa 	bl	800e7e0 <vPortFree>
 800ca8c:	e001      	b.n	800ca92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ca92:	69fb      	ldr	r3, [r7, #28]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d017      	beq.n	800cac8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ca98:	69fb      	ldr	r3, [r7, #28]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800caa0:	88fa      	ldrh	r2, [r7, #6]
 800caa2:	2300      	movs	r3, #0
 800caa4:	9303      	str	r3, [sp, #12]
 800caa6:	69fb      	ldr	r3, [r7, #28]
 800caa8:	9302      	str	r3, [sp, #8]
 800caaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caac:	9301      	str	r3, [sp, #4]
 800caae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab0:	9300      	str	r3, [sp, #0]
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	68b9      	ldr	r1, [r7, #8]
 800cab6:	68f8      	ldr	r0, [r7, #12]
 800cab8:	f000 f80e 	bl	800cad8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cabc:	69f8      	ldr	r0, [r7, #28]
 800cabe:	f000 f89b 	bl	800cbf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cac2:	2301      	movs	r3, #1
 800cac4:	61bb      	str	r3, [r7, #24]
 800cac6:	e002      	b.n	800cace <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cac8:	f04f 33ff 	mov.w	r3, #4294967295
 800cacc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cace:	69bb      	ldr	r3, [r7, #24]
	}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3720      	adds	r7, #32
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b088      	sub	sp, #32
 800cadc:	af00      	add	r7, sp, #0
 800cade:	60f8      	str	r0, [r7, #12]
 800cae0:	60b9      	str	r1, [r7, #8]
 800cae2:	607a      	str	r2, [r7, #4]
 800cae4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	461a      	mov	r2, r3
 800caf0:	21a5      	movs	r1, #165	; 0xa5
 800caf2:	f002 fe29 	bl	800f748 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800caf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cb00:	3b01      	subs	r3, #1
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	4413      	add	r3, r2
 800cb06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cb08:	69bb      	ldr	r3, [r7, #24]
 800cb0a:	f023 0307 	bic.w	r3, r3, #7
 800cb0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cb10:	69bb      	ldr	r3, [r7, #24]
 800cb12:	f003 0307 	and.w	r3, r3, #7
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d00a      	beq.n	800cb30 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb1e:	f383 8811 	msr	BASEPRI, r3
 800cb22:	f3bf 8f6f 	isb	sy
 800cb26:	f3bf 8f4f 	dsb	sy
 800cb2a:	617b      	str	r3, [r7, #20]
}
 800cb2c:	bf00      	nop
 800cb2e:	e7fe      	b.n	800cb2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d01f      	beq.n	800cb76 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb36:	2300      	movs	r3, #0
 800cb38:	61fb      	str	r3, [r7, #28]
 800cb3a:	e012      	b.n	800cb62 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cb3c:	68ba      	ldr	r2, [r7, #8]
 800cb3e:	69fb      	ldr	r3, [r7, #28]
 800cb40:	4413      	add	r3, r2
 800cb42:	7819      	ldrb	r1, [r3, #0]
 800cb44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb46:	69fb      	ldr	r3, [r7, #28]
 800cb48:	4413      	add	r3, r2
 800cb4a:	3334      	adds	r3, #52	; 0x34
 800cb4c:	460a      	mov	r2, r1
 800cb4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cb50:	68ba      	ldr	r2, [r7, #8]
 800cb52:	69fb      	ldr	r3, [r7, #28]
 800cb54:	4413      	add	r3, r2
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d006      	beq.n	800cb6a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb5c:	69fb      	ldr	r3, [r7, #28]
 800cb5e:	3301      	adds	r3, #1
 800cb60:	61fb      	str	r3, [r7, #28]
 800cb62:	69fb      	ldr	r3, [r7, #28]
 800cb64:	2b0f      	cmp	r3, #15
 800cb66:	d9e9      	bls.n	800cb3c <prvInitialiseNewTask+0x64>
 800cb68:	e000      	b.n	800cb6c <prvInitialiseNewTask+0x94>
			{
				break;
 800cb6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb6e:	2200      	movs	r2, #0
 800cb70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cb74:	e003      	b.n	800cb7e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb78:	2200      	movs	r2, #0
 800cb7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb80:	2b37      	cmp	r3, #55	; 0x37
 800cb82:	d901      	bls.n	800cb88 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cb84:	2337      	movs	r3, #55	; 0x37
 800cb86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cb88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb92:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb96:	2200      	movs	r2, #0
 800cb98:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9c:	3304      	adds	r3, #4
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7fe ff8a 	bl	800bab8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba6:	3318      	adds	r3, #24
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f7fe ff85 	bl	800bab8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbc2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbcc:	2200      	movs	r2, #0
 800cbce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cbd2:	683a      	ldr	r2, [r7, #0]
 800cbd4:	68f9      	ldr	r1, [r7, #12]
 800cbd6:	69b8      	ldr	r0, [r7, #24]
 800cbd8:	f001 faf2 	bl	800e1c0 <pxPortInitialiseStack>
 800cbdc:	4602      	mov	r2, r0
 800cbde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d002      	beq.n	800cbee <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbee:	bf00      	nop
 800cbf0:	3720      	adds	r7, #32
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
	...

0800cbf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cc00:	f001 fc08 	bl	800e414 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cc04:	4b2d      	ldr	r3, [pc, #180]	; (800ccbc <prvAddNewTaskToReadyList+0xc4>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	3301      	adds	r3, #1
 800cc0a:	4a2c      	ldr	r2, [pc, #176]	; (800ccbc <prvAddNewTaskToReadyList+0xc4>)
 800cc0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cc0e:	4b2c      	ldr	r3, [pc, #176]	; (800ccc0 <prvAddNewTaskToReadyList+0xc8>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d109      	bne.n	800cc2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cc16:	4a2a      	ldr	r2, [pc, #168]	; (800ccc0 <prvAddNewTaskToReadyList+0xc8>)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cc1c:	4b27      	ldr	r3, [pc, #156]	; (800ccbc <prvAddNewTaskToReadyList+0xc4>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d110      	bne.n	800cc46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cc24:	f000 fbe2 	bl	800d3ec <prvInitialiseTaskLists>
 800cc28:	e00d      	b.n	800cc46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cc2a:	4b26      	ldr	r3, [pc, #152]	; (800ccc4 <prvAddNewTaskToReadyList+0xcc>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d109      	bne.n	800cc46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cc32:	4b23      	ldr	r3, [pc, #140]	; (800ccc0 <prvAddNewTaskToReadyList+0xc8>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d802      	bhi.n	800cc46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cc40:	4a1f      	ldr	r2, [pc, #124]	; (800ccc0 <prvAddNewTaskToReadyList+0xc8>)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cc46:	4b20      	ldr	r3, [pc, #128]	; (800ccc8 <prvAddNewTaskToReadyList+0xd0>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	3301      	adds	r3, #1
 800cc4c:	4a1e      	ldr	r2, [pc, #120]	; (800ccc8 <prvAddNewTaskToReadyList+0xd0>)
 800cc4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cc50:	4b1d      	ldr	r3, [pc, #116]	; (800ccc8 <prvAddNewTaskToReadyList+0xd0>)
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc5c:	4b1b      	ldr	r3, [pc, #108]	; (800cccc <prvAddNewTaskToReadyList+0xd4>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d903      	bls.n	800cc6c <prvAddNewTaskToReadyList+0x74>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc68:	4a18      	ldr	r2, [pc, #96]	; (800cccc <prvAddNewTaskToReadyList+0xd4>)
 800cc6a:	6013      	str	r3, [r2, #0]
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc70:	4613      	mov	r3, r2
 800cc72:	009b      	lsls	r3, r3, #2
 800cc74:	4413      	add	r3, r2
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	4a15      	ldr	r2, [pc, #84]	; (800ccd0 <prvAddNewTaskToReadyList+0xd8>)
 800cc7a:	441a      	add	r2, r3
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	3304      	adds	r3, #4
 800cc80:	4619      	mov	r1, r3
 800cc82:	4610      	mov	r0, r2
 800cc84:	f7fe ff25 	bl	800bad2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cc88:	f001 fbf4 	bl	800e474 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cc8c:	4b0d      	ldr	r3, [pc, #52]	; (800ccc4 <prvAddNewTaskToReadyList+0xcc>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d00e      	beq.n	800ccb2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cc94:	4b0a      	ldr	r3, [pc, #40]	; (800ccc0 <prvAddNewTaskToReadyList+0xc8>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d207      	bcs.n	800ccb2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cca2:	4b0c      	ldr	r3, [pc, #48]	; (800ccd4 <prvAddNewTaskToReadyList+0xdc>)
 800cca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cca8:	601a      	str	r2, [r3, #0]
 800ccaa:	f3bf 8f4f 	dsb	sy
 800ccae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ccb2:	bf00      	nop
 800ccb4:	3708      	adds	r7, #8
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
 800ccba:	bf00      	nop
 800ccbc:	20002758 	.word	0x20002758
 800ccc0:	20002284 	.word	0x20002284
 800ccc4:	20002764 	.word	0x20002764
 800ccc8:	20002774 	.word	0x20002774
 800cccc:	20002760 	.word	0x20002760
 800ccd0:	20002288 	.word	0x20002288
 800ccd4:	e000ed04 	.word	0xe000ed04

0800ccd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b08a      	sub	sp, #40	; 0x28
 800ccdc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ccde:	2300      	movs	r3, #0
 800cce0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cce2:	2300      	movs	r3, #0
 800cce4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cce6:	463a      	mov	r2, r7
 800cce8:	1d39      	adds	r1, r7, #4
 800ccea:	f107 0308 	add.w	r3, r7, #8
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f7fe fe8e 	bl	800ba10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ccf4:	6839      	ldr	r1, [r7, #0]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	68ba      	ldr	r2, [r7, #8]
 800ccfa:	9202      	str	r2, [sp, #8]
 800ccfc:	9301      	str	r3, [sp, #4]
 800ccfe:	2300      	movs	r3, #0
 800cd00:	9300      	str	r3, [sp, #0]
 800cd02:	2300      	movs	r3, #0
 800cd04:	460a      	mov	r2, r1
 800cd06:	4921      	ldr	r1, [pc, #132]	; (800cd8c <vTaskStartScheduler+0xb4>)
 800cd08:	4821      	ldr	r0, [pc, #132]	; (800cd90 <vTaskStartScheduler+0xb8>)
 800cd0a:	f7ff fe43 	bl	800c994 <xTaskCreateStatic>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	4a20      	ldr	r2, [pc, #128]	; (800cd94 <vTaskStartScheduler+0xbc>)
 800cd12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cd14:	4b1f      	ldr	r3, [pc, #124]	; (800cd94 <vTaskStartScheduler+0xbc>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d002      	beq.n	800cd22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	617b      	str	r3, [r7, #20]
 800cd20:	e001      	b.n	800cd26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cd22:	2300      	movs	r3, #0
 800cd24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	2b01      	cmp	r3, #1
 800cd2a:	d102      	bne.n	800cd32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cd2c:	f000 fefa 	bl	800db24 <xTimerCreateTimerTask>
 800cd30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d116      	bne.n	800cd66 <vTaskStartScheduler+0x8e>
	__asm volatile
 800cd38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd3c:	f383 8811 	msr	BASEPRI, r3
 800cd40:	f3bf 8f6f 	isb	sy
 800cd44:	f3bf 8f4f 	dsb	sy
 800cd48:	613b      	str	r3, [r7, #16]
}
 800cd4a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cd4c:	4b12      	ldr	r3, [pc, #72]	; (800cd98 <vTaskStartScheduler+0xc0>)
 800cd4e:	f04f 32ff 	mov.w	r2, #4294967295
 800cd52:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cd54:	4b11      	ldr	r3, [pc, #68]	; (800cd9c <vTaskStartScheduler+0xc4>)
 800cd56:	2201      	movs	r2, #1
 800cd58:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cd5a:	4b11      	ldr	r3, [pc, #68]	; (800cda0 <vTaskStartScheduler+0xc8>)
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cd60:	f001 fab6 	bl	800e2d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cd64:	e00e      	b.n	800cd84 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd6c:	d10a      	bne.n	800cd84 <vTaskStartScheduler+0xac>
	__asm volatile
 800cd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd72:	f383 8811 	msr	BASEPRI, r3
 800cd76:	f3bf 8f6f 	isb	sy
 800cd7a:	f3bf 8f4f 	dsb	sy
 800cd7e:	60fb      	str	r3, [r7, #12]
}
 800cd80:	bf00      	nop
 800cd82:	e7fe      	b.n	800cd82 <vTaskStartScheduler+0xaa>
}
 800cd84:	bf00      	nop
 800cd86:	3718      	adds	r7, #24
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}
 800cd8c:	08012320 	.word	0x08012320
 800cd90:	0800d3bd 	.word	0x0800d3bd
 800cd94:	2000277c 	.word	0x2000277c
 800cd98:	20002778 	.word	0x20002778
 800cd9c:	20002764 	.word	0x20002764
 800cda0:	2000275c 	.word	0x2000275c

0800cda4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cda4:	b480      	push	{r7}
 800cda6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cda8:	4b04      	ldr	r3, [pc, #16]	; (800cdbc <vTaskSuspendAll+0x18>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	3301      	adds	r3, #1
 800cdae:	4a03      	ldr	r2, [pc, #12]	; (800cdbc <vTaskSuspendAll+0x18>)
 800cdb0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800cdb2:	bf00      	nop
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr
 800cdbc:	20002780 	.word	0x20002780

0800cdc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cdce:	4b42      	ldr	r3, [pc, #264]	; (800ced8 <xTaskResumeAll+0x118>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d10a      	bne.n	800cdec <xTaskResumeAll+0x2c>
	__asm volatile
 800cdd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdda:	f383 8811 	msr	BASEPRI, r3
 800cdde:	f3bf 8f6f 	isb	sy
 800cde2:	f3bf 8f4f 	dsb	sy
 800cde6:	603b      	str	r3, [r7, #0]
}
 800cde8:	bf00      	nop
 800cdea:	e7fe      	b.n	800cdea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cdec:	f001 fb12 	bl	800e414 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cdf0:	4b39      	ldr	r3, [pc, #228]	; (800ced8 <xTaskResumeAll+0x118>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	3b01      	subs	r3, #1
 800cdf6:	4a38      	ldr	r2, [pc, #224]	; (800ced8 <xTaskResumeAll+0x118>)
 800cdf8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cdfa:	4b37      	ldr	r3, [pc, #220]	; (800ced8 <xTaskResumeAll+0x118>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d162      	bne.n	800cec8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ce02:	4b36      	ldr	r3, [pc, #216]	; (800cedc <xTaskResumeAll+0x11c>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d05e      	beq.n	800cec8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce0a:	e02f      	b.n	800ce6c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce0c:	4b34      	ldr	r3, [pc, #208]	; (800cee0 <xTaskResumeAll+0x120>)
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	68db      	ldr	r3, [r3, #12]
 800ce12:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	3318      	adds	r3, #24
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7fe feb7 	bl	800bb8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	3304      	adds	r3, #4
 800ce22:	4618      	mov	r0, r3
 800ce24:	f7fe feb2 	bl	800bb8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce2c:	4b2d      	ldr	r3, [pc, #180]	; (800cee4 <xTaskResumeAll+0x124>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d903      	bls.n	800ce3c <xTaskResumeAll+0x7c>
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce38:	4a2a      	ldr	r2, [pc, #168]	; (800cee4 <xTaskResumeAll+0x124>)
 800ce3a:	6013      	str	r3, [r2, #0]
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce40:	4613      	mov	r3, r2
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	4413      	add	r3, r2
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	4a27      	ldr	r2, [pc, #156]	; (800cee8 <xTaskResumeAll+0x128>)
 800ce4a:	441a      	add	r2, r3
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	3304      	adds	r3, #4
 800ce50:	4619      	mov	r1, r3
 800ce52:	4610      	mov	r0, r2
 800ce54:	f7fe fe3d 	bl	800bad2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce5c:	4b23      	ldr	r3, [pc, #140]	; (800ceec <xTaskResumeAll+0x12c>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d302      	bcc.n	800ce6c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ce66:	4b22      	ldr	r3, [pc, #136]	; (800cef0 <xTaskResumeAll+0x130>)
 800ce68:	2201      	movs	r2, #1
 800ce6a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce6c:	4b1c      	ldr	r3, [pc, #112]	; (800cee0 <xTaskResumeAll+0x120>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d1cb      	bne.n	800ce0c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d001      	beq.n	800ce7e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ce7a:	f000 fb55 	bl	800d528 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ce7e:	4b1d      	ldr	r3, [pc, #116]	; (800cef4 <xTaskResumeAll+0x134>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d010      	beq.n	800ceac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ce8a:	f000 f847 	bl	800cf1c <xTaskIncrementTick>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d002      	beq.n	800ce9a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ce94:	4b16      	ldr	r3, [pc, #88]	; (800cef0 <xTaskResumeAll+0x130>)
 800ce96:	2201      	movs	r2, #1
 800ce98:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	3b01      	subs	r3, #1
 800ce9e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d1f1      	bne.n	800ce8a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800cea6:	4b13      	ldr	r3, [pc, #76]	; (800cef4 <xTaskResumeAll+0x134>)
 800cea8:	2200      	movs	r2, #0
 800ceaa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ceac:	4b10      	ldr	r3, [pc, #64]	; (800cef0 <xTaskResumeAll+0x130>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d009      	beq.n	800cec8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ceb8:	4b0f      	ldr	r3, [pc, #60]	; (800cef8 <xTaskResumeAll+0x138>)
 800ceba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cebe:	601a      	str	r2, [r3, #0]
 800cec0:	f3bf 8f4f 	dsb	sy
 800cec4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cec8:	f001 fad4 	bl	800e474 <vPortExitCritical>

	return xAlreadyYielded;
 800cecc:	68bb      	ldr	r3, [r7, #8]
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3710      	adds	r7, #16
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop
 800ced8:	20002780 	.word	0x20002780
 800cedc:	20002758 	.word	0x20002758
 800cee0:	20002718 	.word	0x20002718
 800cee4:	20002760 	.word	0x20002760
 800cee8:	20002288 	.word	0x20002288
 800ceec:	20002284 	.word	0x20002284
 800cef0:	2000276c 	.word	0x2000276c
 800cef4:	20002768 	.word	0x20002768
 800cef8:	e000ed04 	.word	0xe000ed04

0800cefc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cf02:	4b05      	ldr	r3, [pc, #20]	; (800cf18 <xTaskGetTickCount+0x1c>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cf08:	687b      	ldr	r3, [r7, #4]
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	370c      	adds	r7, #12
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr
 800cf16:	bf00      	nop
 800cf18:	2000275c 	.word	0x2000275c

0800cf1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b086      	sub	sp, #24
 800cf20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cf22:	2300      	movs	r3, #0
 800cf24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf26:	4b4f      	ldr	r3, [pc, #316]	; (800d064 <xTaskIncrementTick+0x148>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	f040 8089 	bne.w	800d042 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cf30:	4b4d      	ldr	r3, [pc, #308]	; (800d068 <xTaskIncrementTick+0x14c>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	3301      	adds	r3, #1
 800cf36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cf38:	4a4b      	ldr	r2, [pc, #300]	; (800d068 <xTaskIncrementTick+0x14c>)
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d120      	bne.n	800cf86 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cf44:	4b49      	ldr	r3, [pc, #292]	; (800d06c <xTaskIncrementTick+0x150>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d00a      	beq.n	800cf64 <xTaskIncrementTick+0x48>
	__asm volatile
 800cf4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf52:	f383 8811 	msr	BASEPRI, r3
 800cf56:	f3bf 8f6f 	isb	sy
 800cf5a:	f3bf 8f4f 	dsb	sy
 800cf5e:	603b      	str	r3, [r7, #0]
}
 800cf60:	bf00      	nop
 800cf62:	e7fe      	b.n	800cf62 <xTaskIncrementTick+0x46>
 800cf64:	4b41      	ldr	r3, [pc, #260]	; (800d06c <xTaskIncrementTick+0x150>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	60fb      	str	r3, [r7, #12]
 800cf6a:	4b41      	ldr	r3, [pc, #260]	; (800d070 <xTaskIncrementTick+0x154>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4a3f      	ldr	r2, [pc, #252]	; (800d06c <xTaskIncrementTick+0x150>)
 800cf70:	6013      	str	r3, [r2, #0]
 800cf72:	4a3f      	ldr	r2, [pc, #252]	; (800d070 <xTaskIncrementTick+0x154>)
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	6013      	str	r3, [r2, #0]
 800cf78:	4b3e      	ldr	r3, [pc, #248]	; (800d074 <xTaskIncrementTick+0x158>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	3301      	adds	r3, #1
 800cf7e:	4a3d      	ldr	r2, [pc, #244]	; (800d074 <xTaskIncrementTick+0x158>)
 800cf80:	6013      	str	r3, [r2, #0]
 800cf82:	f000 fad1 	bl	800d528 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cf86:	4b3c      	ldr	r3, [pc, #240]	; (800d078 <xTaskIncrementTick+0x15c>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	693a      	ldr	r2, [r7, #16]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d349      	bcc.n	800d024 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf90:	4b36      	ldr	r3, [pc, #216]	; (800d06c <xTaskIncrementTick+0x150>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d104      	bne.n	800cfa4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf9a:	4b37      	ldr	r3, [pc, #220]	; (800d078 <xTaskIncrementTick+0x15c>)
 800cf9c:	f04f 32ff 	mov.w	r2, #4294967295
 800cfa0:	601a      	str	r2, [r3, #0]
					break;
 800cfa2:	e03f      	b.n	800d024 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfa4:	4b31      	ldr	r3, [pc, #196]	; (800d06c <xTaskIncrementTick+0x150>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	68db      	ldr	r3, [r3, #12]
 800cfaa:	68db      	ldr	r3, [r3, #12]
 800cfac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cfb4:	693a      	ldr	r2, [r7, #16]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d203      	bcs.n	800cfc4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cfbc:	4a2e      	ldr	r2, [pc, #184]	; (800d078 <xTaskIncrementTick+0x15c>)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cfc2:	e02f      	b.n	800d024 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	3304      	adds	r3, #4
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f7fe fddf 	bl	800bb8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d004      	beq.n	800cfe0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	3318      	adds	r3, #24
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7fe fdd6 	bl	800bb8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfe4:	4b25      	ldr	r3, [pc, #148]	; (800d07c <xTaskIncrementTick+0x160>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d903      	bls.n	800cff4 <xTaskIncrementTick+0xd8>
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cff0:	4a22      	ldr	r2, [pc, #136]	; (800d07c <xTaskIncrementTick+0x160>)
 800cff2:	6013      	str	r3, [r2, #0]
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cff8:	4613      	mov	r3, r2
 800cffa:	009b      	lsls	r3, r3, #2
 800cffc:	4413      	add	r3, r2
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	4a1f      	ldr	r2, [pc, #124]	; (800d080 <xTaskIncrementTick+0x164>)
 800d002:	441a      	add	r2, r3
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	3304      	adds	r3, #4
 800d008:	4619      	mov	r1, r3
 800d00a:	4610      	mov	r0, r2
 800d00c:	f7fe fd61 	bl	800bad2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d014:	4b1b      	ldr	r3, [pc, #108]	; (800d084 <xTaskIncrementTick+0x168>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d3b8      	bcc.n	800cf90 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d01e:	2301      	movs	r3, #1
 800d020:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d022:	e7b5      	b.n	800cf90 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d024:	4b17      	ldr	r3, [pc, #92]	; (800d084 <xTaskIncrementTick+0x168>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d02a:	4915      	ldr	r1, [pc, #84]	; (800d080 <xTaskIncrementTick+0x164>)
 800d02c:	4613      	mov	r3, r2
 800d02e:	009b      	lsls	r3, r3, #2
 800d030:	4413      	add	r3, r2
 800d032:	009b      	lsls	r3, r3, #2
 800d034:	440b      	add	r3, r1
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	2b01      	cmp	r3, #1
 800d03a:	d907      	bls.n	800d04c <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800d03c:	2301      	movs	r3, #1
 800d03e:	617b      	str	r3, [r7, #20]
 800d040:	e004      	b.n	800d04c <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d042:	4b11      	ldr	r3, [pc, #68]	; (800d088 <xTaskIncrementTick+0x16c>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	3301      	adds	r3, #1
 800d048:	4a0f      	ldr	r2, [pc, #60]	; (800d088 <xTaskIncrementTick+0x16c>)
 800d04a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d04c:	4b0f      	ldr	r3, [pc, #60]	; (800d08c <xTaskIncrementTick+0x170>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d001      	beq.n	800d058 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800d054:	2301      	movs	r3, #1
 800d056:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d058:	697b      	ldr	r3, [r7, #20]
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3718      	adds	r7, #24
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	20002780 	.word	0x20002780
 800d068:	2000275c 	.word	0x2000275c
 800d06c:	20002710 	.word	0x20002710
 800d070:	20002714 	.word	0x20002714
 800d074:	20002770 	.word	0x20002770
 800d078:	20002778 	.word	0x20002778
 800d07c:	20002760 	.word	0x20002760
 800d080:	20002288 	.word	0x20002288
 800d084:	20002284 	.word	0x20002284
 800d088:	20002768 	.word	0x20002768
 800d08c:	2000276c 	.word	0x2000276c

0800d090 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d090:	b480      	push	{r7}
 800d092:	b085      	sub	sp, #20
 800d094:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d096:	4b28      	ldr	r3, [pc, #160]	; (800d138 <vTaskSwitchContext+0xa8>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d003      	beq.n	800d0a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d09e:	4b27      	ldr	r3, [pc, #156]	; (800d13c <vTaskSwitchContext+0xac>)
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d0a4:	e041      	b.n	800d12a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d0a6:	4b25      	ldr	r3, [pc, #148]	; (800d13c <vTaskSwitchContext+0xac>)
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0ac:	4b24      	ldr	r3, [pc, #144]	; (800d140 <vTaskSwitchContext+0xb0>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	60fb      	str	r3, [r7, #12]
 800d0b2:	e010      	b.n	800d0d6 <vTaskSwitchContext+0x46>
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d10a      	bne.n	800d0d0 <vTaskSwitchContext+0x40>
	__asm volatile
 800d0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0be:	f383 8811 	msr	BASEPRI, r3
 800d0c2:	f3bf 8f6f 	isb	sy
 800d0c6:	f3bf 8f4f 	dsb	sy
 800d0ca:	607b      	str	r3, [r7, #4]
}
 800d0cc:	bf00      	nop
 800d0ce:	e7fe      	b.n	800d0ce <vTaskSwitchContext+0x3e>
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	3b01      	subs	r3, #1
 800d0d4:	60fb      	str	r3, [r7, #12]
 800d0d6:	491b      	ldr	r1, [pc, #108]	; (800d144 <vTaskSwitchContext+0xb4>)
 800d0d8:	68fa      	ldr	r2, [r7, #12]
 800d0da:	4613      	mov	r3, r2
 800d0dc:	009b      	lsls	r3, r3, #2
 800d0de:	4413      	add	r3, r2
 800d0e0:	009b      	lsls	r3, r3, #2
 800d0e2:	440b      	add	r3, r1
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d0e4      	beq.n	800d0b4 <vTaskSwitchContext+0x24>
 800d0ea:	68fa      	ldr	r2, [r7, #12]
 800d0ec:	4613      	mov	r3, r2
 800d0ee:	009b      	lsls	r3, r3, #2
 800d0f0:	4413      	add	r3, r2
 800d0f2:	009b      	lsls	r3, r3, #2
 800d0f4:	4a13      	ldr	r2, [pc, #76]	; (800d144 <vTaskSwitchContext+0xb4>)
 800d0f6:	4413      	add	r3, r2
 800d0f8:	60bb      	str	r3, [r7, #8]
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	685b      	ldr	r3, [r3, #4]
 800d0fe:	685a      	ldr	r2, [r3, #4]
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	605a      	str	r2, [r3, #4]
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	685a      	ldr	r2, [r3, #4]
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	3308      	adds	r3, #8
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d104      	bne.n	800d11a <vTaskSwitchContext+0x8a>
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	685b      	ldr	r3, [r3, #4]
 800d114:	685a      	ldr	r2, [r3, #4]
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	605a      	str	r2, [r3, #4]
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	685b      	ldr	r3, [r3, #4]
 800d11e:	68db      	ldr	r3, [r3, #12]
 800d120:	4a09      	ldr	r2, [pc, #36]	; (800d148 <vTaskSwitchContext+0xb8>)
 800d122:	6013      	str	r3, [r2, #0]
 800d124:	4a06      	ldr	r2, [pc, #24]	; (800d140 <vTaskSwitchContext+0xb0>)
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	6013      	str	r3, [r2, #0]
}
 800d12a:	bf00      	nop
 800d12c:	3714      	adds	r7, #20
 800d12e:	46bd      	mov	sp, r7
 800d130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d134:	4770      	bx	lr
 800d136:	bf00      	nop
 800d138:	20002780 	.word	0x20002780
 800d13c:	2000276c 	.word	0x2000276c
 800d140:	20002760 	.word	0x20002760
 800d144:	20002288 	.word	0x20002288
 800d148:	20002284 	.word	0x20002284

0800d14c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b084      	sub	sp, #16
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d10a      	bne.n	800d172 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d160:	f383 8811 	msr	BASEPRI, r3
 800d164:	f3bf 8f6f 	isb	sy
 800d168:	f3bf 8f4f 	dsb	sy
 800d16c:	60fb      	str	r3, [r7, #12]
}
 800d16e:	bf00      	nop
 800d170:	e7fe      	b.n	800d170 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d172:	4b07      	ldr	r3, [pc, #28]	; (800d190 <vTaskPlaceOnEventList+0x44>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	3318      	adds	r3, #24
 800d178:	4619      	mov	r1, r3
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f7fe fccd 	bl	800bb1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d180:	2101      	movs	r1, #1
 800d182:	6838      	ldr	r0, [r7, #0]
 800d184:	f000 fc7a 	bl	800da7c <prvAddCurrentTaskToDelayedList>
}
 800d188:	bf00      	nop
 800d18a:	3710      	adds	r7, #16
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}
 800d190:	20002284 	.word	0x20002284

0800d194 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d194:	b580      	push	{r7, lr}
 800d196:	b086      	sub	sp, #24
 800d198:	af00      	add	r7, sp, #0
 800d19a:	60f8      	str	r0, [r7, #12]
 800d19c:	60b9      	str	r1, [r7, #8]
 800d19e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d10a      	bne.n	800d1bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1aa:	f383 8811 	msr	BASEPRI, r3
 800d1ae:	f3bf 8f6f 	isb	sy
 800d1b2:	f3bf 8f4f 	dsb	sy
 800d1b6:	617b      	str	r3, [r7, #20]
}
 800d1b8:	bf00      	nop
 800d1ba:	e7fe      	b.n	800d1ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d1bc:	4b0a      	ldr	r3, [pc, #40]	; (800d1e8 <vTaskPlaceOnEventListRestricted+0x54>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	3318      	adds	r3, #24
 800d1c2:	4619      	mov	r1, r3
 800d1c4:	68f8      	ldr	r0, [r7, #12]
 800d1c6:	f7fe fc84 	bl	800bad2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d002      	beq.n	800d1d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d1d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d1d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d1d6:	6879      	ldr	r1, [r7, #4]
 800d1d8:	68b8      	ldr	r0, [r7, #8]
 800d1da:	f000 fc4f 	bl	800da7c <prvAddCurrentTaskToDelayedList>
	}
 800d1de:	bf00      	nop
 800d1e0:	3718      	adds	r7, #24
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}
 800d1e6:	bf00      	nop
 800d1e8:	20002284 	.word	0x20002284

0800d1ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b086      	sub	sp, #24
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	68db      	ldr	r3, [r3, #12]
 800d1f8:	68db      	ldr	r3, [r3, #12]
 800d1fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d10a      	bne.n	800d218 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d206:	f383 8811 	msr	BASEPRI, r3
 800d20a:	f3bf 8f6f 	isb	sy
 800d20e:	f3bf 8f4f 	dsb	sy
 800d212:	60fb      	str	r3, [r7, #12]
}
 800d214:	bf00      	nop
 800d216:	e7fe      	b.n	800d216 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	3318      	adds	r3, #24
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7fe fcb5 	bl	800bb8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d222:	4b1e      	ldr	r3, [pc, #120]	; (800d29c <xTaskRemoveFromEventList+0xb0>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d11d      	bne.n	800d266 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d22a:	693b      	ldr	r3, [r7, #16]
 800d22c:	3304      	adds	r3, #4
 800d22e:	4618      	mov	r0, r3
 800d230:	f7fe fcac 	bl	800bb8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d238:	4b19      	ldr	r3, [pc, #100]	; (800d2a0 <xTaskRemoveFromEventList+0xb4>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d903      	bls.n	800d248 <xTaskRemoveFromEventList+0x5c>
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d244:	4a16      	ldr	r2, [pc, #88]	; (800d2a0 <xTaskRemoveFromEventList+0xb4>)
 800d246:	6013      	str	r3, [r2, #0]
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d24c:	4613      	mov	r3, r2
 800d24e:	009b      	lsls	r3, r3, #2
 800d250:	4413      	add	r3, r2
 800d252:	009b      	lsls	r3, r3, #2
 800d254:	4a13      	ldr	r2, [pc, #76]	; (800d2a4 <xTaskRemoveFromEventList+0xb8>)
 800d256:	441a      	add	r2, r3
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	3304      	adds	r3, #4
 800d25c:	4619      	mov	r1, r3
 800d25e:	4610      	mov	r0, r2
 800d260:	f7fe fc37 	bl	800bad2 <vListInsertEnd>
 800d264:	e005      	b.n	800d272 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	3318      	adds	r3, #24
 800d26a:	4619      	mov	r1, r3
 800d26c:	480e      	ldr	r0, [pc, #56]	; (800d2a8 <xTaskRemoveFromEventList+0xbc>)
 800d26e:	f7fe fc30 	bl	800bad2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d276:	4b0d      	ldr	r3, [pc, #52]	; (800d2ac <xTaskRemoveFromEventList+0xc0>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d905      	bls.n	800d28c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d280:	2301      	movs	r3, #1
 800d282:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d284:	4b0a      	ldr	r3, [pc, #40]	; (800d2b0 <xTaskRemoveFromEventList+0xc4>)
 800d286:	2201      	movs	r2, #1
 800d288:	601a      	str	r2, [r3, #0]
 800d28a:	e001      	b.n	800d290 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d28c:	2300      	movs	r3, #0
 800d28e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d290:	697b      	ldr	r3, [r7, #20]
}
 800d292:	4618      	mov	r0, r3
 800d294:	3718      	adds	r7, #24
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}
 800d29a:	bf00      	nop
 800d29c:	20002780 	.word	0x20002780
 800d2a0:	20002760 	.word	0x20002760
 800d2a4:	20002288 	.word	0x20002288
 800d2a8:	20002718 	.word	0x20002718
 800d2ac:	20002284 	.word	0x20002284
 800d2b0:	2000276c 	.word	0x2000276c

0800d2b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b083      	sub	sp, #12
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d2bc:	4b06      	ldr	r3, [pc, #24]	; (800d2d8 <vTaskInternalSetTimeOutState+0x24>)
 800d2be:	681a      	ldr	r2, [r3, #0]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d2c4:	4b05      	ldr	r3, [pc, #20]	; (800d2dc <vTaskInternalSetTimeOutState+0x28>)
 800d2c6:	681a      	ldr	r2, [r3, #0]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	605a      	str	r2, [r3, #4]
}
 800d2cc:	bf00      	nop
 800d2ce:	370c      	adds	r7, #12
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr
 800d2d8:	20002770 	.word	0x20002770
 800d2dc:	2000275c 	.word	0x2000275c

0800d2e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b088      	sub	sp, #32
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d10a      	bne.n	800d306 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f4:	f383 8811 	msr	BASEPRI, r3
 800d2f8:	f3bf 8f6f 	isb	sy
 800d2fc:	f3bf 8f4f 	dsb	sy
 800d300:	613b      	str	r3, [r7, #16]
}
 800d302:	bf00      	nop
 800d304:	e7fe      	b.n	800d304 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d10a      	bne.n	800d322 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d310:	f383 8811 	msr	BASEPRI, r3
 800d314:	f3bf 8f6f 	isb	sy
 800d318:	f3bf 8f4f 	dsb	sy
 800d31c:	60fb      	str	r3, [r7, #12]
}
 800d31e:	bf00      	nop
 800d320:	e7fe      	b.n	800d320 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d322:	f001 f877 	bl	800e414 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d326:	4b1d      	ldr	r3, [pc, #116]	; (800d39c <xTaskCheckForTimeOut+0xbc>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	685b      	ldr	r3, [r3, #4]
 800d330:	69ba      	ldr	r2, [r7, #24]
 800d332:	1ad3      	subs	r3, r2, r3
 800d334:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d33e:	d102      	bne.n	800d346 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d340:	2300      	movs	r3, #0
 800d342:	61fb      	str	r3, [r7, #28]
 800d344:	e023      	b.n	800d38e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681a      	ldr	r2, [r3, #0]
 800d34a:	4b15      	ldr	r3, [pc, #84]	; (800d3a0 <xTaskCheckForTimeOut+0xc0>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	429a      	cmp	r2, r3
 800d350:	d007      	beq.n	800d362 <xTaskCheckForTimeOut+0x82>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	685b      	ldr	r3, [r3, #4]
 800d356:	69ba      	ldr	r2, [r7, #24]
 800d358:	429a      	cmp	r2, r3
 800d35a:	d302      	bcc.n	800d362 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d35c:	2301      	movs	r3, #1
 800d35e:	61fb      	str	r3, [r7, #28]
 800d360:	e015      	b.n	800d38e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	697a      	ldr	r2, [r7, #20]
 800d368:	429a      	cmp	r2, r3
 800d36a:	d20b      	bcs.n	800d384 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	681a      	ldr	r2, [r3, #0]
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	1ad2      	subs	r2, r2, r3
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f7ff ff9b 	bl	800d2b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d37e:	2300      	movs	r3, #0
 800d380:	61fb      	str	r3, [r7, #28]
 800d382:	e004      	b.n	800d38e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	2200      	movs	r2, #0
 800d388:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d38a:	2301      	movs	r3, #1
 800d38c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d38e:	f001 f871 	bl	800e474 <vPortExitCritical>

	return xReturn;
 800d392:	69fb      	ldr	r3, [r7, #28]
}
 800d394:	4618      	mov	r0, r3
 800d396:	3720      	adds	r7, #32
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}
 800d39c:	2000275c 	.word	0x2000275c
 800d3a0:	20002770 	.word	0x20002770

0800d3a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d3a8:	4b03      	ldr	r3, [pc, #12]	; (800d3b8 <vTaskMissedYield+0x14>)
 800d3aa:	2201      	movs	r2, #1
 800d3ac:	601a      	str	r2, [r3, #0]
}
 800d3ae:	bf00      	nop
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr
 800d3b8:	2000276c 	.word	0x2000276c

0800d3bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d3c4:	f000 f852 	bl	800d46c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d3c8:	4b06      	ldr	r3, [pc, #24]	; (800d3e4 <prvIdleTask+0x28>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d9f9      	bls.n	800d3c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d3d0:	4b05      	ldr	r3, [pc, #20]	; (800d3e8 <prvIdleTask+0x2c>)
 800d3d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3d6:	601a      	str	r2, [r3, #0]
 800d3d8:	f3bf 8f4f 	dsb	sy
 800d3dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d3e0:	e7f0      	b.n	800d3c4 <prvIdleTask+0x8>
 800d3e2:	bf00      	nop
 800d3e4:	20002288 	.word	0x20002288
 800d3e8:	e000ed04 	.word	0xe000ed04

0800d3ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b082      	sub	sp, #8
 800d3f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	607b      	str	r3, [r7, #4]
 800d3f6:	e00c      	b.n	800d412 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d3f8:	687a      	ldr	r2, [r7, #4]
 800d3fa:	4613      	mov	r3, r2
 800d3fc:	009b      	lsls	r3, r3, #2
 800d3fe:	4413      	add	r3, r2
 800d400:	009b      	lsls	r3, r3, #2
 800d402:	4a12      	ldr	r2, [pc, #72]	; (800d44c <prvInitialiseTaskLists+0x60>)
 800d404:	4413      	add	r3, r2
 800d406:	4618      	mov	r0, r3
 800d408:	f7fe fb36 	bl	800ba78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	3301      	adds	r3, #1
 800d410:	607b      	str	r3, [r7, #4]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2b37      	cmp	r3, #55	; 0x37
 800d416:	d9ef      	bls.n	800d3f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d418:	480d      	ldr	r0, [pc, #52]	; (800d450 <prvInitialiseTaskLists+0x64>)
 800d41a:	f7fe fb2d 	bl	800ba78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d41e:	480d      	ldr	r0, [pc, #52]	; (800d454 <prvInitialiseTaskLists+0x68>)
 800d420:	f7fe fb2a 	bl	800ba78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d424:	480c      	ldr	r0, [pc, #48]	; (800d458 <prvInitialiseTaskLists+0x6c>)
 800d426:	f7fe fb27 	bl	800ba78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d42a:	480c      	ldr	r0, [pc, #48]	; (800d45c <prvInitialiseTaskLists+0x70>)
 800d42c:	f7fe fb24 	bl	800ba78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d430:	480b      	ldr	r0, [pc, #44]	; (800d460 <prvInitialiseTaskLists+0x74>)
 800d432:	f7fe fb21 	bl	800ba78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d436:	4b0b      	ldr	r3, [pc, #44]	; (800d464 <prvInitialiseTaskLists+0x78>)
 800d438:	4a05      	ldr	r2, [pc, #20]	; (800d450 <prvInitialiseTaskLists+0x64>)
 800d43a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d43c:	4b0a      	ldr	r3, [pc, #40]	; (800d468 <prvInitialiseTaskLists+0x7c>)
 800d43e:	4a05      	ldr	r2, [pc, #20]	; (800d454 <prvInitialiseTaskLists+0x68>)
 800d440:	601a      	str	r2, [r3, #0]
}
 800d442:	bf00      	nop
 800d444:	3708      	adds	r7, #8
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}
 800d44a:	bf00      	nop
 800d44c:	20002288 	.word	0x20002288
 800d450:	200026e8 	.word	0x200026e8
 800d454:	200026fc 	.word	0x200026fc
 800d458:	20002718 	.word	0x20002718
 800d45c:	2000272c 	.word	0x2000272c
 800d460:	20002744 	.word	0x20002744
 800d464:	20002710 	.word	0x20002710
 800d468:	20002714 	.word	0x20002714

0800d46c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b082      	sub	sp, #8
 800d470:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d472:	e019      	b.n	800d4a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d474:	f000 ffce 	bl	800e414 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d478:	4b10      	ldr	r3, [pc, #64]	; (800d4bc <prvCheckTasksWaitingTermination+0x50>)
 800d47a:	68db      	ldr	r3, [r3, #12]
 800d47c:	68db      	ldr	r3, [r3, #12]
 800d47e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	3304      	adds	r3, #4
 800d484:	4618      	mov	r0, r3
 800d486:	f7fe fb81 	bl	800bb8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d48a:	4b0d      	ldr	r3, [pc, #52]	; (800d4c0 <prvCheckTasksWaitingTermination+0x54>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	3b01      	subs	r3, #1
 800d490:	4a0b      	ldr	r2, [pc, #44]	; (800d4c0 <prvCheckTasksWaitingTermination+0x54>)
 800d492:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d494:	4b0b      	ldr	r3, [pc, #44]	; (800d4c4 <prvCheckTasksWaitingTermination+0x58>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	3b01      	subs	r3, #1
 800d49a:	4a0a      	ldr	r2, [pc, #40]	; (800d4c4 <prvCheckTasksWaitingTermination+0x58>)
 800d49c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d49e:	f000 ffe9 	bl	800e474 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f000 f810 	bl	800d4c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d4a8:	4b06      	ldr	r3, [pc, #24]	; (800d4c4 <prvCheckTasksWaitingTermination+0x58>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d1e1      	bne.n	800d474 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d4b0:	bf00      	nop
 800d4b2:	bf00      	nop
 800d4b4:	3708      	adds	r7, #8
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	2000272c 	.word	0x2000272c
 800d4c0:	20002758 	.word	0x20002758
 800d4c4:	20002740 	.word	0x20002740

0800d4c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b084      	sub	sp, #16
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d108      	bne.n	800d4ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f001 f97e 	bl	800e7e0 <vPortFree>
				vPortFree( pxTCB );
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f001 f97b 	bl	800e7e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d4ea:	e018      	b.n	800d51e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d4f2:	2b01      	cmp	r3, #1
 800d4f4:	d103      	bne.n	800d4fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f001 f972 	bl	800e7e0 <vPortFree>
	}
 800d4fc:	e00f      	b.n	800d51e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d504:	2b02      	cmp	r3, #2
 800d506:	d00a      	beq.n	800d51e <prvDeleteTCB+0x56>
	__asm volatile
 800d508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d50c:	f383 8811 	msr	BASEPRI, r3
 800d510:	f3bf 8f6f 	isb	sy
 800d514:	f3bf 8f4f 	dsb	sy
 800d518:	60fb      	str	r3, [r7, #12]
}
 800d51a:	bf00      	nop
 800d51c:	e7fe      	b.n	800d51c <prvDeleteTCB+0x54>
	}
 800d51e:	bf00      	nop
 800d520:	3710      	adds	r7, #16
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
	...

0800d528 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d528:	b480      	push	{r7}
 800d52a:	b083      	sub	sp, #12
 800d52c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d52e:	4b0c      	ldr	r3, [pc, #48]	; (800d560 <prvResetNextTaskUnblockTime+0x38>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d104      	bne.n	800d542 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d538:	4b0a      	ldr	r3, [pc, #40]	; (800d564 <prvResetNextTaskUnblockTime+0x3c>)
 800d53a:	f04f 32ff 	mov.w	r2, #4294967295
 800d53e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d540:	e008      	b.n	800d554 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d542:	4b07      	ldr	r3, [pc, #28]	; (800d560 <prvResetNextTaskUnblockTime+0x38>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	68db      	ldr	r3, [r3, #12]
 800d548:	68db      	ldr	r3, [r3, #12]
 800d54a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	685b      	ldr	r3, [r3, #4]
 800d550:	4a04      	ldr	r2, [pc, #16]	; (800d564 <prvResetNextTaskUnblockTime+0x3c>)
 800d552:	6013      	str	r3, [r2, #0]
}
 800d554:	bf00      	nop
 800d556:	370c      	adds	r7, #12
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr
 800d560:	20002710 	.word	0x20002710
 800d564:	20002778 	.word	0x20002778

0800d568 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d568:	b480      	push	{r7}
 800d56a:	b083      	sub	sp, #12
 800d56c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d56e:	4b0b      	ldr	r3, [pc, #44]	; (800d59c <xTaskGetSchedulerState+0x34>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d102      	bne.n	800d57c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d576:	2301      	movs	r3, #1
 800d578:	607b      	str	r3, [r7, #4]
 800d57a:	e008      	b.n	800d58e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d57c:	4b08      	ldr	r3, [pc, #32]	; (800d5a0 <xTaskGetSchedulerState+0x38>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d102      	bne.n	800d58a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d584:	2302      	movs	r3, #2
 800d586:	607b      	str	r3, [r7, #4]
 800d588:	e001      	b.n	800d58e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d58a:	2300      	movs	r3, #0
 800d58c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d58e:	687b      	ldr	r3, [r7, #4]
	}
 800d590:	4618      	mov	r0, r3
 800d592:	370c      	adds	r7, #12
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr
 800d59c:	20002764 	.word	0x20002764
 800d5a0:	20002780 	.word	0x20002780

0800d5a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b084      	sub	sp, #16
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d051      	beq.n	800d65e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5be:	4b2a      	ldr	r3, [pc, #168]	; (800d668 <xTaskPriorityInherit+0xc4>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	d241      	bcs.n	800d64c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	699b      	ldr	r3, [r3, #24]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	db06      	blt.n	800d5de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5d0:	4b25      	ldr	r3, [pc, #148]	; (800d668 <xTaskPriorityInherit+0xc4>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	6959      	ldr	r1, [r3, #20]
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5e6:	4613      	mov	r3, r2
 800d5e8:	009b      	lsls	r3, r3, #2
 800d5ea:	4413      	add	r3, r2
 800d5ec:	009b      	lsls	r3, r3, #2
 800d5ee:	4a1f      	ldr	r2, [pc, #124]	; (800d66c <xTaskPriorityInherit+0xc8>)
 800d5f0:	4413      	add	r3, r2
 800d5f2:	4299      	cmp	r1, r3
 800d5f4:	d122      	bne.n	800d63c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	3304      	adds	r3, #4
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f7fe fac6 	bl	800bb8c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d600:	4b19      	ldr	r3, [pc, #100]	; (800d668 <xTaskPriorityInherit+0xc4>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d60e:	4b18      	ldr	r3, [pc, #96]	; (800d670 <xTaskPriorityInherit+0xcc>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	429a      	cmp	r2, r3
 800d614:	d903      	bls.n	800d61e <xTaskPriorityInherit+0x7a>
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d61a:	4a15      	ldr	r2, [pc, #84]	; (800d670 <xTaskPriorityInherit+0xcc>)
 800d61c:	6013      	str	r3, [r2, #0]
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d622:	4613      	mov	r3, r2
 800d624:	009b      	lsls	r3, r3, #2
 800d626:	4413      	add	r3, r2
 800d628:	009b      	lsls	r3, r3, #2
 800d62a:	4a10      	ldr	r2, [pc, #64]	; (800d66c <xTaskPriorityInherit+0xc8>)
 800d62c:	441a      	add	r2, r3
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	3304      	adds	r3, #4
 800d632:	4619      	mov	r1, r3
 800d634:	4610      	mov	r0, r2
 800d636:	f7fe fa4c 	bl	800bad2 <vListInsertEnd>
 800d63a:	e004      	b.n	800d646 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d63c:	4b0a      	ldr	r3, [pc, #40]	; (800d668 <xTaskPriorityInherit+0xc4>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d646:	2301      	movs	r3, #1
 800d648:	60fb      	str	r3, [r7, #12]
 800d64a:	e008      	b.n	800d65e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d650:	4b05      	ldr	r3, [pc, #20]	; (800d668 <xTaskPriorityInherit+0xc4>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d656:	429a      	cmp	r2, r3
 800d658:	d201      	bcs.n	800d65e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d65a:	2301      	movs	r3, #1
 800d65c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d65e:	68fb      	ldr	r3, [r7, #12]
	}
 800d660:	4618      	mov	r0, r3
 800d662:	3710      	adds	r7, #16
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}
 800d668:	20002284 	.word	0x20002284
 800d66c:	20002288 	.word	0x20002288
 800d670:	20002760 	.word	0x20002760

0800d674 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d674:	b580      	push	{r7, lr}
 800d676:	b086      	sub	sp, #24
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d680:	2300      	movs	r3, #0
 800d682:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d056      	beq.n	800d738 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d68a:	4b2e      	ldr	r3, [pc, #184]	; (800d744 <xTaskPriorityDisinherit+0xd0>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	693a      	ldr	r2, [r7, #16]
 800d690:	429a      	cmp	r2, r3
 800d692:	d00a      	beq.n	800d6aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d698:	f383 8811 	msr	BASEPRI, r3
 800d69c:	f3bf 8f6f 	isb	sy
 800d6a0:	f3bf 8f4f 	dsb	sy
 800d6a4:	60fb      	str	r3, [r7, #12]
}
 800d6a6:	bf00      	nop
 800d6a8:	e7fe      	b.n	800d6a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d10a      	bne.n	800d6c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b6:	f383 8811 	msr	BASEPRI, r3
 800d6ba:	f3bf 8f6f 	isb	sy
 800d6be:	f3bf 8f4f 	dsb	sy
 800d6c2:	60bb      	str	r3, [r7, #8]
}
 800d6c4:	bf00      	nop
 800d6c6:	e7fe      	b.n	800d6c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6cc:	1e5a      	subs	r2, r3, #1
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d6d2:	693b      	ldr	r3, [r7, #16]
 800d6d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6d6:	693b      	ldr	r3, [r7, #16]
 800d6d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d02c      	beq.n	800d738 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d128      	bne.n	800d738 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	3304      	adds	r3, #4
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7fe fa4e 	bl	800bb8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d708:	4b0f      	ldr	r3, [pc, #60]	; (800d748 <xTaskPriorityDisinherit+0xd4>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d903      	bls.n	800d718 <xTaskPriorityDisinherit+0xa4>
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d714:	4a0c      	ldr	r2, [pc, #48]	; (800d748 <xTaskPriorityDisinherit+0xd4>)
 800d716:	6013      	str	r3, [r2, #0]
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d71c:	4613      	mov	r3, r2
 800d71e:	009b      	lsls	r3, r3, #2
 800d720:	4413      	add	r3, r2
 800d722:	009b      	lsls	r3, r3, #2
 800d724:	4a09      	ldr	r2, [pc, #36]	; (800d74c <xTaskPriorityDisinherit+0xd8>)
 800d726:	441a      	add	r2, r3
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	3304      	adds	r3, #4
 800d72c:	4619      	mov	r1, r3
 800d72e:	4610      	mov	r0, r2
 800d730:	f7fe f9cf 	bl	800bad2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d734:	2301      	movs	r3, #1
 800d736:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d738:	697b      	ldr	r3, [r7, #20]
	}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3718      	adds	r7, #24
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	bf00      	nop
 800d744:	20002284 	.word	0x20002284
 800d748:	20002760 	.word	0x20002760
 800d74c:	20002288 	.word	0x20002288

0800d750 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d750:	b580      	push	{r7, lr}
 800d752:	b088      	sub	sp, #32
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d75e:	2301      	movs	r3, #1
 800d760:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d06a      	beq.n	800d83e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d768:	69bb      	ldr	r3, [r7, #24]
 800d76a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d10a      	bne.n	800d786 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d774:	f383 8811 	msr	BASEPRI, r3
 800d778:	f3bf 8f6f 	isb	sy
 800d77c:	f3bf 8f4f 	dsb	sy
 800d780:	60fb      	str	r3, [r7, #12]
}
 800d782:	bf00      	nop
 800d784:	e7fe      	b.n	800d784 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d786:	69bb      	ldr	r3, [r7, #24]
 800d788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d78a:	683a      	ldr	r2, [r7, #0]
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d902      	bls.n	800d796 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	61fb      	str	r3, [r7, #28]
 800d794:	e002      	b.n	800d79c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d796:	69bb      	ldr	r3, [r7, #24]
 800d798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d79a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d79c:	69bb      	ldr	r3, [r7, #24]
 800d79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7a0:	69fa      	ldr	r2, [r7, #28]
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	d04b      	beq.n	800d83e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d7a6:	69bb      	ldr	r3, [r7, #24]
 800d7a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7aa:	697a      	ldr	r2, [r7, #20]
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d146      	bne.n	800d83e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d7b0:	4b25      	ldr	r3, [pc, #148]	; (800d848 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	69ba      	ldr	r2, [r7, #24]
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d10a      	bne.n	800d7d0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7be:	f383 8811 	msr	BASEPRI, r3
 800d7c2:	f3bf 8f6f 	isb	sy
 800d7c6:	f3bf 8f4f 	dsb	sy
 800d7ca:	60bb      	str	r3, [r7, #8]
}
 800d7cc:	bf00      	nop
 800d7ce:	e7fe      	b.n	800d7ce <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d7d0:	69bb      	ldr	r3, [r7, #24]
 800d7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d7d6:	69bb      	ldr	r3, [r7, #24]
 800d7d8:	69fa      	ldr	r2, [r7, #28]
 800d7da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d7dc:	69bb      	ldr	r3, [r7, #24]
 800d7de:	699b      	ldr	r3, [r3, #24]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	db04      	blt.n	800d7ee <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7e4:	69fb      	ldr	r3, [r7, #28]
 800d7e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d7ea:	69bb      	ldr	r3, [r7, #24]
 800d7ec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d7ee:	69bb      	ldr	r3, [r7, #24]
 800d7f0:	6959      	ldr	r1, [r3, #20]
 800d7f2:	693a      	ldr	r2, [r7, #16]
 800d7f4:	4613      	mov	r3, r2
 800d7f6:	009b      	lsls	r3, r3, #2
 800d7f8:	4413      	add	r3, r2
 800d7fa:	009b      	lsls	r3, r3, #2
 800d7fc:	4a13      	ldr	r2, [pc, #76]	; (800d84c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d7fe:	4413      	add	r3, r2
 800d800:	4299      	cmp	r1, r3
 800d802:	d11c      	bne.n	800d83e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d804:	69bb      	ldr	r3, [r7, #24]
 800d806:	3304      	adds	r3, #4
 800d808:	4618      	mov	r0, r3
 800d80a:	f7fe f9bf 	bl	800bb8c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d80e:	69bb      	ldr	r3, [r7, #24]
 800d810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d812:	4b0f      	ldr	r3, [pc, #60]	; (800d850 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	429a      	cmp	r2, r3
 800d818:	d903      	bls.n	800d822 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d81a:	69bb      	ldr	r3, [r7, #24]
 800d81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d81e:	4a0c      	ldr	r2, [pc, #48]	; (800d850 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d820:	6013      	str	r3, [r2, #0]
 800d822:	69bb      	ldr	r3, [r7, #24]
 800d824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d826:	4613      	mov	r3, r2
 800d828:	009b      	lsls	r3, r3, #2
 800d82a:	4413      	add	r3, r2
 800d82c:	009b      	lsls	r3, r3, #2
 800d82e:	4a07      	ldr	r2, [pc, #28]	; (800d84c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d830:	441a      	add	r2, r3
 800d832:	69bb      	ldr	r3, [r7, #24]
 800d834:	3304      	adds	r3, #4
 800d836:	4619      	mov	r1, r3
 800d838:	4610      	mov	r0, r2
 800d83a:	f7fe f94a 	bl	800bad2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d83e:	bf00      	nop
 800d840:	3720      	adds	r7, #32
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	20002284 	.word	0x20002284
 800d84c:	20002288 	.word	0x20002288
 800d850:	20002760 	.word	0x20002760

0800d854 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d854:	b480      	push	{r7}
 800d856:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d858:	4b07      	ldr	r3, [pc, #28]	; (800d878 <pvTaskIncrementMutexHeldCount+0x24>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d004      	beq.n	800d86a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d860:	4b05      	ldr	r3, [pc, #20]	; (800d878 <pvTaskIncrementMutexHeldCount+0x24>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d866:	3201      	adds	r2, #1
 800d868:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d86a:	4b03      	ldr	r3, [pc, #12]	; (800d878 <pvTaskIncrementMutexHeldCount+0x24>)
 800d86c:	681b      	ldr	r3, [r3, #0]
	}
 800d86e:	4618      	mov	r0, r3
 800d870:	46bd      	mov	sp, r7
 800d872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d876:	4770      	bx	lr
 800d878:	20002284 	.word	0x20002284

0800d87c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b084      	sub	sp, #16
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800d886:	f000 fdc5 	bl	800e414 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800d88a:	4b1e      	ldr	r3, [pc, #120]	; (800d904 <ulTaskNotifyTake+0x88>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d890:	2b00      	cmp	r3, #0
 800d892:	d113      	bne.n	800d8bc <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d894:	4b1b      	ldr	r3, [pc, #108]	; (800d904 <ulTaskNotifyTake+0x88>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	2201      	movs	r2, #1
 800d89a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d00b      	beq.n	800d8bc <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d8a4:	2101      	movs	r1, #1
 800d8a6:	6838      	ldr	r0, [r7, #0]
 800d8a8:	f000 f8e8 	bl	800da7c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d8ac:	4b16      	ldr	r3, [pc, #88]	; (800d908 <ulTaskNotifyTake+0x8c>)
 800d8ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8b2:	601a      	str	r2, [r3, #0]
 800d8b4:	f3bf 8f4f 	dsb	sy
 800d8b8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d8bc:	f000 fdda 	bl	800e474 <vPortExitCritical>

		taskENTER_CRITICAL();
 800d8c0:	f000 fda8 	bl	800e414 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800d8c4:	4b0f      	ldr	r3, [pc, #60]	; (800d904 <ulTaskNotifyTake+0x88>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8ca:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d00c      	beq.n	800d8ec <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d004      	beq.n	800d8e2 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800d8d8:	4b0a      	ldr	r3, [pc, #40]	; (800d904 <ulTaskNotifyTake+0x88>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	2200      	movs	r2, #0
 800d8de:	655a      	str	r2, [r3, #84]	; 0x54
 800d8e0:	e004      	b.n	800d8ec <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800d8e2:	4b08      	ldr	r3, [pc, #32]	; (800d904 <ulTaskNotifyTake+0x88>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	68fa      	ldr	r2, [r7, #12]
 800d8e8:	3a01      	subs	r2, #1
 800d8ea:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d8ec:	4b05      	ldr	r3, [pc, #20]	; (800d904 <ulTaskNotifyTake+0x88>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800d8f6:	f000 fdbd 	bl	800e474 <vPortExitCritical>

		return ulReturn;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
	}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3710      	adds	r7, #16
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}
 800d904:	20002284 	.word	0x20002284
 800d908:	e000ed04 	.word	0xe000ed04

0800d90c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b08a      	sub	sp, #40	; 0x28
 800d910:	af00      	add	r7, sp, #0
 800d912:	60f8      	str	r0, [r7, #12]
 800d914:	60b9      	str	r1, [r7, #8]
 800d916:	603b      	str	r3, [r7, #0]
 800d918:	4613      	mov	r3, r2
 800d91a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800d91c:	2301      	movs	r3, #1
 800d91e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d10a      	bne.n	800d93c <xTaskGenericNotify+0x30>
	__asm volatile
 800d926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92a:	f383 8811 	msr	BASEPRI, r3
 800d92e:	f3bf 8f6f 	isb	sy
 800d932:	f3bf 8f4f 	dsb	sy
 800d936:	61bb      	str	r3, [r7, #24]
}
 800d938:	bf00      	nop
 800d93a:	e7fe      	b.n	800d93a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800d940:	f000 fd68 	bl	800e414 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d003      	beq.n	800d952 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d94a:	6a3b      	ldr	r3, [r7, #32]
 800d94c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d952:	6a3b      	ldr	r3, [r7, #32]
 800d954:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d958:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d95a:	6a3b      	ldr	r3, [r7, #32]
 800d95c:	2202      	movs	r2, #2
 800d95e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800d962:	79fb      	ldrb	r3, [r7, #7]
 800d964:	2b04      	cmp	r3, #4
 800d966:	d828      	bhi.n	800d9ba <xTaskGenericNotify+0xae>
 800d968:	a201      	add	r2, pc, #4	; (adr r2, 800d970 <xTaskGenericNotify+0x64>)
 800d96a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d96e:	bf00      	nop
 800d970:	0800d9db 	.word	0x0800d9db
 800d974:	0800d985 	.word	0x0800d985
 800d978:	0800d993 	.word	0x0800d993
 800d97c:	0800d99f 	.word	0x0800d99f
 800d980:	0800d9a7 	.word	0x0800d9a7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d984:	6a3b      	ldr	r3, [r7, #32]
 800d986:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	431a      	orrs	r2, r3
 800d98c:	6a3b      	ldr	r3, [r7, #32]
 800d98e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800d990:	e026      	b.n	800d9e0 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d992:	6a3b      	ldr	r3, [r7, #32]
 800d994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d996:	1c5a      	adds	r2, r3, #1
 800d998:	6a3b      	ldr	r3, [r7, #32]
 800d99a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800d99c:	e020      	b.n	800d9e0 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d99e:	6a3b      	ldr	r3, [r7, #32]
 800d9a0:	68ba      	ldr	r2, [r7, #8]
 800d9a2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800d9a4:	e01c      	b.n	800d9e0 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d9a6:	7ffb      	ldrb	r3, [r7, #31]
 800d9a8:	2b02      	cmp	r3, #2
 800d9aa:	d003      	beq.n	800d9b4 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d9ac:	6a3b      	ldr	r3, [r7, #32]
 800d9ae:	68ba      	ldr	r2, [r7, #8]
 800d9b0:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d9b2:	e015      	b.n	800d9e0 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800d9b8:	e012      	b.n	800d9e0 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d9ba:	6a3b      	ldr	r3, [r7, #32]
 800d9bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c2:	d00c      	beq.n	800d9de <xTaskGenericNotify+0xd2>
	__asm volatile
 800d9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c8:	f383 8811 	msr	BASEPRI, r3
 800d9cc:	f3bf 8f6f 	isb	sy
 800d9d0:	f3bf 8f4f 	dsb	sy
 800d9d4:	617b      	str	r3, [r7, #20]
}
 800d9d6:	bf00      	nop
 800d9d8:	e7fe      	b.n	800d9d8 <xTaskGenericNotify+0xcc>
					break;
 800d9da:	bf00      	nop
 800d9dc:	e000      	b.n	800d9e0 <xTaskGenericNotify+0xd4>

					break;
 800d9de:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d9e0:	7ffb      	ldrb	r3, [r7, #31]
 800d9e2:	2b01      	cmp	r3, #1
 800d9e4:	d13a      	bne.n	800da5c <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d9e6:	6a3b      	ldr	r3, [r7, #32]
 800d9e8:	3304      	adds	r3, #4
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f7fe f8ce 	bl	800bb8c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800d9f0:	6a3b      	ldr	r3, [r7, #32]
 800d9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9f4:	4b1d      	ldr	r3, [pc, #116]	; (800da6c <xTaskGenericNotify+0x160>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d903      	bls.n	800da04 <xTaskGenericNotify+0xf8>
 800d9fc:	6a3b      	ldr	r3, [r7, #32]
 800d9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da00:	4a1a      	ldr	r2, [pc, #104]	; (800da6c <xTaskGenericNotify+0x160>)
 800da02:	6013      	str	r3, [r2, #0]
 800da04:	6a3b      	ldr	r3, [r7, #32]
 800da06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da08:	4613      	mov	r3, r2
 800da0a:	009b      	lsls	r3, r3, #2
 800da0c:	4413      	add	r3, r2
 800da0e:	009b      	lsls	r3, r3, #2
 800da10:	4a17      	ldr	r2, [pc, #92]	; (800da70 <xTaskGenericNotify+0x164>)
 800da12:	441a      	add	r2, r3
 800da14:	6a3b      	ldr	r3, [r7, #32]
 800da16:	3304      	adds	r3, #4
 800da18:	4619      	mov	r1, r3
 800da1a:	4610      	mov	r0, r2
 800da1c:	f7fe f859 	bl	800bad2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800da20:	6a3b      	ldr	r3, [r7, #32]
 800da22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da24:	2b00      	cmp	r3, #0
 800da26:	d00a      	beq.n	800da3e <xTaskGenericNotify+0x132>
	__asm volatile
 800da28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da2c:	f383 8811 	msr	BASEPRI, r3
 800da30:	f3bf 8f6f 	isb	sy
 800da34:	f3bf 8f4f 	dsb	sy
 800da38:	613b      	str	r3, [r7, #16]
}
 800da3a:	bf00      	nop
 800da3c:	e7fe      	b.n	800da3c <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800da3e:	6a3b      	ldr	r3, [r7, #32]
 800da40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da42:	4b0c      	ldr	r3, [pc, #48]	; (800da74 <xTaskGenericNotify+0x168>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da48:	429a      	cmp	r2, r3
 800da4a:	d907      	bls.n	800da5c <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800da4c:	4b0a      	ldr	r3, [pc, #40]	; (800da78 <xTaskGenericNotify+0x16c>)
 800da4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da52:	601a      	str	r2, [r3, #0]
 800da54:	f3bf 8f4f 	dsb	sy
 800da58:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800da5c:	f000 fd0a 	bl	800e474 <vPortExitCritical>

		return xReturn;
 800da60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800da62:	4618      	mov	r0, r3
 800da64:	3728      	adds	r7, #40	; 0x28
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	20002760 	.word	0x20002760
 800da70:	20002288 	.word	0x20002288
 800da74:	20002284 	.word	0x20002284
 800da78:	e000ed04 	.word	0xe000ed04

0800da7c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b084      	sub	sp, #16
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800da86:	4b21      	ldr	r3, [pc, #132]	; (800db0c <prvAddCurrentTaskToDelayedList+0x90>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da8c:	4b20      	ldr	r3, [pc, #128]	; (800db10 <prvAddCurrentTaskToDelayedList+0x94>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	3304      	adds	r3, #4
 800da92:	4618      	mov	r0, r3
 800da94:	f7fe f87a 	bl	800bb8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da9e:	d10a      	bne.n	800dab6 <prvAddCurrentTaskToDelayedList+0x3a>
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d007      	beq.n	800dab6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800daa6:	4b1a      	ldr	r3, [pc, #104]	; (800db10 <prvAddCurrentTaskToDelayedList+0x94>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	3304      	adds	r3, #4
 800daac:	4619      	mov	r1, r3
 800daae:	4819      	ldr	r0, [pc, #100]	; (800db14 <prvAddCurrentTaskToDelayedList+0x98>)
 800dab0:	f7fe f80f 	bl	800bad2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dab4:	e026      	b.n	800db04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dab6:	68fa      	ldr	r2, [r7, #12]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	4413      	add	r3, r2
 800dabc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dabe:	4b14      	ldr	r3, [pc, #80]	; (800db10 <prvAddCurrentTaskToDelayedList+0x94>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	68ba      	ldr	r2, [r7, #8]
 800dac4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dac6:	68ba      	ldr	r2, [r7, #8]
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	429a      	cmp	r2, r3
 800dacc:	d209      	bcs.n	800dae2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dace:	4b12      	ldr	r3, [pc, #72]	; (800db18 <prvAddCurrentTaskToDelayedList+0x9c>)
 800dad0:	681a      	ldr	r2, [r3, #0]
 800dad2:	4b0f      	ldr	r3, [pc, #60]	; (800db10 <prvAddCurrentTaskToDelayedList+0x94>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	3304      	adds	r3, #4
 800dad8:	4619      	mov	r1, r3
 800dada:	4610      	mov	r0, r2
 800dadc:	f7fe f81d 	bl	800bb1a <vListInsert>
}
 800dae0:	e010      	b.n	800db04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dae2:	4b0e      	ldr	r3, [pc, #56]	; (800db1c <prvAddCurrentTaskToDelayedList+0xa0>)
 800dae4:	681a      	ldr	r2, [r3, #0]
 800dae6:	4b0a      	ldr	r3, [pc, #40]	; (800db10 <prvAddCurrentTaskToDelayedList+0x94>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	3304      	adds	r3, #4
 800daec:	4619      	mov	r1, r3
 800daee:	4610      	mov	r0, r2
 800daf0:	f7fe f813 	bl	800bb1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800daf4:	4b0a      	ldr	r3, [pc, #40]	; (800db20 <prvAddCurrentTaskToDelayedList+0xa4>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	68ba      	ldr	r2, [r7, #8]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d202      	bcs.n	800db04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dafe:	4a08      	ldr	r2, [pc, #32]	; (800db20 <prvAddCurrentTaskToDelayedList+0xa4>)
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	6013      	str	r3, [r2, #0]
}
 800db04:	bf00      	nop
 800db06:	3710      	adds	r7, #16
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}
 800db0c:	2000275c 	.word	0x2000275c
 800db10:	20002284 	.word	0x20002284
 800db14:	20002744 	.word	0x20002744
 800db18:	20002714 	.word	0x20002714
 800db1c:	20002710 	.word	0x20002710
 800db20:	20002778 	.word	0x20002778

0800db24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b08a      	sub	sp, #40	; 0x28
 800db28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800db2a:	2300      	movs	r3, #0
 800db2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800db2e:	f000 fb07 	bl	800e140 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800db32:	4b1c      	ldr	r3, [pc, #112]	; (800dba4 <xTimerCreateTimerTask+0x80>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d021      	beq.n	800db7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800db3a:	2300      	movs	r3, #0
 800db3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800db3e:	2300      	movs	r3, #0
 800db40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800db42:	1d3a      	adds	r2, r7, #4
 800db44:	f107 0108 	add.w	r1, r7, #8
 800db48:	f107 030c 	add.w	r3, r7, #12
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7fd ff79 	bl	800ba44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800db52:	6879      	ldr	r1, [r7, #4]
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	68fa      	ldr	r2, [r7, #12]
 800db58:	9202      	str	r2, [sp, #8]
 800db5a:	9301      	str	r3, [sp, #4]
 800db5c:	2302      	movs	r3, #2
 800db5e:	9300      	str	r3, [sp, #0]
 800db60:	2300      	movs	r3, #0
 800db62:	460a      	mov	r2, r1
 800db64:	4910      	ldr	r1, [pc, #64]	; (800dba8 <xTimerCreateTimerTask+0x84>)
 800db66:	4811      	ldr	r0, [pc, #68]	; (800dbac <xTimerCreateTimerTask+0x88>)
 800db68:	f7fe ff14 	bl	800c994 <xTaskCreateStatic>
 800db6c:	4603      	mov	r3, r0
 800db6e:	4a10      	ldr	r2, [pc, #64]	; (800dbb0 <xTimerCreateTimerTask+0x8c>)
 800db70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800db72:	4b0f      	ldr	r3, [pc, #60]	; (800dbb0 <xTimerCreateTimerTask+0x8c>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d001      	beq.n	800db7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800db7a:	2301      	movs	r3, #1
 800db7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d10a      	bne.n	800db9a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800db84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db88:	f383 8811 	msr	BASEPRI, r3
 800db8c:	f3bf 8f6f 	isb	sy
 800db90:	f3bf 8f4f 	dsb	sy
 800db94:	613b      	str	r3, [r7, #16]
}
 800db96:	bf00      	nop
 800db98:	e7fe      	b.n	800db98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800db9a:	697b      	ldr	r3, [r7, #20]
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3718      	adds	r7, #24
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}
 800dba4:	200027b4 	.word	0x200027b4
 800dba8:	08012328 	.word	0x08012328
 800dbac:	0800dce9 	.word	0x0800dce9
 800dbb0:	200027b8 	.word	0x200027b8

0800dbb4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b08a      	sub	sp, #40	; 0x28
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	60f8      	str	r0, [r7, #12]
 800dbbc:	60b9      	str	r1, [r7, #8]
 800dbbe:	607a      	str	r2, [r7, #4]
 800dbc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d10a      	bne.n	800dbe2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800dbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd0:	f383 8811 	msr	BASEPRI, r3
 800dbd4:	f3bf 8f6f 	isb	sy
 800dbd8:	f3bf 8f4f 	dsb	sy
 800dbdc:	623b      	str	r3, [r7, #32]
}
 800dbde:	bf00      	nop
 800dbe0:	e7fe      	b.n	800dbe0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dbe2:	4b1a      	ldr	r3, [pc, #104]	; (800dc4c <xTimerGenericCommand+0x98>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d02a      	beq.n	800dc40 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	2b05      	cmp	r3, #5
 800dbfa:	dc18      	bgt.n	800dc2e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dbfc:	f7ff fcb4 	bl	800d568 <xTaskGetSchedulerState>
 800dc00:	4603      	mov	r3, r0
 800dc02:	2b02      	cmp	r3, #2
 800dc04:	d109      	bne.n	800dc1a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dc06:	4b11      	ldr	r3, [pc, #68]	; (800dc4c <xTimerGenericCommand+0x98>)
 800dc08:	6818      	ldr	r0, [r3, #0]
 800dc0a:	f107 0110 	add.w	r1, r7, #16
 800dc0e:	2300      	movs	r3, #0
 800dc10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc12:	f7fe f929 	bl	800be68 <xQueueGenericSend>
 800dc16:	6278      	str	r0, [r7, #36]	; 0x24
 800dc18:	e012      	b.n	800dc40 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dc1a:	4b0c      	ldr	r3, [pc, #48]	; (800dc4c <xTimerGenericCommand+0x98>)
 800dc1c:	6818      	ldr	r0, [r3, #0]
 800dc1e:	f107 0110 	add.w	r1, r7, #16
 800dc22:	2300      	movs	r3, #0
 800dc24:	2200      	movs	r2, #0
 800dc26:	f7fe f91f 	bl	800be68 <xQueueGenericSend>
 800dc2a:	6278      	str	r0, [r7, #36]	; 0x24
 800dc2c:	e008      	b.n	800dc40 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dc2e:	4b07      	ldr	r3, [pc, #28]	; (800dc4c <xTimerGenericCommand+0x98>)
 800dc30:	6818      	ldr	r0, [r3, #0]
 800dc32:	f107 0110 	add.w	r1, r7, #16
 800dc36:	2300      	movs	r3, #0
 800dc38:	683a      	ldr	r2, [r7, #0]
 800dc3a:	f7fe fa13 	bl	800c064 <xQueueGenericSendFromISR>
 800dc3e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3728      	adds	r7, #40	; 0x28
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}
 800dc4a:	bf00      	nop
 800dc4c:	200027b4 	.word	0x200027b4

0800dc50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b088      	sub	sp, #32
 800dc54:	af02      	add	r7, sp, #8
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc5a:	4b22      	ldr	r3, [pc, #136]	; (800dce4 <prvProcessExpiredTimer+0x94>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	68db      	ldr	r3, [r3, #12]
 800dc60:	68db      	ldr	r3, [r3, #12]
 800dc62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	3304      	adds	r3, #4
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7fd ff8f 	bl	800bb8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc74:	f003 0304 	and.w	r3, r3, #4
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d022      	beq.n	800dcc2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	699a      	ldr	r2, [r3, #24]
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	18d1      	adds	r1, r2, r3
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	683a      	ldr	r2, [r7, #0]
 800dc88:	6978      	ldr	r0, [r7, #20]
 800dc8a:	f000 f8d1 	bl	800de30 <prvInsertTimerInActiveList>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d01f      	beq.n	800dcd4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dc94:	2300      	movs	r3, #0
 800dc96:	9300      	str	r3, [sp, #0]
 800dc98:	2300      	movs	r3, #0
 800dc9a:	687a      	ldr	r2, [r7, #4]
 800dc9c:	2100      	movs	r1, #0
 800dc9e:	6978      	ldr	r0, [r7, #20]
 800dca0:	f7ff ff88 	bl	800dbb4 <xTimerGenericCommand>
 800dca4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d113      	bne.n	800dcd4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800dcac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb0:	f383 8811 	msr	BASEPRI, r3
 800dcb4:	f3bf 8f6f 	isb	sy
 800dcb8:	f3bf 8f4f 	dsb	sy
 800dcbc:	60fb      	str	r3, [r7, #12]
}
 800dcbe:	bf00      	nop
 800dcc0:	e7fe      	b.n	800dcc0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcc8:	f023 0301 	bic.w	r3, r3, #1
 800dccc:	b2da      	uxtb	r2, r3
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	6a1b      	ldr	r3, [r3, #32]
 800dcd8:	6978      	ldr	r0, [r7, #20]
 800dcda:	4798      	blx	r3
}
 800dcdc:	bf00      	nop
 800dcde:	3718      	adds	r7, #24
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}
 800dce4:	200027ac 	.word	0x200027ac

0800dce8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dcf0:	f107 0308 	add.w	r3, r7, #8
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f000 f857 	bl	800dda8 <prvGetNextExpireTime>
 800dcfa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	4619      	mov	r1, r3
 800dd00:	68f8      	ldr	r0, [r7, #12]
 800dd02:	f000 f803 	bl	800dd0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dd06:	f000 f8d5 	bl	800deb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd0a:	e7f1      	b.n	800dcf0 <prvTimerTask+0x8>

0800dd0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b084      	sub	sp, #16
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dd16:	f7ff f845 	bl	800cda4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dd1a:	f107 0308 	add.w	r3, r7, #8
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f000 f866 	bl	800ddf0 <prvSampleTimeNow>
 800dd24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d130      	bne.n	800dd8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d10a      	bne.n	800dd48 <prvProcessTimerOrBlockTask+0x3c>
 800dd32:	687a      	ldr	r2, [r7, #4]
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	429a      	cmp	r2, r3
 800dd38:	d806      	bhi.n	800dd48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dd3a:	f7ff f841 	bl	800cdc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dd3e:	68f9      	ldr	r1, [r7, #12]
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f7ff ff85 	bl	800dc50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dd46:	e024      	b.n	800dd92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d008      	beq.n	800dd60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dd4e:	4b13      	ldr	r3, [pc, #76]	; (800dd9c <prvProcessTimerOrBlockTask+0x90>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d101      	bne.n	800dd5c <prvProcessTimerOrBlockTask+0x50>
 800dd58:	2301      	movs	r3, #1
 800dd5a:	e000      	b.n	800dd5e <prvProcessTimerOrBlockTask+0x52>
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dd60:	4b0f      	ldr	r3, [pc, #60]	; (800dda0 <prvProcessTimerOrBlockTask+0x94>)
 800dd62:	6818      	ldr	r0, [r3, #0]
 800dd64:	687a      	ldr	r2, [r7, #4]
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	1ad3      	subs	r3, r2, r3
 800dd6a:	683a      	ldr	r2, [r7, #0]
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	f7fe fddd 	bl	800c92c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dd72:	f7ff f825 	bl	800cdc0 <xTaskResumeAll>
 800dd76:	4603      	mov	r3, r0
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d10a      	bne.n	800dd92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dd7c:	4b09      	ldr	r3, [pc, #36]	; (800dda4 <prvProcessTimerOrBlockTask+0x98>)
 800dd7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd82:	601a      	str	r2, [r3, #0]
 800dd84:	f3bf 8f4f 	dsb	sy
 800dd88:	f3bf 8f6f 	isb	sy
}
 800dd8c:	e001      	b.n	800dd92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dd8e:	f7ff f817 	bl	800cdc0 <xTaskResumeAll>
}
 800dd92:	bf00      	nop
 800dd94:	3710      	adds	r7, #16
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
 800dd9a:	bf00      	nop
 800dd9c:	200027b0 	.word	0x200027b0
 800dda0:	200027b4 	.word	0x200027b4
 800dda4:	e000ed04 	.word	0xe000ed04

0800dda8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b085      	sub	sp, #20
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ddb0:	4b0e      	ldr	r3, [pc, #56]	; (800ddec <prvGetNextExpireTime+0x44>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d101      	bne.n	800ddbe <prvGetNextExpireTime+0x16>
 800ddba:	2201      	movs	r2, #1
 800ddbc:	e000      	b.n	800ddc0 <prvGetNextExpireTime+0x18>
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d105      	bne.n	800ddd8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ddcc:	4b07      	ldr	r3, [pc, #28]	; (800ddec <prvGetNextExpireTime+0x44>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	68db      	ldr	r3, [r3, #12]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	60fb      	str	r3, [r7, #12]
 800ddd6:	e001      	b.n	800dddc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dddc:	68fb      	ldr	r3, [r7, #12]
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3714      	adds	r7, #20
 800dde2:	46bd      	mov	sp, r7
 800dde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde8:	4770      	bx	lr
 800ddea:	bf00      	nop
 800ddec:	200027ac 	.word	0x200027ac

0800ddf0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ddf8:	f7ff f880 	bl	800cefc <xTaskGetTickCount>
 800ddfc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ddfe:	4b0b      	ldr	r3, [pc, #44]	; (800de2c <prvSampleTimeNow+0x3c>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	68fa      	ldr	r2, [r7, #12]
 800de04:	429a      	cmp	r2, r3
 800de06:	d205      	bcs.n	800de14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800de08:	f000 f936 	bl	800e078 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2201      	movs	r2, #1
 800de10:	601a      	str	r2, [r3, #0]
 800de12:	e002      	b.n	800de1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2200      	movs	r2, #0
 800de18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800de1a:	4a04      	ldr	r2, [pc, #16]	; (800de2c <prvSampleTimeNow+0x3c>)
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800de20:	68fb      	ldr	r3, [r7, #12]
}
 800de22:	4618      	mov	r0, r3
 800de24:	3710      	adds	r7, #16
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}
 800de2a:	bf00      	nop
 800de2c:	200027bc 	.word	0x200027bc

0800de30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b086      	sub	sp, #24
 800de34:	af00      	add	r7, sp, #0
 800de36:	60f8      	str	r0, [r7, #12]
 800de38:	60b9      	str	r1, [r7, #8]
 800de3a:	607a      	str	r2, [r7, #4]
 800de3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800de3e:	2300      	movs	r3, #0
 800de40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	68ba      	ldr	r2, [r7, #8]
 800de46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	68fa      	ldr	r2, [r7, #12]
 800de4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800de4e:	68ba      	ldr	r2, [r7, #8]
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	429a      	cmp	r2, r3
 800de54:	d812      	bhi.n	800de7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de56:	687a      	ldr	r2, [r7, #4]
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	1ad2      	subs	r2, r2, r3
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	699b      	ldr	r3, [r3, #24]
 800de60:	429a      	cmp	r2, r3
 800de62:	d302      	bcc.n	800de6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800de64:	2301      	movs	r3, #1
 800de66:	617b      	str	r3, [r7, #20]
 800de68:	e01b      	b.n	800dea2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800de6a:	4b10      	ldr	r3, [pc, #64]	; (800deac <prvInsertTimerInActiveList+0x7c>)
 800de6c:	681a      	ldr	r2, [r3, #0]
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	3304      	adds	r3, #4
 800de72:	4619      	mov	r1, r3
 800de74:	4610      	mov	r0, r2
 800de76:	f7fd fe50 	bl	800bb1a <vListInsert>
 800de7a:	e012      	b.n	800dea2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800de7c:	687a      	ldr	r2, [r7, #4]
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	429a      	cmp	r2, r3
 800de82:	d206      	bcs.n	800de92 <prvInsertTimerInActiveList+0x62>
 800de84:	68ba      	ldr	r2, [r7, #8]
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	429a      	cmp	r2, r3
 800de8a:	d302      	bcc.n	800de92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800de8c:	2301      	movs	r3, #1
 800de8e:	617b      	str	r3, [r7, #20]
 800de90:	e007      	b.n	800dea2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800de92:	4b07      	ldr	r3, [pc, #28]	; (800deb0 <prvInsertTimerInActiveList+0x80>)
 800de94:	681a      	ldr	r2, [r3, #0]
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	3304      	adds	r3, #4
 800de9a:	4619      	mov	r1, r3
 800de9c:	4610      	mov	r0, r2
 800de9e:	f7fd fe3c 	bl	800bb1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dea2:	697b      	ldr	r3, [r7, #20]
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3718      	adds	r7, #24
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}
 800deac:	200027b0 	.word	0x200027b0
 800deb0:	200027ac 	.word	0x200027ac

0800deb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b08e      	sub	sp, #56	; 0x38
 800deb8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800deba:	e0ca      	b.n	800e052 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	da18      	bge.n	800def4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dec2:	1d3b      	adds	r3, r7, #4
 800dec4:	3304      	adds	r3, #4
 800dec6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deca:	2b00      	cmp	r3, #0
 800decc:	d10a      	bne.n	800dee4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded2:	f383 8811 	msr	BASEPRI, r3
 800ded6:	f3bf 8f6f 	isb	sy
 800deda:	f3bf 8f4f 	dsb	sy
 800dede:	61fb      	str	r3, [r7, #28]
}
 800dee0:	bf00      	nop
 800dee2:	e7fe      	b.n	800dee2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800deea:	6850      	ldr	r0, [r2, #4]
 800deec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800deee:	6892      	ldr	r2, [r2, #8]
 800def0:	4611      	mov	r1, r2
 800def2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2b00      	cmp	r3, #0
 800def8:	f2c0 80ab 	blt.w	800e052 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800df00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df02:	695b      	ldr	r3, [r3, #20]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d004      	beq.n	800df12 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df0a:	3304      	adds	r3, #4
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7fd fe3d 	bl	800bb8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800df12:	463b      	mov	r3, r7
 800df14:	4618      	mov	r0, r3
 800df16:	f7ff ff6b 	bl	800ddf0 <prvSampleTimeNow>
 800df1a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2b09      	cmp	r3, #9
 800df20:	f200 8096 	bhi.w	800e050 <prvProcessReceivedCommands+0x19c>
 800df24:	a201      	add	r2, pc, #4	; (adr r2, 800df2c <prvProcessReceivedCommands+0x78>)
 800df26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df2a:	bf00      	nop
 800df2c:	0800df55 	.word	0x0800df55
 800df30:	0800df55 	.word	0x0800df55
 800df34:	0800df55 	.word	0x0800df55
 800df38:	0800dfc9 	.word	0x0800dfc9
 800df3c:	0800dfdd 	.word	0x0800dfdd
 800df40:	0800e027 	.word	0x0800e027
 800df44:	0800df55 	.word	0x0800df55
 800df48:	0800df55 	.word	0x0800df55
 800df4c:	0800dfc9 	.word	0x0800dfc9
 800df50:	0800dfdd 	.word	0x0800dfdd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800df54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df5a:	f043 0301 	orr.w	r3, r3, #1
 800df5e:	b2da      	uxtb	r2, r3
 800df60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800df66:	68ba      	ldr	r2, [r7, #8]
 800df68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df6a:	699b      	ldr	r3, [r3, #24]
 800df6c:	18d1      	adds	r1, r2, r3
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df74:	f7ff ff5c 	bl	800de30 <prvInsertTimerInActiveList>
 800df78:	4603      	mov	r3, r0
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d069      	beq.n	800e052 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800df7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df80:	6a1b      	ldr	r3, [r3, #32]
 800df82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df8c:	f003 0304 	and.w	r3, r3, #4
 800df90:	2b00      	cmp	r3, #0
 800df92:	d05e      	beq.n	800e052 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800df94:	68ba      	ldr	r2, [r7, #8]
 800df96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df98:	699b      	ldr	r3, [r3, #24]
 800df9a:	441a      	add	r2, r3
 800df9c:	2300      	movs	r3, #0
 800df9e:	9300      	str	r3, [sp, #0]
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	2100      	movs	r1, #0
 800dfa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfa6:	f7ff fe05 	bl	800dbb4 <xTimerGenericCommand>
 800dfaa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dfac:	6a3b      	ldr	r3, [r7, #32]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d14f      	bne.n	800e052 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800dfb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfb6:	f383 8811 	msr	BASEPRI, r3
 800dfba:	f3bf 8f6f 	isb	sy
 800dfbe:	f3bf 8f4f 	dsb	sy
 800dfc2:	61bb      	str	r3, [r7, #24]
}
 800dfc4:	bf00      	nop
 800dfc6:	e7fe      	b.n	800dfc6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dfc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dfce:	f023 0301 	bic.w	r3, r3, #1
 800dfd2:	b2da      	uxtb	r2, r3
 800dfd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dfda:	e03a      	b.n	800e052 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dfdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dfe2:	f043 0301 	orr.w	r3, r3, #1
 800dfe6:	b2da      	uxtb	r2, r3
 800dfe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dfee:	68ba      	ldr	r2, [r7, #8]
 800dff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff6:	699b      	ldr	r3, [r3, #24]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d10a      	bne.n	800e012 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800dffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e000:	f383 8811 	msr	BASEPRI, r3
 800e004:	f3bf 8f6f 	isb	sy
 800e008:	f3bf 8f4f 	dsb	sy
 800e00c:	617b      	str	r3, [r7, #20]
}
 800e00e:	bf00      	nop
 800e010:	e7fe      	b.n	800e010 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e014:	699a      	ldr	r2, [r3, #24]
 800e016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e018:	18d1      	adds	r1, r2, r3
 800e01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e01e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e020:	f7ff ff06 	bl	800de30 <prvInsertTimerInActiveList>
					break;
 800e024:	e015      	b.n	800e052 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e028:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e02c:	f003 0302 	and.w	r3, r3, #2
 800e030:	2b00      	cmp	r3, #0
 800e032:	d103      	bne.n	800e03c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e034:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e036:	f000 fbd3 	bl	800e7e0 <vPortFree>
 800e03a:	e00a      	b.n	800e052 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e03e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e042:	f023 0301 	bic.w	r3, r3, #1
 800e046:	b2da      	uxtb	r2, r3
 800e048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e04a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e04e:	e000      	b.n	800e052 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800e050:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e052:	4b08      	ldr	r3, [pc, #32]	; (800e074 <prvProcessReceivedCommands+0x1c0>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	1d39      	adds	r1, r7, #4
 800e058:	2200      	movs	r2, #0
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7fe f928 	bl	800c2b0 <xQueueReceive>
 800e060:	4603      	mov	r3, r0
 800e062:	2b00      	cmp	r3, #0
 800e064:	f47f af2a 	bne.w	800debc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e068:	bf00      	nop
 800e06a:	bf00      	nop
 800e06c:	3730      	adds	r7, #48	; 0x30
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}
 800e072:	bf00      	nop
 800e074:	200027b4 	.word	0x200027b4

0800e078 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b088      	sub	sp, #32
 800e07c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e07e:	e048      	b.n	800e112 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e080:	4b2d      	ldr	r3, [pc, #180]	; (800e138 <prvSwitchTimerLists+0xc0>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	68db      	ldr	r3, [r3, #12]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e08a:	4b2b      	ldr	r3, [pc, #172]	; (800e138 <prvSwitchTimerLists+0xc0>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	68db      	ldr	r3, [r3, #12]
 800e090:	68db      	ldr	r3, [r3, #12]
 800e092:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	3304      	adds	r3, #4
 800e098:	4618      	mov	r0, r3
 800e09a:	f7fd fd77 	bl	800bb8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	6a1b      	ldr	r3, [r3, #32]
 800e0a2:	68f8      	ldr	r0, [r7, #12]
 800e0a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0ac:	f003 0304 	and.w	r3, r3, #4
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d02e      	beq.n	800e112 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	699b      	ldr	r3, [r3, #24]
 800e0b8:	693a      	ldr	r2, [r7, #16]
 800e0ba:	4413      	add	r3, r2
 800e0bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e0be:	68ba      	ldr	r2, [r7, #8]
 800e0c0:	693b      	ldr	r3, [r7, #16]
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	d90e      	bls.n	800e0e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	68ba      	ldr	r2, [r7, #8]
 800e0ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	68fa      	ldr	r2, [r7, #12]
 800e0d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e0d2:	4b19      	ldr	r3, [pc, #100]	; (800e138 <prvSwitchTimerLists+0xc0>)
 800e0d4:	681a      	ldr	r2, [r3, #0]
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	3304      	adds	r3, #4
 800e0da:	4619      	mov	r1, r3
 800e0dc:	4610      	mov	r0, r2
 800e0de:	f7fd fd1c 	bl	800bb1a <vListInsert>
 800e0e2:	e016      	b.n	800e112 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	9300      	str	r3, [sp, #0]
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	693a      	ldr	r2, [r7, #16]
 800e0ec:	2100      	movs	r1, #0
 800e0ee:	68f8      	ldr	r0, [r7, #12]
 800e0f0:	f7ff fd60 	bl	800dbb4 <xTimerGenericCommand>
 800e0f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d10a      	bne.n	800e112 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e100:	f383 8811 	msr	BASEPRI, r3
 800e104:	f3bf 8f6f 	isb	sy
 800e108:	f3bf 8f4f 	dsb	sy
 800e10c:	603b      	str	r3, [r7, #0]
}
 800e10e:	bf00      	nop
 800e110:	e7fe      	b.n	800e110 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e112:	4b09      	ldr	r3, [pc, #36]	; (800e138 <prvSwitchTimerLists+0xc0>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d1b1      	bne.n	800e080 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e11c:	4b06      	ldr	r3, [pc, #24]	; (800e138 <prvSwitchTimerLists+0xc0>)
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e122:	4b06      	ldr	r3, [pc, #24]	; (800e13c <prvSwitchTimerLists+0xc4>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	4a04      	ldr	r2, [pc, #16]	; (800e138 <prvSwitchTimerLists+0xc0>)
 800e128:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e12a:	4a04      	ldr	r2, [pc, #16]	; (800e13c <prvSwitchTimerLists+0xc4>)
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	6013      	str	r3, [r2, #0]
}
 800e130:	bf00      	nop
 800e132:	3718      	adds	r7, #24
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}
 800e138:	200027ac 	.word	0x200027ac
 800e13c:	200027b0 	.word	0x200027b0

0800e140 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b082      	sub	sp, #8
 800e144:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e146:	f000 f965 	bl	800e414 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e14a:	4b15      	ldr	r3, [pc, #84]	; (800e1a0 <prvCheckForValidListAndQueue+0x60>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d120      	bne.n	800e194 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e152:	4814      	ldr	r0, [pc, #80]	; (800e1a4 <prvCheckForValidListAndQueue+0x64>)
 800e154:	f7fd fc90 	bl	800ba78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e158:	4813      	ldr	r0, [pc, #76]	; (800e1a8 <prvCheckForValidListAndQueue+0x68>)
 800e15a:	f7fd fc8d 	bl	800ba78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e15e:	4b13      	ldr	r3, [pc, #76]	; (800e1ac <prvCheckForValidListAndQueue+0x6c>)
 800e160:	4a10      	ldr	r2, [pc, #64]	; (800e1a4 <prvCheckForValidListAndQueue+0x64>)
 800e162:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e164:	4b12      	ldr	r3, [pc, #72]	; (800e1b0 <prvCheckForValidListAndQueue+0x70>)
 800e166:	4a10      	ldr	r2, [pc, #64]	; (800e1a8 <prvCheckForValidListAndQueue+0x68>)
 800e168:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e16a:	2300      	movs	r3, #0
 800e16c:	9300      	str	r3, [sp, #0]
 800e16e:	4b11      	ldr	r3, [pc, #68]	; (800e1b4 <prvCheckForValidListAndQueue+0x74>)
 800e170:	4a11      	ldr	r2, [pc, #68]	; (800e1b8 <prvCheckForValidListAndQueue+0x78>)
 800e172:	2110      	movs	r1, #16
 800e174:	200a      	movs	r0, #10
 800e176:	f7fd fd9b 	bl	800bcb0 <xQueueGenericCreateStatic>
 800e17a:	4603      	mov	r3, r0
 800e17c:	4a08      	ldr	r2, [pc, #32]	; (800e1a0 <prvCheckForValidListAndQueue+0x60>)
 800e17e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e180:	4b07      	ldr	r3, [pc, #28]	; (800e1a0 <prvCheckForValidListAndQueue+0x60>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d005      	beq.n	800e194 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e188:	4b05      	ldr	r3, [pc, #20]	; (800e1a0 <prvCheckForValidListAndQueue+0x60>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	490b      	ldr	r1, [pc, #44]	; (800e1bc <prvCheckForValidListAndQueue+0x7c>)
 800e18e:	4618      	mov	r0, r3
 800e190:	f7fe fba2 	bl	800c8d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e194:	f000 f96e 	bl	800e474 <vPortExitCritical>
}
 800e198:	bf00      	nop
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	200027b4 	.word	0x200027b4
 800e1a4:	20002784 	.word	0x20002784
 800e1a8:	20002798 	.word	0x20002798
 800e1ac:	200027ac 	.word	0x200027ac
 800e1b0:	200027b0 	.word	0x200027b0
 800e1b4:	20002860 	.word	0x20002860
 800e1b8:	200027c0 	.word	0x200027c0
 800e1bc:	08012330 	.word	0x08012330

0800e1c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e1c0:	b480      	push	{r7}
 800e1c2:	b085      	sub	sp, #20
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	60f8      	str	r0, [r7, #12]
 800e1c8:	60b9      	str	r1, [r7, #8]
 800e1ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	3b04      	subs	r3, #4
 800e1d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e1d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	3b04      	subs	r3, #4
 800e1de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	f023 0201 	bic.w	r2, r3, #1
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	3b04      	subs	r3, #4
 800e1ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e1f0:	4a0c      	ldr	r2, [pc, #48]	; (800e224 <pxPortInitialiseStack+0x64>)
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	3b14      	subs	r3, #20
 800e1fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e1fc:	687a      	ldr	r2, [r7, #4]
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	3b04      	subs	r3, #4
 800e206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	f06f 0202 	mvn.w	r2, #2
 800e20e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	3b20      	subs	r3, #32
 800e214:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e216:	68fb      	ldr	r3, [r7, #12]
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3714      	adds	r7, #20
 800e21c:	46bd      	mov	sp, r7
 800e21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e222:	4770      	bx	lr
 800e224:	0800e229 	.word	0x0800e229

0800e228 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e228:	b480      	push	{r7}
 800e22a:	b085      	sub	sp, #20
 800e22c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e22e:	2300      	movs	r3, #0
 800e230:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e232:	4b12      	ldr	r3, [pc, #72]	; (800e27c <prvTaskExitError+0x54>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e23a:	d00a      	beq.n	800e252 <prvTaskExitError+0x2a>
	__asm volatile
 800e23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e240:	f383 8811 	msr	BASEPRI, r3
 800e244:	f3bf 8f6f 	isb	sy
 800e248:	f3bf 8f4f 	dsb	sy
 800e24c:	60fb      	str	r3, [r7, #12]
}
 800e24e:	bf00      	nop
 800e250:	e7fe      	b.n	800e250 <prvTaskExitError+0x28>
	__asm volatile
 800e252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e256:	f383 8811 	msr	BASEPRI, r3
 800e25a:	f3bf 8f6f 	isb	sy
 800e25e:	f3bf 8f4f 	dsb	sy
 800e262:	60bb      	str	r3, [r7, #8]
}
 800e264:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e266:	bf00      	nop
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d0fc      	beq.n	800e268 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e26e:	bf00      	nop
 800e270:	bf00      	nop
 800e272:	3714      	adds	r7, #20
 800e274:	46bd      	mov	sp, r7
 800e276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27a:	4770      	bx	lr
 800e27c:	200000d0 	.word	0x200000d0

0800e280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e280:	4b07      	ldr	r3, [pc, #28]	; (800e2a0 <pxCurrentTCBConst2>)
 800e282:	6819      	ldr	r1, [r3, #0]
 800e284:	6808      	ldr	r0, [r1, #0]
 800e286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e28a:	f380 8809 	msr	PSP, r0
 800e28e:	f3bf 8f6f 	isb	sy
 800e292:	f04f 0000 	mov.w	r0, #0
 800e296:	f380 8811 	msr	BASEPRI, r0
 800e29a:	4770      	bx	lr
 800e29c:	f3af 8000 	nop.w

0800e2a0 <pxCurrentTCBConst2>:
 800e2a0:	20002284 	.word	0x20002284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e2a4:	bf00      	nop
 800e2a6:	bf00      	nop

0800e2a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e2a8:	4808      	ldr	r0, [pc, #32]	; (800e2cc <prvPortStartFirstTask+0x24>)
 800e2aa:	6800      	ldr	r0, [r0, #0]
 800e2ac:	6800      	ldr	r0, [r0, #0]
 800e2ae:	f380 8808 	msr	MSP, r0
 800e2b2:	f04f 0000 	mov.w	r0, #0
 800e2b6:	f380 8814 	msr	CONTROL, r0
 800e2ba:	b662      	cpsie	i
 800e2bc:	b661      	cpsie	f
 800e2be:	f3bf 8f4f 	dsb	sy
 800e2c2:	f3bf 8f6f 	isb	sy
 800e2c6:	df00      	svc	0
 800e2c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e2ca:	bf00      	nop
 800e2cc:	e000ed08 	.word	0xe000ed08

0800e2d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b086      	sub	sp, #24
 800e2d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e2d6:	4b46      	ldr	r3, [pc, #280]	; (800e3f0 <xPortStartScheduler+0x120>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	4a46      	ldr	r2, [pc, #280]	; (800e3f4 <xPortStartScheduler+0x124>)
 800e2dc:	4293      	cmp	r3, r2
 800e2de:	d10a      	bne.n	800e2f6 <xPortStartScheduler+0x26>
	__asm volatile
 800e2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e4:	f383 8811 	msr	BASEPRI, r3
 800e2e8:	f3bf 8f6f 	isb	sy
 800e2ec:	f3bf 8f4f 	dsb	sy
 800e2f0:	613b      	str	r3, [r7, #16]
}
 800e2f2:	bf00      	nop
 800e2f4:	e7fe      	b.n	800e2f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e2f6:	4b3e      	ldr	r3, [pc, #248]	; (800e3f0 <xPortStartScheduler+0x120>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	4a3f      	ldr	r2, [pc, #252]	; (800e3f8 <xPortStartScheduler+0x128>)
 800e2fc:	4293      	cmp	r3, r2
 800e2fe:	d10a      	bne.n	800e316 <xPortStartScheduler+0x46>
	__asm volatile
 800e300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e304:	f383 8811 	msr	BASEPRI, r3
 800e308:	f3bf 8f6f 	isb	sy
 800e30c:	f3bf 8f4f 	dsb	sy
 800e310:	60fb      	str	r3, [r7, #12]
}
 800e312:	bf00      	nop
 800e314:	e7fe      	b.n	800e314 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e316:	4b39      	ldr	r3, [pc, #228]	; (800e3fc <xPortStartScheduler+0x12c>)
 800e318:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	781b      	ldrb	r3, [r3, #0]
 800e31e:	b2db      	uxtb	r3, r3
 800e320:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	22ff      	movs	r2, #255	; 0xff
 800e326:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e328:	697b      	ldr	r3, [r7, #20]
 800e32a:	781b      	ldrb	r3, [r3, #0]
 800e32c:	b2db      	uxtb	r3, r3
 800e32e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e330:	78fb      	ldrb	r3, [r7, #3]
 800e332:	b2db      	uxtb	r3, r3
 800e334:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e338:	b2da      	uxtb	r2, r3
 800e33a:	4b31      	ldr	r3, [pc, #196]	; (800e400 <xPortStartScheduler+0x130>)
 800e33c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e33e:	4b31      	ldr	r3, [pc, #196]	; (800e404 <xPortStartScheduler+0x134>)
 800e340:	2207      	movs	r2, #7
 800e342:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e344:	e009      	b.n	800e35a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e346:	4b2f      	ldr	r3, [pc, #188]	; (800e404 <xPortStartScheduler+0x134>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	3b01      	subs	r3, #1
 800e34c:	4a2d      	ldr	r2, [pc, #180]	; (800e404 <xPortStartScheduler+0x134>)
 800e34e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e350:	78fb      	ldrb	r3, [r7, #3]
 800e352:	b2db      	uxtb	r3, r3
 800e354:	005b      	lsls	r3, r3, #1
 800e356:	b2db      	uxtb	r3, r3
 800e358:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e35a:	78fb      	ldrb	r3, [r7, #3]
 800e35c:	b2db      	uxtb	r3, r3
 800e35e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e362:	2b80      	cmp	r3, #128	; 0x80
 800e364:	d0ef      	beq.n	800e346 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e366:	4b27      	ldr	r3, [pc, #156]	; (800e404 <xPortStartScheduler+0x134>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f1c3 0307 	rsb	r3, r3, #7
 800e36e:	2b04      	cmp	r3, #4
 800e370:	d00a      	beq.n	800e388 <xPortStartScheduler+0xb8>
	__asm volatile
 800e372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e376:	f383 8811 	msr	BASEPRI, r3
 800e37a:	f3bf 8f6f 	isb	sy
 800e37e:	f3bf 8f4f 	dsb	sy
 800e382:	60bb      	str	r3, [r7, #8]
}
 800e384:	bf00      	nop
 800e386:	e7fe      	b.n	800e386 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e388:	4b1e      	ldr	r3, [pc, #120]	; (800e404 <xPortStartScheduler+0x134>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	021b      	lsls	r3, r3, #8
 800e38e:	4a1d      	ldr	r2, [pc, #116]	; (800e404 <xPortStartScheduler+0x134>)
 800e390:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e392:	4b1c      	ldr	r3, [pc, #112]	; (800e404 <xPortStartScheduler+0x134>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e39a:	4a1a      	ldr	r2, [pc, #104]	; (800e404 <xPortStartScheduler+0x134>)
 800e39c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	b2da      	uxtb	r2, r3
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e3a6:	4b18      	ldr	r3, [pc, #96]	; (800e408 <xPortStartScheduler+0x138>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	4a17      	ldr	r2, [pc, #92]	; (800e408 <xPortStartScheduler+0x138>)
 800e3ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e3b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e3b2:	4b15      	ldr	r3, [pc, #84]	; (800e408 <xPortStartScheduler+0x138>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	4a14      	ldr	r2, [pc, #80]	; (800e408 <xPortStartScheduler+0x138>)
 800e3b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e3bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e3be:	f000 f8dd 	bl	800e57c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e3c2:	4b12      	ldr	r3, [pc, #72]	; (800e40c <xPortStartScheduler+0x13c>)
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e3c8:	f000 f8fc 	bl	800e5c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e3cc:	4b10      	ldr	r3, [pc, #64]	; (800e410 <xPortStartScheduler+0x140>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	4a0f      	ldr	r2, [pc, #60]	; (800e410 <xPortStartScheduler+0x140>)
 800e3d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e3d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e3d8:	f7ff ff66 	bl	800e2a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e3dc:	f7fe fe58 	bl	800d090 <vTaskSwitchContext>
	prvTaskExitError();
 800e3e0:	f7ff ff22 	bl	800e228 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e3e4:	2300      	movs	r3, #0
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3718      	adds	r7, #24
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	e000ed00 	.word	0xe000ed00
 800e3f4:	410fc271 	.word	0x410fc271
 800e3f8:	410fc270 	.word	0x410fc270
 800e3fc:	e000e400 	.word	0xe000e400
 800e400:	200028b0 	.word	0x200028b0
 800e404:	200028b4 	.word	0x200028b4
 800e408:	e000ed20 	.word	0xe000ed20
 800e40c:	200000d0 	.word	0x200000d0
 800e410:	e000ef34 	.word	0xe000ef34

0800e414 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e414:	b480      	push	{r7}
 800e416:	b083      	sub	sp, #12
 800e418:	af00      	add	r7, sp, #0
	__asm volatile
 800e41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e41e:	f383 8811 	msr	BASEPRI, r3
 800e422:	f3bf 8f6f 	isb	sy
 800e426:	f3bf 8f4f 	dsb	sy
 800e42a:	607b      	str	r3, [r7, #4]
}
 800e42c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e42e:	4b0f      	ldr	r3, [pc, #60]	; (800e46c <vPortEnterCritical+0x58>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	3301      	adds	r3, #1
 800e434:	4a0d      	ldr	r2, [pc, #52]	; (800e46c <vPortEnterCritical+0x58>)
 800e436:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e438:	4b0c      	ldr	r3, [pc, #48]	; (800e46c <vPortEnterCritical+0x58>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	2b01      	cmp	r3, #1
 800e43e:	d10f      	bne.n	800e460 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e440:	4b0b      	ldr	r3, [pc, #44]	; (800e470 <vPortEnterCritical+0x5c>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	b2db      	uxtb	r3, r3
 800e446:	2b00      	cmp	r3, #0
 800e448:	d00a      	beq.n	800e460 <vPortEnterCritical+0x4c>
	__asm volatile
 800e44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e44e:	f383 8811 	msr	BASEPRI, r3
 800e452:	f3bf 8f6f 	isb	sy
 800e456:	f3bf 8f4f 	dsb	sy
 800e45a:	603b      	str	r3, [r7, #0]
}
 800e45c:	bf00      	nop
 800e45e:	e7fe      	b.n	800e45e <vPortEnterCritical+0x4a>
	}
}
 800e460:	bf00      	nop
 800e462:	370c      	adds	r7, #12
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr
 800e46c:	200000d0 	.word	0x200000d0
 800e470:	e000ed04 	.word	0xe000ed04

0800e474 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e474:	b480      	push	{r7}
 800e476:	b083      	sub	sp, #12
 800e478:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e47a:	4b12      	ldr	r3, [pc, #72]	; (800e4c4 <vPortExitCritical+0x50>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d10a      	bne.n	800e498 <vPortExitCritical+0x24>
	__asm volatile
 800e482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e486:	f383 8811 	msr	BASEPRI, r3
 800e48a:	f3bf 8f6f 	isb	sy
 800e48e:	f3bf 8f4f 	dsb	sy
 800e492:	607b      	str	r3, [r7, #4]
}
 800e494:	bf00      	nop
 800e496:	e7fe      	b.n	800e496 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e498:	4b0a      	ldr	r3, [pc, #40]	; (800e4c4 <vPortExitCritical+0x50>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	3b01      	subs	r3, #1
 800e49e:	4a09      	ldr	r2, [pc, #36]	; (800e4c4 <vPortExitCritical+0x50>)
 800e4a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e4a2:	4b08      	ldr	r3, [pc, #32]	; (800e4c4 <vPortExitCritical+0x50>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d105      	bne.n	800e4b6 <vPortExitCritical+0x42>
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	f383 8811 	msr	BASEPRI, r3
}
 800e4b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e4b6:	bf00      	nop
 800e4b8:	370c      	adds	r7, #12
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c0:	4770      	bx	lr
 800e4c2:	bf00      	nop
 800e4c4:	200000d0 	.word	0x200000d0
	...

0800e4d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e4d0:	f3ef 8009 	mrs	r0, PSP
 800e4d4:	f3bf 8f6f 	isb	sy
 800e4d8:	4b15      	ldr	r3, [pc, #84]	; (800e530 <pxCurrentTCBConst>)
 800e4da:	681a      	ldr	r2, [r3, #0]
 800e4dc:	f01e 0f10 	tst.w	lr, #16
 800e4e0:	bf08      	it	eq
 800e4e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e4e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4ea:	6010      	str	r0, [r2, #0]
 800e4ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e4f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e4f4:	f380 8811 	msr	BASEPRI, r0
 800e4f8:	f3bf 8f4f 	dsb	sy
 800e4fc:	f3bf 8f6f 	isb	sy
 800e500:	f7fe fdc6 	bl	800d090 <vTaskSwitchContext>
 800e504:	f04f 0000 	mov.w	r0, #0
 800e508:	f380 8811 	msr	BASEPRI, r0
 800e50c:	bc09      	pop	{r0, r3}
 800e50e:	6819      	ldr	r1, [r3, #0]
 800e510:	6808      	ldr	r0, [r1, #0]
 800e512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e516:	f01e 0f10 	tst.w	lr, #16
 800e51a:	bf08      	it	eq
 800e51c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e520:	f380 8809 	msr	PSP, r0
 800e524:	f3bf 8f6f 	isb	sy
 800e528:	4770      	bx	lr
 800e52a:	bf00      	nop
 800e52c:	f3af 8000 	nop.w

0800e530 <pxCurrentTCBConst>:
 800e530:	20002284 	.word	0x20002284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e534:	bf00      	nop
 800e536:	bf00      	nop

0800e538 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b082      	sub	sp, #8
 800e53c:	af00      	add	r7, sp, #0
	__asm volatile
 800e53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e542:	f383 8811 	msr	BASEPRI, r3
 800e546:	f3bf 8f6f 	isb	sy
 800e54a:	f3bf 8f4f 	dsb	sy
 800e54e:	607b      	str	r3, [r7, #4]
}
 800e550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e552:	f7fe fce3 	bl	800cf1c <xTaskIncrementTick>
 800e556:	4603      	mov	r3, r0
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d003      	beq.n	800e564 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e55c:	4b06      	ldr	r3, [pc, #24]	; (800e578 <SysTick_Handler+0x40>)
 800e55e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e562:	601a      	str	r2, [r3, #0]
 800e564:	2300      	movs	r3, #0
 800e566:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	f383 8811 	msr	BASEPRI, r3
}
 800e56e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e570:	bf00      	nop
 800e572:	3708      	adds	r7, #8
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}
 800e578:	e000ed04 	.word	0xe000ed04

0800e57c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e57c:	b480      	push	{r7}
 800e57e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e580:	4b0b      	ldr	r3, [pc, #44]	; (800e5b0 <vPortSetupTimerInterrupt+0x34>)
 800e582:	2200      	movs	r2, #0
 800e584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e586:	4b0b      	ldr	r3, [pc, #44]	; (800e5b4 <vPortSetupTimerInterrupt+0x38>)
 800e588:	2200      	movs	r2, #0
 800e58a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e58c:	4b0a      	ldr	r3, [pc, #40]	; (800e5b8 <vPortSetupTimerInterrupt+0x3c>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	4a0a      	ldr	r2, [pc, #40]	; (800e5bc <vPortSetupTimerInterrupt+0x40>)
 800e592:	fba2 2303 	umull	r2, r3, r2, r3
 800e596:	099b      	lsrs	r3, r3, #6
 800e598:	4a09      	ldr	r2, [pc, #36]	; (800e5c0 <vPortSetupTimerInterrupt+0x44>)
 800e59a:	3b01      	subs	r3, #1
 800e59c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e59e:	4b04      	ldr	r3, [pc, #16]	; (800e5b0 <vPortSetupTimerInterrupt+0x34>)
 800e5a0:	2207      	movs	r2, #7
 800e5a2:	601a      	str	r2, [r3, #0]
}
 800e5a4:	bf00      	nop
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ac:	4770      	bx	lr
 800e5ae:	bf00      	nop
 800e5b0:	e000e010 	.word	0xe000e010
 800e5b4:	e000e018 	.word	0xe000e018
 800e5b8:	200000c4 	.word	0x200000c4
 800e5bc:	10624dd3 	.word	0x10624dd3
 800e5c0:	e000e014 	.word	0xe000e014

0800e5c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e5c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e5d4 <vPortEnableVFP+0x10>
 800e5c8:	6801      	ldr	r1, [r0, #0]
 800e5ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e5ce:	6001      	str	r1, [r0, #0]
 800e5d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e5d2:	bf00      	nop
 800e5d4:	e000ed88 	.word	0xe000ed88

0800e5d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e5d8:	b480      	push	{r7}
 800e5da:	b085      	sub	sp, #20
 800e5dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e5de:	f3ef 8305 	mrs	r3, IPSR
 800e5e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2b0f      	cmp	r3, #15
 800e5e8:	d914      	bls.n	800e614 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e5ea:	4a17      	ldr	r2, [pc, #92]	; (800e648 <vPortValidateInterruptPriority+0x70>)
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	4413      	add	r3, r2
 800e5f0:	781b      	ldrb	r3, [r3, #0]
 800e5f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e5f4:	4b15      	ldr	r3, [pc, #84]	; (800e64c <vPortValidateInterruptPriority+0x74>)
 800e5f6:	781b      	ldrb	r3, [r3, #0]
 800e5f8:	7afa      	ldrb	r2, [r7, #11]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d20a      	bcs.n	800e614 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e602:	f383 8811 	msr	BASEPRI, r3
 800e606:	f3bf 8f6f 	isb	sy
 800e60a:	f3bf 8f4f 	dsb	sy
 800e60e:	607b      	str	r3, [r7, #4]
}
 800e610:	bf00      	nop
 800e612:	e7fe      	b.n	800e612 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e614:	4b0e      	ldr	r3, [pc, #56]	; (800e650 <vPortValidateInterruptPriority+0x78>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e61c:	4b0d      	ldr	r3, [pc, #52]	; (800e654 <vPortValidateInterruptPriority+0x7c>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	429a      	cmp	r2, r3
 800e622:	d90a      	bls.n	800e63a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e628:	f383 8811 	msr	BASEPRI, r3
 800e62c:	f3bf 8f6f 	isb	sy
 800e630:	f3bf 8f4f 	dsb	sy
 800e634:	603b      	str	r3, [r7, #0]
}
 800e636:	bf00      	nop
 800e638:	e7fe      	b.n	800e638 <vPortValidateInterruptPriority+0x60>
	}
 800e63a:	bf00      	nop
 800e63c:	3714      	adds	r7, #20
 800e63e:	46bd      	mov	sp, r7
 800e640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e644:	4770      	bx	lr
 800e646:	bf00      	nop
 800e648:	e000e3f0 	.word	0xe000e3f0
 800e64c:	200028b0 	.word	0x200028b0
 800e650:	e000ed0c 	.word	0xe000ed0c
 800e654:	200028b4 	.word	0x200028b4

0800e658 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b08a      	sub	sp, #40	; 0x28
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e660:	2300      	movs	r3, #0
 800e662:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e664:	f7fe fb9e 	bl	800cda4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e668:	4b58      	ldr	r3, [pc, #352]	; (800e7cc <pvPortMalloc+0x174>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d101      	bne.n	800e674 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e670:	f000 f910 	bl	800e894 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e674:	4b56      	ldr	r3, [pc, #344]	; (800e7d0 <pvPortMalloc+0x178>)
 800e676:	681a      	ldr	r2, [r3, #0]
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	4013      	ands	r3, r2
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	f040 808e 	bne.w	800e79e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d01d      	beq.n	800e6c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e688:	2208      	movs	r2, #8
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	4413      	add	r3, r2
 800e68e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f003 0307 	and.w	r3, r3, #7
 800e696:	2b00      	cmp	r3, #0
 800e698:	d014      	beq.n	800e6c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f023 0307 	bic.w	r3, r3, #7
 800e6a0:	3308      	adds	r3, #8
 800e6a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f003 0307 	and.w	r3, r3, #7
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d00a      	beq.n	800e6c4 <pvPortMalloc+0x6c>
	__asm volatile
 800e6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6b2:	f383 8811 	msr	BASEPRI, r3
 800e6b6:	f3bf 8f6f 	isb	sy
 800e6ba:	f3bf 8f4f 	dsb	sy
 800e6be:	617b      	str	r3, [r7, #20]
}
 800e6c0:	bf00      	nop
 800e6c2:	e7fe      	b.n	800e6c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d069      	beq.n	800e79e <pvPortMalloc+0x146>
 800e6ca:	4b42      	ldr	r3, [pc, #264]	; (800e7d4 <pvPortMalloc+0x17c>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	687a      	ldr	r2, [r7, #4]
 800e6d0:	429a      	cmp	r2, r3
 800e6d2:	d864      	bhi.n	800e79e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e6d4:	4b40      	ldr	r3, [pc, #256]	; (800e7d8 <pvPortMalloc+0x180>)
 800e6d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e6d8:	4b3f      	ldr	r3, [pc, #252]	; (800e7d8 <pvPortMalloc+0x180>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e6de:	e004      	b.n	800e6ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ec:	685b      	ldr	r3, [r3, #4]
 800e6ee:	687a      	ldr	r2, [r7, #4]
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d903      	bls.n	800e6fc <pvPortMalloc+0xa4>
 800e6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d1f1      	bne.n	800e6e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e6fc:	4b33      	ldr	r3, [pc, #204]	; (800e7cc <pvPortMalloc+0x174>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e702:	429a      	cmp	r2, r3
 800e704:	d04b      	beq.n	800e79e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e706:	6a3b      	ldr	r3, [r7, #32]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	2208      	movs	r2, #8
 800e70c:	4413      	add	r3, r2
 800e70e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e712:	681a      	ldr	r2, [r3, #0]
 800e714:	6a3b      	ldr	r3, [r7, #32]
 800e716:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71a:	685a      	ldr	r2, [r3, #4]
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	1ad2      	subs	r2, r2, r3
 800e720:	2308      	movs	r3, #8
 800e722:	005b      	lsls	r3, r3, #1
 800e724:	429a      	cmp	r2, r3
 800e726:	d91f      	bls.n	800e768 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	4413      	add	r3, r2
 800e72e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e730:	69bb      	ldr	r3, [r7, #24]
 800e732:	f003 0307 	and.w	r3, r3, #7
 800e736:	2b00      	cmp	r3, #0
 800e738:	d00a      	beq.n	800e750 <pvPortMalloc+0xf8>
	__asm volatile
 800e73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e73e:	f383 8811 	msr	BASEPRI, r3
 800e742:	f3bf 8f6f 	isb	sy
 800e746:	f3bf 8f4f 	dsb	sy
 800e74a:	613b      	str	r3, [r7, #16]
}
 800e74c:	bf00      	nop
 800e74e:	e7fe      	b.n	800e74e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e752:	685a      	ldr	r2, [r3, #4]
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	1ad2      	subs	r2, r2, r3
 800e758:	69bb      	ldr	r3, [r7, #24]
 800e75a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e75e:	687a      	ldr	r2, [r7, #4]
 800e760:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e762:	69b8      	ldr	r0, [r7, #24]
 800e764:	f000 f8f8 	bl	800e958 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e768:	4b1a      	ldr	r3, [pc, #104]	; (800e7d4 <pvPortMalloc+0x17c>)
 800e76a:	681a      	ldr	r2, [r3, #0]
 800e76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e76e:	685b      	ldr	r3, [r3, #4]
 800e770:	1ad3      	subs	r3, r2, r3
 800e772:	4a18      	ldr	r2, [pc, #96]	; (800e7d4 <pvPortMalloc+0x17c>)
 800e774:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e776:	4b17      	ldr	r3, [pc, #92]	; (800e7d4 <pvPortMalloc+0x17c>)
 800e778:	681a      	ldr	r2, [r3, #0]
 800e77a:	4b18      	ldr	r3, [pc, #96]	; (800e7dc <pvPortMalloc+0x184>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	429a      	cmp	r2, r3
 800e780:	d203      	bcs.n	800e78a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e782:	4b14      	ldr	r3, [pc, #80]	; (800e7d4 <pvPortMalloc+0x17c>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	4a15      	ldr	r2, [pc, #84]	; (800e7dc <pvPortMalloc+0x184>)
 800e788:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e78c:	685a      	ldr	r2, [r3, #4]
 800e78e:	4b10      	ldr	r3, [pc, #64]	; (800e7d0 <pvPortMalloc+0x178>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	431a      	orrs	r2, r3
 800e794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e796:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e79a:	2200      	movs	r2, #0
 800e79c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e79e:	f7fe fb0f 	bl	800cdc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e7a2:	69fb      	ldr	r3, [r7, #28]
 800e7a4:	f003 0307 	and.w	r3, r3, #7
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d00a      	beq.n	800e7c2 <pvPortMalloc+0x16a>
	__asm volatile
 800e7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b0:	f383 8811 	msr	BASEPRI, r3
 800e7b4:	f3bf 8f6f 	isb	sy
 800e7b8:	f3bf 8f4f 	dsb	sy
 800e7bc:	60fb      	str	r3, [r7, #12]
}
 800e7be:	bf00      	nop
 800e7c0:	e7fe      	b.n	800e7c0 <pvPortMalloc+0x168>
	return pvReturn;
 800e7c2:	69fb      	ldr	r3, [r7, #28]
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3728      	adds	r7, #40	; 0x28
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}
 800e7cc:	20003478 	.word	0x20003478
 800e7d0:	20003484 	.word	0x20003484
 800e7d4:	2000347c 	.word	0x2000347c
 800e7d8:	20003470 	.word	0x20003470
 800e7dc:	20003480 	.word	0x20003480

0800e7e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b086      	sub	sp, #24
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d048      	beq.n	800e884 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e7f2:	2308      	movs	r3, #8
 800e7f4:	425b      	negs	r3, r3
 800e7f6:	697a      	ldr	r2, [r7, #20]
 800e7f8:	4413      	add	r3, r2
 800e7fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	685a      	ldr	r2, [r3, #4]
 800e804:	4b21      	ldr	r3, [pc, #132]	; (800e88c <vPortFree+0xac>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	4013      	ands	r3, r2
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d10a      	bne.n	800e824 <vPortFree+0x44>
	__asm volatile
 800e80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e812:	f383 8811 	msr	BASEPRI, r3
 800e816:	f3bf 8f6f 	isb	sy
 800e81a:	f3bf 8f4f 	dsb	sy
 800e81e:	60fb      	str	r3, [r7, #12]
}
 800e820:	bf00      	nop
 800e822:	e7fe      	b.n	800e822 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d00a      	beq.n	800e842 <vPortFree+0x62>
	__asm volatile
 800e82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e830:	f383 8811 	msr	BASEPRI, r3
 800e834:	f3bf 8f6f 	isb	sy
 800e838:	f3bf 8f4f 	dsb	sy
 800e83c:	60bb      	str	r3, [r7, #8]
}
 800e83e:	bf00      	nop
 800e840:	e7fe      	b.n	800e840 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e842:	693b      	ldr	r3, [r7, #16]
 800e844:	685a      	ldr	r2, [r3, #4]
 800e846:	4b11      	ldr	r3, [pc, #68]	; (800e88c <vPortFree+0xac>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	4013      	ands	r3, r2
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d019      	beq.n	800e884 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e850:	693b      	ldr	r3, [r7, #16]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d115      	bne.n	800e884 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	685a      	ldr	r2, [r3, #4]
 800e85c:	4b0b      	ldr	r3, [pc, #44]	; (800e88c <vPortFree+0xac>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	43db      	mvns	r3, r3
 800e862:	401a      	ands	r2, r3
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e868:	f7fe fa9c 	bl	800cda4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e86c:	693b      	ldr	r3, [r7, #16]
 800e86e:	685a      	ldr	r2, [r3, #4]
 800e870:	4b07      	ldr	r3, [pc, #28]	; (800e890 <vPortFree+0xb0>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	4413      	add	r3, r2
 800e876:	4a06      	ldr	r2, [pc, #24]	; (800e890 <vPortFree+0xb0>)
 800e878:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e87a:	6938      	ldr	r0, [r7, #16]
 800e87c:	f000 f86c 	bl	800e958 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e880:	f7fe fa9e 	bl	800cdc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e884:	bf00      	nop
 800e886:	3718      	adds	r7, #24
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}
 800e88c:	20003484 	.word	0x20003484
 800e890:	2000347c 	.word	0x2000347c

0800e894 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e894:	b480      	push	{r7}
 800e896:	b085      	sub	sp, #20
 800e898:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e89a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800e89e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e8a0:	4b27      	ldr	r3, [pc, #156]	; (800e940 <prvHeapInit+0xac>)
 800e8a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	f003 0307 	and.w	r3, r3, #7
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d00c      	beq.n	800e8c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	3307      	adds	r3, #7
 800e8b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f023 0307 	bic.w	r3, r3, #7
 800e8ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e8bc:	68ba      	ldr	r2, [r7, #8]
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	1ad3      	subs	r3, r2, r3
 800e8c2:	4a1f      	ldr	r2, [pc, #124]	; (800e940 <prvHeapInit+0xac>)
 800e8c4:	4413      	add	r3, r2
 800e8c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e8cc:	4a1d      	ldr	r2, [pc, #116]	; (800e944 <prvHeapInit+0xb0>)
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e8d2:	4b1c      	ldr	r3, [pc, #112]	; (800e944 <prvHeapInit+0xb0>)
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	68ba      	ldr	r2, [r7, #8]
 800e8dc:	4413      	add	r3, r2
 800e8de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e8e0:	2208      	movs	r2, #8
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	1a9b      	subs	r3, r3, r2
 800e8e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	f023 0307 	bic.w	r3, r3, #7
 800e8ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	4a15      	ldr	r2, [pc, #84]	; (800e948 <prvHeapInit+0xb4>)
 800e8f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e8f6:	4b14      	ldr	r3, [pc, #80]	; (800e948 <prvHeapInit+0xb4>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e8fe:	4b12      	ldr	r3, [pc, #72]	; (800e948 <prvHeapInit+0xb4>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	2200      	movs	r2, #0
 800e904:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	68fa      	ldr	r2, [r7, #12]
 800e90e:	1ad2      	subs	r2, r2, r3
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e914:	4b0c      	ldr	r3, [pc, #48]	; (800e948 <prvHeapInit+0xb4>)
 800e916:	681a      	ldr	r2, [r3, #0]
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	685b      	ldr	r3, [r3, #4]
 800e920:	4a0a      	ldr	r2, [pc, #40]	; (800e94c <prvHeapInit+0xb8>)
 800e922:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	685b      	ldr	r3, [r3, #4]
 800e928:	4a09      	ldr	r2, [pc, #36]	; (800e950 <prvHeapInit+0xbc>)
 800e92a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e92c:	4b09      	ldr	r3, [pc, #36]	; (800e954 <prvHeapInit+0xc0>)
 800e92e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e932:	601a      	str	r2, [r3, #0]
}
 800e934:	bf00      	nop
 800e936:	3714      	adds	r7, #20
 800e938:	46bd      	mov	sp, r7
 800e93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93e:	4770      	bx	lr
 800e940:	200028b8 	.word	0x200028b8
 800e944:	20003470 	.word	0x20003470
 800e948:	20003478 	.word	0x20003478
 800e94c:	20003480 	.word	0x20003480
 800e950:	2000347c 	.word	0x2000347c
 800e954:	20003484 	.word	0x20003484

0800e958 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e958:	b480      	push	{r7}
 800e95a:	b085      	sub	sp, #20
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e960:	4b28      	ldr	r3, [pc, #160]	; (800ea04 <prvInsertBlockIntoFreeList+0xac>)
 800e962:	60fb      	str	r3, [r7, #12]
 800e964:	e002      	b.n	800e96c <prvInsertBlockIntoFreeList+0x14>
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	60fb      	str	r3, [r7, #12]
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	687a      	ldr	r2, [r7, #4]
 800e972:	429a      	cmp	r2, r3
 800e974:	d8f7      	bhi.n	800e966 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	685b      	ldr	r3, [r3, #4]
 800e97e:	68ba      	ldr	r2, [r7, #8]
 800e980:	4413      	add	r3, r2
 800e982:	687a      	ldr	r2, [r7, #4]
 800e984:	429a      	cmp	r2, r3
 800e986:	d108      	bne.n	800e99a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	685a      	ldr	r2, [r3, #4]
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	685b      	ldr	r3, [r3, #4]
 800e990:	441a      	add	r2, r3
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	685b      	ldr	r3, [r3, #4]
 800e9a2:	68ba      	ldr	r2, [r7, #8]
 800e9a4:	441a      	add	r2, r3
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	d118      	bne.n	800e9e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	681a      	ldr	r2, [r3, #0]
 800e9b2:	4b15      	ldr	r3, [pc, #84]	; (800ea08 <prvInsertBlockIntoFreeList+0xb0>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d00d      	beq.n	800e9d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	685a      	ldr	r2, [r3, #4]
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	685b      	ldr	r3, [r3, #4]
 800e9c4:	441a      	add	r2, r3
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	681a      	ldr	r2, [r3, #0]
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	601a      	str	r2, [r3, #0]
 800e9d4:	e008      	b.n	800e9e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e9d6:	4b0c      	ldr	r3, [pc, #48]	; (800ea08 <prvInsertBlockIntoFreeList+0xb0>)
 800e9d8:	681a      	ldr	r2, [r3, #0]
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	601a      	str	r2, [r3, #0]
 800e9de:	e003      	b.n	800e9e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681a      	ldr	r2, [r3, #0]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e9e8:	68fa      	ldr	r2, [r7, #12]
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d002      	beq.n	800e9f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	687a      	ldr	r2, [r7, #4]
 800e9f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e9f6:	bf00      	nop
 800e9f8:	3714      	adds	r7, #20
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea00:	4770      	bx	lr
 800ea02:	bf00      	nop
 800ea04:	20003470 	.word	0x20003470
 800ea08:	20003478 	.word	0x20003478

0800ea0c <__cvt>:
 800ea0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea10:	ec55 4b10 	vmov	r4, r5, d0
 800ea14:	2d00      	cmp	r5, #0
 800ea16:	460e      	mov	r6, r1
 800ea18:	4619      	mov	r1, r3
 800ea1a:	462b      	mov	r3, r5
 800ea1c:	bfbb      	ittet	lt
 800ea1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ea22:	461d      	movlt	r5, r3
 800ea24:	2300      	movge	r3, #0
 800ea26:	232d      	movlt	r3, #45	; 0x2d
 800ea28:	700b      	strb	r3, [r1, #0]
 800ea2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ea30:	4691      	mov	r9, r2
 800ea32:	f023 0820 	bic.w	r8, r3, #32
 800ea36:	bfbc      	itt	lt
 800ea38:	4622      	movlt	r2, r4
 800ea3a:	4614      	movlt	r4, r2
 800ea3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ea40:	d005      	beq.n	800ea4e <__cvt+0x42>
 800ea42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ea46:	d100      	bne.n	800ea4a <__cvt+0x3e>
 800ea48:	3601      	adds	r6, #1
 800ea4a:	2102      	movs	r1, #2
 800ea4c:	e000      	b.n	800ea50 <__cvt+0x44>
 800ea4e:	2103      	movs	r1, #3
 800ea50:	ab03      	add	r3, sp, #12
 800ea52:	9301      	str	r3, [sp, #4]
 800ea54:	ab02      	add	r3, sp, #8
 800ea56:	9300      	str	r3, [sp, #0]
 800ea58:	ec45 4b10 	vmov	d0, r4, r5
 800ea5c:	4653      	mov	r3, sl
 800ea5e:	4632      	mov	r2, r6
 800ea60:	f001 f84e 	bl	800fb00 <_dtoa_r>
 800ea64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ea68:	4607      	mov	r7, r0
 800ea6a:	d102      	bne.n	800ea72 <__cvt+0x66>
 800ea6c:	f019 0f01 	tst.w	r9, #1
 800ea70:	d022      	beq.n	800eab8 <__cvt+0xac>
 800ea72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ea76:	eb07 0906 	add.w	r9, r7, r6
 800ea7a:	d110      	bne.n	800ea9e <__cvt+0x92>
 800ea7c:	783b      	ldrb	r3, [r7, #0]
 800ea7e:	2b30      	cmp	r3, #48	; 0x30
 800ea80:	d10a      	bne.n	800ea98 <__cvt+0x8c>
 800ea82:	2200      	movs	r2, #0
 800ea84:	2300      	movs	r3, #0
 800ea86:	4620      	mov	r0, r4
 800ea88:	4629      	mov	r1, r5
 800ea8a:	f7f2 f81d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea8e:	b918      	cbnz	r0, 800ea98 <__cvt+0x8c>
 800ea90:	f1c6 0601 	rsb	r6, r6, #1
 800ea94:	f8ca 6000 	str.w	r6, [sl]
 800ea98:	f8da 3000 	ldr.w	r3, [sl]
 800ea9c:	4499      	add	r9, r3
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	4620      	mov	r0, r4
 800eaa4:	4629      	mov	r1, r5
 800eaa6:	f7f2 f80f 	bl	8000ac8 <__aeabi_dcmpeq>
 800eaaa:	b108      	cbz	r0, 800eab0 <__cvt+0xa4>
 800eaac:	f8cd 900c 	str.w	r9, [sp, #12]
 800eab0:	2230      	movs	r2, #48	; 0x30
 800eab2:	9b03      	ldr	r3, [sp, #12]
 800eab4:	454b      	cmp	r3, r9
 800eab6:	d307      	bcc.n	800eac8 <__cvt+0xbc>
 800eab8:	9b03      	ldr	r3, [sp, #12]
 800eaba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eabc:	1bdb      	subs	r3, r3, r7
 800eabe:	4638      	mov	r0, r7
 800eac0:	6013      	str	r3, [r2, #0]
 800eac2:	b004      	add	sp, #16
 800eac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eac8:	1c59      	adds	r1, r3, #1
 800eaca:	9103      	str	r1, [sp, #12]
 800eacc:	701a      	strb	r2, [r3, #0]
 800eace:	e7f0      	b.n	800eab2 <__cvt+0xa6>

0800ead0 <__exponent>:
 800ead0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ead2:	4603      	mov	r3, r0
 800ead4:	2900      	cmp	r1, #0
 800ead6:	bfb8      	it	lt
 800ead8:	4249      	neglt	r1, r1
 800eada:	f803 2b02 	strb.w	r2, [r3], #2
 800eade:	bfb4      	ite	lt
 800eae0:	222d      	movlt	r2, #45	; 0x2d
 800eae2:	222b      	movge	r2, #43	; 0x2b
 800eae4:	2909      	cmp	r1, #9
 800eae6:	7042      	strb	r2, [r0, #1]
 800eae8:	dd2a      	ble.n	800eb40 <__exponent+0x70>
 800eaea:	f10d 0207 	add.w	r2, sp, #7
 800eaee:	4617      	mov	r7, r2
 800eaf0:	260a      	movs	r6, #10
 800eaf2:	4694      	mov	ip, r2
 800eaf4:	fb91 f5f6 	sdiv	r5, r1, r6
 800eaf8:	fb06 1415 	mls	r4, r6, r5, r1
 800eafc:	3430      	adds	r4, #48	; 0x30
 800eafe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800eb02:	460c      	mov	r4, r1
 800eb04:	2c63      	cmp	r4, #99	; 0x63
 800eb06:	f102 32ff 	add.w	r2, r2, #4294967295
 800eb0a:	4629      	mov	r1, r5
 800eb0c:	dcf1      	bgt.n	800eaf2 <__exponent+0x22>
 800eb0e:	3130      	adds	r1, #48	; 0x30
 800eb10:	f1ac 0402 	sub.w	r4, ip, #2
 800eb14:	f802 1c01 	strb.w	r1, [r2, #-1]
 800eb18:	1c41      	adds	r1, r0, #1
 800eb1a:	4622      	mov	r2, r4
 800eb1c:	42ba      	cmp	r2, r7
 800eb1e:	d30a      	bcc.n	800eb36 <__exponent+0x66>
 800eb20:	f10d 0209 	add.w	r2, sp, #9
 800eb24:	eba2 020c 	sub.w	r2, r2, ip
 800eb28:	42bc      	cmp	r4, r7
 800eb2a:	bf88      	it	hi
 800eb2c:	2200      	movhi	r2, #0
 800eb2e:	4413      	add	r3, r2
 800eb30:	1a18      	subs	r0, r3, r0
 800eb32:	b003      	add	sp, #12
 800eb34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb36:	f812 5b01 	ldrb.w	r5, [r2], #1
 800eb3a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800eb3e:	e7ed      	b.n	800eb1c <__exponent+0x4c>
 800eb40:	2330      	movs	r3, #48	; 0x30
 800eb42:	3130      	adds	r1, #48	; 0x30
 800eb44:	7083      	strb	r3, [r0, #2]
 800eb46:	70c1      	strb	r1, [r0, #3]
 800eb48:	1d03      	adds	r3, r0, #4
 800eb4a:	e7f1      	b.n	800eb30 <__exponent+0x60>

0800eb4c <_printf_float>:
 800eb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb50:	ed2d 8b02 	vpush	{d8}
 800eb54:	b08d      	sub	sp, #52	; 0x34
 800eb56:	460c      	mov	r4, r1
 800eb58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800eb5c:	4616      	mov	r6, r2
 800eb5e:	461f      	mov	r7, r3
 800eb60:	4605      	mov	r5, r0
 800eb62:	f000 fe9f 	bl	800f8a4 <_localeconv_r>
 800eb66:	f8d0 a000 	ldr.w	sl, [r0]
 800eb6a:	4650      	mov	r0, sl
 800eb6c:	f7f1 fb80 	bl	8000270 <strlen>
 800eb70:	2300      	movs	r3, #0
 800eb72:	930a      	str	r3, [sp, #40]	; 0x28
 800eb74:	6823      	ldr	r3, [r4, #0]
 800eb76:	9305      	str	r3, [sp, #20]
 800eb78:	f8d8 3000 	ldr.w	r3, [r8]
 800eb7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800eb80:	3307      	adds	r3, #7
 800eb82:	f023 0307 	bic.w	r3, r3, #7
 800eb86:	f103 0208 	add.w	r2, r3, #8
 800eb8a:	f8c8 2000 	str.w	r2, [r8]
 800eb8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eb92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800eb96:	9307      	str	r3, [sp, #28]
 800eb98:	f8cd 8018 	str.w	r8, [sp, #24]
 800eb9c:	ee08 0a10 	vmov	s16, r0
 800eba0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800eba4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eba8:	4b9e      	ldr	r3, [pc, #632]	; (800ee24 <_printf_float+0x2d8>)
 800ebaa:	f04f 32ff 	mov.w	r2, #4294967295
 800ebae:	f7f1 ffbd 	bl	8000b2c <__aeabi_dcmpun>
 800ebb2:	bb88      	cbnz	r0, 800ec18 <_printf_float+0xcc>
 800ebb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ebb8:	4b9a      	ldr	r3, [pc, #616]	; (800ee24 <_printf_float+0x2d8>)
 800ebba:	f04f 32ff 	mov.w	r2, #4294967295
 800ebbe:	f7f1 ff97 	bl	8000af0 <__aeabi_dcmple>
 800ebc2:	bb48      	cbnz	r0, 800ec18 <_printf_float+0xcc>
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	4640      	mov	r0, r8
 800ebca:	4649      	mov	r1, r9
 800ebcc:	f7f1 ff86 	bl	8000adc <__aeabi_dcmplt>
 800ebd0:	b110      	cbz	r0, 800ebd8 <_printf_float+0x8c>
 800ebd2:	232d      	movs	r3, #45	; 0x2d
 800ebd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebd8:	4a93      	ldr	r2, [pc, #588]	; (800ee28 <_printf_float+0x2dc>)
 800ebda:	4b94      	ldr	r3, [pc, #592]	; (800ee2c <_printf_float+0x2e0>)
 800ebdc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ebe0:	bf94      	ite	ls
 800ebe2:	4690      	movls	r8, r2
 800ebe4:	4698      	movhi	r8, r3
 800ebe6:	2303      	movs	r3, #3
 800ebe8:	6123      	str	r3, [r4, #16]
 800ebea:	9b05      	ldr	r3, [sp, #20]
 800ebec:	f023 0304 	bic.w	r3, r3, #4
 800ebf0:	6023      	str	r3, [r4, #0]
 800ebf2:	f04f 0900 	mov.w	r9, #0
 800ebf6:	9700      	str	r7, [sp, #0]
 800ebf8:	4633      	mov	r3, r6
 800ebfa:	aa0b      	add	r2, sp, #44	; 0x2c
 800ebfc:	4621      	mov	r1, r4
 800ebfe:	4628      	mov	r0, r5
 800ec00:	f000 f9da 	bl	800efb8 <_printf_common>
 800ec04:	3001      	adds	r0, #1
 800ec06:	f040 8090 	bne.w	800ed2a <_printf_float+0x1de>
 800ec0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ec0e:	b00d      	add	sp, #52	; 0x34
 800ec10:	ecbd 8b02 	vpop	{d8}
 800ec14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec18:	4642      	mov	r2, r8
 800ec1a:	464b      	mov	r3, r9
 800ec1c:	4640      	mov	r0, r8
 800ec1e:	4649      	mov	r1, r9
 800ec20:	f7f1 ff84 	bl	8000b2c <__aeabi_dcmpun>
 800ec24:	b140      	cbz	r0, 800ec38 <_printf_float+0xec>
 800ec26:	464b      	mov	r3, r9
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	bfbc      	itt	lt
 800ec2c:	232d      	movlt	r3, #45	; 0x2d
 800ec2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ec32:	4a7f      	ldr	r2, [pc, #508]	; (800ee30 <_printf_float+0x2e4>)
 800ec34:	4b7f      	ldr	r3, [pc, #508]	; (800ee34 <_printf_float+0x2e8>)
 800ec36:	e7d1      	b.n	800ebdc <_printf_float+0x90>
 800ec38:	6863      	ldr	r3, [r4, #4]
 800ec3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ec3e:	9206      	str	r2, [sp, #24]
 800ec40:	1c5a      	adds	r2, r3, #1
 800ec42:	d13f      	bne.n	800ecc4 <_printf_float+0x178>
 800ec44:	2306      	movs	r3, #6
 800ec46:	6063      	str	r3, [r4, #4]
 800ec48:	9b05      	ldr	r3, [sp, #20]
 800ec4a:	6861      	ldr	r1, [r4, #4]
 800ec4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ec50:	2300      	movs	r3, #0
 800ec52:	9303      	str	r3, [sp, #12]
 800ec54:	ab0a      	add	r3, sp, #40	; 0x28
 800ec56:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ec5a:	ab09      	add	r3, sp, #36	; 0x24
 800ec5c:	ec49 8b10 	vmov	d0, r8, r9
 800ec60:	9300      	str	r3, [sp, #0]
 800ec62:	6022      	str	r2, [r4, #0]
 800ec64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ec68:	4628      	mov	r0, r5
 800ec6a:	f7ff fecf 	bl	800ea0c <__cvt>
 800ec6e:	9b06      	ldr	r3, [sp, #24]
 800ec70:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec72:	2b47      	cmp	r3, #71	; 0x47
 800ec74:	4680      	mov	r8, r0
 800ec76:	d108      	bne.n	800ec8a <_printf_float+0x13e>
 800ec78:	1cc8      	adds	r0, r1, #3
 800ec7a:	db02      	blt.n	800ec82 <_printf_float+0x136>
 800ec7c:	6863      	ldr	r3, [r4, #4]
 800ec7e:	4299      	cmp	r1, r3
 800ec80:	dd41      	ble.n	800ed06 <_printf_float+0x1ba>
 800ec82:	f1ab 0302 	sub.w	r3, fp, #2
 800ec86:	fa5f fb83 	uxtb.w	fp, r3
 800ec8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ec8e:	d820      	bhi.n	800ecd2 <_printf_float+0x186>
 800ec90:	3901      	subs	r1, #1
 800ec92:	465a      	mov	r2, fp
 800ec94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ec98:	9109      	str	r1, [sp, #36]	; 0x24
 800ec9a:	f7ff ff19 	bl	800ead0 <__exponent>
 800ec9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eca0:	1813      	adds	r3, r2, r0
 800eca2:	2a01      	cmp	r2, #1
 800eca4:	4681      	mov	r9, r0
 800eca6:	6123      	str	r3, [r4, #16]
 800eca8:	dc02      	bgt.n	800ecb0 <_printf_float+0x164>
 800ecaa:	6822      	ldr	r2, [r4, #0]
 800ecac:	07d2      	lsls	r2, r2, #31
 800ecae:	d501      	bpl.n	800ecb4 <_printf_float+0x168>
 800ecb0:	3301      	adds	r3, #1
 800ecb2:	6123      	str	r3, [r4, #16]
 800ecb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d09c      	beq.n	800ebf6 <_printf_float+0xaa>
 800ecbc:	232d      	movs	r3, #45	; 0x2d
 800ecbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ecc2:	e798      	b.n	800ebf6 <_printf_float+0xaa>
 800ecc4:	9a06      	ldr	r2, [sp, #24]
 800ecc6:	2a47      	cmp	r2, #71	; 0x47
 800ecc8:	d1be      	bne.n	800ec48 <_printf_float+0xfc>
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d1bc      	bne.n	800ec48 <_printf_float+0xfc>
 800ecce:	2301      	movs	r3, #1
 800ecd0:	e7b9      	b.n	800ec46 <_printf_float+0xfa>
 800ecd2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ecd6:	d118      	bne.n	800ed0a <_printf_float+0x1be>
 800ecd8:	2900      	cmp	r1, #0
 800ecda:	6863      	ldr	r3, [r4, #4]
 800ecdc:	dd0b      	ble.n	800ecf6 <_printf_float+0x1aa>
 800ecde:	6121      	str	r1, [r4, #16]
 800ece0:	b913      	cbnz	r3, 800ece8 <_printf_float+0x19c>
 800ece2:	6822      	ldr	r2, [r4, #0]
 800ece4:	07d0      	lsls	r0, r2, #31
 800ece6:	d502      	bpl.n	800ecee <_printf_float+0x1a2>
 800ece8:	3301      	adds	r3, #1
 800ecea:	440b      	add	r3, r1
 800ecec:	6123      	str	r3, [r4, #16]
 800ecee:	65a1      	str	r1, [r4, #88]	; 0x58
 800ecf0:	f04f 0900 	mov.w	r9, #0
 800ecf4:	e7de      	b.n	800ecb4 <_printf_float+0x168>
 800ecf6:	b913      	cbnz	r3, 800ecfe <_printf_float+0x1b2>
 800ecf8:	6822      	ldr	r2, [r4, #0]
 800ecfa:	07d2      	lsls	r2, r2, #31
 800ecfc:	d501      	bpl.n	800ed02 <_printf_float+0x1b6>
 800ecfe:	3302      	adds	r3, #2
 800ed00:	e7f4      	b.n	800ecec <_printf_float+0x1a0>
 800ed02:	2301      	movs	r3, #1
 800ed04:	e7f2      	b.n	800ecec <_printf_float+0x1a0>
 800ed06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ed0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed0c:	4299      	cmp	r1, r3
 800ed0e:	db05      	blt.n	800ed1c <_printf_float+0x1d0>
 800ed10:	6823      	ldr	r3, [r4, #0]
 800ed12:	6121      	str	r1, [r4, #16]
 800ed14:	07d8      	lsls	r0, r3, #31
 800ed16:	d5ea      	bpl.n	800ecee <_printf_float+0x1a2>
 800ed18:	1c4b      	adds	r3, r1, #1
 800ed1a:	e7e7      	b.n	800ecec <_printf_float+0x1a0>
 800ed1c:	2900      	cmp	r1, #0
 800ed1e:	bfd4      	ite	le
 800ed20:	f1c1 0202 	rsble	r2, r1, #2
 800ed24:	2201      	movgt	r2, #1
 800ed26:	4413      	add	r3, r2
 800ed28:	e7e0      	b.n	800ecec <_printf_float+0x1a0>
 800ed2a:	6823      	ldr	r3, [r4, #0]
 800ed2c:	055a      	lsls	r2, r3, #21
 800ed2e:	d407      	bmi.n	800ed40 <_printf_float+0x1f4>
 800ed30:	6923      	ldr	r3, [r4, #16]
 800ed32:	4642      	mov	r2, r8
 800ed34:	4631      	mov	r1, r6
 800ed36:	4628      	mov	r0, r5
 800ed38:	47b8      	blx	r7
 800ed3a:	3001      	adds	r0, #1
 800ed3c:	d12c      	bne.n	800ed98 <_printf_float+0x24c>
 800ed3e:	e764      	b.n	800ec0a <_printf_float+0xbe>
 800ed40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ed44:	f240 80e0 	bls.w	800ef08 <_printf_float+0x3bc>
 800ed48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	2300      	movs	r3, #0
 800ed50:	f7f1 feba 	bl	8000ac8 <__aeabi_dcmpeq>
 800ed54:	2800      	cmp	r0, #0
 800ed56:	d034      	beq.n	800edc2 <_printf_float+0x276>
 800ed58:	4a37      	ldr	r2, [pc, #220]	; (800ee38 <_printf_float+0x2ec>)
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	4631      	mov	r1, r6
 800ed5e:	4628      	mov	r0, r5
 800ed60:	47b8      	blx	r7
 800ed62:	3001      	adds	r0, #1
 800ed64:	f43f af51 	beq.w	800ec0a <_printf_float+0xbe>
 800ed68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	db02      	blt.n	800ed76 <_printf_float+0x22a>
 800ed70:	6823      	ldr	r3, [r4, #0]
 800ed72:	07d8      	lsls	r0, r3, #31
 800ed74:	d510      	bpl.n	800ed98 <_printf_float+0x24c>
 800ed76:	ee18 3a10 	vmov	r3, s16
 800ed7a:	4652      	mov	r2, sl
 800ed7c:	4631      	mov	r1, r6
 800ed7e:	4628      	mov	r0, r5
 800ed80:	47b8      	blx	r7
 800ed82:	3001      	adds	r0, #1
 800ed84:	f43f af41 	beq.w	800ec0a <_printf_float+0xbe>
 800ed88:	f04f 0800 	mov.w	r8, #0
 800ed8c:	f104 091a 	add.w	r9, r4, #26
 800ed90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed92:	3b01      	subs	r3, #1
 800ed94:	4543      	cmp	r3, r8
 800ed96:	dc09      	bgt.n	800edac <_printf_float+0x260>
 800ed98:	6823      	ldr	r3, [r4, #0]
 800ed9a:	079b      	lsls	r3, r3, #30
 800ed9c:	f100 8107 	bmi.w	800efae <_printf_float+0x462>
 800eda0:	68e0      	ldr	r0, [r4, #12]
 800eda2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eda4:	4298      	cmp	r0, r3
 800eda6:	bfb8      	it	lt
 800eda8:	4618      	movlt	r0, r3
 800edaa:	e730      	b.n	800ec0e <_printf_float+0xc2>
 800edac:	2301      	movs	r3, #1
 800edae:	464a      	mov	r2, r9
 800edb0:	4631      	mov	r1, r6
 800edb2:	4628      	mov	r0, r5
 800edb4:	47b8      	blx	r7
 800edb6:	3001      	adds	r0, #1
 800edb8:	f43f af27 	beq.w	800ec0a <_printf_float+0xbe>
 800edbc:	f108 0801 	add.w	r8, r8, #1
 800edc0:	e7e6      	b.n	800ed90 <_printf_float+0x244>
 800edc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	dc39      	bgt.n	800ee3c <_printf_float+0x2f0>
 800edc8:	4a1b      	ldr	r2, [pc, #108]	; (800ee38 <_printf_float+0x2ec>)
 800edca:	2301      	movs	r3, #1
 800edcc:	4631      	mov	r1, r6
 800edce:	4628      	mov	r0, r5
 800edd0:	47b8      	blx	r7
 800edd2:	3001      	adds	r0, #1
 800edd4:	f43f af19 	beq.w	800ec0a <_printf_float+0xbe>
 800edd8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800eddc:	4313      	orrs	r3, r2
 800edde:	d102      	bne.n	800ede6 <_printf_float+0x29a>
 800ede0:	6823      	ldr	r3, [r4, #0]
 800ede2:	07d9      	lsls	r1, r3, #31
 800ede4:	d5d8      	bpl.n	800ed98 <_printf_float+0x24c>
 800ede6:	ee18 3a10 	vmov	r3, s16
 800edea:	4652      	mov	r2, sl
 800edec:	4631      	mov	r1, r6
 800edee:	4628      	mov	r0, r5
 800edf0:	47b8      	blx	r7
 800edf2:	3001      	adds	r0, #1
 800edf4:	f43f af09 	beq.w	800ec0a <_printf_float+0xbe>
 800edf8:	f04f 0900 	mov.w	r9, #0
 800edfc:	f104 0a1a 	add.w	sl, r4, #26
 800ee00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee02:	425b      	negs	r3, r3
 800ee04:	454b      	cmp	r3, r9
 800ee06:	dc01      	bgt.n	800ee0c <_printf_float+0x2c0>
 800ee08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee0a:	e792      	b.n	800ed32 <_printf_float+0x1e6>
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	4652      	mov	r2, sl
 800ee10:	4631      	mov	r1, r6
 800ee12:	4628      	mov	r0, r5
 800ee14:	47b8      	blx	r7
 800ee16:	3001      	adds	r0, #1
 800ee18:	f43f aef7 	beq.w	800ec0a <_printf_float+0xbe>
 800ee1c:	f109 0901 	add.w	r9, r9, #1
 800ee20:	e7ee      	b.n	800ee00 <_printf_float+0x2b4>
 800ee22:	bf00      	nop
 800ee24:	7fefffff 	.word	0x7fefffff
 800ee28:	08012380 	.word	0x08012380
 800ee2c:	08012384 	.word	0x08012384
 800ee30:	08012388 	.word	0x08012388
 800ee34:	0801238c 	.word	0x0801238c
 800ee38:	08012390 	.word	0x08012390
 800ee3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ee40:	429a      	cmp	r2, r3
 800ee42:	bfa8      	it	ge
 800ee44:	461a      	movge	r2, r3
 800ee46:	2a00      	cmp	r2, #0
 800ee48:	4691      	mov	r9, r2
 800ee4a:	dc37      	bgt.n	800eebc <_printf_float+0x370>
 800ee4c:	f04f 0b00 	mov.w	fp, #0
 800ee50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ee54:	f104 021a 	add.w	r2, r4, #26
 800ee58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ee5a:	9305      	str	r3, [sp, #20]
 800ee5c:	eba3 0309 	sub.w	r3, r3, r9
 800ee60:	455b      	cmp	r3, fp
 800ee62:	dc33      	bgt.n	800eecc <_printf_float+0x380>
 800ee64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	db3b      	blt.n	800eee4 <_printf_float+0x398>
 800ee6c:	6823      	ldr	r3, [r4, #0]
 800ee6e:	07da      	lsls	r2, r3, #31
 800ee70:	d438      	bmi.n	800eee4 <_printf_float+0x398>
 800ee72:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ee76:	eba2 0903 	sub.w	r9, r2, r3
 800ee7a:	9b05      	ldr	r3, [sp, #20]
 800ee7c:	1ad2      	subs	r2, r2, r3
 800ee7e:	4591      	cmp	r9, r2
 800ee80:	bfa8      	it	ge
 800ee82:	4691      	movge	r9, r2
 800ee84:	f1b9 0f00 	cmp.w	r9, #0
 800ee88:	dc35      	bgt.n	800eef6 <_printf_float+0x3aa>
 800ee8a:	f04f 0800 	mov.w	r8, #0
 800ee8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ee92:	f104 0a1a 	add.w	sl, r4, #26
 800ee96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ee9a:	1a9b      	subs	r3, r3, r2
 800ee9c:	eba3 0309 	sub.w	r3, r3, r9
 800eea0:	4543      	cmp	r3, r8
 800eea2:	f77f af79 	ble.w	800ed98 <_printf_float+0x24c>
 800eea6:	2301      	movs	r3, #1
 800eea8:	4652      	mov	r2, sl
 800eeaa:	4631      	mov	r1, r6
 800eeac:	4628      	mov	r0, r5
 800eeae:	47b8      	blx	r7
 800eeb0:	3001      	adds	r0, #1
 800eeb2:	f43f aeaa 	beq.w	800ec0a <_printf_float+0xbe>
 800eeb6:	f108 0801 	add.w	r8, r8, #1
 800eeba:	e7ec      	b.n	800ee96 <_printf_float+0x34a>
 800eebc:	4613      	mov	r3, r2
 800eebe:	4631      	mov	r1, r6
 800eec0:	4642      	mov	r2, r8
 800eec2:	4628      	mov	r0, r5
 800eec4:	47b8      	blx	r7
 800eec6:	3001      	adds	r0, #1
 800eec8:	d1c0      	bne.n	800ee4c <_printf_float+0x300>
 800eeca:	e69e      	b.n	800ec0a <_printf_float+0xbe>
 800eecc:	2301      	movs	r3, #1
 800eece:	4631      	mov	r1, r6
 800eed0:	4628      	mov	r0, r5
 800eed2:	9205      	str	r2, [sp, #20]
 800eed4:	47b8      	blx	r7
 800eed6:	3001      	adds	r0, #1
 800eed8:	f43f ae97 	beq.w	800ec0a <_printf_float+0xbe>
 800eedc:	9a05      	ldr	r2, [sp, #20]
 800eede:	f10b 0b01 	add.w	fp, fp, #1
 800eee2:	e7b9      	b.n	800ee58 <_printf_float+0x30c>
 800eee4:	ee18 3a10 	vmov	r3, s16
 800eee8:	4652      	mov	r2, sl
 800eeea:	4631      	mov	r1, r6
 800eeec:	4628      	mov	r0, r5
 800eeee:	47b8      	blx	r7
 800eef0:	3001      	adds	r0, #1
 800eef2:	d1be      	bne.n	800ee72 <_printf_float+0x326>
 800eef4:	e689      	b.n	800ec0a <_printf_float+0xbe>
 800eef6:	9a05      	ldr	r2, [sp, #20]
 800eef8:	464b      	mov	r3, r9
 800eefa:	4442      	add	r2, r8
 800eefc:	4631      	mov	r1, r6
 800eefe:	4628      	mov	r0, r5
 800ef00:	47b8      	blx	r7
 800ef02:	3001      	adds	r0, #1
 800ef04:	d1c1      	bne.n	800ee8a <_printf_float+0x33e>
 800ef06:	e680      	b.n	800ec0a <_printf_float+0xbe>
 800ef08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef0a:	2a01      	cmp	r2, #1
 800ef0c:	dc01      	bgt.n	800ef12 <_printf_float+0x3c6>
 800ef0e:	07db      	lsls	r3, r3, #31
 800ef10:	d53a      	bpl.n	800ef88 <_printf_float+0x43c>
 800ef12:	2301      	movs	r3, #1
 800ef14:	4642      	mov	r2, r8
 800ef16:	4631      	mov	r1, r6
 800ef18:	4628      	mov	r0, r5
 800ef1a:	47b8      	blx	r7
 800ef1c:	3001      	adds	r0, #1
 800ef1e:	f43f ae74 	beq.w	800ec0a <_printf_float+0xbe>
 800ef22:	ee18 3a10 	vmov	r3, s16
 800ef26:	4652      	mov	r2, sl
 800ef28:	4631      	mov	r1, r6
 800ef2a:	4628      	mov	r0, r5
 800ef2c:	47b8      	blx	r7
 800ef2e:	3001      	adds	r0, #1
 800ef30:	f43f ae6b 	beq.w	800ec0a <_printf_float+0xbe>
 800ef34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ef38:	2200      	movs	r2, #0
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ef40:	f7f1 fdc2 	bl	8000ac8 <__aeabi_dcmpeq>
 800ef44:	b9d8      	cbnz	r0, 800ef7e <_printf_float+0x432>
 800ef46:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ef4a:	f108 0201 	add.w	r2, r8, #1
 800ef4e:	4631      	mov	r1, r6
 800ef50:	4628      	mov	r0, r5
 800ef52:	47b8      	blx	r7
 800ef54:	3001      	adds	r0, #1
 800ef56:	d10e      	bne.n	800ef76 <_printf_float+0x42a>
 800ef58:	e657      	b.n	800ec0a <_printf_float+0xbe>
 800ef5a:	2301      	movs	r3, #1
 800ef5c:	4652      	mov	r2, sl
 800ef5e:	4631      	mov	r1, r6
 800ef60:	4628      	mov	r0, r5
 800ef62:	47b8      	blx	r7
 800ef64:	3001      	adds	r0, #1
 800ef66:	f43f ae50 	beq.w	800ec0a <_printf_float+0xbe>
 800ef6a:	f108 0801 	add.w	r8, r8, #1
 800ef6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef70:	3b01      	subs	r3, #1
 800ef72:	4543      	cmp	r3, r8
 800ef74:	dcf1      	bgt.n	800ef5a <_printf_float+0x40e>
 800ef76:	464b      	mov	r3, r9
 800ef78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ef7c:	e6da      	b.n	800ed34 <_printf_float+0x1e8>
 800ef7e:	f04f 0800 	mov.w	r8, #0
 800ef82:	f104 0a1a 	add.w	sl, r4, #26
 800ef86:	e7f2      	b.n	800ef6e <_printf_float+0x422>
 800ef88:	2301      	movs	r3, #1
 800ef8a:	4642      	mov	r2, r8
 800ef8c:	e7df      	b.n	800ef4e <_printf_float+0x402>
 800ef8e:	2301      	movs	r3, #1
 800ef90:	464a      	mov	r2, r9
 800ef92:	4631      	mov	r1, r6
 800ef94:	4628      	mov	r0, r5
 800ef96:	47b8      	blx	r7
 800ef98:	3001      	adds	r0, #1
 800ef9a:	f43f ae36 	beq.w	800ec0a <_printf_float+0xbe>
 800ef9e:	f108 0801 	add.w	r8, r8, #1
 800efa2:	68e3      	ldr	r3, [r4, #12]
 800efa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800efa6:	1a5b      	subs	r3, r3, r1
 800efa8:	4543      	cmp	r3, r8
 800efaa:	dcf0      	bgt.n	800ef8e <_printf_float+0x442>
 800efac:	e6f8      	b.n	800eda0 <_printf_float+0x254>
 800efae:	f04f 0800 	mov.w	r8, #0
 800efb2:	f104 0919 	add.w	r9, r4, #25
 800efb6:	e7f4      	b.n	800efa2 <_printf_float+0x456>

0800efb8 <_printf_common>:
 800efb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efbc:	4616      	mov	r6, r2
 800efbe:	4699      	mov	r9, r3
 800efc0:	688a      	ldr	r2, [r1, #8]
 800efc2:	690b      	ldr	r3, [r1, #16]
 800efc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800efc8:	4293      	cmp	r3, r2
 800efca:	bfb8      	it	lt
 800efcc:	4613      	movlt	r3, r2
 800efce:	6033      	str	r3, [r6, #0]
 800efd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800efd4:	4607      	mov	r7, r0
 800efd6:	460c      	mov	r4, r1
 800efd8:	b10a      	cbz	r2, 800efde <_printf_common+0x26>
 800efda:	3301      	adds	r3, #1
 800efdc:	6033      	str	r3, [r6, #0]
 800efde:	6823      	ldr	r3, [r4, #0]
 800efe0:	0699      	lsls	r1, r3, #26
 800efe2:	bf42      	ittt	mi
 800efe4:	6833      	ldrmi	r3, [r6, #0]
 800efe6:	3302      	addmi	r3, #2
 800efe8:	6033      	strmi	r3, [r6, #0]
 800efea:	6825      	ldr	r5, [r4, #0]
 800efec:	f015 0506 	ands.w	r5, r5, #6
 800eff0:	d106      	bne.n	800f000 <_printf_common+0x48>
 800eff2:	f104 0a19 	add.w	sl, r4, #25
 800eff6:	68e3      	ldr	r3, [r4, #12]
 800eff8:	6832      	ldr	r2, [r6, #0]
 800effa:	1a9b      	subs	r3, r3, r2
 800effc:	42ab      	cmp	r3, r5
 800effe:	dc26      	bgt.n	800f04e <_printf_common+0x96>
 800f000:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f004:	1e13      	subs	r3, r2, #0
 800f006:	6822      	ldr	r2, [r4, #0]
 800f008:	bf18      	it	ne
 800f00a:	2301      	movne	r3, #1
 800f00c:	0692      	lsls	r2, r2, #26
 800f00e:	d42b      	bmi.n	800f068 <_printf_common+0xb0>
 800f010:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f014:	4649      	mov	r1, r9
 800f016:	4638      	mov	r0, r7
 800f018:	47c0      	blx	r8
 800f01a:	3001      	adds	r0, #1
 800f01c:	d01e      	beq.n	800f05c <_printf_common+0xa4>
 800f01e:	6823      	ldr	r3, [r4, #0]
 800f020:	6922      	ldr	r2, [r4, #16]
 800f022:	f003 0306 	and.w	r3, r3, #6
 800f026:	2b04      	cmp	r3, #4
 800f028:	bf02      	ittt	eq
 800f02a:	68e5      	ldreq	r5, [r4, #12]
 800f02c:	6833      	ldreq	r3, [r6, #0]
 800f02e:	1aed      	subeq	r5, r5, r3
 800f030:	68a3      	ldr	r3, [r4, #8]
 800f032:	bf0c      	ite	eq
 800f034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f038:	2500      	movne	r5, #0
 800f03a:	4293      	cmp	r3, r2
 800f03c:	bfc4      	itt	gt
 800f03e:	1a9b      	subgt	r3, r3, r2
 800f040:	18ed      	addgt	r5, r5, r3
 800f042:	2600      	movs	r6, #0
 800f044:	341a      	adds	r4, #26
 800f046:	42b5      	cmp	r5, r6
 800f048:	d11a      	bne.n	800f080 <_printf_common+0xc8>
 800f04a:	2000      	movs	r0, #0
 800f04c:	e008      	b.n	800f060 <_printf_common+0xa8>
 800f04e:	2301      	movs	r3, #1
 800f050:	4652      	mov	r2, sl
 800f052:	4649      	mov	r1, r9
 800f054:	4638      	mov	r0, r7
 800f056:	47c0      	blx	r8
 800f058:	3001      	adds	r0, #1
 800f05a:	d103      	bne.n	800f064 <_printf_common+0xac>
 800f05c:	f04f 30ff 	mov.w	r0, #4294967295
 800f060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f064:	3501      	adds	r5, #1
 800f066:	e7c6      	b.n	800eff6 <_printf_common+0x3e>
 800f068:	18e1      	adds	r1, r4, r3
 800f06a:	1c5a      	adds	r2, r3, #1
 800f06c:	2030      	movs	r0, #48	; 0x30
 800f06e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f072:	4422      	add	r2, r4
 800f074:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f078:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f07c:	3302      	adds	r3, #2
 800f07e:	e7c7      	b.n	800f010 <_printf_common+0x58>
 800f080:	2301      	movs	r3, #1
 800f082:	4622      	mov	r2, r4
 800f084:	4649      	mov	r1, r9
 800f086:	4638      	mov	r0, r7
 800f088:	47c0      	blx	r8
 800f08a:	3001      	adds	r0, #1
 800f08c:	d0e6      	beq.n	800f05c <_printf_common+0xa4>
 800f08e:	3601      	adds	r6, #1
 800f090:	e7d9      	b.n	800f046 <_printf_common+0x8e>
	...

0800f094 <_printf_i>:
 800f094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f098:	7e0f      	ldrb	r7, [r1, #24]
 800f09a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f09c:	2f78      	cmp	r7, #120	; 0x78
 800f09e:	4691      	mov	r9, r2
 800f0a0:	4680      	mov	r8, r0
 800f0a2:	460c      	mov	r4, r1
 800f0a4:	469a      	mov	sl, r3
 800f0a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f0aa:	d807      	bhi.n	800f0bc <_printf_i+0x28>
 800f0ac:	2f62      	cmp	r7, #98	; 0x62
 800f0ae:	d80a      	bhi.n	800f0c6 <_printf_i+0x32>
 800f0b0:	2f00      	cmp	r7, #0
 800f0b2:	f000 80d4 	beq.w	800f25e <_printf_i+0x1ca>
 800f0b6:	2f58      	cmp	r7, #88	; 0x58
 800f0b8:	f000 80c0 	beq.w	800f23c <_printf_i+0x1a8>
 800f0bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f0c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f0c4:	e03a      	b.n	800f13c <_printf_i+0xa8>
 800f0c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f0ca:	2b15      	cmp	r3, #21
 800f0cc:	d8f6      	bhi.n	800f0bc <_printf_i+0x28>
 800f0ce:	a101      	add	r1, pc, #4	; (adr r1, 800f0d4 <_printf_i+0x40>)
 800f0d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f0d4:	0800f12d 	.word	0x0800f12d
 800f0d8:	0800f141 	.word	0x0800f141
 800f0dc:	0800f0bd 	.word	0x0800f0bd
 800f0e0:	0800f0bd 	.word	0x0800f0bd
 800f0e4:	0800f0bd 	.word	0x0800f0bd
 800f0e8:	0800f0bd 	.word	0x0800f0bd
 800f0ec:	0800f141 	.word	0x0800f141
 800f0f0:	0800f0bd 	.word	0x0800f0bd
 800f0f4:	0800f0bd 	.word	0x0800f0bd
 800f0f8:	0800f0bd 	.word	0x0800f0bd
 800f0fc:	0800f0bd 	.word	0x0800f0bd
 800f100:	0800f245 	.word	0x0800f245
 800f104:	0800f16d 	.word	0x0800f16d
 800f108:	0800f1ff 	.word	0x0800f1ff
 800f10c:	0800f0bd 	.word	0x0800f0bd
 800f110:	0800f0bd 	.word	0x0800f0bd
 800f114:	0800f267 	.word	0x0800f267
 800f118:	0800f0bd 	.word	0x0800f0bd
 800f11c:	0800f16d 	.word	0x0800f16d
 800f120:	0800f0bd 	.word	0x0800f0bd
 800f124:	0800f0bd 	.word	0x0800f0bd
 800f128:	0800f207 	.word	0x0800f207
 800f12c:	682b      	ldr	r3, [r5, #0]
 800f12e:	1d1a      	adds	r2, r3, #4
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	602a      	str	r2, [r5, #0]
 800f134:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f138:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f13c:	2301      	movs	r3, #1
 800f13e:	e09f      	b.n	800f280 <_printf_i+0x1ec>
 800f140:	6820      	ldr	r0, [r4, #0]
 800f142:	682b      	ldr	r3, [r5, #0]
 800f144:	0607      	lsls	r7, r0, #24
 800f146:	f103 0104 	add.w	r1, r3, #4
 800f14a:	6029      	str	r1, [r5, #0]
 800f14c:	d501      	bpl.n	800f152 <_printf_i+0xbe>
 800f14e:	681e      	ldr	r6, [r3, #0]
 800f150:	e003      	b.n	800f15a <_printf_i+0xc6>
 800f152:	0646      	lsls	r6, r0, #25
 800f154:	d5fb      	bpl.n	800f14e <_printf_i+0xba>
 800f156:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f15a:	2e00      	cmp	r6, #0
 800f15c:	da03      	bge.n	800f166 <_printf_i+0xd2>
 800f15e:	232d      	movs	r3, #45	; 0x2d
 800f160:	4276      	negs	r6, r6
 800f162:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f166:	485a      	ldr	r0, [pc, #360]	; (800f2d0 <_printf_i+0x23c>)
 800f168:	230a      	movs	r3, #10
 800f16a:	e012      	b.n	800f192 <_printf_i+0xfe>
 800f16c:	682b      	ldr	r3, [r5, #0]
 800f16e:	6820      	ldr	r0, [r4, #0]
 800f170:	1d19      	adds	r1, r3, #4
 800f172:	6029      	str	r1, [r5, #0]
 800f174:	0605      	lsls	r5, r0, #24
 800f176:	d501      	bpl.n	800f17c <_printf_i+0xe8>
 800f178:	681e      	ldr	r6, [r3, #0]
 800f17a:	e002      	b.n	800f182 <_printf_i+0xee>
 800f17c:	0641      	lsls	r1, r0, #25
 800f17e:	d5fb      	bpl.n	800f178 <_printf_i+0xe4>
 800f180:	881e      	ldrh	r6, [r3, #0]
 800f182:	4853      	ldr	r0, [pc, #332]	; (800f2d0 <_printf_i+0x23c>)
 800f184:	2f6f      	cmp	r7, #111	; 0x6f
 800f186:	bf0c      	ite	eq
 800f188:	2308      	moveq	r3, #8
 800f18a:	230a      	movne	r3, #10
 800f18c:	2100      	movs	r1, #0
 800f18e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f192:	6865      	ldr	r5, [r4, #4]
 800f194:	60a5      	str	r5, [r4, #8]
 800f196:	2d00      	cmp	r5, #0
 800f198:	bfa2      	ittt	ge
 800f19a:	6821      	ldrge	r1, [r4, #0]
 800f19c:	f021 0104 	bicge.w	r1, r1, #4
 800f1a0:	6021      	strge	r1, [r4, #0]
 800f1a2:	b90e      	cbnz	r6, 800f1a8 <_printf_i+0x114>
 800f1a4:	2d00      	cmp	r5, #0
 800f1a6:	d04b      	beq.n	800f240 <_printf_i+0x1ac>
 800f1a8:	4615      	mov	r5, r2
 800f1aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800f1ae:	fb03 6711 	mls	r7, r3, r1, r6
 800f1b2:	5dc7      	ldrb	r7, [r0, r7]
 800f1b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f1b8:	4637      	mov	r7, r6
 800f1ba:	42bb      	cmp	r3, r7
 800f1bc:	460e      	mov	r6, r1
 800f1be:	d9f4      	bls.n	800f1aa <_printf_i+0x116>
 800f1c0:	2b08      	cmp	r3, #8
 800f1c2:	d10b      	bne.n	800f1dc <_printf_i+0x148>
 800f1c4:	6823      	ldr	r3, [r4, #0]
 800f1c6:	07de      	lsls	r6, r3, #31
 800f1c8:	d508      	bpl.n	800f1dc <_printf_i+0x148>
 800f1ca:	6923      	ldr	r3, [r4, #16]
 800f1cc:	6861      	ldr	r1, [r4, #4]
 800f1ce:	4299      	cmp	r1, r3
 800f1d0:	bfde      	ittt	le
 800f1d2:	2330      	movle	r3, #48	; 0x30
 800f1d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f1d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f1dc:	1b52      	subs	r2, r2, r5
 800f1de:	6122      	str	r2, [r4, #16]
 800f1e0:	f8cd a000 	str.w	sl, [sp]
 800f1e4:	464b      	mov	r3, r9
 800f1e6:	aa03      	add	r2, sp, #12
 800f1e8:	4621      	mov	r1, r4
 800f1ea:	4640      	mov	r0, r8
 800f1ec:	f7ff fee4 	bl	800efb8 <_printf_common>
 800f1f0:	3001      	adds	r0, #1
 800f1f2:	d14a      	bne.n	800f28a <_printf_i+0x1f6>
 800f1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f1f8:	b004      	add	sp, #16
 800f1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1fe:	6823      	ldr	r3, [r4, #0]
 800f200:	f043 0320 	orr.w	r3, r3, #32
 800f204:	6023      	str	r3, [r4, #0]
 800f206:	4833      	ldr	r0, [pc, #204]	; (800f2d4 <_printf_i+0x240>)
 800f208:	2778      	movs	r7, #120	; 0x78
 800f20a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f20e:	6823      	ldr	r3, [r4, #0]
 800f210:	6829      	ldr	r1, [r5, #0]
 800f212:	061f      	lsls	r7, r3, #24
 800f214:	f851 6b04 	ldr.w	r6, [r1], #4
 800f218:	d402      	bmi.n	800f220 <_printf_i+0x18c>
 800f21a:	065f      	lsls	r7, r3, #25
 800f21c:	bf48      	it	mi
 800f21e:	b2b6      	uxthmi	r6, r6
 800f220:	07df      	lsls	r7, r3, #31
 800f222:	bf48      	it	mi
 800f224:	f043 0320 	orrmi.w	r3, r3, #32
 800f228:	6029      	str	r1, [r5, #0]
 800f22a:	bf48      	it	mi
 800f22c:	6023      	strmi	r3, [r4, #0]
 800f22e:	b91e      	cbnz	r6, 800f238 <_printf_i+0x1a4>
 800f230:	6823      	ldr	r3, [r4, #0]
 800f232:	f023 0320 	bic.w	r3, r3, #32
 800f236:	6023      	str	r3, [r4, #0]
 800f238:	2310      	movs	r3, #16
 800f23a:	e7a7      	b.n	800f18c <_printf_i+0xf8>
 800f23c:	4824      	ldr	r0, [pc, #144]	; (800f2d0 <_printf_i+0x23c>)
 800f23e:	e7e4      	b.n	800f20a <_printf_i+0x176>
 800f240:	4615      	mov	r5, r2
 800f242:	e7bd      	b.n	800f1c0 <_printf_i+0x12c>
 800f244:	682b      	ldr	r3, [r5, #0]
 800f246:	6826      	ldr	r6, [r4, #0]
 800f248:	6961      	ldr	r1, [r4, #20]
 800f24a:	1d18      	adds	r0, r3, #4
 800f24c:	6028      	str	r0, [r5, #0]
 800f24e:	0635      	lsls	r5, r6, #24
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	d501      	bpl.n	800f258 <_printf_i+0x1c4>
 800f254:	6019      	str	r1, [r3, #0]
 800f256:	e002      	b.n	800f25e <_printf_i+0x1ca>
 800f258:	0670      	lsls	r0, r6, #25
 800f25a:	d5fb      	bpl.n	800f254 <_printf_i+0x1c0>
 800f25c:	8019      	strh	r1, [r3, #0]
 800f25e:	2300      	movs	r3, #0
 800f260:	6123      	str	r3, [r4, #16]
 800f262:	4615      	mov	r5, r2
 800f264:	e7bc      	b.n	800f1e0 <_printf_i+0x14c>
 800f266:	682b      	ldr	r3, [r5, #0]
 800f268:	1d1a      	adds	r2, r3, #4
 800f26a:	602a      	str	r2, [r5, #0]
 800f26c:	681d      	ldr	r5, [r3, #0]
 800f26e:	6862      	ldr	r2, [r4, #4]
 800f270:	2100      	movs	r1, #0
 800f272:	4628      	mov	r0, r5
 800f274:	f7f0 ffac 	bl	80001d0 <memchr>
 800f278:	b108      	cbz	r0, 800f27e <_printf_i+0x1ea>
 800f27a:	1b40      	subs	r0, r0, r5
 800f27c:	6060      	str	r0, [r4, #4]
 800f27e:	6863      	ldr	r3, [r4, #4]
 800f280:	6123      	str	r3, [r4, #16]
 800f282:	2300      	movs	r3, #0
 800f284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f288:	e7aa      	b.n	800f1e0 <_printf_i+0x14c>
 800f28a:	6923      	ldr	r3, [r4, #16]
 800f28c:	462a      	mov	r2, r5
 800f28e:	4649      	mov	r1, r9
 800f290:	4640      	mov	r0, r8
 800f292:	47d0      	blx	sl
 800f294:	3001      	adds	r0, #1
 800f296:	d0ad      	beq.n	800f1f4 <_printf_i+0x160>
 800f298:	6823      	ldr	r3, [r4, #0]
 800f29a:	079b      	lsls	r3, r3, #30
 800f29c:	d413      	bmi.n	800f2c6 <_printf_i+0x232>
 800f29e:	68e0      	ldr	r0, [r4, #12]
 800f2a0:	9b03      	ldr	r3, [sp, #12]
 800f2a2:	4298      	cmp	r0, r3
 800f2a4:	bfb8      	it	lt
 800f2a6:	4618      	movlt	r0, r3
 800f2a8:	e7a6      	b.n	800f1f8 <_printf_i+0x164>
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	4632      	mov	r2, r6
 800f2ae:	4649      	mov	r1, r9
 800f2b0:	4640      	mov	r0, r8
 800f2b2:	47d0      	blx	sl
 800f2b4:	3001      	adds	r0, #1
 800f2b6:	d09d      	beq.n	800f1f4 <_printf_i+0x160>
 800f2b8:	3501      	adds	r5, #1
 800f2ba:	68e3      	ldr	r3, [r4, #12]
 800f2bc:	9903      	ldr	r1, [sp, #12]
 800f2be:	1a5b      	subs	r3, r3, r1
 800f2c0:	42ab      	cmp	r3, r5
 800f2c2:	dcf2      	bgt.n	800f2aa <_printf_i+0x216>
 800f2c4:	e7eb      	b.n	800f29e <_printf_i+0x20a>
 800f2c6:	2500      	movs	r5, #0
 800f2c8:	f104 0619 	add.w	r6, r4, #25
 800f2cc:	e7f5      	b.n	800f2ba <_printf_i+0x226>
 800f2ce:	bf00      	nop
 800f2d0:	08012392 	.word	0x08012392
 800f2d4:	080123a3 	.word	0x080123a3

0800f2d8 <std>:
 800f2d8:	2300      	movs	r3, #0
 800f2da:	b510      	push	{r4, lr}
 800f2dc:	4604      	mov	r4, r0
 800f2de:	e9c0 3300 	strd	r3, r3, [r0]
 800f2e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f2e6:	6083      	str	r3, [r0, #8]
 800f2e8:	8181      	strh	r1, [r0, #12]
 800f2ea:	6643      	str	r3, [r0, #100]	; 0x64
 800f2ec:	81c2      	strh	r2, [r0, #14]
 800f2ee:	6183      	str	r3, [r0, #24]
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	2208      	movs	r2, #8
 800f2f4:	305c      	adds	r0, #92	; 0x5c
 800f2f6:	f000 fa27 	bl	800f748 <memset>
 800f2fa:	4b0d      	ldr	r3, [pc, #52]	; (800f330 <std+0x58>)
 800f2fc:	6263      	str	r3, [r4, #36]	; 0x24
 800f2fe:	4b0d      	ldr	r3, [pc, #52]	; (800f334 <std+0x5c>)
 800f300:	62a3      	str	r3, [r4, #40]	; 0x28
 800f302:	4b0d      	ldr	r3, [pc, #52]	; (800f338 <std+0x60>)
 800f304:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f306:	4b0d      	ldr	r3, [pc, #52]	; (800f33c <std+0x64>)
 800f308:	6323      	str	r3, [r4, #48]	; 0x30
 800f30a:	4b0d      	ldr	r3, [pc, #52]	; (800f340 <std+0x68>)
 800f30c:	6224      	str	r4, [r4, #32]
 800f30e:	429c      	cmp	r4, r3
 800f310:	d006      	beq.n	800f320 <std+0x48>
 800f312:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f316:	4294      	cmp	r4, r2
 800f318:	d002      	beq.n	800f320 <std+0x48>
 800f31a:	33d0      	adds	r3, #208	; 0xd0
 800f31c:	429c      	cmp	r4, r3
 800f31e:	d105      	bne.n	800f32c <std+0x54>
 800f320:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f328:	f000 bb30 	b.w	800f98c <__retarget_lock_init_recursive>
 800f32c:	bd10      	pop	{r4, pc}
 800f32e:	bf00      	nop
 800f330:	0800f579 	.word	0x0800f579
 800f334:	0800f59b 	.word	0x0800f59b
 800f338:	0800f5d3 	.word	0x0800f5d3
 800f33c:	0800f5f7 	.word	0x0800f5f7
 800f340:	20003488 	.word	0x20003488

0800f344 <stdio_exit_handler>:
 800f344:	4a02      	ldr	r2, [pc, #8]	; (800f350 <stdio_exit_handler+0xc>)
 800f346:	4903      	ldr	r1, [pc, #12]	; (800f354 <stdio_exit_handler+0x10>)
 800f348:	4803      	ldr	r0, [pc, #12]	; (800f358 <stdio_exit_handler+0x14>)
 800f34a:	f000 b869 	b.w	800f420 <_fwalk_sglue>
 800f34e:	bf00      	nop
 800f350:	200000d4 	.word	0x200000d4
 800f354:	08011621 	.word	0x08011621
 800f358:	200000e0 	.word	0x200000e0

0800f35c <cleanup_stdio>:
 800f35c:	6841      	ldr	r1, [r0, #4]
 800f35e:	4b0c      	ldr	r3, [pc, #48]	; (800f390 <cleanup_stdio+0x34>)
 800f360:	4299      	cmp	r1, r3
 800f362:	b510      	push	{r4, lr}
 800f364:	4604      	mov	r4, r0
 800f366:	d001      	beq.n	800f36c <cleanup_stdio+0x10>
 800f368:	f002 f95a 	bl	8011620 <_fflush_r>
 800f36c:	68a1      	ldr	r1, [r4, #8]
 800f36e:	4b09      	ldr	r3, [pc, #36]	; (800f394 <cleanup_stdio+0x38>)
 800f370:	4299      	cmp	r1, r3
 800f372:	d002      	beq.n	800f37a <cleanup_stdio+0x1e>
 800f374:	4620      	mov	r0, r4
 800f376:	f002 f953 	bl	8011620 <_fflush_r>
 800f37a:	68e1      	ldr	r1, [r4, #12]
 800f37c:	4b06      	ldr	r3, [pc, #24]	; (800f398 <cleanup_stdio+0x3c>)
 800f37e:	4299      	cmp	r1, r3
 800f380:	d004      	beq.n	800f38c <cleanup_stdio+0x30>
 800f382:	4620      	mov	r0, r4
 800f384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f388:	f002 b94a 	b.w	8011620 <_fflush_r>
 800f38c:	bd10      	pop	{r4, pc}
 800f38e:	bf00      	nop
 800f390:	20003488 	.word	0x20003488
 800f394:	200034f0 	.word	0x200034f0
 800f398:	20003558 	.word	0x20003558

0800f39c <global_stdio_init.part.0>:
 800f39c:	b510      	push	{r4, lr}
 800f39e:	4b0b      	ldr	r3, [pc, #44]	; (800f3cc <global_stdio_init.part.0+0x30>)
 800f3a0:	4c0b      	ldr	r4, [pc, #44]	; (800f3d0 <global_stdio_init.part.0+0x34>)
 800f3a2:	4a0c      	ldr	r2, [pc, #48]	; (800f3d4 <global_stdio_init.part.0+0x38>)
 800f3a4:	601a      	str	r2, [r3, #0]
 800f3a6:	4620      	mov	r0, r4
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	2104      	movs	r1, #4
 800f3ac:	f7ff ff94 	bl	800f2d8 <std>
 800f3b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f3b4:	2201      	movs	r2, #1
 800f3b6:	2109      	movs	r1, #9
 800f3b8:	f7ff ff8e 	bl	800f2d8 <std>
 800f3bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f3c0:	2202      	movs	r2, #2
 800f3c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3c6:	2112      	movs	r1, #18
 800f3c8:	f7ff bf86 	b.w	800f2d8 <std>
 800f3cc:	200035c0 	.word	0x200035c0
 800f3d0:	20003488 	.word	0x20003488
 800f3d4:	0800f345 	.word	0x0800f345

0800f3d8 <__sfp_lock_acquire>:
 800f3d8:	4801      	ldr	r0, [pc, #4]	; (800f3e0 <__sfp_lock_acquire+0x8>)
 800f3da:	f000 bad8 	b.w	800f98e <__retarget_lock_acquire_recursive>
 800f3de:	bf00      	nop
 800f3e0:	200035c9 	.word	0x200035c9

0800f3e4 <__sfp_lock_release>:
 800f3e4:	4801      	ldr	r0, [pc, #4]	; (800f3ec <__sfp_lock_release+0x8>)
 800f3e6:	f000 bad3 	b.w	800f990 <__retarget_lock_release_recursive>
 800f3ea:	bf00      	nop
 800f3ec:	200035c9 	.word	0x200035c9

0800f3f0 <__sinit>:
 800f3f0:	b510      	push	{r4, lr}
 800f3f2:	4604      	mov	r4, r0
 800f3f4:	f7ff fff0 	bl	800f3d8 <__sfp_lock_acquire>
 800f3f8:	6a23      	ldr	r3, [r4, #32]
 800f3fa:	b11b      	cbz	r3, 800f404 <__sinit+0x14>
 800f3fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f400:	f7ff bff0 	b.w	800f3e4 <__sfp_lock_release>
 800f404:	4b04      	ldr	r3, [pc, #16]	; (800f418 <__sinit+0x28>)
 800f406:	6223      	str	r3, [r4, #32]
 800f408:	4b04      	ldr	r3, [pc, #16]	; (800f41c <__sinit+0x2c>)
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d1f5      	bne.n	800f3fc <__sinit+0xc>
 800f410:	f7ff ffc4 	bl	800f39c <global_stdio_init.part.0>
 800f414:	e7f2      	b.n	800f3fc <__sinit+0xc>
 800f416:	bf00      	nop
 800f418:	0800f35d 	.word	0x0800f35d
 800f41c:	200035c0 	.word	0x200035c0

0800f420 <_fwalk_sglue>:
 800f420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f424:	4607      	mov	r7, r0
 800f426:	4688      	mov	r8, r1
 800f428:	4614      	mov	r4, r2
 800f42a:	2600      	movs	r6, #0
 800f42c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f430:	f1b9 0901 	subs.w	r9, r9, #1
 800f434:	d505      	bpl.n	800f442 <_fwalk_sglue+0x22>
 800f436:	6824      	ldr	r4, [r4, #0]
 800f438:	2c00      	cmp	r4, #0
 800f43a:	d1f7      	bne.n	800f42c <_fwalk_sglue+0xc>
 800f43c:	4630      	mov	r0, r6
 800f43e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f442:	89ab      	ldrh	r3, [r5, #12]
 800f444:	2b01      	cmp	r3, #1
 800f446:	d907      	bls.n	800f458 <_fwalk_sglue+0x38>
 800f448:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f44c:	3301      	adds	r3, #1
 800f44e:	d003      	beq.n	800f458 <_fwalk_sglue+0x38>
 800f450:	4629      	mov	r1, r5
 800f452:	4638      	mov	r0, r7
 800f454:	47c0      	blx	r8
 800f456:	4306      	orrs	r6, r0
 800f458:	3568      	adds	r5, #104	; 0x68
 800f45a:	e7e9      	b.n	800f430 <_fwalk_sglue+0x10>

0800f45c <iprintf>:
 800f45c:	b40f      	push	{r0, r1, r2, r3}
 800f45e:	b507      	push	{r0, r1, r2, lr}
 800f460:	4906      	ldr	r1, [pc, #24]	; (800f47c <iprintf+0x20>)
 800f462:	ab04      	add	r3, sp, #16
 800f464:	6808      	ldr	r0, [r1, #0]
 800f466:	f853 2b04 	ldr.w	r2, [r3], #4
 800f46a:	6881      	ldr	r1, [r0, #8]
 800f46c:	9301      	str	r3, [sp, #4]
 800f46e:	f001 ff37 	bl	80112e0 <_vfiprintf_r>
 800f472:	b003      	add	sp, #12
 800f474:	f85d eb04 	ldr.w	lr, [sp], #4
 800f478:	b004      	add	sp, #16
 800f47a:	4770      	bx	lr
 800f47c:	2000012c 	.word	0x2000012c

0800f480 <_puts_r>:
 800f480:	6a03      	ldr	r3, [r0, #32]
 800f482:	b570      	push	{r4, r5, r6, lr}
 800f484:	6884      	ldr	r4, [r0, #8]
 800f486:	4605      	mov	r5, r0
 800f488:	460e      	mov	r6, r1
 800f48a:	b90b      	cbnz	r3, 800f490 <_puts_r+0x10>
 800f48c:	f7ff ffb0 	bl	800f3f0 <__sinit>
 800f490:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f492:	07db      	lsls	r3, r3, #31
 800f494:	d405      	bmi.n	800f4a2 <_puts_r+0x22>
 800f496:	89a3      	ldrh	r3, [r4, #12]
 800f498:	0598      	lsls	r0, r3, #22
 800f49a:	d402      	bmi.n	800f4a2 <_puts_r+0x22>
 800f49c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f49e:	f000 fa76 	bl	800f98e <__retarget_lock_acquire_recursive>
 800f4a2:	89a3      	ldrh	r3, [r4, #12]
 800f4a4:	0719      	lsls	r1, r3, #28
 800f4a6:	d513      	bpl.n	800f4d0 <_puts_r+0x50>
 800f4a8:	6923      	ldr	r3, [r4, #16]
 800f4aa:	b18b      	cbz	r3, 800f4d0 <_puts_r+0x50>
 800f4ac:	3e01      	subs	r6, #1
 800f4ae:	68a3      	ldr	r3, [r4, #8]
 800f4b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f4b4:	3b01      	subs	r3, #1
 800f4b6:	60a3      	str	r3, [r4, #8]
 800f4b8:	b9e9      	cbnz	r1, 800f4f6 <_puts_r+0x76>
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	da2e      	bge.n	800f51c <_puts_r+0x9c>
 800f4be:	4622      	mov	r2, r4
 800f4c0:	210a      	movs	r1, #10
 800f4c2:	4628      	mov	r0, r5
 800f4c4:	f000 f89b 	bl	800f5fe <__swbuf_r>
 800f4c8:	3001      	adds	r0, #1
 800f4ca:	d007      	beq.n	800f4dc <_puts_r+0x5c>
 800f4cc:	250a      	movs	r5, #10
 800f4ce:	e007      	b.n	800f4e0 <_puts_r+0x60>
 800f4d0:	4621      	mov	r1, r4
 800f4d2:	4628      	mov	r0, r5
 800f4d4:	f000 f8d0 	bl	800f678 <__swsetup_r>
 800f4d8:	2800      	cmp	r0, #0
 800f4da:	d0e7      	beq.n	800f4ac <_puts_r+0x2c>
 800f4dc:	f04f 35ff 	mov.w	r5, #4294967295
 800f4e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f4e2:	07da      	lsls	r2, r3, #31
 800f4e4:	d405      	bmi.n	800f4f2 <_puts_r+0x72>
 800f4e6:	89a3      	ldrh	r3, [r4, #12]
 800f4e8:	059b      	lsls	r3, r3, #22
 800f4ea:	d402      	bmi.n	800f4f2 <_puts_r+0x72>
 800f4ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f4ee:	f000 fa4f 	bl	800f990 <__retarget_lock_release_recursive>
 800f4f2:	4628      	mov	r0, r5
 800f4f4:	bd70      	pop	{r4, r5, r6, pc}
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	da04      	bge.n	800f504 <_puts_r+0x84>
 800f4fa:	69a2      	ldr	r2, [r4, #24]
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	dc06      	bgt.n	800f50e <_puts_r+0x8e>
 800f500:	290a      	cmp	r1, #10
 800f502:	d004      	beq.n	800f50e <_puts_r+0x8e>
 800f504:	6823      	ldr	r3, [r4, #0]
 800f506:	1c5a      	adds	r2, r3, #1
 800f508:	6022      	str	r2, [r4, #0]
 800f50a:	7019      	strb	r1, [r3, #0]
 800f50c:	e7cf      	b.n	800f4ae <_puts_r+0x2e>
 800f50e:	4622      	mov	r2, r4
 800f510:	4628      	mov	r0, r5
 800f512:	f000 f874 	bl	800f5fe <__swbuf_r>
 800f516:	3001      	adds	r0, #1
 800f518:	d1c9      	bne.n	800f4ae <_puts_r+0x2e>
 800f51a:	e7df      	b.n	800f4dc <_puts_r+0x5c>
 800f51c:	6823      	ldr	r3, [r4, #0]
 800f51e:	250a      	movs	r5, #10
 800f520:	1c5a      	adds	r2, r3, #1
 800f522:	6022      	str	r2, [r4, #0]
 800f524:	701d      	strb	r5, [r3, #0]
 800f526:	e7db      	b.n	800f4e0 <_puts_r+0x60>

0800f528 <puts>:
 800f528:	4b02      	ldr	r3, [pc, #8]	; (800f534 <puts+0xc>)
 800f52a:	4601      	mov	r1, r0
 800f52c:	6818      	ldr	r0, [r3, #0]
 800f52e:	f7ff bfa7 	b.w	800f480 <_puts_r>
 800f532:	bf00      	nop
 800f534:	2000012c 	.word	0x2000012c

0800f538 <siprintf>:
 800f538:	b40e      	push	{r1, r2, r3}
 800f53a:	b500      	push	{lr}
 800f53c:	b09c      	sub	sp, #112	; 0x70
 800f53e:	ab1d      	add	r3, sp, #116	; 0x74
 800f540:	9002      	str	r0, [sp, #8]
 800f542:	9006      	str	r0, [sp, #24]
 800f544:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f548:	4809      	ldr	r0, [pc, #36]	; (800f570 <siprintf+0x38>)
 800f54a:	9107      	str	r1, [sp, #28]
 800f54c:	9104      	str	r1, [sp, #16]
 800f54e:	4909      	ldr	r1, [pc, #36]	; (800f574 <siprintf+0x3c>)
 800f550:	f853 2b04 	ldr.w	r2, [r3], #4
 800f554:	9105      	str	r1, [sp, #20]
 800f556:	6800      	ldr	r0, [r0, #0]
 800f558:	9301      	str	r3, [sp, #4]
 800f55a:	a902      	add	r1, sp, #8
 800f55c:	f001 fd98 	bl	8011090 <_svfiprintf_r>
 800f560:	9b02      	ldr	r3, [sp, #8]
 800f562:	2200      	movs	r2, #0
 800f564:	701a      	strb	r2, [r3, #0]
 800f566:	b01c      	add	sp, #112	; 0x70
 800f568:	f85d eb04 	ldr.w	lr, [sp], #4
 800f56c:	b003      	add	sp, #12
 800f56e:	4770      	bx	lr
 800f570:	2000012c 	.word	0x2000012c
 800f574:	ffff0208 	.word	0xffff0208

0800f578 <__sread>:
 800f578:	b510      	push	{r4, lr}
 800f57a:	460c      	mov	r4, r1
 800f57c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f580:	f000 f9b6 	bl	800f8f0 <_read_r>
 800f584:	2800      	cmp	r0, #0
 800f586:	bfab      	itete	ge
 800f588:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f58a:	89a3      	ldrhlt	r3, [r4, #12]
 800f58c:	181b      	addge	r3, r3, r0
 800f58e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f592:	bfac      	ite	ge
 800f594:	6563      	strge	r3, [r4, #84]	; 0x54
 800f596:	81a3      	strhlt	r3, [r4, #12]
 800f598:	bd10      	pop	{r4, pc}

0800f59a <__swrite>:
 800f59a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f59e:	461f      	mov	r7, r3
 800f5a0:	898b      	ldrh	r3, [r1, #12]
 800f5a2:	05db      	lsls	r3, r3, #23
 800f5a4:	4605      	mov	r5, r0
 800f5a6:	460c      	mov	r4, r1
 800f5a8:	4616      	mov	r6, r2
 800f5aa:	d505      	bpl.n	800f5b8 <__swrite+0x1e>
 800f5ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5b0:	2302      	movs	r3, #2
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	f000 f98a 	bl	800f8cc <_lseek_r>
 800f5b8:	89a3      	ldrh	r3, [r4, #12]
 800f5ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f5c2:	81a3      	strh	r3, [r4, #12]
 800f5c4:	4632      	mov	r2, r6
 800f5c6:	463b      	mov	r3, r7
 800f5c8:	4628      	mov	r0, r5
 800f5ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5ce:	f000 b9a1 	b.w	800f914 <_write_r>

0800f5d2 <__sseek>:
 800f5d2:	b510      	push	{r4, lr}
 800f5d4:	460c      	mov	r4, r1
 800f5d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5da:	f000 f977 	bl	800f8cc <_lseek_r>
 800f5de:	1c43      	adds	r3, r0, #1
 800f5e0:	89a3      	ldrh	r3, [r4, #12]
 800f5e2:	bf15      	itete	ne
 800f5e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f5e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f5ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f5ee:	81a3      	strheq	r3, [r4, #12]
 800f5f0:	bf18      	it	ne
 800f5f2:	81a3      	strhne	r3, [r4, #12]
 800f5f4:	bd10      	pop	{r4, pc}

0800f5f6 <__sclose>:
 800f5f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5fa:	f000 b957 	b.w	800f8ac <_close_r>

0800f5fe <__swbuf_r>:
 800f5fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f600:	460e      	mov	r6, r1
 800f602:	4614      	mov	r4, r2
 800f604:	4605      	mov	r5, r0
 800f606:	b118      	cbz	r0, 800f610 <__swbuf_r+0x12>
 800f608:	6a03      	ldr	r3, [r0, #32]
 800f60a:	b90b      	cbnz	r3, 800f610 <__swbuf_r+0x12>
 800f60c:	f7ff fef0 	bl	800f3f0 <__sinit>
 800f610:	69a3      	ldr	r3, [r4, #24]
 800f612:	60a3      	str	r3, [r4, #8]
 800f614:	89a3      	ldrh	r3, [r4, #12]
 800f616:	071a      	lsls	r2, r3, #28
 800f618:	d525      	bpl.n	800f666 <__swbuf_r+0x68>
 800f61a:	6923      	ldr	r3, [r4, #16]
 800f61c:	b31b      	cbz	r3, 800f666 <__swbuf_r+0x68>
 800f61e:	6823      	ldr	r3, [r4, #0]
 800f620:	6922      	ldr	r2, [r4, #16]
 800f622:	1a98      	subs	r0, r3, r2
 800f624:	6963      	ldr	r3, [r4, #20]
 800f626:	b2f6      	uxtb	r6, r6
 800f628:	4283      	cmp	r3, r0
 800f62a:	4637      	mov	r7, r6
 800f62c:	dc04      	bgt.n	800f638 <__swbuf_r+0x3a>
 800f62e:	4621      	mov	r1, r4
 800f630:	4628      	mov	r0, r5
 800f632:	f001 fff5 	bl	8011620 <_fflush_r>
 800f636:	b9e0      	cbnz	r0, 800f672 <__swbuf_r+0x74>
 800f638:	68a3      	ldr	r3, [r4, #8]
 800f63a:	3b01      	subs	r3, #1
 800f63c:	60a3      	str	r3, [r4, #8]
 800f63e:	6823      	ldr	r3, [r4, #0]
 800f640:	1c5a      	adds	r2, r3, #1
 800f642:	6022      	str	r2, [r4, #0]
 800f644:	701e      	strb	r6, [r3, #0]
 800f646:	6962      	ldr	r2, [r4, #20]
 800f648:	1c43      	adds	r3, r0, #1
 800f64a:	429a      	cmp	r2, r3
 800f64c:	d004      	beq.n	800f658 <__swbuf_r+0x5a>
 800f64e:	89a3      	ldrh	r3, [r4, #12]
 800f650:	07db      	lsls	r3, r3, #31
 800f652:	d506      	bpl.n	800f662 <__swbuf_r+0x64>
 800f654:	2e0a      	cmp	r6, #10
 800f656:	d104      	bne.n	800f662 <__swbuf_r+0x64>
 800f658:	4621      	mov	r1, r4
 800f65a:	4628      	mov	r0, r5
 800f65c:	f001 ffe0 	bl	8011620 <_fflush_r>
 800f660:	b938      	cbnz	r0, 800f672 <__swbuf_r+0x74>
 800f662:	4638      	mov	r0, r7
 800f664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f666:	4621      	mov	r1, r4
 800f668:	4628      	mov	r0, r5
 800f66a:	f000 f805 	bl	800f678 <__swsetup_r>
 800f66e:	2800      	cmp	r0, #0
 800f670:	d0d5      	beq.n	800f61e <__swbuf_r+0x20>
 800f672:	f04f 37ff 	mov.w	r7, #4294967295
 800f676:	e7f4      	b.n	800f662 <__swbuf_r+0x64>

0800f678 <__swsetup_r>:
 800f678:	b538      	push	{r3, r4, r5, lr}
 800f67a:	4b2a      	ldr	r3, [pc, #168]	; (800f724 <__swsetup_r+0xac>)
 800f67c:	4605      	mov	r5, r0
 800f67e:	6818      	ldr	r0, [r3, #0]
 800f680:	460c      	mov	r4, r1
 800f682:	b118      	cbz	r0, 800f68c <__swsetup_r+0x14>
 800f684:	6a03      	ldr	r3, [r0, #32]
 800f686:	b90b      	cbnz	r3, 800f68c <__swsetup_r+0x14>
 800f688:	f7ff feb2 	bl	800f3f0 <__sinit>
 800f68c:	89a3      	ldrh	r3, [r4, #12]
 800f68e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f692:	0718      	lsls	r0, r3, #28
 800f694:	d422      	bmi.n	800f6dc <__swsetup_r+0x64>
 800f696:	06d9      	lsls	r1, r3, #27
 800f698:	d407      	bmi.n	800f6aa <__swsetup_r+0x32>
 800f69a:	2309      	movs	r3, #9
 800f69c:	602b      	str	r3, [r5, #0]
 800f69e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f6a2:	81a3      	strh	r3, [r4, #12]
 800f6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f6a8:	e034      	b.n	800f714 <__swsetup_r+0x9c>
 800f6aa:	0758      	lsls	r0, r3, #29
 800f6ac:	d512      	bpl.n	800f6d4 <__swsetup_r+0x5c>
 800f6ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f6b0:	b141      	cbz	r1, 800f6c4 <__swsetup_r+0x4c>
 800f6b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f6b6:	4299      	cmp	r1, r3
 800f6b8:	d002      	beq.n	800f6c0 <__swsetup_r+0x48>
 800f6ba:	4628      	mov	r0, r5
 800f6bc:	f001 f812 	bl	80106e4 <_free_r>
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	6363      	str	r3, [r4, #52]	; 0x34
 800f6c4:	89a3      	ldrh	r3, [r4, #12]
 800f6c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f6ca:	81a3      	strh	r3, [r4, #12]
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	6063      	str	r3, [r4, #4]
 800f6d0:	6923      	ldr	r3, [r4, #16]
 800f6d2:	6023      	str	r3, [r4, #0]
 800f6d4:	89a3      	ldrh	r3, [r4, #12]
 800f6d6:	f043 0308 	orr.w	r3, r3, #8
 800f6da:	81a3      	strh	r3, [r4, #12]
 800f6dc:	6923      	ldr	r3, [r4, #16]
 800f6de:	b94b      	cbnz	r3, 800f6f4 <__swsetup_r+0x7c>
 800f6e0:	89a3      	ldrh	r3, [r4, #12]
 800f6e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f6e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f6ea:	d003      	beq.n	800f6f4 <__swsetup_r+0x7c>
 800f6ec:	4621      	mov	r1, r4
 800f6ee:	4628      	mov	r0, r5
 800f6f0:	f001 fff6 	bl	80116e0 <__smakebuf_r>
 800f6f4:	89a0      	ldrh	r0, [r4, #12]
 800f6f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f6fa:	f010 0301 	ands.w	r3, r0, #1
 800f6fe:	d00a      	beq.n	800f716 <__swsetup_r+0x9e>
 800f700:	2300      	movs	r3, #0
 800f702:	60a3      	str	r3, [r4, #8]
 800f704:	6963      	ldr	r3, [r4, #20]
 800f706:	425b      	negs	r3, r3
 800f708:	61a3      	str	r3, [r4, #24]
 800f70a:	6923      	ldr	r3, [r4, #16]
 800f70c:	b943      	cbnz	r3, 800f720 <__swsetup_r+0xa8>
 800f70e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f712:	d1c4      	bne.n	800f69e <__swsetup_r+0x26>
 800f714:	bd38      	pop	{r3, r4, r5, pc}
 800f716:	0781      	lsls	r1, r0, #30
 800f718:	bf58      	it	pl
 800f71a:	6963      	ldrpl	r3, [r4, #20]
 800f71c:	60a3      	str	r3, [r4, #8]
 800f71e:	e7f4      	b.n	800f70a <__swsetup_r+0x92>
 800f720:	2000      	movs	r0, #0
 800f722:	e7f7      	b.n	800f714 <__swsetup_r+0x9c>
 800f724:	2000012c 	.word	0x2000012c

0800f728 <memcmp>:
 800f728:	b510      	push	{r4, lr}
 800f72a:	3901      	subs	r1, #1
 800f72c:	4402      	add	r2, r0
 800f72e:	4290      	cmp	r0, r2
 800f730:	d101      	bne.n	800f736 <memcmp+0xe>
 800f732:	2000      	movs	r0, #0
 800f734:	e005      	b.n	800f742 <memcmp+0x1a>
 800f736:	7803      	ldrb	r3, [r0, #0]
 800f738:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f73c:	42a3      	cmp	r3, r4
 800f73e:	d001      	beq.n	800f744 <memcmp+0x1c>
 800f740:	1b18      	subs	r0, r3, r4
 800f742:	bd10      	pop	{r4, pc}
 800f744:	3001      	adds	r0, #1
 800f746:	e7f2      	b.n	800f72e <memcmp+0x6>

0800f748 <memset>:
 800f748:	4402      	add	r2, r0
 800f74a:	4603      	mov	r3, r0
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d100      	bne.n	800f752 <memset+0xa>
 800f750:	4770      	bx	lr
 800f752:	f803 1b01 	strb.w	r1, [r3], #1
 800f756:	e7f9      	b.n	800f74c <memset+0x4>

0800f758 <strcat>:
 800f758:	b510      	push	{r4, lr}
 800f75a:	4602      	mov	r2, r0
 800f75c:	7814      	ldrb	r4, [r2, #0]
 800f75e:	4613      	mov	r3, r2
 800f760:	3201      	adds	r2, #1
 800f762:	2c00      	cmp	r4, #0
 800f764:	d1fa      	bne.n	800f75c <strcat+0x4>
 800f766:	3b01      	subs	r3, #1
 800f768:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f76c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f770:	2a00      	cmp	r2, #0
 800f772:	d1f9      	bne.n	800f768 <strcat+0x10>
 800f774:	bd10      	pop	{r4, pc}

0800f776 <strncmp>:
 800f776:	b510      	push	{r4, lr}
 800f778:	b16a      	cbz	r2, 800f796 <strncmp+0x20>
 800f77a:	3901      	subs	r1, #1
 800f77c:	1884      	adds	r4, r0, r2
 800f77e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f782:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f786:	429a      	cmp	r2, r3
 800f788:	d103      	bne.n	800f792 <strncmp+0x1c>
 800f78a:	42a0      	cmp	r0, r4
 800f78c:	d001      	beq.n	800f792 <strncmp+0x1c>
 800f78e:	2a00      	cmp	r2, #0
 800f790:	d1f5      	bne.n	800f77e <strncmp+0x8>
 800f792:	1ad0      	subs	r0, r2, r3
 800f794:	bd10      	pop	{r4, pc}
 800f796:	4610      	mov	r0, r2
 800f798:	e7fc      	b.n	800f794 <strncmp+0x1e>

0800f79a <strncpy>:
 800f79a:	b510      	push	{r4, lr}
 800f79c:	3901      	subs	r1, #1
 800f79e:	4603      	mov	r3, r0
 800f7a0:	b132      	cbz	r2, 800f7b0 <strncpy+0x16>
 800f7a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f7a6:	f803 4b01 	strb.w	r4, [r3], #1
 800f7aa:	3a01      	subs	r2, #1
 800f7ac:	2c00      	cmp	r4, #0
 800f7ae:	d1f7      	bne.n	800f7a0 <strncpy+0x6>
 800f7b0:	441a      	add	r2, r3
 800f7b2:	2100      	movs	r1, #0
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d100      	bne.n	800f7ba <strncpy+0x20>
 800f7b8:	bd10      	pop	{r4, pc}
 800f7ba:	f803 1b01 	strb.w	r1, [r3], #1
 800f7be:	e7f9      	b.n	800f7b4 <strncpy+0x1a>

0800f7c0 <strtok>:
 800f7c0:	4b16      	ldr	r3, [pc, #88]	; (800f81c <strtok+0x5c>)
 800f7c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f7c4:	681e      	ldr	r6, [r3, #0]
 800f7c6:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800f7c8:	4605      	mov	r5, r0
 800f7ca:	b9fc      	cbnz	r4, 800f80c <strtok+0x4c>
 800f7cc:	2050      	movs	r0, #80	; 0x50
 800f7ce:	9101      	str	r1, [sp, #4]
 800f7d0:	f000 ffd4 	bl	801077c <malloc>
 800f7d4:	9901      	ldr	r1, [sp, #4]
 800f7d6:	6470      	str	r0, [r6, #68]	; 0x44
 800f7d8:	4602      	mov	r2, r0
 800f7da:	b920      	cbnz	r0, 800f7e6 <strtok+0x26>
 800f7dc:	4b10      	ldr	r3, [pc, #64]	; (800f820 <strtok+0x60>)
 800f7de:	4811      	ldr	r0, [pc, #68]	; (800f824 <strtok+0x64>)
 800f7e0:	215b      	movs	r1, #91	; 0x5b
 800f7e2:	f000 f8e5 	bl	800f9b0 <__assert_func>
 800f7e6:	e9c0 4400 	strd	r4, r4, [r0]
 800f7ea:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f7ee:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f7f2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800f7f6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800f7fa:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800f7fe:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800f802:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800f806:	6184      	str	r4, [r0, #24]
 800f808:	7704      	strb	r4, [r0, #28]
 800f80a:	6244      	str	r4, [r0, #36]	; 0x24
 800f80c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800f80e:	2301      	movs	r3, #1
 800f810:	4628      	mov	r0, r5
 800f812:	b002      	add	sp, #8
 800f814:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f818:	f000 b806 	b.w	800f828 <__strtok_r>
 800f81c:	2000012c 	.word	0x2000012c
 800f820:	080123b4 	.word	0x080123b4
 800f824:	080123cb 	.word	0x080123cb

0800f828 <__strtok_r>:
 800f828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f82a:	b908      	cbnz	r0, 800f830 <__strtok_r+0x8>
 800f82c:	6810      	ldr	r0, [r2, #0]
 800f82e:	b188      	cbz	r0, 800f854 <__strtok_r+0x2c>
 800f830:	4604      	mov	r4, r0
 800f832:	4620      	mov	r0, r4
 800f834:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f838:	460f      	mov	r7, r1
 800f83a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f83e:	b91e      	cbnz	r6, 800f848 <__strtok_r+0x20>
 800f840:	b965      	cbnz	r5, 800f85c <__strtok_r+0x34>
 800f842:	6015      	str	r5, [r2, #0]
 800f844:	4628      	mov	r0, r5
 800f846:	e005      	b.n	800f854 <__strtok_r+0x2c>
 800f848:	42b5      	cmp	r5, r6
 800f84a:	d1f6      	bne.n	800f83a <__strtok_r+0x12>
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d1f0      	bne.n	800f832 <__strtok_r+0xa>
 800f850:	6014      	str	r4, [r2, #0]
 800f852:	7003      	strb	r3, [r0, #0]
 800f854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f856:	461c      	mov	r4, r3
 800f858:	e00c      	b.n	800f874 <__strtok_r+0x4c>
 800f85a:	b915      	cbnz	r5, 800f862 <__strtok_r+0x3a>
 800f85c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f860:	460e      	mov	r6, r1
 800f862:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f866:	42ab      	cmp	r3, r5
 800f868:	d1f7      	bne.n	800f85a <__strtok_r+0x32>
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d0f3      	beq.n	800f856 <__strtok_r+0x2e>
 800f86e:	2300      	movs	r3, #0
 800f870:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f874:	6014      	str	r4, [r2, #0]
 800f876:	e7ed      	b.n	800f854 <__strtok_r+0x2c>

0800f878 <strstr>:
 800f878:	780a      	ldrb	r2, [r1, #0]
 800f87a:	b570      	push	{r4, r5, r6, lr}
 800f87c:	b96a      	cbnz	r2, 800f89a <strstr+0x22>
 800f87e:	bd70      	pop	{r4, r5, r6, pc}
 800f880:	429a      	cmp	r2, r3
 800f882:	d109      	bne.n	800f898 <strstr+0x20>
 800f884:	460c      	mov	r4, r1
 800f886:	4605      	mov	r5, r0
 800f888:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d0f6      	beq.n	800f87e <strstr+0x6>
 800f890:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f894:	429e      	cmp	r6, r3
 800f896:	d0f7      	beq.n	800f888 <strstr+0x10>
 800f898:	3001      	adds	r0, #1
 800f89a:	7803      	ldrb	r3, [r0, #0]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d1ef      	bne.n	800f880 <strstr+0x8>
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	e7ec      	b.n	800f87e <strstr+0x6>

0800f8a4 <_localeconv_r>:
 800f8a4:	4800      	ldr	r0, [pc, #0]	; (800f8a8 <_localeconv_r+0x4>)
 800f8a6:	4770      	bx	lr
 800f8a8:	20000220 	.word	0x20000220

0800f8ac <_close_r>:
 800f8ac:	b538      	push	{r3, r4, r5, lr}
 800f8ae:	4d06      	ldr	r5, [pc, #24]	; (800f8c8 <_close_r+0x1c>)
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	4604      	mov	r4, r0
 800f8b4:	4608      	mov	r0, r1
 800f8b6:	602b      	str	r3, [r5, #0]
 800f8b8:	f7f3 fc03 	bl	80030c2 <_close>
 800f8bc:	1c43      	adds	r3, r0, #1
 800f8be:	d102      	bne.n	800f8c6 <_close_r+0x1a>
 800f8c0:	682b      	ldr	r3, [r5, #0]
 800f8c2:	b103      	cbz	r3, 800f8c6 <_close_r+0x1a>
 800f8c4:	6023      	str	r3, [r4, #0]
 800f8c6:	bd38      	pop	{r3, r4, r5, pc}
 800f8c8:	200035c4 	.word	0x200035c4

0800f8cc <_lseek_r>:
 800f8cc:	b538      	push	{r3, r4, r5, lr}
 800f8ce:	4d07      	ldr	r5, [pc, #28]	; (800f8ec <_lseek_r+0x20>)
 800f8d0:	4604      	mov	r4, r0
 800f8d2:	4608      	mov	r0, r1
 800f8d4:	4611      	mov	r1, r2
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	602a      	str	r2, [r5, #0]
 800f8da:	461a      	mov	r2, r3
 800f8dc:	f7f3 fc18 	bl	8003110 <_lseek>
 800f8e0:	1c43      	adds	r3, r0, #1
 800f8e2:	d102      	bne.n	800f8ea <_lseek_r+0x1e>
 800f8e4:	682b      	ldr	r3, [r5, #0]
 800f8e6:	b103      	cbz	r3, 800f8ea <_lseek_r+0x1e>
 800f8e8:	6023      	str	r3, [r4, #0]
 800f8ea:	bd38      	pop	{r3, r4, r5, pc}
 800f8ec:	200035c4 	.word	0x200035c4

0800f8f0 <_read_r>:
 800f8f0:	b538      	push	{r3, r4, r5, lr}
 800f8f2:	4d07      	ldr	r5, [pc, #28]	; (800f910 <_read_r+0x20>)
 800f8f4:	4604      	mov	r4, r0
 800f8f6:	4608      	mov	r0, r1
 800f8f8:	4611      	mov	r1, r2
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	602a      	str	r2, [r5, #0]
 800f8fe:	461a      	mov	r2, r3
 800f900:	f7f3 fba6 	bl	8003050 <_read>
 800f904:	1c43      	adds	r3, r0, #1
 800f906:	d102      	bne.n	800f90e <_read_r+0x1e>
 800f908:	682b      	ldr	r3, [r5, #0]
 800f90a:	b103      	cbz	r3, 800f90e <_read_r+0x1e>
 800f90c:	6023      	str	r3, [r4, #0]
 800f90e:	bd38      	pop	{r3, r4, r5, pc}
 800f910:	200035c4 	.word	0x200035c4

0800f914 <_write_r>:
 800f914:	b538      	push	{r3, r4, r5, lr}
 800f916:	4d07      	ldr	r5, [pc, #28]	; (800f934 <_write_r+0x20>)
 800f918:	4604      	mov	r4, r0
 800f91a:	4608      	mov	r0, r1
 800f91c:	4611      	mov	r1, r2
 800f91e:	2200      	movs	r2, #0
 800f920:	602a      	str	r2, [r5, #0]
 800f922:	461a      	mov	r2, r3
 800f924:	f7f3 fbb1 	bl	800308a <_write>
 800f928:	1c43      	adds	r3, r0, #1
 800f92a:	d102      	bne.n	800f932 <_write_r+0x1e>
 800f92c:	682b      	ldr	r3, [r5, #0]
 800f92e:	b103      	cbz	r3, 800f932 <_write_r+0x1e>
 800f930:	6023      	str	r3, [r4, #0]
 800f932:	bd38      	pop	{r3, r4, r5, pc}
 800f934:	200035c4 	.word	0x200035c4

0800f938 <__errno>:
 800f938:	4b01      	ldr	r3, [pc, #4]	; (800f940 <__errno+0x8>)
 800f93a:	6818      	ldr	r0, [r3, #0]
 800f93c:	4770      	bx	lr
 800f93e:	bf00      	nop
 800f940:	2000012c 	.word	0x2000012c

0800f944 <__libc_init_array>:
 800f944:	b570      	push	{r4, r5, r6, lr}
 800f946:	4d0d      	ldr	r5, [pc, #52]	; (800f97c <__libc_init_array+0x38>)
 800f948:	4c0d      	ldr	r4, [pc, #52]	; (800f980 <__libc_init_array+0x3c>)
 800f94a:	1b64      	subs	r4, r4, r5
 800f94c:	10a4      	asrs	r4, r4, #2
 800f94e:	2600      	movs	r6, #0
 800f950:	42a6      	cmp	r6, r4
 800f952:	d109      	bne.n	800f968 <__libc_init_array+0x24>
 800f954:	4d0b      	ldr	r5, [pc, #44]	; (800f984 <__libc_init_array+0x40>)
 800f956:	4c0c      	ldr	r4, [pc, #48]	; (800f988 <__libc_init_array+0x44>)
 800f958:	f002 f802 	bl	8011960 <_init>
 800f95c:	1b64      	subs	r4, r4, r5
 800f95e:	10a4      	asrs	r4, r4, #2
 800f960:	2600      	movs	r6, #0
 800f962:	42a6      	cmp	r6, r4
 800f964:	d105      	bne.n	800f972 <__libc_init_array+0x2e>
 800f966:	bd70      	pop	{r4, r5, r6, pc}
 800f968:	f855 3b04 	ldr.w	r3, [r5], #4
 800f96c:	4798      	blx	r3
 800f96e:	3601      	adds	r6, #1
 800f970:	e7ee      	b.n	800f950 <__libc_init_array+0xc>
 800f972:	f855 3b04 	ldr.w	r3, [r5], #4
 800f976:	4798      	blx	r3
 800f978:	3601      	adds	r6, #1
 800f97a:	e7f2      	b.n	800f962 <__libc_init_array+0x1e>
 800f97c:	08012750 	.word	0x08012750
 800f980:	08012750 	.word	0x08012750
 800f984:	08012750 	.word	0x08012750
 800f988:	08012754 	.word	0x08012754

0800f98c <__retarget_lock_init_recursive>:
 800f98c:	4770      	bx	lr

0800f98e <__retarget_lock_acquire_recursive>:
 800f98e:	4770      	bx	lr

0800f990 <__retarget_lock_release_recursive>:
 800f990:	4770      	bx	lr

0800f992 <memcpy>:
 800f992:	440a      	add	r2, r1
 800f994:	4291      	cmp	r1, r2
 800f996:	f100 33ff 	add.w	r3, r0, #4294967295
 800f99a:	d100      	bne.n	800f99e <memcpy+0xc>
 800f99c:	4770      	bx	lr
 800f99e:	b510      	push	{r4, lr}
 800f9a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f9a8:	4291      	cmp	r1, r2
 800f9aa:	d1f9      	bne.n	800f9a0 <memcpy+0xe>
 800f9ac:	bd10      	pop	{r4, pc}
	...

0800f9b0 <__assert_func>:
 800f9b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f9b2:	4614      	mov	r4, r2
 800f9b4:	461a      	mov	r2, r3
 800f9b6:	4b09      	ldr	r3, [pc, #36]	; (800f9dc <__assert_func+0x2c>)
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	4605      	mov	r5, r0
 800f9bc:	68d8      	ldr	r0, [r3, #12]
 800f9be:	b14c      	cbz	r4, 800f9d4 <__assert_func+0x24>
 800f9c0:	4b07      	ldr	r3, [pc, #28]	; (800f9e0 <__assert_func+0x30>)
 800f9c2:	9100      	str	r1, [sp, #0]
 800f9c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f9c8:	4906      	ldr	r1, [pc, #24]	; (800f9e4 <__assert_func+0x34>)
 800f9ca:	462b      	mov	r3, r5
 800f9cc:	f001 fe50 	bl	8011670 <fiprintf>
 800f9d0:	f001 ff0e 	bl	80117f0 <abort>
 800f9d4:	4b04      	ldr	r3, [pc, #16]	; (800f9e8 <__assert_func+0x38>)
 800f9d6:	461c      	mov	r4, r3
 800f9d8:	e7f3      	b.n	800f9c2 <__assert_func+0x12>
 800f9da:	bf00      	nop
 800f9dc:	2000012c 	.word	0x2000012c
 800f9e0:	08012425 	.word	0x08012425
 800f9e4:	08012432 	.word	0x08012432
 800f9e8:	08012460 	.word	0x08012460

0800f9ec <quorem>:
 800f9ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9f0:	6903      	ldr	r3, [r0, #16]
 800f9f2:	690c      	ldr	r4, [r1, #16]
 800f9f4:	42a3      	cmp	r3, r4
 800f9f6:	4607      	mov	r7, r0
 800f9f8:	db7e      	blt.n	800faf8 <quorem+0x10c>
 800f9fa:	3c01      	subs	r4, #1
 800f9fc:	f101 0814 	add.w	r8, r1, #20
 800fa00:	f100 0514 	add.w	r5, r0, #20
 800fa04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa08:	9301      	str	r3, [sp, #4]
 800fa0a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fa0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fa12:	3301      	adds	r3, #1
 800fa14:	429a      	cmp	r2, r3
 800fa16:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fa1a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fa1e:	fbb2 f6f3 	udiv	r6, r2, r3
 800fa22:	d331      	bcc.n	800fa88 <quorem+0x9c>
 800fa24:	f04f 0e00 	mov.w	lr, #0
 800fa28:	4640      	mov	r0, r8
 800fa2a:	46ac      	mov	ip, r5
 800fa2c:	46f2      	mov	sl, lr
 800fa2e:	f850 2b04 	ldr.w	r2, [r0], #4
 800fa32:	b293      	uxth	r3, r2
 800fa34:	fb06 e303 	mla	r3, r6, r3, lr
 800fa38:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fa3c:	0c1a      	lsrs	r2, r3, #16
 800fa3e:	b29b      	uxth	r3, r3
 800fa40:	ebaa 0303 	sub.w	r3, sl, r3
 800fa44:	f8dc a000 	ldr.w	sl, [ip]
 800fa48:	fa13 f38a 	uxtah	r3, r3, sl
 800fa4c:	fb06 220e 	mla	r2, r6, lr, r2
 800fa50:	9300      	str	r3, [sp, #0]
 800fa52:	9b00      	ldr	r3, [sp, #0]
 800fa54:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fa58:	b292      	uxth	r2, r2
 800fa5a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fa5e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fa62:	f8bd 3000 	ldrh.w	r3, [sp]
 800fa66:	4581      	cmp	r9, r0
 800fa68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa6c:	f84c 3b04 	str.w	r3, [ip], #4
 800fa70:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fa74:	d2db      	bcs.n	800fa2e <quorem+0x42>
 800fa76:	f855 300b 	ldr.w	r3, [r5, fp]
 800fa7a:	b92b      	cbnz	r3, 800fa88 <quorem+0x9c>
 800fa7c:	9b01      	ldr	r3, [sp, #4]
 800fa7e:	3b04      	subs	r3, #4
 800fa80:	429d      	cmp	r5, r3
 800fa82:	461a      	mov	r2, r3
 800fa84:	d32c      	bcc.n	800fae0 <quorem+0xf4>
 800fa86:	613c      	str	r4, [r7, #16]
 800fa88:	4638      	mov	r0, r7
 800fa8a:	f001 f9a7 	bl	8010ddc <__mcmp>
 800fa8e:	2800      	cmp	r0, #0
 800fa90:	db22      	blt.n	800fad8 <quorem+0xec>
 800fa92:	3601      	adds	r6, #1
 800fa94:	4629      	mov	r1, r5
 800fa96:	2000      	movs	r0, #0
 800fa98:	f858 2b04 	ldr.w	r2, [r8], #4
 800fa9c:	f8d1 c000 	ldr.w	ip, [r1]
 800faa0:	b293      	uxth	r3, r2
 800faa2:	1ac3      	subs	r3, r0, r3
 800faa4:	0c12      	lsrs	r2, r2, #16
 800faa6:	fa13 f38c 	uxtah	r3, r3, ip
 800faaa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800faae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fab2:	b29b      	uxth	r3, r3
 800fab4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fab8:	45c1      	cmp	r9, r8
 800faba:	f841 3b04 	str.w	r3, [r1], #4
 800fabe:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fac2:	d2e9      	bcs.n	800fa98 <quorem+0xac>
 800fac4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fac8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800facc:	b922      	cbnz	r2, 800fad8 <quorem+0xec>
 800face:	3b04      	subs	r3, #4
 800fad0:	429d      	cmp	r5, r3
 800fad2:	461a      	mov	r2, r3
 800fad4:	d30a      	bcc.n	800faec <quorem+0x100>
 800fad6:	613c      	str	r4, [r7, #16]
 800fad8:	4630      	mov	r0, r6
 800fada:	b003      	add	sp, #12
 800fadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fae0:	6812      	ldr	r2, [r2, #0]
 800fae2:	3b04      	subs	r3, #4
 800fae4:	2a00      	cmp	r2, #0
 800fae6:	d1ce      	bne.n	800fa86 <quorem+0x9a>
 800fae8:	3c01      	subs	r4, #1
 800faea:	e7c9      	b.n	800fa80 <quorem+0x94>
 800faec:	6812      	ldr	r2, [r2, #0]
 800faee:	3b04      	subs	r3, #4
 800faf0:	2a00      	cmp	r2, #0
 800faf2:	d1f0      	bne.n	800fad6 <quorem+0xea>
 800faf4:	3c01      	subs	r4, #1
 800faf6:	e7eb      	b.n	800fad0 <quorem+0xe4>
 800faf8:	2000      	movs	r0, #0
 800fafa:	e7ee      	b.n	800fada <quorem+0xee>
 800fafc:	0000      	movs	r0, r0
	...

0800fb00 <_dtoa_r>:
 800fb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb04:	ed2d 8b04 	vpush	{d8-d9}
 800fb08:	69c5      	ldr	r5, [r0, #28]
 800fb0a:	b093      	sub	sp, #76	; 0x4c
 800fb0c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fb10:	ec57 6b10 	vmov	r6, r7, d0
 800fb14:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fb18:	9107      	str	r1, [sp, #28]
 800fb1a:	4604      	mov	r4, r0
 800fb1c:	920a      	str	r2, [sp, #40]	; 0x28
 800fb1e:	930d      	str	r3, [sp, #52]	; 0x34
 800fb20:	b975      	cbnz	r5, 800fb40 <_dtoa_r+0x40>
 800fb22:	2010      	movs	r0, #16
 800fb24:	f000 fe2a 	bl	801077c <malloc>
 800fb28:	4602      	mov	r2, r0
 800fb2a:	61e0      	str	r0, [r4, #28]
 800fb2c:	b920      	cbnz	r0, 800fb38 <_dtoa_r+0x38>
 800fb2e:	4bae      	ldr	r3, [pc, #696]	; (800fde8 <_dtoa_r+0x2e8>)
 800fb30:	21ef      	movs	r1, #239	; 0xef
 800fb32:	48ae      	ldr	r0, [pc, #696]	; (800fdec <_dtoa_r+0x2ec>)
 800fb34:	f7ff ff3c 	bl	800f9b0 <__assert_func>
 800fb38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fb3c:	6005      	str	r5, [r0, #0]
 800fb3e:	60c5      	str	r5, [r0, #12]
 800fb40:	69e3      	ldr	r3, [r4, #28]
 800fb42:	6819      	ldr	r1, [r3, #0]
 800fb44:	b151      	cbz	r1, 800fb5c <_dtoa_r+0x5c>
 800fb46:	685a      	ldr	r2, [r3, #4]
 800fb48:	604a      	str	r2, [r1, #4]
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	4093      	lsls	r3, r2
 800fb4e:	608b      	str	r3, [r1, #8]
 800fb50:	4620      	mov	r0, r4
 800fb52:	f000 ff07 	bl	8010964 <_Bfree>
 800fb56:	69e3      	ldr	r3, [r4, #28]
 800fb58:	2200      	movs	r2, #0
 800fb5a:	601a      	str	r2, [r3, #0]
 800fb5c:	1e3b      	subs	r3, r7, #0
 800fb5e:	bfbb      	ittet	lt
 800fb60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fb64:	9303      	strlt	r3, [sp, #12]
 800fb66:	2300      	movge	r3, #0
 800fb68:	2201      	movlt	r2, #1
 800fb6a:	bfac      	ite	ge
 800fb6c:	f8c8 3000 	strge.w	r3, [r8]
 800fb70:	f8c8 2000 	strlt.w	r2, [r8]
 800fb74:	4b9e      	ldr	r3, [pc, #632]	; (800fdf0 <_dtoa_r+0x2f0>)
 800fb76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800fb7a:	ea33 0308 	bics.w	r3, r3, r8
 800fb7e:	d11b      	bne.n	800fbb8 <_dtoa_r+0xb8>
 800fb80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fb82:	f242 730f 	movw	r3, #9999	; 0x270f
 800fb86:	6013      	str	r3, [r2, #0]
 800fb88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800fb8c:	4333      	orrs	r3, r6
 800fb8e:	f000 8593 	beq.w	80106b8 <_dtoa_r+0xbb8>
 800fb92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb94:	b963      	cbnz	r3, 800fbb0 <_dtoa_r+0xb0>
 800fb96:	4b97      	ldr	r3, [pc, #604]	; (800fdf4 <_dtoa_r+0x2f4>)
 800fb98:	e027      	b.n	800fbea <_dtoa_r+0xea>
 800fb9a:	4b97      	ldr	r3, [pc, #604]	; (800fdf8 <_dtoa_r+0x2f8>)
 800fb9c:	9300      	str	r3, [sp, #0]
 800fb9e:	3308      	adds	r3, #8
 800fba0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fba2:	6013      	str	r3, [r2, #0]
 800fba4:	9800      	ldr	r0, [sp, #0]
 800fba6:	b013      	add	sp, #76	; 0x4c
 800fba8:	ecbd 8b04 	vpop	{d8-d9}
 800fbac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbb0:	4b90      	ldr	r3, [pc, #576]	; (800fdf4 <_dtoa_r+0x2f4>)
 800fbb2:	9300      	str	r3, [sp, #0]
 800fbb4:	3303      	adds	r3, #3
 800fbb6:	e7f3      	b.n	800fba0 <_dtoa_r+0xa0>
 800fbb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	ec51 0b17 	vmov	r0, r1, d7
 800fbc2:	eeb0 8a47 	vmov.f32	s16, s14
 800fbc6:	eef0 8a67 	vmov.f32	s17, s15
 800fbca:	2300      	movs	r3, #0
 800fbcc:	f7f0 ff7c 	bl	8000ac8 <__aeabi_dcmpeq>
 800fbd0:	4681      	mov	r9, r0
 800fbd2:	b160      	cbz	r0, 800fbee <_dtoa_r+0xee>
 800fbd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	6013      	str	r3, [r2, #0]
 800fbda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	f000 8568 	beq.w	80106b2 <_dtoa_r+0xbb2>
 800fbe2:	4b86      	ldr	r3, [pc, #536]	; (800fdfc <_dtoa_r+0x2fc>)
 800fbe4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fbe6:	6013      	str	r3, [r2, #0]
 800fbe8:	3b01      	subs	r3, #1
 800fbea:	9300      	str	r3, [sp, #0]
 800fbec:	e7da      	b.n	800fba4 <_dtoa_r+0xa4>
 800fbee:	aa10      	add	r2, sp, #64	; 0x40
 800fbf0:	a911      	add	r1, sp, #68	; 0x44
 800fbf2:	4620      	mov	r0, r4
 800fbf4:	eeb0 0a48 	vmov.f32	s0, s16
 800fbf8:	eef0 0a68 	vmov.f32	s1, s17
 800fbfc:	f001 f994 	bl	8010f28 <__d2b>
 800fc00:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fc04:	4682      	mov	sl, r0
 800fc06:	2d00      	cmp	r5, #0
 800fc08:	d07f      	beq.n	800fd0a <_dtoa_r+0x20a>
 800fc0a:	ee18 3a90 	vmov	r3, s17
 800fc0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc12:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800fc16:	ec51 0b18 	vmov	r0, r1, d8
 800fc1a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fc1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fc22:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800fc26:	4619      	mov	r1, r3
 800fc28:	2200      	movs	r2, #0
 800fc2a:	4b75      	ldr	r3, [pc, #468]	; (800fe00 <_dtoa_r+0x300>)
 800fc2c:	f7f0 fb2c 	bl	8000288 <__aeabi_dsub>
 800fc30:	a367      	add	r3, pc, #412	; (adr r3, 800fdd0 <_dtoa_r+0x2d0>)
 800fc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc36:	f7f0 fcdf 	bl	80005f8 <__aeabi_dmul>
 800fc3a:	a367      	add	r3, pc, #412	; (adr r3, 800fdd8 <_dtoa_r+0x2d8>)
 800fc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc40:	f7f0 fb24 	bl	800028c <__adddf3>
 800fc44:	4606      	mov	r6, r0
 800fc46:	4628      	mov	r0, r5
 800fc48:	460f      	mov	r7, r1
 800fc4a:	f7f0 fc6b 	bl	8000524 <__aeabi_i2d>
 800fc4e:	a364      	add	r3, pc, #400	; (adr r3, 800fde0 <_dtoa_r+0x2e0>)
 800fc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc54:	f7f0 fcd0 	bl	80005f8 <__aeabi_dmul>
 800fc58:	4602      	mov	r2, r0
 800fc5a:	460b      	mov	r3, r1
 800fc5c:	4630      	mov	r0, r6
 800fc5e:	4639      	mov	r1, r7
 800fc60:	f7f0 fb14 	bl	800028c <__adddf3>
 800fc64:	4606      	mov	r6, r0
 800fc66:	460f      	mov	r7, r1
 800fc68:	f7f0 ff76 	bl	8000b58 <__aeabi_d2iz>
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	4683      	mov	fp, r0
 800fc70:	2300      	movs	r3, #0
 800fc72:	4630      	mov	r0, r6
 800fc74:	4639      	mov	r1, r7
 800fc76:	f7f0 ff31 	bl	8000adc <__aeabi_dcmplt>
 800fc7a:	b148      	cbz	r0, 800fc90 <_dtoa_r+0x190>
 800fc7c:	4658      	mov	r0, fp
 800fc7e:	f7f0 fc51 	bl	8000524 <__aeabi_i2d>
 800fc82:	4632      	mov	r2, r6
 800fc84:	463b      	mov	r3, r7
 800fc86:	f7f0 ff1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc8a:	b908      	cbnz	r0, 800fc90 <_dtoa_r+0x190>
 800fc8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fc90:	f1bb 0f16 	cmp.w	fp, #22
 800fc94:	d857      	bhi.n	800fd46 <_dtoa_r+0x246>
 800fc96:	4b5b      	ldr	r3, [pc, #364]	; (800fe04 <_dtoa_r+0x304>)
 800fc98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca0:	ec51 0b18 	vmov	r0, r1, d8
 800fca4:	f7f0 ff1a 	bl	8000adc <__aeabi_dcmplt>
 800fca8:	2800      	cmp	r0, #0
 800fcaa:	d04e      	beq.n	800fd4a <_dtoa_r+0x24a>
 800fcac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	930c      	str	r3, [sp, #48]	; 0x30
 800fcb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fcb6:	1b5b      	subs	r3, r3, r5
 800fcb8:	1e5a      	subs	r2, r3, #1
 800fcba:	bf45      	ittet	mi
 800fcbc:	f1c3 0301 	rsbmi	r3, r3, #1
 800fcc0:	9305      	strmi	r3, [sp, #20]
 800fcc2:	2300      	movpl	r3, #0
 800fcc4:	2300      	movmi	r3, #0
 800fcc6:	9206      	str	r2, [sp, #24]
 800fcc8:	bf54      	ite	pl
 800fcca:	9305      	strpl	r3, [sp, #20]
 800fccc:	9306      	strmi	r3, [sp, #24]
 800fcce:	f1bb 0f00 	cmp.w	fp, #0
 800fcd2:	db3c      	blt.n	800fd4e <_dtoa_r+0x24e>
 800fcd4:	9b06      	ldr	r3, [sp, #24]
 800fcd6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800fcda:	445b      	add	r3, fp
 800fcdc:	9306      	str	r3, [sp, #24]
 800fcde:	2300      	movs	r3, #0
 800fce0:	9308      	str	r3, [sp, #32]
 800fce2:	9b07      	ldr	r3, [sp, #28]
 800fce4:	2b09      	cmp	r3, #9
 800fce6:	d868      	bhi.n	800fdba <_dtoa_r+0x2ba>
 800fce8:	2b05      	cmp	r3, #5
 800fcea:	bfc4      	itt	gt
 800fcec:	3b04      	subgt	r3, #4
 800fcee:	9307      	strgt	r3, [sp, #28]
 800fcf0:	9b07      	ldr	r3, [sp, #28]
 800fcf2:	f1a3 0302 	sub.w	r3, r3, #2
 800fcf6:	bfcc      	ite	gt
 800fcf8:	2500      	movgt	r5, #0
 800fcfa:	2501      	movle	r5, #1
 800fcfc:	2b03      	cmp	r3, #3
 800fcfe:	f200 8085 	bhi.w	800fe0c <_dtoa_r+0x30c>
 800fd02:	e8df f003 	tbb	[pc, r3]
 800fd06:	3b2e      	.short	0x3b2e
 800fd08:	5839      	.short	0x5839
 800fd0a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fd0e:	441d      	add	r5, r3
 800fd10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fd14:	2b20      	cmp	r3, #32
 800fd16:	bfc1      	itttt	gt
 800fd18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fd1c:	fa08 f803 	lslgt.w	r8, r8, r3
 800fd20:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800fd24:	fa26 f303 	lsrgt.w	r3, r6, r3
 800fd28:	bfd6      	itet	le
 800fd2a:	f1c3 0320 	rsble	r3, r3, #32
 800fd2e:	ea48 0003 	orrgt.w	r0, r8, r3
 800fd32:	fa06 f003 	lslle.w	r0, r6, r3
 800fd36:	f7f0 fbe5 	bl	8000504 <__aeabi_ui2d>
 800fd3a:	2201      	movs	r2, #1
 800fd3c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800fd40:	3d01      	subs	r5, #1
 800fd42:	920e      	str	r2, [sp, #56]	; 0x38
 800fd44:	e76f      	b.n	800fc26 <_dtoa_r+0x126>
 800fd46:	2301      	movs	r3, #1
 800fd48:	e7b3      	b.n	800fcb2 <_dtoa_r+0x1b2>
 800fd4a:	900c      	str	r0, [sp, #48]	; 0x30
 800fd4c:	e7b2      	b.n	800fcb4 <_dtoa_r+0x1b4>
 800fd4e:	9b05      	ldr	r3, [sp, #20]
 800fd50:	eba3 030b 	sub.w	r3, r3, fp
 800fd54:	9305      	str	r3, [sp, #20]
 800fd56:	f1cb 0300 	rsb	r3, fp, #0
 800fd5a:	9308      	str	r3, [sp, #32]
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd60:	e7bf      	b.n	800fce2 <_dtoa_r+0x1e2>
 800fd62:	2300      	movs	r3, #0
 800fd64:	9309      	str	r3, [sp, #36]	; 0x24
 800fd66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	dc52      	bgt.n	800fe12 <_dtoa_r+0x312>
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	9301      	str	r3, [sp, #4]
 800fd70:	9304      	str	r3, [sp, #16]
 800fd72:	461a      	mov	r2, r3
 800fd74:	920a      	str	r2, [sp, #40]	; 0x28
 800fd76:	e00b      	b.n	800fd90 <_dtoa_r+0x290>
 800fd78:	2301      	movs	r3, #1
 800fd7a:	e7f3      	b.n	800fd64 <_dtoa_r+0x264>
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	9309      	str	r3, [sp, #36]	; 0x24
 800fd80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd82:	445b      	add	r3, fp
 800fd84:	9301      	str	r3, [sp, #4]
 800fd86:	3301      	adds	r3, #1
 800fd88:	2b01      	cmp	r3, #1
 800fd8a:	9304      	str	r3, [sp, #16]
 800fd8c:	bfb8      	it	lt
 800fd8e:	2301      	movlt	r3, #1
 800fd90:	69e0      	ldr	r0, [r4, #28]
 800fd92:	2100      	movs	r1, #0
 800fd94:	2204      	movs	r2, #4
 800fd96:	f102 0614 	add.w	r6, r2, #20
 800fd9a:	429e      	cmp	r6, r3
 800fd9c:	d93d      	bls.n	800fe1a <_dtoa_r+0x31a>
 800fd9e:	6041      	str	r1, [r0, #4]
 800fda0:	4620      	mov	r0, r4
 800fda2:	f000 fd9f 	bl	80108e4 <_Balloc>
 800fda6:	9000      	str	r0, [sp, #0]
 800fda8:	2800      	cmp	r0, #0
 800fdaa:	d139      	bne.n	800fe20 <_dtoa_r+0x320>
 800fdac:	4b16      	ldr	r3, [pc, #88]	; (800fe08 <_dtoa_r+0x308>)
 800fdae:	4602      	mov	r2, r0
 800fdb0:	f240 11af 	movw	r1, #431	; 0x1af
 800fdb4:	e6bd      	b.n	800fb32 <_dtoa_r+0x32>
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	e7e1      	b.n	800fd7e <_dtoa_r+0x27e>
 800fdba:	2501      	movs	r5, #1
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	9307      	str	r3, [sp, #28]
 800fdc0:	9509      	str	r5, [sp, #36]	; 0x24
 800fdc2:	f04f 33ff 	mov.w	r3, #4294967295
 800fdc6:	9301      	str	r3, [sp, #4]
 800fdc8:	9304      	str	r3, [sp, #16]
 800fdca:	2200      	movs	r2, #0
 800fdcc:	2312      	movs	r3, #18
 800fdce:	e7d1      	b.n	800fd74 <_dtoa_r+0x274>
 800fdd0:	636f4361 	.word	0x636f4361
 800fdd4:	3fd287a7 	.word	0x3fd287a7
 800fdd8:	8b60c8b3 	.word	0x8b60c8b3
 800fddc:	3fc68a28 	.word	0x3fc68a28
 800fde0:	509f79fb 	.word	0x509f79fb
 800fde4:	3fd34413 	.word	0x3fd34413
 800fde8:	080123b4 	.word	0x080123b4
 800fdec:	0801246e 	.word	0x0801246e
 800fdf0:	7ff00000 	.word	0x7ff00000
 800fdf4:	0801246a 	.word	0x0801246a
 800fdf8:	08012461 	.word	0x08012461
 800fdfc:	08012391 	.word	0x08012391
 800fe00:	3ff80000 	.word	0x3ff80000
 800fe04:	08012558 	.word	0x08012558
 800fe08:	080124c6 	.word	0x080124c6
 800fe0c:	2301      	movs	r3, #1
 800fe0e:	9309      	str	r3, [sp, #36]	; 0x24
 800fe10:	e7d7      	b.n	800fdc2 <_dtoa_r+0x2c2>
 800fe12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe14:	9301      	str	r3, [sp, #4]
 800fe16:	9304      	str	r3, [sp, #16]
 800fe18:	e7ba      	b.n	800fd90 <_dtoa_r+0x290>
 800fe1a:	3101      	adds	r1, #1
 800fe1c:	0052      	lsls	r2, r2, #1
 800fe1e:	e7ba      	b.n	800fd96 <_dtoa_r+0x296>
 800fe20:	69e3      	ldr	r3, [r4, #28]
 800fe22:	9a00      	ldr	r2, [sp, #0]
 800fe24:	601a      	str	r2, [r3, #0]
 800fe26:	9b04      	ldr	r3, [sp, #16]
 800fe28:	2b0e      	cmp	r3, #14
 800fe2a:	f200 80a8 	bhi.w	800ff7e <_dtoa_r+0x47e>
 800fe2e:	2d00      	cmp	r5, #0
 800fe30:	f000 80a5 	beq.w	800ff7e <_dtoa_r+0x47e>
 800fe34:	f1bb 0f00 	cmp.w	fp, #0
 800fe38:	dd38      	ble.n	800feac <_dtoa_r+0x3ac>
 800fe3a:	4bc0      	ldr	r3, [pc, #768]	; (801013c <_dtoa_r+0x63c>)
 800fe3c:	f00b 020f 	and.w	r2, fp, #15
 800fe40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe44:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800fe48:	e9d3 6700 	ldrd	r6, r7, [r3]
 800fe4c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800fe50:	d019      	beq.n	800fe86 <_dtoa_r+0x386>
 800fe52:	4bbb      	ldr	r3, [pc, #748]	; (8010140 <_dtoa_r+0x640>)
 800fe54:	ec51 0b18 	vmov	r0, r1, d8
 800fe58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fe5c:	f7f0 fcf6 	bl	800084c <__aeabi_ddiv>
 800fe60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe64:	f008 080f 	and.w	r8, r8, #15
 800fe68:	2503      	movs	r5, #3
 800fe6a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010140 <_dtoa_r+0x640>
 800fe6e:	f1b8 0f00 	cmp.w	r8, #0
 800fe72:	d10a      	bne.n	800fe8a <_dtoa_r+0x38a>
 800fe74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe78:	4632      	mov	r2, r6
 800fe7a:	463b      	mov	r3, r7
 800fe7c:	f7f0 fce6 	bl	800084c <__aeabi_ddiv>
 800fe80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe84:	e02b      	b.n	800fede <_dtoa_r+0x3de>
 800fe86:	2502      	movs	r5, #2
 800fe88:	e7ef      	b.n	800fe6a <_dtoa_r+0x36a>
 800fe8a:	f018 0f01 	tst.w	r8, #1
 800fe8e:	d008      	beq.n	800fea2 <_dtoa_r+0x3a2>
 800fe90:	4630      	mov	r0, r6
 800fe92:	4639      	mov	r1, r7
 800fe94:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fe98:	f7f0 fbae 	bl	80005f8 <__aeabi_dmul>
 800fe9c:	3501      	adds	r5, #1
 800fe9e:	4606      	mov	r6, r0
 800fea0:	460f      	mov	r7, r1
 800fea2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fea6:	f109 0908 	add.w	r9, r9, #8
 800feaa:	e7e0      	b.n	800fe6e <_dtoa_r+0x36e>
 800feac:	f000 809f 	beq.w	800ffee <_dtoa_r+0x4ee>
 800feb0:	f1cb 0600 	rsb	r6, fp, #0
 800feb4:	4ba1      	ldr	r3, [pc, #644]	; (801013c <_dtoa_r+0x63c>)
 800feb6:	4fa2      	ldr	r7, [pc, #648]	; (8010140 <_dtoa_r+0x640>)
 800feb8:	f006 020f 	and.w	r2, r6, #15
 800febc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec4:	ec51 0b18 	vmov	r0, r1, d8
 800fec8:	f7f0 fb96 	bl	80005f8 <__aeabi_dmul>
 800fecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fed0:	1136      	asrs	r6, r6, #4
 800fed2:	2300      	movs	r3, #0
 800fed4:	2502      	movs	r5, #2
 800fed6:	2e00      	cmp	r6, #0
 800fed8:	d17e      	bne.n	800ffd8 <_dtoa_r+0x4d8>
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d1d0      	bne.n	800fe80 <_dtoa_r+0x380>
 800fede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fee0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	f000 8084 	beq.w	800fff2 <_dtoa_r+0x4f2>
 800feea:	4b96      	ldr	r3, [pc, #600]	; (8010144 <_dtoa_r+0x644>)
 800feec:	2200      	movs	r2, #0
 800feee:	4640      	mov	r0, r8
 800fef0:	4649      	mov	r1, r9
 800fef2:	f7f0 fdf3 	bl	8000adc <__aeabi_dcmplt>
 800fef6:	2800      	cmp	r0, #0
 800fef8:	d07b      	beq.n	800fff2 <_dtoa_r+0x4f2>
 800fefa:	9b04      	ldr	r3, [sp, #16]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d078      	beq.n	800fff2 <_dtoa_r+0x4f2>
 800ff00:	9b01      	ldr	r3, [sp, #4]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	dd39      	ble.n	800ff7a <_dtoa_r+0x47a>
 800ff06:	4b90      	ldr	r3, [pc, #576]	; (8010148 <_dtoa_r+0x648>)
 800ff08:	2200      	movs	r2, #0
 800ff0a:	4640      	mov	r0, r8
 800ff0c:	4649      	mov	r1, r9
 800ff0e:	f7f0 fb73 	bl	80005f8 <__aeabi_dmul>
 800ff12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff16:	9e01      	ldr	r6, [sp, #4]
 800ff18:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ff1c:	3501      	adds	r5, #1
 800ff1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ff22:	4628      	mov	r0, r5
 800ff24:	f7f0 fafe 	bl	8000524 <__aeabi_i2d>
 800ff28:	4642      	mov	r2, r8
 800ff2a:	464b      	mov	r3, r9
 800ff2c:	f7f0 fb64 	bl	80005f8 <__aeabi_dmul>
 800ff30:	4b86      	ldr	r3, [pc, #536]	; (801014c <_dtoa_r+0x64c>)
 800ff32:	2200      	movs	r2, #0
 800ff34:	f7f0 f9aa 	bl	800028c <__adddf3>
 800ff38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ff3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff40:	9303      	str	r3, [sp, #12]
 800ff42:	2e00      	cmp	r6, #0
 800ff44:	d158      	bne.n	800fff8 <_dtoa_r+0x4f8>
 800ff46:	4b82      	ldr	r3, [pc, #520]	; (8010150 <_dtoa_r+0x650>)
 800ff48:	2200      	movs	r2, #0
 800ff4a:	4640      	mov	r0, r8
 800ff4c:	4649      	mov	r1, r9
 800ff4e:	f7f0 f99b 	bl	8000288 <__aeabi_dsub>
 800ff52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ff56:	4680      	mov	r8, r0
 800ff58:	4689      	mov	r9, r1
 800ff5a:	f7f0 fddd 	bl	8000b18 <__aeabi_dcmpgt>
 800ff5e:	2800      	cmp	r0, #0
 800ff60:	f040 8296 	bne.w	8010490 <_dtoa_r+0x990>
 800ff64:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ff68:	4640      	mov	r0, r8
 800ff6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ff6e:	4649      	mov	r1, r9
 800ff70:	f7f0 fdb4 	bl	8000adc <__aeabi_dcmplt>
 800ff74:	2800      	cmp	r0, #0
 800ff76:	f040 8289 	bne.w	801048c <_dtoa_r+0x98c>
 800ff7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ff7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	f2c0 814e 	blt.w	8010222 <_dtoa_r+0x722>
 800ff86:	f1bb 0f0e 	cmp.w	fp, #14
 800ff8a:	f300 814a 	bgt.w	8010222 <_dtoa_r+0x722>
 800ff8e:	4b6b      	ldr	r3, [pc, #428]	; (801013c <_dtoa_r+0x63c>)
 800ff90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ff94:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ff98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	f280 80dc 	bge.w	8010158 <_dtoa_r+0x658>
 800ffa0:	9b04      	ldr	r3, [sp, #16]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	f300 80d8 	bgt.w	8010158 <_dtoa_r+0x658>
 800ffa8:	f040 826f 	bne.w	801048a <_dtoa_r+0x98a>
 800ffac:	4b68      	ldr	r3, [pc, #416]	; (8010150 <_dtoa_r+0x650>)
 800ffae:	2200      	movs	r2, #0
 800ffb0:	4640      	mov	r0, r8
 800ffb2:	4649      	mov	r1, r9
 800ffb4:	f7f0 fb20 	bl	80005f8 <__aeabi_dmul>
 800ffb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ffbc:	f7f0 fda2 	bl	8000b04 <__aeabi_dcmpge>
 800ffc0:	9e04      	ldr	r6, [sp, #16]
 800ffc2:	4637      	mov	r7, r6
 800ffc4:	2800      	cmp	r0, #0
 800ffc6:	f040 8245 	bne.w	8010454 <_dtoa_r+0x954>
 800ffca:	9d00      	ldr	r5, [sp, #0]
 800ffcc:	2331      	movs	r3, #49	; 0x31
 800ffce:	f805 3b01 	strb.w	r3, [r5], #1
 800ffd2:	f10b 0b01 	add.w	fp, fp, #1
 800ffd6:	e241      	b.n	801045c <_dtoa_r+0x95c>
 800ffd8:	07f2      	lsls	r2, r6, #31
 800ffda:	d505      	bpl.n	800ffe8 <_dtoa_r+0x4e8>
 800ffdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ffe0:	f7f0 fb0a 	bl	80005f8 <__aeabi_dmul>
 800ffe4:	3501      	adds	r5, #1
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	1076      	asrs	r6, r6, #1
 800ffea:	3708      	adds	r7, #8
 800ffec:	e773      	b.n	800fed6 <_dtoa_r+0x3d6>
 800ffee:	2502      	movs	r5, #2
 800fff0:	e775      	b.n	800fede <_dtoa_r+0x3de>
 800fff2:	9e04      	ldr	r6, [sp, #16]
 800fff4:	465f      	mov	r7, fp
 800fff6:	e792      	b.n	800ff1e <_dtoa_r+0x41e>
 800fff8:	9900      	ldr	r1, [sp, #0]
 800fffa:	4b50      	ldr	r3, [pc, #320]	; (801013c <_dtoa_r+0x63c>)
 800fffc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010000:	4431      	add	r1, r6
 8010002:	9102      	str	r1, [sp, #8]
 8010004:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010006:	eeb0 9a47 	vmov.f32	s18, s14
 801000a:	eef0 9a67 	vmov.f32	s19, s15
 801000e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010012:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010016:	2900      	cmp	r1, #0
 8010018:	d044      	beq.n	80100a4 <_dtoa_r+0x5a4>
 801001a:	494e      	ldr	r1, [pc, #312]	; (8010154 <_dtoa_r+0x654>)
 801001c:	2000      	movs	r0, #0
 801001e:	f7f0 fc15 	bl	800084c <__aeabi_ddiv>
 8010022:	ec53 2b19 	vmov	r2, r3, d9
 8010026:	f7f0 f92f 	bl	8000288 <__aeabi_dsub>
 801002a:	9d00      	ldr	r5, [sp, #0]
 801002c:	ec41 0b19 	vmov	d9, r0, r1
 8010030:	4649      	mov	r1, r9
 8010032:	4640      	mov	r0, r8
 8010034:	f7f0 fd90 	bl	8000b58 <__aeabi_d2iz>
 8010038:	4606      	mov	r6, r0
 801003a:	f7f0 fa73 	bl	8000524 <__aeabi_i2d>
 801003e:	4602      	mov	r2, r0
 8010040:	460b      	mov	r3, r1
 8010042:	4640      	mov	r0, r8
 8010044:	4649      	mov	r1, r9
 8010046:	f7f0 f91f 	bl	8000288 <__aeabi_dsub>
 801004a:	3630      	adds	r6, #48	; 0x30
 801004c:	f805 6b01 	strb.w	r6, [r5], #1
 8010050:	ec53 2b19 	vmov	r2, r3, d9
 8010054:	4680      	mov	r8, r0
 8010056:	4689      	mov	r9, r1
 8010058:	f7f0 fd40 	bl	8000adc <__aeabi_dcmplt>
 801005c:	2800      	cmp	r0, #0
 801005e:	d164      	bne.n	801012a <_dtoa_r+0x62a>
 8010060:	4642      	mov	r2, r8
 8010062:	464b      	mov	r3, r9
 8010064:	4937      	ldr	r1, [pc, #220]	; (8010144 <_dtoa_r+0x644>)
 8010066:	2000      	movs	r0, #0
 8010068:	f7f0 f90e 	bl	8000288 <__aeabi_dsub>
 801006c:	ec53 2b19 	vmov	r2, r3, d9
 8010070:	f7f0 fd34 	bl	8000adc <__aeabi_dcmplt>
 8010074:	2800      	cmp	r0, #0
 8010076:	f040 80b6 	bne.w	80101e6 <_dtoa_r+0x6e6>
 801007a:	9b02      	ldr	r3, [sp, #8]
 801007c:	429d      	cmp	r5, r3
 801007e:	f43f af7c 	beq.w	800ff7a <_dtoa_r+0x47a>
 8010082:	4b31      	ldr	r3, [pc, #196]	; (8010148 <_dtoa_r+0x648>)
 8010084:	ec51 0b19 	vmov	r0, r1, d9
 8010088:	2200      	movs	r2, #0
 801008a:	f7f0 fab5 	bl	80005f8 <__aeabi_dmul>
 801008e:	4b2e      	ldr	r3, [pc, #184]	; (8010148 <_dtoa_r+0x648>)
 8010090:	ec41 0b19 	vmov	d9, r0, r1
 8010094:	2200      	movs	r2, #0
 8010096:	4640      	mov	r0, r8
 8010098:	4649      	mov	r1, r9
 801009a:	f7f0 faad 	bl	80005f8 <__aeabi_dmul>
 801009e:	4680      	mov	r8, r0
 80100a0:	4689      	mov	r9, r1
 80100a2:	e7c5      	b.n	8010030 <_dtoa_r+0x530>
 80100a4:	ec51 0b17 	vmov	r0, r1, d7
 80100a8:	f7f0 faa6 	bl	80005f8 <__aeabi_dmul>
 80100ac:	9b02      	ldr	r3, [sp, #8]
 80100ae:	9d00      	ldr	r5, [sp, #0]
 80100b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80100b2:	ec41 0b19 	vmov	d9, r0, r1
 80100b6:	4649      	mov	r1, r9
 80100b8:	4640      	mov	r0, r8
 80100ba:	f7f0 fd4d 	bl	8000b58 <__aeabi_d2iz>
 80100be:	4606      	mov	r6, r0
 80100c0:	f7f0 fa30 	bl	8000524 <__aeabi_i2d>
 80100c4:	3630      	adds	r6, #48	; 0x30
 80100c6:	4602      	mov	r2, r0
 80100c8:	460b      	mov	r3, r1
 80100ca:	4640      	mov	r0, r8
 80100cc:	4649      	mov	r1, r9
 80100ce:	f7f0 f8db 	bl	8000288 <__aeabi_dsub>
 80100d2:	f805 6b01 	strb.w	r6, [r5], #1
 80100d6:	9b02      	ldr	r3, [sp, #8]
 80100d8:	429d      	cmp	r5, r3
 80100da:	4680      	mov	r8, r0
 80100dc:	4689      	mov	r9, r1
 80100de:	f04f 0200 	mov.w	r2, #0
 80100e2:	d124      	bne.n	801012e <_dtoa_r+0x62e>
 80100e4:	4b1b      	ldr	r3, [pc, #108]	; (8010154 <_dtoa_r+0x654>)
 80100e6:	ec51 0b19 	vmov	r0, r1, d9
 80100ea:	f7f0 f8cf 	bl	800028c <__adddf3>
 80100ee:	4602      	mov	r2, r0
 80100f0:	460b      	mov	r3, r1
 80100f2:	4640      	mov	r0, r8
 80100f4:	4649      	mov	r1, r9
 80100f6:	f7f0 fd0f 	bl	8000b18 <__aeabi_dcmpgt>
 80100fa:	2800      	cmp	r0, #0
 80100fc:	d173      	bne.n	80101e6 <_dtoa_r+0x6e6>
 80100fe:	ec53 2b19 	vmov	r2, r3, d9
 8010102:	4914      	ldr	r1, [pc, #80]	; (8010154 <_dtoa_r+0x654>)
 8010104:	2000      	movs	r0, #0
 8010106:	f7f0 f8bf 	bl	8000288 <__aeabi_dsub>
 801010a:	4602      	mov	r2, r0
 801010c:	460b      	mov	r3, r1
 801010e:	4640      	mov	r0, r8
 8010110:	4649      	mov	r1, r9
 8010112:	f7f0 fce3 	bl	8000adc <__aeabi_dcmplt>
 8010116:	2800      	cmp	r0, #0
 8010118:	f43f af2f 	beq.w	800ff7a <_dtoa_r+0x47a>
 801011c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801011e:	1e6b      	subs	r3, r5, #1
 8010120:	930f      	str	r3, [sp, #60]	; 0x3c
 8010122:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010126:	2b30      	cmp	r3, #48	; 0x30
 8010128:	d0f8      	beq.n	801011c <_dtoa_r+0x61c>
 801012a:	46bb      	mov	fp, r7
 801012c:	e04a      	b.n	80101c4 <_dtoa_r+0x6c4>
 801012e:	4b06      	ldr	r3, [pc, #24]	; (8010148 <_dtoa_r+0x648>)
 8010130:	f7f0 fa62 	bl	80005f8 <__aeabi_dmul>
 8010134:	4680      	mov	r8, r0
 8010136:	4689      	mov	r9, r1
 8010138:	e7bd      	b.n	80100b6 <_dtoa_r+0x5b6>
 801013a:	bf00      	nop
 801013c:	08012558 	.word	0x08012558
 8010140:	08012530 	.word	0x08012530
 8010144:	3ff00000 	.word	0x3ff00000
 8010148:	40240000 	.word	0x40240000
 801014c:	401c0000 	.word	0x401c0000
 8010150:	40140000 	.word	0x40140000
 8010154:	3fe00000 	.word	0x3fe00000
 8010158:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801015c:	9d00      	ldr	r5, [sp, #0]
 801015e:	4642      	mov	r2, r8
 8010160:	464b      	mov	r3, r9
 8010162:	4630      	mov	r0, r6
 8010164:	4639      	mov	r1, r7
 8010166:	f7f0 fb71 	bl	800084c <__aeabi_ddiv>
 801016a:	f7f0 fcf5 	bl	8000b58 <__aeabi_d2iz>
 801016e:	9001      	str	r0, [sp, #4]
 8010170:	f7f0 f9d8 	bl	8000524 <__aeabi_i2d>
 8010174:	4642      	mov	r2, r8
 8010176:	464b      	mov	r3, r9
 8010178:	f7f0 fa3e 	bl	80005f8 <__aeabi_dmul>
 801017c:	4602      	mov	r2, r0
 801017e:	460b      	mov	r3, r1
 8010180:	4630      	mov	r0, r6
 8010182:	4639      	mov	r1, r7
 8010184:	f7f0 f880 	bl	8000288 <__aeabi_dsub>
 8010188:	9e01      	ldr	r6, [sp, #4]
 801018a:	9f04      	ldr	r7, [sp, #16]
 801018c:	3630      	adds	r6, #48	; 0x30
 801018e:	f805 6b01 	strb.w	r6, [r5], #1
 8010192:	9e00      	ldr	r6, [sp, #0]
 8010194:	1bae      	subs	r6, r5, r6
 8010196:	42b7      	cmp	r7, r6
 8010198:	4602      	mov	r2, r0
 801019a:	460b      	mov	r3, r1
 801019c:	d134      	bne.n	8010208 <_dtoa_r+0x708>
 801019e:	f7f0 f875 	bl	800028c <__adddf3>
 80101a2:	4642      	mov	r2, r8
 80101a4:	464b      	mov	r3, r9
 80101a6:	4606      	mov	r6, r0
 80101a8:	460f      	mov	r7, r1
 80101aa:	f7f0 fcb5 	bl	8000b18 <__aeabi_dcmpgt>
 80101ae:	b9c8      	cbnz	r0, 80101e4 <_dtoa_r+0x6e4>
 80101b0:	4642      	mov	r2, r8
 80101b2:	464b      	mov	r3, r9
 80101b4:	4630      	mov	r0, r6
 80101b6:	4639      	mov	r1, r7
 80101b8:	f7f0 fc86 	bl	8000ac8 <__aeabi_dcmpeq>
 80101bc:	b110      	cbz	r0, 80101c4 <_dtoa_r+0x6c4>
 80101be:	9b01      	ldr	r3, [sp, #4]
 80101c0:	07db      	lsls	r3, r3, #31
 80101c2:	d40f      	bmi.n	80101e4 <_dtoa_r+0x6e4>
 80101c4:	4651      	mov	r1, sl
 80101c6:	4620      	mov	r0, r4
 80101c8:	f000 fbcc 	bl	8010964 <_Bfree>
 80101cc:	2300      	movs	r3, #0
 80101ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80101d0:	702b      	strb	r3, [r5, #0]
 80101d2:	f10b 0301 	add.w	r3, fp, #1
 80101d6:	6013      	str	r3, [r2, #0]
 80101d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80101da:	2b00      	cmp	r3, #0
 80101dc:	f43f ace2 	beq.w	800fba4 <_dtoa_r+0xa4>
 80101e0:	601d      	str	r5, [r3, #0]
 80101e2:	e4df      	b.n	800fba4 <_dtoa_r+0xa4>
 80101e4:	465f      	mov	r7, fp
 80101e6:	462b      	mov	r3, r5
 80101e8:	461d      	mov	r5, r3
 80101ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80101ee:	2a39      	cmp	r2, #57	; 0x39
 80101f0:	d106      	bne.n	8010200 <_dtoa_r+0x700>
 80101f2:	9a00      	ldr	r2, [sp, #0]
 80101f4:	429a      	cmp	r2, r3
 80101f6:	d1f7      	bne.n	80101e8 <_dtoa_r+0x6e8>
 80101f8:	9900      	ldr	r1, [sp, #0]
 80101fa:	2230      	movs	r2, #48	; 0x30
 80101fc:	3701      	adds	r7, #1
 80101fe:	700a      	strb	r2, [r1, #0]
 8010200:	781a      	ldrb	r2, [r3, #0]
 8010202:	3201      	adds	r2, #1
 8010204:	701a      	strb	r2, [r3, #0]
 8010206:	e790      	b.n	801012a <_dtoa_r+0x62a>
 8010208:	4ba3      	ldr	r3, [pc, #652]	; (8010498 <_dtoa_r+0x998>)
 801020a:	2200      	movs	r2, #0
 801020c:	f7f0 f9f4 	bl	80005f8 <__aeabi_dmul>
 8010210:	2200      	movs	r2, #0
 8010212:	2300      	movs	r3, #0
 8010214:	4606      	mov	r6, r0
 8010216:	460f      	mov	r7, r1
 8010218:	f7f0 fc56 	bl	8000ac8 <__aeabi_dcmpeq>
 801021c:	2800      	cmp	r0, #0
 801021e:	d09e      	beq.n	801015e <_dtoa_r+0x65e>
 8010220:	e7d0      	b.n	80101c4 <_dtoa_r+0x6c4>
 8010222:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010224:	2a00      	cmp	r2, #0
 8010226:	f000 80ca 	beq.w	80103be <_dtoa_r+0x8be>
 801022a:	9a07      	ldr	r2, [sp, #28]
 801022c:	2a01      	cmp	r2, #1
 801022e:	f300 80ad 	bgt.w	801038c <_dtoa_r+0x88c>
 8010232:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010234:	2a00      	cmp	r2, #0
 8010236:	f000 80a5 	beq.w	8010384 <_dtoa_r+0x884>
 801023a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801023e:	9e08      	ldr	r6, [sp, #32]
 8010240:	9d05      	ldr	r5, [sp, #20]
 8010242:	9a05      	ldr	r2, [sp, #20]
 8010244:	441a      	add	r2, r3
 8010246:	9205      	str	r2, [sp, #20]
 8010248:	9a06      	ldr	r2, [sp, #24]
 801024a:	2101      	movs	r1, #1
 801024c:	441a      	add	r2, r3
 801024e:	4620      	mov	r0, r4
 8010250:	9206      	str	r2, [sp, #24]
 8010252:	f000 fc3d 	bl	8010ad0 <__i2b>
 8010256:	4607      	mov	r7, r0
 8010258:	b165      	cbz	r5, 8010274 <_dtoa_r+0x774>
 801025a:	9b06      	ldr	r3, [sp, #24]
 801025c:	2b00      	cmp	r3, #0
 801025e:	dd09      	ble.n	8010274 <_dtoa_r+0x774>
 8010260:	42ab      	cmp	r3, r5
 8010262:	9a05      	ldr	r2, [sp, #20]
 8010264:	bfa8      	it	ge
 8010266:	462b      	movge	r3, r5
 8010268:	1ad2      	subs	r2, r2, r3
 801026a:	9205      	str	r2, [sp, #20]
 801026c:	9a06      	ldr	r2, [sp, #24]
 801026e:	1aed      	subs	r5, r5, r3
 8010270:	1ad3      	subs	r3, r2, r3
 8010272:	9306      	str	r3, [sp, #24]
 8010274:	9b08      	ldr	r3, [sp, #32]
 8010276:	b1f3      	cbz	r3, 80102b6 <_dtoa_r+0x7b6>
 8010278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801027a:	2b00      	cmp	r3, #0
 801027c:	f000 80a3 	beq.w	80103c6 <_dtoa_r+0x8c6>
 8010280:	2e00      	cmp	r6, #0
 8010282:	dd10      	ble.n	80102a6 <_dtoa_r+0x7a6>
 8010284:	4639      	mov	r1, r7
 8010286:	4632      	mov	r2, r6
 8010288:	4620      	mov	r0, r4
 801028a:	f000 fce1 	bl	8010c50 <__pow5mult>
 801028e:	4652      	mov	r2, sl
 8010290:	4601      	mov	r1, r0
 8010292:	4607      	mov	r7, r0
 8010294:	4620      	mov	r0, r4
 8010296:	f000 fc31 	bl	8010afc <__multiply>
 801029a:	4651      	mov	r1, sl
 801029c:	4680      	mov	r8, r0
 801029e:	4620      	mov	r0, r4
 80102a0:	f000 fb60 	bl	8010964 <_Bfree>
 80102a4:	46c2      	mov	sl, r8
 80102a6:	9b08      	ldr	r3, [sp, #32]
 80102a8:	1b9a      	subs	r2, r3, r6
 80102aa:	d004      	beq.n	80102b6 <_dtoa_r+0x7b6>
 80102ac:	4651      	mov	r1, sl
 80102ae:	4620      	mov	r0, r4
 80102b0:	f000 fcce 	bl	8010c50 <__pow5mult>
 80102b4:	4682      	mov	sl, r0
 80102b6:	2101      	movs	r1, #1
 80102b8:	4620      	mov	r0, r4
 80102ba:	f000 fc09 	bl	8010ad0 <__i2b>
 80102be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	4606      	mov	r6, r0
 80102c4:	f340 8081 	ble.w	80103ca <_dtoa_r+0x8ca>
 80102c8:	461a      	mov	r2, r3
 80102ca:	4601      	mov	r1, r0
 80102cc:	4620      	mov	r0, r4
 80102ce:	f000 fcbf 	bl	8010c50 <__pow5mult>
 80102d2:	9b07      	ldr	r3, [sp, #28]
 80102d4:	2b01      	cmp	r3, #1
 80102d6:	4606      	mov	r6, r0
 80102d8:	dd7a      	ble.n	80103d0 <_dtoa_r+0x8d0>
 80102da:	f04f 0800 	mov.w	r8, #0
 80102de:	6933      	ldr	r3, [r6, #16]
 80102e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80102e4:	6918      	ldr	r0, [r3, #16]
 80102e6:	f000 fba5 	bl	8010a34 <__hi0bits>
 80102ea:	f1c0 0020 	rsb	r0, r0, #32
 80102ee:	9b06      	ldr	r3, [sp, #24]
 80102f0:	4418      	add	r0, r3
 80102f2:	f010 001f 	ands.w	r0, r0, #31
 80102f6:	f000 8094 	beq.w	8010422 <_dtoa_r+0x922>
 80102fa:	f1c0 0320 	rsb	r3, r0, #32
 80102fe:	2b04      	cmp	r3, #4
 8010300:	f340 8085 	ble.w	801040e <_dtoa_r+0x90e>
 8010304:	9b05      	ldr	r3, [sp, #20]
 8010306:	f1c0 001c 	rsb	r0, r0, #28
 801030a:	4403      	add	r3, r0
 801030c:	9305      	str	r3, [sp, #20]
 801030e:	9b06      	ldr	r3, [sp, #24]
 8010310:	4403      	add	r3, r0
 8010312:	4405      	add	r5, r0
 8010314:	9306      	str	r3, [sp, #24]
 8010316:	9b05      	ldr	r3, [sp, #20]
 8010318:	2b00      	cmp	r3, #0
 801031a:	dd05      	ble.n	8010328 <_dtoa_r+0x828>
 801031c:	4651      	mov	r1, sl
 801031e:	461a      	mov	r2, r3
 8010320:	4620      	mov	r0, r4
 8010322:	f000 fcef 	bl	8010d04 <__lshift>
 8010326:	4682      	mov	sl, r0
 8010328:	9b06      	ldr	r3, [sp, #24]
 801032a:	2b00      	cmp	r3, #0
 801032c:	dd05      	ble.n	801033a <_dtoa_r+0x83a>
 801032e:	4631      	mov	r1, r6
 8010330:	461a      	mov	r2, r3
 8010332:	4620      	mov	r0, r4
 8010334:	f000 fce6 	bl	8010d04 <__lshift>
 8010338:	4606      	mov	r6, r0
 801033a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801033c:	2b00      	cmp	r3, #0
 801033e:	d072      	beq.n	8010426 <_dtoa_r+0x926>
 8010340:	4631      	mov	r1, r6
 8010342:	4650      	mov	r0, sl
 8010344:	f000 fd4a 	bl	8010ddc <__mcmp>
 8010348:	2800      	cmp	r0, #0
 801034a:	da6c      	bge.n	8010426 <_dtoa_r+0x926>
 801034c:	2300      	movs	r3, #0
 801034e:	4651      	mov	r1, sl
 8010350:	220a      	movs	r2, #10
 8010352:	4620      	mov	r0, r4
 8010354:	f000 fb28 	bl	80109a8 <__multadd>
 8010358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801035a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801035e:	4682      	mov	sl, r0
 8010360:	2b00      	cmp	r3, #0
 8010362:	f000 81b0 	beq.w	80106c6 <_dtoa_r+0xbc6>
 8010366:	2300      	movs	r3, #0
 8010368:	4639      	mov	r1, r7
 801036a:	220a      	movs	r2, #10
 801036c:	4620      	mov	r0, r4
 801036e:	f000 fb1b 	bl	80109a8 <__multadd>
 8010372:	9b01      	ldr	r3, [sp, #4]
 8010374:	2b00      	cmp	r3, #0
 8010376:	4607      	mov	r7, r0
 8010378:	f300 8096 	bgt.w	80104a8 <_dtoa_r+0x9a8>
 801037c:	9b07      	ldr	r3, [sp, #28]
 801037e:	2b02      	cmp	r3, #2
 8010380:	dc59      	bgt.n	8010436 <_dtoa_r+0x936>
 8010382:	e091      	b.n	80104a8 <_dtoa_r+0x9a8>
 8010384:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010386:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801038a:	e758      	b.n	801023e <_dtoa_r+0x73e>
 801038c:	9b04      	ldr	r3, [sp, #16]
 801038e:	1e5e      	subs	r6, r3, #1
 8010390:	9b08      	ldr	r3, [sp, #32]
 8010392:	42b3      	cmp	r3, r6
 8010394:	bfbf      	itttt	lt
 8010396:	9b08      	ldrlt	r3, [sp, #32]
 8010398:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801039a:	9608      	strlt	r6, [sp, #32]
 801039c:	1af3      	sublt	r3, r6, r3
 801039e:	bfb4      	ite	lt
 80103a0:	18d2      	addlt	r2, r2, r3
 80103a2:	1b9e      	subge	r6, r3, r6
 80103a4:	9b04      	ldr	r3, [sp, #16]
 80103a6:	bfbc      	itt	lt
 80103a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80103aa:	2600      	movlt	r6, #0
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	bfb7      	itett	lt
 80103b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80103b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80103b8:	1a9d      	sublt	r5, r3, r2
 80103ba:	2300      	movlt	r3, #0
 80103bc:	e741      	b.n	8010242 <_dtoa_r+0x742>
 80103be:	9e08      	ldr	r6, [sp, #32]
 80103c0:	9d05      	ldr	r5, [sp, #20]
 80103c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80103c4:	e748      	b.n	8010258 <_dtoa_r+0x758>
 80103c6:	9a08      	ldr	r2, [sp, #32]
 80103c8:	e770      	b.n	80102ac <_dtoa_r+0x7ac>
 80103ca:	9b07      	ldr	r3, [sp, #28]
 80103cc:	2b01      	cmp	r3, #1
 80103ce:	dc19      	bgt.n	8010404 <_dtoa_r+0x904>
 80103d0:	9b02      	ldr	r3, [sp, #8]
 80103d2:	b9bb      	cbnz	r3, 8010404 <_dtoa_r+0x904>
 80103d4:	9b03      	ldr	r3, [sp, #12]
 80103d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80103da:	b99b      	cbnz	r3, 8010404 <_dtoa_r+0x904>
 80103dc:	9b03      	ldr	r3, [sp, #12]
 80103de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80103e2:	0d1b      	lsrs	r3, r3, #20
 80103e4:	051b      	lsls	r3, r3, #20
 80103e6:	b183      	cbz	r3, 801040a <_dtoa_r+0x90a>
 80103e8:	9b05      	ldr	r3, [sp, #20]
 80103ea:	3301      	adds	r3, #1
 80103ec:	9305      	str	r3, [sp, #20]
 80103ee:	9b06      	ldr	r3, [sp, #24]
 80103f0:	3301      	adds	r3, #1
 80103f2:	9306      	str	r3, [sp, #24]
 80103f4:	f04f 0801 	mov.w	r8, #1
 80103f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	f47f af6f 	bne.w	80102de <_dtoa_r+0x7de>
 8010400:	2001      	movs	r0, #1
 8010402:	e774      	b.n	80102ee <_dtoa_r+0x7ee>
 8010404:	f04f 0800 	mov.w	r8, #0
 8010408:	e7f6      	b.n	80103f8 <_dtoa_r+0x8f8>
 801040a:	4698      	mov	r8, r3
 801040c:	e7f4      	b.n	80103f8 <_dtoa_r+0x8f8>
 801040e:	d082      	beq.n	8010316 <_dtoa_r+0x816>
 8010410:	9a05      	ldr	r2, [sp, #20]
 8010412:	331c      	adds	r3, #28
 8010414:	441a      	add	r2, r3
 8010416:	9205      	str	r2, [sp, #20]
 8010418:	9a06      	ldr	r2, [sp, #24]
 801041a:	441a      	add	r2, r3
 801041c:	441d      	add	r5, r3
 801041e:	9206      	str	r2, [sp, #24]
 8010420:	e779      	b.n	8010316 <_dtoa_r+0x816>
 8010422:	4603      	mov	r3, r0
 8010424:	e7f4      	b.n	8010410 <_dtoa_r+0x910>
 8010426:	9b04      	ldr	r3, [sp, #16]
 8010428:	2b00      	cmp	r3, #0
 801042a:	dc37      	bgt.n	801049c <_dtoa_r+0x99c>
 801042c:	9b07      	ldr	r3, [sp, #28]
 801042e:	2b02      	cmp	r3, #2
 8010430:	dd34      	ble.n	801049c <_dtoa_r+0x99c>
 8010432:	9b04      	ldr	r3, [sp, #16]
 8010434:	9301      	str	r3, [sp, #4]
 8010436:	9b01      	ldr	r3, [sp, #4]
 8010438:	b963      	cbnz	r3, 8010454 <_dtoa_r+0x954>
 801043a:	4631      	mov	r1, r6
 801043c:	2205      	movs	r2, #5
 801043e:	4620      	mov	r0, r4
 8010440:	f000 fab2 	bl	80109a8 <__multadd>
 8010444:	4601      	mov	r1, r0
 8010446:	4606      	mov	r6, r0
 8010448:	4650      	mov	r0, sl
 801044a:	f000 fcc7 	bl	8010ddc <__mcmp>
 801044e:	2800      	cmp	r0, #0
 8010450:	f73f adbb 	bgt.w	800ffca <_dtoa_r+0x4ca>
 8010454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010456:	9d00      	ldr	r5, [sp, #0]
 8010458:	ea6f 0b03 	mvn.w	fp, r3
 801045c:	f04f 0800 	mov.w	r8, #0
 8010460:	4631      	mov	r1, r6
 8010462:	4620      	mov	r0, r4
 8010464:	f000 fa7e 	bl	8010964 <_Bfree>
 8010468:	2f00      	cmp	r7, #0
 801046a:	f43f aeab 	beq.w	80101c4 <_dtoa_r+0x6c4>
 801046e:	f1b8 0f00 	cmp.w	r8, #0
 8010472:	d005      	beq.n	8010480 <_dtoa_r+0x980>
 8010474:	45b8      	cmp	r8, r7
 8010476:	d003      	beq.n	8010480 <_dtoa_r+0x980>
 8010478:	4641      	mov	r1, r8
 801047a:	4620      	mov	r0, r4
 801047c:	f000 fa72 	bl	8010964 <_Bfree>
 8010480:	4639      	mov	r1, r7
 8010482:	4620      	mov	r0, r4
 8010484:	f000 fa6e 	bl	8010964 <_Bfree>
 8010488:	e69c      	b.n	80101c4 <_dtoa_r+0x6c4>
 801048a:	2600      	movs	r6, #0
 801048c:	4637      	mov	r7, r6
 801048e:	e7e1      	b.n	8010454 <_dtoa_r+0x954>
 8010490:	46bb      	mov	fp, r7
 8010492:	4637      	mov	r7, r6
 8010494:	e599      	b.n	800ffca <_dtoa_r+0x4ca>
 8010496:	bf00      	nop
 8010498:	40240000 	.word	0x40240000
 801049c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801049e:	2b00      	cmp	r3, #0
 80104a0:	f000 80c8 	beq.w	8010634 <_dtoa_r+0xb34>
 80104a4:	9b04      	ldr	r3, [sp, #16]
 80104a6:	9301      	str	r3, [sp, #4]
 80104a8:	2d00      	cmp	r5, #0
 80104aa:	dd05      	ble.n	80104b8 <_dtoa_r+0x9b8>
 80104ac:	4639      	mov	r1, r7
 80104ae:	462a      	mov	r2, r5
 80104b0:	4620      	mov	r0, r4
 80104b2:	f000 fc27 	bl	8010d04 <__lshift>
 80104b6:	4607      	mov	r7, r0
 80104b8:	f1b8 0f00 	cmp.w	r8, #0
 80104bc:	d05b      	beq.n	8010576 <_dtoa_r+0xa76>
 80104be:	6879      	ldr	r1, [r7, #4]
 80104c0:	4620      	mov	r0, r4
 80104c2:	f000 fa0f 	bl	80108e4 <_Balloc>
 80104c6:	4605      	mov	r5, r0
 80104c8:	b928      	cbnz	r0, 80104d6 <_dtoa_r+0x9d6>
 80104ca:	4b83      	ldr	r3, [pc, #524]	; (80106d8 <_dtoa_r+0xbd8>)
 80104cc:	4602      	mov	r2, r0
 80104ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 80104d2:	f7ff bb2e 	b.w	800fb32 <_dtoa_r+0x32>
 80104d6:	693a      	ldr	r2, [r7, #16]
 80104d8:	3202      	adds	r2, #2
 80104da:	0092      	lsls	r2, r2, #2
 80104dc:	f107 010c 	add.w	r1, r7, #12
 80104e0:	300c      	adds	r0, #12
 80104e2:	f7ff fa56 	bl	800f992 <memcpy>
 80104e6:	2201      	movs	r2, #1
 80104e8:	4629      	mov	r1, r5
 80104ea:	4620      	mov	r0, r4
 80104ec:	f000 fc0a 	bl	8010d04 <__lshift>
 80104f0:	9b00      	ldr	r3, [sp, #0]
 80104f2:	3301      	adds	r3, #1
 80104f4:	9304      	str	r3, [sp, #16]
 80104f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104fa:	4413      	add	r3, r2
 80104fc:	9308      	str	r3, [sp, #32]
 80104fe:	9b02      	ldr	r3, [sp, #8]
 8010500:	f003 0301 	and.w	r3, r3, #1
 8010504:	46b8      	mov	r8, r7
 8010506:	9306      	str	r3, [sp, #24]
 8010508:	4607      	mov	r7, r0
 801050a:	9b04      	ldr	r3, [sp, #16]
 801050c:	4631      	mov	r1, r6
 801050e:	3b01      	subs	r3, #1
 8010510:	4650      	mov	r0, sl
 8010512:	9301      	str	r3, [sp, #4]
 8010514:	f7ff fa6a 	bl	800f9ec <quorem>
 8010518:	4641      	mov	r1, r8
 801051a:	9002      	str	r0, [sp, #8]
 801051c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010520:	4650      	mov	r0, sl
 8010522:	f000 fc5b 	bl	8010ddc <__mcmp>
 8010526:	463a      	mov	r2, r7
 8010528:	9005      	str	r0, [sp, #20]
 801052a:	4631      	mov	r1, r6
 801052c:	4620      	mov	r0, r4
 801052e:	f000 fc71 	bl	8010e14 <__mdiff>
 8010532:	68c2      	ldr	r2, [r0, #12]
 8010534:	4605      	mov	r5, r0
 8010536:	bb02      	cbnz	r2, 801057a <_dtoa_r+0xa7a>
 8010538:	4601      	mov	r1, r0
 801053a:	4650      	mov	r0, sl
 801053c:	f000 fc4e 	bl	8010ddc <__mcmp>
 8010540:	4602      	mov	r2, r0
 8010542:	4629      	mov	r1, r5
 8010544:	4620      	mov	r0, r4
 8010546:	9209      	str	r2, [sp, #36]	; 0x24
 8010548:	f000 fa0c 	bl	8010964 <_Bfree>
 801054c:	9b07      	ldr	r3, [sp, #28]
 801054e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010550:	9d04      	ldr	r5, [sp, #16]
 8010552:	ea43 0102 	orr.w	r1, r3, r2
 8010556:	9b06      	ldr	r3, [sp, #24]
 8010558:	4319      	orrs	r1, r3
 801055a:	d110      	bne.n	801057e <_dtoa_r+0xa7e>
 801055c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010560:	d029      	beq.n	80105b6 <_dtoa_r+0xab6>
 8010562:	9b05      	ldr	r3, [sp, #20]
 8010564:	2b00      	cmp	r3, #0
 8010566:	dd02      	ble.n	801056e <_dtoa_r+0xa6e>
 8010568:	9b02      	ldr	r3, [sp, #8]
 801056a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801056e:	9b01      	ldr	r3, [sp, #4]
 8010570:	f883 9000 	strb.w	r9, [r3]
 8010574:	e774      	b.n	8010460 <_dtoa_r+0x960>
 8010576:	4638      	mov	r0, r7
 8010578:	e7ba      	b.n	80104f0 <_dtoa_r+0x9f0>
 801057a:	2201      	movs	r2, #1
 801057c:	e7e1      	b.n	8010542 <_dtoa_r+0xa42>
 801057e:	9b05      	ldr	r3, [sp, #20]
 8010580:	2b00      	cmp	r3, #0
 8010582:	db04      	blt.n	801058e <_dtoa_r+0xa8e>
 8010584:	9907      	ldr	r1, [sp, #28]
 8010586:	430b      	orrs	r3, r1
 8010588:	9906      	ldr	r1, [sp, #24]
 801058a:	430b      	orrs	r3, r1
 801058c:	d120      	bne.n	80105d0 <_dtoa_r+0xad0>
 801058e:	2a00      	cmp	r2, #0
 8010590:	dded      	ble.n	801056e <_dtoa_r+0xa6e>
 8010592:	4651      	mov	r1, sl
 8010594:	2201      	movs	r2, #1
 8010596:	4620      	mov	r0, r4
 8010598:	f000 fbb4 	bl	8010d04 <__lshift>
 801059c:	4631      	mov	r1, r6
 801059e:	4682      	mov	sl, r0
 80105a0:	f000 fc1c 	bl	8010ddc <__mcmp>
 80105a4:	2800      	cmp	r0, #0
 80105a6:	dc03      	bgt.n	80105b0 <_dtoa_r+0xab0>
 80105a8:	d1e1      	bne.n	801056e <_dtoa_r+0xa6e>
 80105aa:	f019 0f01 	tst.w	r9, #1
 80105ae:	d0de      	beq.n	801056e <_dtoa_r+0xa6e>
 80105b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80105b4:	d1d8      	bne.n	8010568 <_dtoa_r+0xa68>
 80105b6:	9a01      	ldr	r2, [sp, #4]
 80105b8:	2339      	movs	r3, #57	; 0x39
 80105ba:	7013      	strb	r3, [r2, #0]
 80105bc:	462b      	mov	r3, r5
 80105be:	461d      	mov	r5, r3
 80105c0:	3b01      	subs	r3, #1
 80105c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80105c6:	2a39      	cmp	r2, #57	; 0x39
 80105c8:	d06c      	beq.n	80106a4 <_dtoa_r+0xba4>
 80105ca:	3201      	adds	r2, #1
 80105cc:	701a      	strb	r2, [r3, #0]
 80105ce:	e747      	b.n	8010460 <_dtoa_r+0x960>
 80105d0:	2a00      	cmp	r2, #0
 80105d2:	dd07      	ble.n	80105e4 <_dtoa_r+0xae4>
 80105d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80105d8:	d0ed      	beq.n	80105b6 <_dtoa_r+0xab6>
 80105da:	9a01      	ldr	r2, [sp, #4]
 80105dc:	f109 0301 	add.w	r3, r9, #1
 80105e0:	7013      	strb	r3, [r2, #0]
 80105e2:	e73d      	b.n	8010460 <_dtoa_r+0x960>
 80105e4:	9b04      	ldr	r3, [sp, #16]
 80105e6:	9a08      	ldr	r2, [sp, #32]
 80105e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80105ec:	4293      	cmp	r3, r2
 80105ee:	d043      	beq.n	8010678 <_dtoa_r+0xb78>
 80105f0:	4651      	mov	r1, sl
 80105f2:	2300      	movs	r3, #0
 80105f4:	220a      	movs	r2, #10
 80105f6:	4620      	mov	r0, r4
 80105f8:	f000 f9d6 	bl	80109a8 <__multadd>
 80105fc:	45b8      	cmp	r8, r7
 80105fe:	4682      	mov	sl, r0
 8010600:	f04f 0300 	mov.w	r3, #0
 8010604:	f04f 020a 	mov.w	r2, #10
 8010608:	4641      	mov	r1, r8
 801060a:	4620      	mov	r0, r4
 801060c:	d107      	bne.n	801061e <_dtoa_r+0xb1e>
 801060e:	f000 f9cb 	bl	80109a8 <__multadd>
 8010612:	4680      	mov	r8, r0
 8010614:	4607      	mov	r7, r0
 8010616:	9b04      	ldr	r3, [sp, #16]
 8010618:	3301      	adds	r3, #1
 801061a:	9304      	str	r3, [sp, #16]
 801061c:	e775      	b.n	801050a <_dtoa_r+0xa0a>
 801061e:	f000 f9c3 	bl	80109a8 <__multadd>
 8010622:	4639      	mov	r1, r7
 8010624:	4680      	mov	r8, r0
 8010626:	2300      	movs	r3, #0
 8010628:	220a      	movs	r2, #10
 801062a:	4620      	mov	r0, r4
 801062c:	f000 f9bc 	bl	80109a8 <__multadd>
 8010630:	4607      	mov	r7, r0
 8010632:	e7f0      	b.n	8010616 <_dtoa_r+0xb16>
 8010634:	9b04      	ldr	r3, [sp, #16]
 8010636:	9301      	str	r3, [sp, #4]
 8010638:	9d00      	ldr	r5, [sp, #0]
 801063a:	4631      	mov	r1, r6
 801063c:	4650      	mov	r0, sl
 801063e:	f7ff f9d5 	bl	800f9ec <quorem>
 8010642:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010646:	9b00      	ldr	r3, [sp, #0]
 8010648:	f805 9b01 	strb.w	r9, [r5], #1
 801064c:	1aea      	subs	r2, r5, r3
 801064e:	9b01      	ldr	r3, [sp, #4]
 8010650:	4293      	cmp	r3, r2
 8010652:	dd07      	ble.n	8010664 <_dtoa_r+0xb64>
 8010654:	4651      	mov	r1, sl
 8010656:	2300      	movs	r3, #0
 8010658:	220a      	movs	r2, #10
 801065a:	4620      	mov	r0, r4
 801065c:	f000 f9a4 	bl	80109a8 <__multadd>
 8010660:	4682      	mov	sl, r0
 8010662:	e7ea      	b.n	801063a <_dtoa_r+0xb3a>
 8010664:	9b01      	ldr	r3, [sp, #4]
 8010666:	2b00      	cmp	r3, #0
 8010668:	bfc8      	it	gt
 801066a:	461d      	movgt	r5, r3
 801066c:	9b00      	ldr	r3, [sp, #0]
 801066e:	bfd8      	it	le
 8010670:	2501      	movle	r5, #1
 8010672:	441d      	add	r5, r3
 8010674:	f04f 0800 	mov.w	r8, #0
 8010678:	4651      	mov	r1, sl
 801067a:	2201      	movs	r2, #1
 801067c:	4620      	mov	r0, r4
 801067e:	f000 fb41 	bl	8010d04 <__lshift>
 8010682:	4631      	mov	r1, r6
 8010684:	4682      	mov	sl, r0
 8010686:	f000 fba9 	bl	8010ddc <__mcmp>
 801068a:	2800      	cmp	r0, #0
 801068c:	dc96      	bgt.n	80105bc <_dtoa_r+0xabc>
 801068e:	d102      	bne.n	8010696 <_dtoa_r+0xb96>
 8010690:	f019 0f01 	tst.w	r9, #1
 8010694:	d192      	bne.n	80105bc <_dtoa_r+0xabc>
 8010696:	462b      	mov	r3, r5
 8010698:	461d      	mov	r5, r3
 801069a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801069e:	2a30      	cmp	r2, #48	; 0x30
 80106a0:	d0fa      	beq.n	8010698 <_dtoa_r+0xb98>
 80106a2:	e6dd      	b.n	8010460 <_dtoa_r+0x960>
 80106a4:	9a00      	ldr	r2, [sp, #0]
 80106a6:	429a      	cmp	r2, r3
 80106a8:	d189      	bne.n	80105be <_dtoa_r+0xabe>
 80106aa:	f10b 0b01 	add.w	fp, fp, #1
 80106ae:	2331      	movs	r3, #49	; 0x31
 80106b0:	e796      	b.n	80105e0 <_dtoa_r+0xae0>
 80106b2:	4b0a      	ldr	r3, [pc, #40]	; (80106dc <_dtoa_r+0xbdc>)
 80106b4:	f7ff ba99 	b.w	800fbea <_dtoa_r+0xea>
 80106b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	f47f aa6d 	bne.w	800fb9a <_dtoa_r+0x9a>
 80106c0:	4b07      	ldr	r3, [pc, #28]	; (80106e0 <_dtoa_r+0xbe0>)
 80106c2:	f7ff ba92 	b.w	800fbea <_dtoa_r+0xea>
 80106c6:	9b01      	ldr	r3, [sp, #4]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	dcb5      	bgt.n	8010638 <_dtoa_r+0xb38>
 80106cc:	9b07      	ldr	r3, [sp, #28]
 80106ce:	2b02      	cmp	r3, #2
 80106d0:	f73f aeb1 	bgt.w	8010436 <_dtoa_r+0x936>
 80106d4:	e7b0      	b.n	8010638 <_dtoa_r+0xb38>
 80106d6:	bf00      	nop
 80106d8:	080124c6 	.word	0x080124c6
 80106dc:	08012390 	.word	0x08012390
 80106e0:	08012461 	.word	0x08012461

080106e4 <_free_r>:
 80106e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80106e6:	2900      	cmp	r1, #0
 80106e8:	d044      	beq.n	8010774 <_free_r+0x90>
 80106ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106ee:	9001      	str	r0, [sp, #4]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	f1a1 0404 	sub.w	r4, r1, #4
 80106f6:	bfb8      	it	lt
 80106f8:	18e4      	addlt	r4, r4, r3
 80106fa:	f000 f8e7 	bl	80108cc <__malloc_lock>
 80106fe:	4a1e      	ldr	r2, [pc, #120]	; (8010778 <_free_r+0x94>)
 8010700:	9801      	ldr	r0, [sp, #4]
 8010702:	6813      	ldr	r3, [r2, #0]
 8010704:	b933      	cbnz	r3, 8010714 <_free_r+0x30>
 8010706:	6063      	str	r3, [r4, #4]
 8010708:	6014      	str	r4, [r2, #0]
 801070a:	b003      	add	sp, #12
 801070c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010710:	f000 b8e2 	b.w	80108d8 <__malloc_unlock>
 8010714:	42a3      	cmp	r3, r4
 8010716:	d908      	bls.n	801072a <_free_r+0x46>
 8010718:	6825      	ldr	r5, [r4, #0]
 801071a:	1961      	adds	r1, r4, r5
 801071c:	428b      	cmp	r3, r1
 801071e:	bf01      	itttt	eq
 8010720:	6819      	ldreq	r1, [r3, #0]
 8010722:	685b      	ldreq	r3, [r3, #4]
 8010724:	1949      	addeq	r1, r1, r5
 8010726:	6021      	streq	r1, [r4, #0]
 8010728:	e7ed      	b.n	8010706 <_free_r+0x22>
 801072a:	461a      	mov	r2, r3
 801072c:	685b      	ldr	r3, [r3, #4]
 801072e:	b10b      	cbz	r3, 8010734 <_free_r+0x50>
 8010730:	42a3      	cmp	r3, r4
 8010732:	d9fa      	bls.n	801072a <_free_r+0x46>
 8010734:	6811      	ldr	r1, [r2, #0]
 8010736:	1855      	adds	r5, r2, r1
 8010738:	42a5      	cmp	r5, r4
 801073a:	d10b      	bne.n	8010754 <_free_r+0x70>
 801073c:	6824      	ldr	r4, [r4, #0]
 801073e:	4421      	add	r1, r4
 8010740:	1854      	adds	r4, r2, r1
 8010742:	42a3      	cmp	r3, r4
 8010744:	6011      	str	r1, [r2, #0]
 8010746:	d1e0      	bne.n	801070a <_free_r+0x26>
 8010748:	681c      	ldr	r4, [r3, #0]
 801074a:	685b      	ldr	r3, [r3, #4]
 801074c:	6053      	str	r3, [r2, #4]
 801074e:	440c      	add	r4, r1
 8010750:	6014      	str	r4, [r2, #0]
 8010752:	e7da      	b.n	801070a <_free_r+0x26>
 8010754:	d902      	bls.n	801075c <_free_r+0x78>
 8010756:	230c      	movs	r3, #12
 8010758:	6003      	str	r3, [r0, #0]
 801075a:	e7d6      	b.n	801070a <_free_r+0x26>
 801075c:	6825      	ldr	r5, [r4, #0]
 801075e:	1961      	adds	r1, r4, r5
 8010760:	428b      	cmp	r3, r1
 8010762:	bf04      	itt	eq
 8010764:	6819      	ldreq	r1, [r3, #0]
 8010766:	685b      	ldreq	r3, [r3, #4]
 8010768:	6063      	str	r3, [r4, #4]
 801076a:	bf04      	itt	eq
 801076c:	1949      	addeq	r1, r1, r5
 801076e:	6021      	streq	r1, [r4, #0]
 8010770:	6054      	str	r4, [r2, #4]
 8010772:	e7ca      	b.n	801070a <_free_r+0x26>
 8010774:	b003      	add	sp, #12
 8010776:	bd30      	pop	{r4, r5, pc}
 8010778:	200035cc 	.word	0x200035cc

0801077c <malloc>:
 801077c:	4b02      	ldr	r3, [pc, #8]	; (8010788 <malloc+0xc>)
 801077e:	4601      	mov	r1, r0
 8010780:	6818      	ldr	r0, [r3, #0]
 8010782:	f000 b823 	b.w	80107cc <_malloc_r>
 8010786:	bf00      	nop
 8010788:	2000012c 	.word	0x2000012c

0801078c <sbrk_aligned>:
 801078c:	b570      	push	{r4, r5, r6, lr}
 801078e:	4e0e      	ldr	r6, [pc, #56]	; (80107c8 <sbrk_aligned+0x3c>)
 8010790:	460c      	mov	r4, r1
 8010792:	6831      	ldr	r1, [r6, #0]
 8010794:	4605      	mov	r5, r0
 8010796:	b911      	cbnz	r1, 801079e <sbrk_aligned+0x12>
 8010798:	f001 f81a 	bl	80117d0 <_sbrk_r>
 801079c:	6030      	str	r0, [r6, #0]
 801079e:	4621      	mov	r1, r4
 80107a0:	4628      	mov	r0, r5
 80107a2:	f001 f815 	bl	80117d0 <_sbrk_r>
 80107a6:	1c43      	adds	r3, r0, #1
 80107a8:	d00a      	beq.n	80107c0 <sbrk_aligned+0x34>
 80107aa:	1cc4      	adds	r4, r0, #3
 80107ac:	f024 0403 	bic.w	r4, r4, #3
 80107b0:	42a0      	cmp	r0, r4
 80107b2:	d007      	beq.n	80107c4 <sbrk_aligned+0x38>
 80107b4:	1a21      	subs	r1, r4, r0
 80107b6:	4628      	mov	r0, r5
 80107b8:	f001 f80a 	bl	80117d0 <_sbrk_r>
 80107bc:	3001      	adds	r0, #1
 80107be:	d101      	bne.n	80107c4 <sbrk_aligned+0x38>
 80107c0:	f04f 34ff 	mov.w	r4, #4294967295
 80107c4:	4620      	mov	r0, r4
 80107c6:	bd70      	pop	{r4, r5, r6, pc}
 80107c8:	200035d0 	.word	0x200035d0

080107cc <_malloc_r>:
 80107cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107d0:	1ccd      	adds	r5, r1, #3
 80107d2:	f025 0503 	bic.w	r5, r5, #3
 80107d6:	3508      	adds	r5, #8
 80107d8:	2d0c      	cmp	r5, #12
 80107da:	bf38      	it	cc
 80107dc:	250c      	movcc	r5, #12
 80107de:	2d00      	cmp	r5, #0
 80107e0:	4607      	mov	r7, r0
 80107e2:	db01      	blt.n	80107e8 <_malloc_r+0x1c>
 80107e4:	42a9      	cmp	r1, r5
 80107e6:	d905      	bls.n	80107f4 <_malloc_r+0x28>
 80107e8:	230c      	movs	r3, #12
 80107ea:	603b      	str	r3, [r7, #0]
 80107ec:	2600      	movs	r6, #0
 80107ee:	4630      	mov	r0, r6
 80107f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80108c8 <_malloc_r+0xfc>
 80107f8:	f000 f868 	bl	80108cc <__malloc_lock>
 80107fc:	f8d8 3000 	ldr.w	r3, [r8]
 8010800:	461c      	mov	r4, r3
 8010802:	bb5c      	cbnz	r4, 801085c <_malloc_r+0x90>
 8010804:	4629      	mov	r1, r5
 8010806:	4638      	mov	r0, r7
 8010808:	f7ff ffc0 	bl	801078c <sbrk_aligned>
 801080c:	1c43      	adds	r3, r0, #1
 801080e:	4604      	mov	r4, r0
 8010810:	d155      	bne.n	80108be <_malloc_r+0xf2>
 8010812:	f8d8 4000 	ldr.w	r4, [r8]
 8010816:	4626      	mov	r6, r4
 8010818:	2e00      	cmp	r6, #0
 801081a:	d145      	bne.n	80108a8 <_malloc_r+0xdc>
 801081c:	2c00      	cmp	r4, #0
 801081e:	d048      	beq.n	80108b2 <_malloc_r+0xe6>
 8010820:	6823      	ldr	r3, [r4, #0]
 8010822:	4631      	mov	r1, r6
 8010824:	4638      	mov	r0, r7
 8010826:	eb04 0903 	add.w	r9, r4, r3
 801082a:	f000 ffd1 	bl	80117d0 <_sbrk_r>
 801082e:	4581      	cmp	r9, r0
 8010830:	d13f      	bne.n	80108b2 <_malloc_r+0xe6>
 8010832:	6821      	ldr	r1, [r4, #0]
 8010834:	1a6d      	subs	r5, r5, r1
 8010836:	4629      	mov	r1, r5
 8010838:	4638      	mov	r0, r7
 801083a:	f7ff ffa7 	bl	801078c <sbrk_aligned>
 801083e:	3001      	adds	r0, #1
 8010840:	d037      	beq.n	80108b2 <_malloc_r+0xe6>
 8010842:	6823      	ldr	r3, [r4, #0]
 8010844:	442b      	add	r3, r5
 8010846:	6023      	str	r3, [r4, #0]
 8010848:	f8d8 3000 	ldr.w	r3, [r8]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d038      	beq.n	80108c2 <_malloc_r+0xf6>
 8010850:	685a      	ldr	r2, [r3, #4]
 8010852:	42a2      	cmp	r2, r4
 8010854:	d12b      	bne.n	80108ae <_malloc_r+0xe2>
 8010856:	2200      	movs	r2, #0
 8010858:	605a      	str	r2, [r3, #4]
 801085a:	e00f      	b.n	801087c <_malloc_r+0xb0>
 801085c:	6822      	ldr	r2, [r4, #0]
 801085e:	1b52      	subs	r2, r2, r5
 8010860:	d41f      	bmi.n	80108a2 <_malloc_r+0xd6>
 8010862:	2a0b      	cmp	r2, #11
 8010864:	d917      	bls.n	8010896 <_malloc_r+0xca>
 8010866:	1961      	adds	r1, r4, r5
 8010868:	42a3      	cmp	r3, r4
 801086a:	6025      	str	r5, [r4, #0]
 801086c:	bf18      	it	ne
 801086e:	6059      	strne	r1, [r3, #4]
 8010870:	6863      	ldr	r3, [r4, #4]
 8010872:	bf08      	it	eq
 8010874:	f8c8 1000 	streq.w	r1, [r8]
 8010878:	5162      	str	r2, [r4, r5]
 801087a:	604b      	str	r3, [r1, #4]
 801087c:	4638      	mov	r0, r7
 801087e:	f104 060b 	add.w	r6, r4, #11
 8010882:	f000 f829 	bl	80108d8 <__malloc_unlock>
 8010886:	f026 0607 	bic.w	r6, r6, #7
 801088a:	1d23      	adds	r3, r4, #4
 801088c:	1af2      	subs	r2, r6, r3
 801088e:	d0ae      	beq.n	80107ee <_malloc_r+0x22>
 8010890:	1b9b      	subs	r3, r3, r6
 8010892:	50a3      	str	r3, [r4, r2]
 8010894:	e7ab      	b.n	80107ee <_malloc_r+0x22>
 8010896:	42a3      	cmp	r3, r4
 8010898:	6862      	ldr	r2, [r4, #4]
 801089a:	d1dd      	bne.n	8010858 <_malloc_r+0x8c>
 801089c:	f8c8 2000 	str.w	r2, [r8]
 80108a0:	e7ec      	b.n	801087c <_malloc_r+0xb0>
 80108a2:	4623      	mov	r3, r4
 80108a4:	6864      	ldr	r4, [r4, #4]
 80108a6:	e7ac      	b.n	8010802 <_malloc_r+0x36>
 80108a8:	4634      	mov	r4, r6
 80108aa:	6876      	ldr	r6, [r6, #4]
 80108ac:	e7b4      	b.n	8010818 <_malloc_r+0x4c>
 80108ae:	4613      	mov	r3, r2
 80108b0:	e7cc      	b.n	801084c <_malloc_r+0x80>
 80108b2:	230c      	movs	r3, #12
 80108b4:	603b      	str	r3, [r7, #0]
 80108b6:	4638      	mov	r0, r7
 80108b8:	f000 f80e 	bl	80108d8 <__malloc_unlock>
 80108bc:	e797      	b.n	80107ee <_malloc_r+0x22>
 80108be:	6025      	str	r5, [r4, #0]
 80108c0:	e7dc      	b.n	801087c <_malloc_r+0xb0>
 80108c2:	605b      	str	r3, [r3, #4]
 80108c4:	deff      	udf	#255	; 0xff
 80108c6:	bf00      	nop
 80108c8:	200035cc 	.word	0x200035cc

080108cc <__malloc_lock>:
 80108cc:	4801      	ldr	r0, [pc, #4]	; (80108d4 <__malloc_lock+0x8>)
 80108ce:	f7ff b85e 	b.w	800f98e <__retarget_lock_acquire_recursive>
 80108d2:	bf00      	nop
 80108d4:	200035c8 	.word	0x200035c8

080108d8 <__malloc_unlock>:
 80108d8:	4801      	ldr	r0, [pc, #4]	; (80108e0 <__malloc_unlock+0x8>)
 80108da:	f7ff b859 	b.w	800f990 <__retarget_lock_release_recursive>
 80108de:	bf00      	nop
 80108e0:	200035c8 	.word	0x200035c8

080108e4 <_Balloc>:
 80108e4:	b570      	push	{r4, r5, r6, lr}
 80108e6:	69c6      	ldr	r6, [r0, #28]
 80108e8:	4604      	mov	r4, r0
 80108ea:	460d      	mov	r5, r1
 80108ec:	b976      	cbnz	r6, 801090c <_Balloc+0x28>
 80108ee:	2010      	movs	r0, #16
 80108f0:	f7ff ff44 	bl	801077c <malloc>
 80108f4:	4602      	mov	r2, r0
 80108f6:	61e0      	str	r0, [r4, #28]
 80108f8:	b920      	cbnz	r0, 8010904 <_Balloc+0x20>
 80108fa:	4b18      	ldr	r3, [pc, #96]	; (801095c <_Balloc+0x78>)
 80108fc:	4818      	ldr	r0, [pc, #96]	; (8010960 <_Balloc+0x7c>)
 80108fe:	216b      	movs	r1, #107	; 0x6b
 8010900:	f7ff f856 	bl	800f9b0 <__assert_func>
 8010904:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010908:	6006      	str	r6, [r0, #0]
 801090a:	60c6      	str	r6, [r0, #12]
 801090c:	69e6      	ldr	r6, [r4, #28]
 801090e:	68f3      	ldr	r3, [r6, #12]
 8010910:	b183      	cbz	r3, 8010934 <_Balloc+0x50>
 8010912:	69e3      	ldr	r3, [r4, #28]
 8010914:	68db      	ldr	r3, [r3, #12]
 8010916:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801091a:	b9b8      	cbnz	r0, 801094c <_Balloc+0x68>
 801091c:	2101      	movs	r1, #1
 801091e:	fa01 f605 	lsl.w	r6, r1, r5
 8010922:	1d72      	adds	r2, r6, #5
 8010924:	0092      	lsls	r2, r2, #2
 8010926:	4620      	mov	r0, r4
 8010928:	f000 ff69 	bl	80117fe <_calloc_r>
 801092c:	b160      	cbz	r0, 8010948 <_Balloc+0x64>
 801092e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010932:	e00e      	b.n	8010952 <_Balloc+0x6e>
 8010934:	2221      	movs	r2, #33	; 0x21
 8010936:	2104      	movs	r1, #4
 8010938:	4620      	mov	r0, r4
 801093a:	f000 ff60 	bl	80117fe <_calloc_r>
 801093e:	69e3      	ldr	r3, [r4, #28]
 8010940:	60f0      	str	r0, [r6, #12]
 8010942:	68db      	ldr	r3, [r3, #12]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d1e4      	bne.n	8010912 <_Balloc+0x2e>
 8010948:	2000      	movs	r0, #0
 801094a:	bd70      	pop	{r4, r5, r6, pc}
 801094c:	6802      	ldr	r2, [r0, #0]
 801094e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010952:	2300      	movs	r3, #0
 8010954:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010958:	e7f7      	b.n	801094a <_Balloc+0x66>
 801095a:	bf00      	nop
 801095c:	080123b4 	.word	0x080123b4
 8010960:	080124d7 	.word	0x080124d7

08010964 <_Bfree>:
 8010964:	b570      	push	{r4, r5, r6, lr}
 8010966:	69c6      	ldr	r6, [r0, #28]
 8010968:	4605      	mov	r5, r0
 801096a:	460c      	mov	r4, r1
 801096c:	b976      	cbnz	r6, 801098c <_Bfree+0x28>
 801096e:	2010      	movs	r0, #16
 8010970:	f7ff ff04 	bl	801077c <malloc>
 8010974:	4602      	mov	r2, r0
 8010976:	61e8      	str	r0, [r5, #28]
 8010978:	b920      	cbnz	r0, 8010984 <_Bfree+0x20>
 801097a:	4b09      	ldr	r3, [pc, #36]	; (80109a0 <_Bfree+0x3c>)
 801097c:	4809      	ldr	r0, [pc, #36]	; (80109a4 <_Bfree+0x40>)
 801097e:	218f      	movs	r1, #143	; 0x8f
 8010980:	f7ff f816 	bl	800f9b0 <__assert_func>
 8010984:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010988:	6006      	str	r6, [r0, #0]
 801098a:	60c6      	str	r6, [r0, #12]
 801098c:	b13c      	cbz	r4, 801099e <_Bfree+0x3a>
 801098e:	69eb      	ldr	r3, [r5, #28]
 8010990:	6862      	ldr	r2, [r4, #4]
 8010992:	68db      	ldr	r3, [r3, #12]
 8010994:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010998:	6021      	str	r1, [r4, #0]
 801099a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801099e:	bd70      	pop	{r4, r5, r6, pc}
 80109a0:	080123b4 	.word	0x080123b4
 80109a4:	080124d7 	.word	0x080124d7

080109a8 <__multadd>:
 80109a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109ac:	690d      	ldr	r5, [r1, #16]
 80109ae:	4607      	mov	r7, r0
 80109b0:	460c      	mov	r4, r1
 80109b2:	461e      	mov	r6, r3
 80109b4:	f101 0c14 	add.w	ip, r1, #20
 80109b8:	2000      	movs	r0, #0
 80109ba:	f8dc 3000 	ldr.w	r3, [ip]
 80109be:	b299      	uxth	r1, r3
 80109c0:	fb02 6101 	mla	r1, r2, r1, r6
 80109c4:	0c1e      	lsrs	r6, r3, #16
 80109c6:	0c0b      	lsrs	r3, r1, #16
 80109c8:	fb02 3306 	mla	r3, r2, r6, r3
 80109cc:	b289      	uxth	r1, r1
 80109ce:	3001      	adds	r0, #1
 80109d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80109d4:	4285      	cmp	r5, r0
 80109d6:	f84c 1b04 	str.w	r1, [ip], #4
 80109da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80109de:	dcec      	bgt.n	80109ba <__multadd+0x12>
 80109e0:	b30e      	cbz	r6, 8010a26 <__multadd+0x7e>
 80109e2:	68a3      	ldr	r3, [r4, #8]
 80109e4:	42ab      	cmp	r3, r5
 80109e6:	dc19      	bgt.n	8010a1c <__multadd+0x74>
 80109e8:	6861      	ldr	r1, [r4, #4]
 80109ea:	4638      	mov	r0, r7
 80109ec:	3101      	adds	r1, #1
 80109ee:	f7ff ff79 	bl	80108e4 <_Balloc>
 80109f2:	4680      	mov	r8, r0
 80109f4:	b928      	cbnz	r0, 8010a02 <__multadd+0x5a>
 80109f6:	4602      	mov	r2, r0
 80109f8:	4b0c      	ldr	r3, [pc, #48]	; (8010a2c <__multadd+0x84>)
 80109fa:	480d      	ldr	r0, [pc, #52]	; (8010a30 <__multadd+0x88>)
 80109fc:	21ba      	movs	r1, #186	; 0xba
 80109fe:	f7fe ffd7 	bl	800f9b0 <__assert_func>
 8010a02:	6922      	ldr	r2, [r4, #16]
 8010a04:	3202      	adds	r2, #2
 8010a06:	f104 010c 	add.w	r1, r4, #12
 8010a0a:	0092      	lsls	r2, r2, #2
 8010a0c:	300c      	adds	r0, #12
 8010a0e:	f7fe ffc0 	bl	800f992 <memcpy>
 8010a12:	4621      	mov	r1, r4
 8010a14:	4638      	mov	r0, r7
 8010a16:	f7ff ffa5 	bl	8010964 <_Bfree>
 8010a1a:	4644      	mov	r4, r8
 8010a1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010a20:	3501      	adds	r5, #1
 8010a22:	615e      	str	r6, [r3, #20]
 8010a24:	6125      	str	r5, [r4, #16]
 8010a26:	4620      	mov	r0, r4
 8010a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a2c:	080124c6 	.word	0x080124c6
 8010a30:	080124d7 	.word	0x080124d7

08010a34 <__hi0bits>:
 8010a34:	0c03      	lsrs	r3, r0, #16
 8010a36:	041b      	lsls	r3, r3, #16
 8010a38:	b9d3      	cbnz	r3, 8010a70 <__hi0bits+0x3c>
 8010a3a:	0400      	lsls	r0, r0, #16
 8010a3c:	2310      	movs	r3, #16
 8010a3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010a42:	bf04      	itt	eq
 8010a44:	0200      	lsleq	r0, r0, #8
 8010a46:	3308      	addeq	r3, #8
 8010a48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010a4c:	bf04      	itt	eq
 8010a4e:	0100      	lsleq	r0, r0, #4
 8010a50:	3304      	addeq	r3, #4
 8010a52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010a56:	bf04      	itt	eq
 8010a58:	0080      	lsleq	r0, r0, #2
 8010a5a:	3302      	addeq	r3, #2
 8010a5c:	2800      	cmp	r0, #0
 8010a5e:	db05      	blt.n	8010a6c <__hi0bits+0x38>
 8010a60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010a64:	f103 0301 	add.w	r3, r3, #1
 8010a68:	bf08      	it	eq
 8010a6a:	2320      	moveq	r3, #32
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	4770      	bx	lr
 8010a70:	2300      	movs	r3, #0
 8010a72:	e7e4      	b.n	8010a3e <__hi0bits+0xa>

08010a74 <__lo0bits>:
 8010a74:	6803      	ldr	r3, [r0, #0]
 8010a76:	f013 0207 	ands.w	r2, r3, #7
 8010a7a:	d00c      	beq.n	8010a96 <__lo0bits+0x22>
 8010a7c:	07d9      	lsls	r1, r3, #31
 8010a7e:	d422      	bmi.n	8010ac6 <__lo0bits+0x52>
 8010a80:	079a      	lsls	r2, r3, #30
 8010a82:	bf49      	itett	mi
 8010a84:	085b      	lsrmi	r3, r3, #1
 8010a86:	089b      	lsrpl	r3, r3, #2
 8010a88:	6003      	strmi	r3, [r0, #0]
 8010a8a:	2201      	movmi	r2, #1
 8010a8c:	bf5c      	itt	pl
 8010a8e:	6003      	strpl	r3, [r0, #0]
 8010a90:	2202      	movpl	r2, #2
 8010a92:	4610      	mov	r0, r2
 8010a94:	4770      	bx	lr
 8010a96:	b299      	uxth	r1, r3
 8010a98:	b909      	cbnz	r1, 8010a9e <__lo0bits+0x2a>
 8010a9a:	0c1b      	lsrs	r3, r3, #16
 8010a9c:	2210      	movs	r2, #16
 8010a9e:	b2d9      	uxtb	r1, r3
 8010aa0:	b909      	cbnz	r1, 8010aa6 <__lo0bits+0x32>
 8010aa2:	3208      	adds	r2, #8
 8010aa4:	0a1b      	lsrs	r3, r3, #8
 8010aa6:	0719      	lsls	r1, r3, #28
 8010aa8:	bf04      	itt	eq
 8010aaa:	091b      	lsreq	r3, r3, #4
 8010aac:	3204      	addeq	r2, #4
 8010aae:	0799      	lsls	r1, r3, #30
 8010ab0:	bf04      	itt	eq
 8010ab2:	089b      	lsreq	r3, r3, #2
 8010ab4:	3202      	addeq	r2, #2
 8010ab6:	07d9      	lsls	r1, r3, #31
 8010ab8:	d403      	bmi.n	8010ac2 <__lo0bits+0x4e>
 8010aba:	085b      	lsrs	r3, r3, #1
 8010abc:	f102 0201 	add.w	r2, r2, #1
 8010ac0:	d003      	beq.n	8010aca <__lo0bits+0x56>
 8010ac2:	6003      	str	r3, [r0, #0]
 8010ac4:	e7e5      	b.n	8010a92 <__lo0bits+0x1e>
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	e7e3      	b.n	8010a92 <__lo0bits+0x1e>
 8010aca:	2220      	movs	r2, #32
 8010acc:	e7e1      	b.n	8010a92 <__lo0bits+0x1e>
	...

08010ad0 <__i2b>:
 8010ad0:	b510      	push	{r4, lr}
 8010ad2:	460c      	mov	r4, r1
 8010ad4:	2101      	movs	r1, #1
 8010ad6:	f7ff ff05 	bl	80108e4 <_Balloc>
 8010ada:	4602      	mov	r2, r0
 8010adc:	b928      	cbnz	r0, 8010aea <__i2b+0x1a>
 8010ade:	4b05      	ldr	r3, [pc, #20]	; (8010af4 <__i2b+0x24>)
 8010ae0:	4805      	ldr	r0, [pc, #20]	; (8010af8 <__i2b+0x28>)
 8010ae2:	f240 1145 	movw	r1, #325	; 0x145
 8010ae6:	f7fe ff63 	bl	800f9b0 <__assert_func>
 8010aea:	2301      	movs	r3, #1
 8010aec:	6144      	str	r4, [r0, #20]
 8010aee:	6103      	str	r3, [r0, #16]
 8010af0:	bd10      	pop	{r4, pc}
 8010af2:	bf00      	nop
 8010af4:	080124c6 	.word	0x080124c6
 8010af8:	080124d7 	.word	0x080124d7

08010afc <__multiply>:
 8010afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b00:	4691      	mov	r9, r2
 8010b02:	690a      	ldr	r2, [r1, #16]
 8010b04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010b08:	429a      	cmp	r2, r3
 8010b0a:	bfb8      	it	lt
 8010b0c:	460b      	movlt	r3, r1
 8010b0e:	460c      	mov	r4, r1
 8010b10:	bfbc      	itt	lt
 8010b12:	464c      	movlt	r4, r9
 8010b14:	4699      	movlt	r9, r3
 8010b16:	6927      	ldr	r7, [r4, #16]
 8010b18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010b1c:	68a3      	ldr	r3, [r4, #8]
 8010b1e:	6861      	ldr	r1, [r4, #4]
 8010b20:	eb07 060a 	add.w	r6, r7, sl
 8010b24:	42b3      	cmp	r3, r6
 8010b26:	b085      	sub	sp, #20
 8010b28:	bfb8      	it	lt
 8010b2a:	3101      	addlt	r1, #1
 8010b2c:	f7ff feda 	bl	80108e4 <_Balloc>
 8010b30:	b930      	cbnz	r0, 8010b40 <__multiply+0x44>
 8010b32:	4602      	mov	r2, r0
 8010b34:	4b44      	ldr	r3, [pc, #272]	; (8010c48 <__multiply+0x14c>)
 8010b36:	4845      	ldr	r0, [pc, #276]	; (8010c4c <__multiply+0x150>)
 8010b38:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010b3c:	f7fe ff38 	bl	800f9b0 <__assert_func>
 8010b40:	f100 0514 	add.w	r5, r0, #20
 8010b44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010b48:	462b      	mov	r3, r5
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	4543      	cmp	r3, r8
 8010b4e:	d321      	bcc.n	8010b94 <__multiply+0x98>
 8010b50:	f104 0314 	add.w	r3, r4, #20
 8010b54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010b58:	f109 0314 	add.w	r3, r9, #20
 8010b5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010b60:	9202      	str	r2, [sp, #8]
 8010b62:	1b3a      	subs	r2, r7, r4
 8010b64:	3a15      	subs	r2, #21
 8010b66:	f022 0203 	bic.w	r2, r2, #3
 8010b6a:	3204      	adds	r2, #4
 8010b6c:	f104 0115 	add.w	r1, r4, #21
 8010b70:	428f      	cmp	r7, r1
 8010b72:	bf38      	it	cc
 8010b74:	2204      	movcc	r2, #4
 8010b76:	9201      	str	r2, [sp, #4]
 8010b78:	9a02      	ldr	r2, [sp, #8]
 8010b7a:	9303      	str	r3, [sp, #12]
 8010b7c:	429a      	cmp	r2, r3
 8010b7e:	d80c      	bhi.n	8010b9a <__multiply+0x9e>
 8010b80:	2e00      	cmp	r6, #0
 8010b82:	dd03      	ble.n	8010b8c <__multiply+0x90>
 8010b84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d05b      	beq.n	8010c44 <__multiply+0x148>
 8010b8c:	6106      	str	r6, [r0, #16]
 8010b8e:	b005      	add	sp, #20
 8010b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b94:	f843 2b04 	str.w	r2, [r3], #4
 8010b98:	e7d8      	b.n	8010b4c <__multiply+0x50>
 8010b9a:	f8b3 a000 	ldrh.w	sl, [r3]
 8010b9e:	f1ba 0f00 	cmp.w	sl, #0
 8010ba2:	d024      	beq.n	8010bee <__multiply+0xf2>
 8010ba4:	f104 0e14 	add.w	lr, r4, #20
 8010ba8:	46a9      	mov	r9, r5
 8010baa:	f04f 0c00 	mov.w	ip, #0
 8010bae:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010bb2:	f8d9 1000 	ldr.w	r1, [r9]
 8010bb6:	fa1f fb82 	uxth.w	fp, r2
 8010bba:	b289      	uxth	r1, r1
 8010bbc:	fb0a 110b 	mla	r1, sl, fp, r1
 8010bc0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010bc4:	f8d9 2000 	ldr.w	r2, [r9]
 8010bc8:	4461      	add	r1, ip
 8010bca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010bce:	fb0a c20b 	mla	r2, sl, fp, ip
 8010bd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010bd6:	b289      	uxth	r1, r1
 8010bd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010bdc:	4577      	cmp	r7, lr
 8010bde:	f849 1b04 	str.w	r1, [r9], #4
 8010be2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010be6:	d8e2      	bhi.n	8010bae <__multiply+0xb2>
 8010be8:	9a01      	ldr	r2, [sp, #4]
 8010bea:	f845 c002 	str.w	ip, [r5, r2]
 8010bee:	9a03      	ldr	r2, [sp, #12]
 8010bf0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010bf4:	3304      	adds	r3, #4
 8010bf6:	f1b9 0f00 	cmp.w	r9, #0
 8010bfa:	d021      	beq.n	8010c40 <__multiply+0x144>
 8010bfc:	6829      	ldr	r1, [r5, #0]
 8010bfe:	f104 0c14 	add.w	ip, r4, #20
 8010c02:	46ae      	mov	lr, r5
 8010c04:	f04f 0a00 	mov.w	sl, #0
 8010c08:	f8bc b000 	ldrh.w	fp, [ip]
 8010c0c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010c10:	fb09 220b 	mla	r2, r9, fp, r2
 8010c14:	4452      	add	r2, sl
 8010c16:	b289      	uxth	r1, r1
 8010c18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010c1c:	f84e 1b04 	str.w	r1, [lr], #4
 8010c20:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010c24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010c28:	f8be 1000 	ldrh.w	r1, [lr]
 8010c2c:	fb09 110a 	mla	r1, r9, sl, r1
 8010c30:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010c34:	4567      	cmp	r7, ip
 8010c36:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010c3a:	d8e5      	bhi.n	8010c08 <__multiply+0x10c>
 8010c3c:	9a01      	ldr	r2, [sp, #4]
 8010c3e:	50a9      	str	r1, [r5, r2]
 8010c40:	3504      	adds	r5, #4
 8010c42:	e799      	b.n	8010b78 <__multiply+0x7c>
 8010c44:	3e01      	subs	r6, #1
 8010c46:	e79b      	b.n	8010b80 <__multiply+0x84>
 8010c48:	080124c6 	.word	0x080124c6
 8010c4c:	080124d7 	.word	0x080124d7

08010c50 <__pow5mult>:
 8010c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c54:	4615      	mov	r5, r2
 8010c56:	f012 0203 	ands.w	r2, r2, #3
 8010c5a:	4606      	mov	r6, r0
 8010c5c:	460f      	mov	r7, r1
 8010c5e:	d007      	beq.n	8010c70 <__pow5mult+0x20>
 8010c60:	4c25      	ldr	r4, [pc, #148]	; (8010cf8 <__pow5mult+0xa8>)
 8010c62:	3a01      	subs	r2, #1
 8010c64:	2300      	movs	r3, #0
 8010c66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010c6a:	f7ff fe9d 	bl	80109a8 <__multadd>
 8010c6e:	4607      	mov	r7, r0
 8010c70:	10ad      	asrs	r5, r5, #2
 8010c72:	d03d      	beq.n	8010cf0 <__pow5mult+0xa0>
 8010c74:	69f4      	ldr	r4, [r6, #28]
 8010c76:	b97c      	cbnz	r4, 8010c98 <__pow5mult+0x48>
 8010c78:	2010      	movs	r0, #16
 8010c7a:	f7ff fd7f 	bl	801077c <malloc>
 8010c7e:	4602      	mov	r2, r0
 8010c80:	61f0      	str	r0, [r6, #28]
 8010c82:	b928      	cbnz	r0, 8010c90 <__pow5mult+0x40>
 8010c84:	4b1d      	ldr	r3, [pc, #116]	; (8010cfc <__pow5mult+0xac>)
 8010c86:	481e      	ldr	r0, [pc, #120]	; (8010d00 <__pow5mult+0xb0>)
 8010c88:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010c8c:	f7fe fe90 	bl	800f9b0 <__assert_func>
 8010c90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010c94:	6004      	str	r4, [r0, #0]
 8010c96:	60c4      	str	r4, [r0, #12]
 8010c98:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010c9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010ca0:	b94c      	cbnz	r4, 8010cb6 <__pow5mult+0x66>
 8010ca2:	f240 2171 	movw	r1, #625	; 0x271
 8010ca6:	4630      	mov	r0, r6
 8010ca8:	f7ff ff12 	bl	8010ad0 <__i2b>
 8010cac:	2300      	movs	r3, #0
 8010cae:	f8c8 0008 	str.w	r0, [r8, #8]
 8010cb2:	4604      	mov	r4, r0
 8010cb4:	6003      	str	r3, [r0, #0]
 8010cb6:	f04f 0900 	mov.w	r9, #0
 8010cba:	07eb      	lsls	r3, r5, #31
 8010cbc:	d50a      	bpl.n	8010cd4 <__pow5mult+0x84>
 8010cbe:	4639      	mov	r1, r7
 8010cc0:	4622      	mov	r2, r4
 8010cc2:	4630      	mov	r0, r6
 8010cc4:	f7ff ff1a 	bl	8010afc <__multiply>
 8010cc8:	4639      	mov	r1, r7
 8010cca:	4680      	mov	r8, r0
 8010ccc:	4630      	mov	r0, r6
 8010cce:	f7ff fe49 	bl	8010964 <_Bfree>
 8010cd2:	4647      	mov	r7, r8
 8010cd4:	106d      	asrs	r5, r5, #1
 8010cd6:	d00b      	beq.n	8010cf0 <__pow5mult+0xa0>
 8010cd8:	6820      	ldr	r0, [r4, #0]
 8010cda:	b938      	cbnz	r0, 8010cec <__pow5mult+0x9c>
 8010cdc:	4622      	mov	r2, r4
 8010cde:	4621      	mov	r1, r4
 8010ce0:	4630      	mov	r0, r6
 8010ce2:	f7ff ff0b 	bl	8010afc <__multiply>
 8010ce6:	6020      	str	r0, [r4, #0]
 8010ce8:	f8c0 9000 	str.w	r9, [r0]
 8010cec:	4604      	mov	r4, r0
 8010cee:	e7e4      	b.n	8010cba <__pow5mult+0x6a>
 8010cf0:	4638      	mov	r0, r7
 8010cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cf6:	bf00      	nop
 8010cf8:	08012620 	.word	0x08012620
 8010cfc:	080123b4 	.word	0x080123b4
 8010d00:	080124d7 	.word	0x080124d7

08010d04 <__lshift>:
 8010d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d08:	460c      	mov	r4, r1
 8010d0a:	6849      	ldr	r1, [r1, #4]
 8010d0c:	6923      	ldr	r3, [r4, #16]
 8010d0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010d12:	68a3      	ldr	r3, [r4, #8]
 8010d14:	4607      	mov	r7, r0
 8010d16:	4691      	mov	r9, r2
 8010d18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010d1c:	f108 0601 	add.w	r6, r8, #1
 8010d20:	42b3      	cmp	r3, r6
 8010d22:	db0b      	blt.n	8010d3c <__lshift+0x38>
 8010d24:	4638      	mov	r0, r7
 8010d26:	f7ff fddd 	bl	80108e4 <_Balloc>
 8010d2a:	4605      	mov	r5, r0
 8010d2c:	b948      	cbnz	r0, 8010d42 <__lshift+0x3e>
 8010d2e:	4602      	mov	r2, r0
 8010d30:	4b28      	ldr	r3, [pc, #160]	; (8010dd4 <__lshift+0xd0>)
 8010d32:	4829      	ldr	r0, [pc, #164]	; (8010dd8 <__lshift+0xd4>)
 8010d34:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010d38:	f7fe fe3a 	bl	800f9b0 <__assert_func>
 8010d3c:	3101      	adds	r1, #1
 8010d3e:	005b      	lsls	r3, r3, #1
 8010d40:	e7ee      	b.n	8010d20 <__lshift+0x1c>
 8010d42:	2300      	movs	r3, #0
 8010d44:	f100 0114 	add.w	r1, r0, #20
 8010d48:	f100 0210 	add.w	r2, r0, #16
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	4553      	cmp	r3, sl
 8010d50:	db33      	blt.n	8010dba <__lshift+0xb6>
 8010d52:	6920      	ldr	r0, [r4, #16]
 8010d54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010d58:	f104 0314 	add.w	r3, r4, #20
 8010d5c:	f019 091f 	ands.w	r9, r9, #31
 8010d60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010d64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010d68:	d02b      	beq.n	8010dc2 <__lshift+0xbe>
 8010d6a:	f1c9 0e20 	rsb	lr, r9, #32
 8010d6e:	468a      	mov	sl, r1
 8010d70:	2200      	movs	r2, #0
 8010d72:	6818      	ldr	r0, [r3, #0]
 8010d74:	fa00 f009 	lsl.w	r0, r0, r9
 8010d78:	4310      	orrs	r0, r2
 8010d7a:	f84a 0b04 	str.w	r0, [sl], #4
 8010d7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d82:	459c      	cmp	ip, r3
 8010d84:	fa22 f20e 	lsr.w	r2, r2, lr
 8010d88:	d8f3      	bhi.n	8010d72 <__lshift+0x6e>
 8010d8a:	ebac 0304 	sub.w	r3, ip, r4
 8010d8e:	3b15      	subs	r3, #21
 8010d90:	f023 0303 	bic.w	r3, r3, #3
 8010d94:	3304      	adds	r3, #4
 8010d96:	f104 0015 	add.w	r0, r4, #21
 8010d9a:	4584      	cmp	ip, r0
 8010d9c:	bf38      	it	cc
 8010d9e:	2304      	movcc	r3, #4
 8010da0:	50ca      	str	r2, [r1, r3]
 8010da2:	b10a      	cbz	r2, 8010da8 <__lshift+0xa4>
 8010da4:	f108 0602 	add.w	r6, r8, #2
 8010da8:	3e01      	subs	r6, #1
 8010daa:	4638      	mov	r0, r7
 8010dac:	612e      	str	r6, [r5, #16]
 8010dae:	4621      	mov	r1, r4
 8010db0:	f7ff fdd8 	bl	8010964 <_Bfree>
 8010db4:	4628      	mov	r0, r5
 8010db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dba:	f842 0f04 	str.w	r0, [r2, #4]!
 8010dbe:	3301      	adds	r3, #1
 8010dc0:	e7c5      	b.n	8010d4e <__lshift+0x4a>
 8010dc2:	3904      	subs	r1, #4
 8010dc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8010dc8:	f841 2f04 	str.w	r2, [r1, #4]!
 8010dcc:	459c      	cmp	ip, r3
 8010dce:	d8f9      	bhi.n	8010dc4 <__lshift+0xc0>
 8010dd0:	e7ea      	b.n	8010da8 <__lshift+0xa4>
 8010dd2:	bf00      	nop
 8010dd4:	080124c6 	.word	0x080124c6
 8010dd8:	080124d7 	.word	0x080124d7

08010ddc <__mcmp>:
 8010ddc:	b530      	push	{r4, r5, lr}
 8010dde:	6902      	ldr	r2, [r0, #16]
 8010de0:	690c      	ldr	r4, [r1, #16]
 8010de2:	1b12      	subs	r2, r2, r4
 8010de4:	d10e      	bne.n	8010e04 <__mcmp+0x28>
 8010de6:	f100 0314 	add.w	r3, r0, #20
 8010dea:	3114      	adds	r1, #20
 8010dec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010df0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010df4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010df8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010dfc:	42a5      	cmp	r5, r4
 8010dfe:	d003      	beq.n	8010e08 <__mcmp+0x2c>
 8010e00:	d305      	bcc.n	8010e0e <__mcmp+0x32>
 8010e02:	2201      	movs	r2, #1
 8010e04:	4610      	mov	r0, r2
 8010e06:	bd30      	pop	{r4, r5, pc}
 8010e08:	4283      	cmp	r3, r0
 8010e0a:	d3f3      	bcc.n	8010df4 <__mcmp+0x18>
 8010e0c:	e7fa      	b.n	8010e04 <__mcmp+0x28>
 8010e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8010e12:	e7f7      	b.n	8010e04 <__mcmp+0x28>

08010e14 <__mdiff>:
 8010e14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e18:	460c      	mov	r4, r1
 8010e1a:	4606      	mov	r6, r0
 8010e1c:	4611      	mov	r1, r2
 8010e1e:	4620      	mov	r0, r4
 8010e20:	4690      	mov	r8, r2
 8010e22:	f7ff ffdb 	bl	8010ddc <__mcmp>
 8010e26:	1e05      	subs	r5, r0, #0
 8010e28:	d110      	bne.n	8010e4c <__mdiff+0x38>
 8010e2a:	4629      	mov	r1, r5
 8010e2c:	4630      	mov	r0, r6
 8010e2e:	f7ff fd59 	bl	80108e4 <_Balloc>
 8010e32:	b930      	cbnz	r0, 8010e42 <__mdiff+0x2e>
 8010e34:	4b3a      	ldr	r3, [pc, #232]	; (8010f20 <__mdiff+0x10c>)
 8010e36:	4602      	mov	r2, r0
 8010e38:	f240 2137 	movw	r1, #567	; 0x237
 8010e3c:	4839      	ldr	r0, [pc, #228]	; (8010f24 <__mdiff+0x110>)
 8010e3e:	f7fe fdb7 	bl	800f9b0 <__assert_func>
 8010e42:	2301      	movs	r3, #1
 8010e44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010e48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e4c:	bfa4      	itt	ge
 8010e4e:	4643      	movge	r3, r8
 8010e50:	46a0      	movge	r8, r4
 8010e52:	4630      	mov	r0, r6
 8010e54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010e58:	bfa6      	itte	ge
 8010e5a:	461c      	movge	r4, r3
 8010e5c:	2500      	movge	r5, #0
 8010e5e:	2501      	movlt	r5, #1
 8010e60:	f7ff fd40 	bl	80108e4 <_Balloc>
 8010e64:	b920      	cbnz	r0, 8010e70 <__mdiff+0x5c>
 8010e66:	4b2e      	ldr	r3, [pc, #184]	; (8010f20 <__mdiff+0x10c>)
 8010e68:	4602      	mov	r2, r0
 8010e6a:	f240 2145 	movw	r1, #581	; 0x245
 8010e6e:	e7e5      	b.n	8010e3c <__mdiff+0x28>
 8010e70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010e74:	6926      	ldr	r6, [r4, #16]
 8010e76:	60c5      	str	r5, [r0, #12]
 8010e78:	f104 0914 	add.w	r9, r4, #20
 8010e7c:	f108 0514 	add.w	r5, r8, #20
 8010e80:	f100 0e14 	add.w	lr, r0, #20
 8010e84:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010e88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010e8c:	f108 0210 	add.w	r2, r8, #16
 8010e90:	46f2      	mov	sl, lr
 8010e92:	2100      	movs	r1, #0
 8010e94:	f859 3b04 	ldr.w	r3, [r9], #4
 8010e98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010e9c:	fa11 f88b 	uxtah	r8, r1, fp
 8010ea0:	b299      	uxth	r1, r3
 8010ea2:	0c1b      	lsrs	r3, r3, #16
 8010ea4:	eba8 0801 	sub.w	r8, r8, r1
 8010ea8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010eac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010eb0:	fa1f f888 	uxth.w	r8, r8
 8010eb4:	1419      	asrs	r1, r3, #16
 8010eb6:	454e      	cmp	r6, r9
 8010eb8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010ebc:	f84a 3b04 	str.w	r3, [sl], #4
 8010ec0:	d8e8      	bhi.n	8010e94 <__mdiff+0x80>
 8010ec2:	1b33      	subs	r3, r6, r4
 8010ec4:	3b15      	subs	r3, #21
 8010ec6:	f023 0303 	bic.w	r3, r3, #3
 8010eca:	3304      	adds	r3, #4
 8010ecc:	3415      	adds	r4, #21
 8010ece:	42a6      	cmp	r6, r4
 8010ed0:	bf38      	it	cc
 8010ed2:	2304      	movcc	r3, #4
 8010ed4:	441d      	add	r5, r3
 8010ed6:	4473      	add	r3, lr
 8010ed8:	469e      	mov	lr, r3
 8010eda:	462e      	mov	r6, r5
 8010edc:	4566      	cmp	r6, ip
 8010ede:	d30e      	bcc.n	8010efe <__mdiff+0xea>
 8010ee0:	f10c 0203 	add.w	r2, ip, #3
 8010ee4:	1b52      	subs	r2, r2, r5
 8010ee6:	f022 0203 	bic.w	r2, r2, #3
 8010eea:	3d03      	subs	r5, #3
 8010eec:	45ac      	cmp	ip, r5
 8010eee:	bf38      	it	cc
 8010ef0:	2200      	movcc	r2, #0
 8010ef2:	4413      	add	r3, r2
 8010ef4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010ef8:	b17a      	cbz	r2, 8010f1a <__mdiff+0x106>
 8010efa:	6107      	str	r7, [r0, #16]
 8010efc:	e7a4      	b.n	8010e48 <__mdiff+0x34>
 8010efe:	f856 8b04 	ldr.w	r8, [r6], #4
 8010f02:	fa11 f288 	uxtah	r2, r1, r8
 8010f06:	1414      	asrs	r4, r2, #16
 8010f08:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010f0c:	b292      	uxth	r2, r2
 8010f0e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010f12:	f84e 2b04 	str.w	r2, [lr], #4
 8010f16:	1421      	asrs	r1, r4, #16
 8010f18:	e7e0      	b.n	8010edc <__mdiff+0xc8>
 8010f1a:	3f01      	subs	r7, #1
 8010f1c:	e7ea      	b.n	8010ef4 <__mdiff+0xe0>
 8010f1e:	bf00      	nop
 8010f20:	080124c6 	.word	0x080124c6
 8010f24:	080124d7 	.word	0x080124d7

08010f28 <__d2b>:
 8010f28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010f2c:	460f      	mov	r7, r1
 8010f2e:	2101      	movs	r1, #1
 8010f30:	ec59 8b10 	vmov	r8, r9, d0
 8010f34:	4616      	mov	r6, r2
 8010f36:	f7ff fcd5 	bl	80108e4 <_Balloc>
 8010f3a:	4604      	mov	r4, r0
 8010f3c:	b930      	cbnz	r0, 8010f4c <__d2b+0x24>
 8010f3e:	4602      	mov	r2, r0
 8010f40:	4b24      	ldr	r3, [pc, #144]	; (8010fd4 <__d2b+0xac>)
 8010f42:	4825      	ldr	r0, [pc, #148]	; (8010fd8 <__d2b+0xb0>)
 8010f44:	f240 310f 	movw	r1, #783	; 0x30f
 8010f48:	f7fe fd32 	bl	800f9b0 <__assert_func>
 8010f4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010f50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010f54:	bb2d      	cbnz	r5, 8010fa2 <__d2b+0x7a>
 8010f56:	9301      	str	r3, [sp, #4]
 8010f58:	f1b8 0300 	subs.w	r3, r8, #0
 8010f5c:	d026      	beq.n	8010fac <__d2b+0x84>
 8010f5e:	4668      	mov	r0, sp
 8010f60:	9300      	str	r3, [sp, #0]
 8010f62:	f7ff fd87 	bl	8010a74 <__lo0bits>
 8010f66:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010f6a:	b1e8      	cbz	r0, 8010fa8 <__d2b+0x80>
 8010f6c:	f1c0 0320 	rsb	r3, r0, #32
 8010f70:	fa02 f303 	lsl.w	r3, r2, r3
 8010f74:	430b      	orrs	r3, r1
 8010f76:	40c2      	lsrs	r2, r0
 8010f78:	6163      	str	r3, [r4, #20]
 8010f7a:	9201      	str	r2, [sp, #4]
 8010f7c:	9b01      	ldr	r3, [sp, #4]
 8010f7e:	61a3      	str	r3, [r4, #24]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	bf14      	ite	ne
 8010f84:	2202      	movne	r2, #2
 8010f86:	2201      	moveq	r2, #1
 8010f88:	6122      	str	r2, [r4, #16]
 8010f8a:	b1bd      	cbz	r5, 8010fbc <__d2b+0x94>
 8010f8c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010f90:	4405      	add	r5, r0
 8010f92:	603d      	str	r5, [r7, #0]
 8010f94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010f98:	6030      	str	r0, [r6, #0]
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	b003      	add	sp, #12
 8010f9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010fa6:	e7d6      	b.n	8010f56 <__d2b+0x2e>
 8010fa8:	6161      	str	r1, [r4, #20]
 8010faa:	e7e7      	b.n	8010f7c <__d2b+0x54>
 8010fac:	a801      	add	r0, sp, #4
 8010fae:	f7ff fd61 	bl	8010a74 <__lo0bits>
 8010fb2:	9b01      	ldr	r3, [sp, #4]
 8010fb4:	6163      	str	r3, [r4, #20]
 8010fb6:	3020      	adds	r0, #32
 8010fb8:	2201      	movs	r2, #1
 8010fba:	e7e5      	b.n	8010f88 <__d2b+0x60>
 8010fbc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010fc0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010fc4:	6038      	str	r0, [r7, #0]
 8010fc6:	6918      	ldr	r0, [r3, #16]
 8010fc8:	f7ff fd34 	bl	8010a34 <__hi0bits>
 8010fcc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010fd0:	e7e2      	b.n	8010f98 <__d2b+0x70>
 8010fd2:	bf00      	nop
 8010fd4:	080124c6 	.word	0x080124c6
 8010fd8:	080124d7 	.word	0x080124d7

08010fdc <__ssputs_r>:
 8010fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fe0:	688e      	ldr	r6, [r1, #8]
 8010fe2:	461f      	mov	r7, r3
 8010fe4:	42be      	cmp	r6, r7
 8010fe6:	680b      	ldr	r3, [r1, #0]
 8010fe8:	4682      	mov	sl, r0
 8010fea:	460c      	mov	r4, r1
 8010fec:	4690      	mov	r8, r2
 8010fee:	d82c      	bhi.n	801104a <__ssputs_r+0x6e>
 8010ff0:	898a      	ldrh	r2, [r1, #12]
 8010ff2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010ff6:	d026      	beq.n	8011046 <__ssputs_r+0x6a>
 8010ff8:	6965      	ldr	r5, [r4, #20]
 8010ffa:	6909      	ldr	r1, [r1, #16]
 8010ffc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011000:	eba3 0901 	sub.w	r9, r3, r1
 8011004:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011008:	1c7b      	adds	r3, r7, #1
 801100a:	444b      	add	r3, r9
 801100c:	106d      	asrs	r5, r5, #1
 801100e:	429d      	cmp	r5, r3
 8011010:	bf38      	it	cc
 8011012:	461d      	movcc	r5, r3
 8011014:	0553      	lsls	r3, r2, #21
 8011016:	d527      	bpl.n	8011068 <__ssputs_r+0x8c>
 8011018:	4629      	mov	r1, r5
 801101a:	f7ff fbd7 	bl	80107cc <_malloc_r>
 801101e:	4606      	mov	r6, r0
 8011020:	b360      	cbz	r0, 801107c <__ssputs_r+0xa0>
 8011022:	6921      	ldr	r1, [r4, #16]
 8011024:	464a      	mov	r2, r9
 8011026:	f7fe fcb4 	bl	800f992 <memcpy>
 801102a:	89a3      	ldrh	r3, [r4, #12]
 801102c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011034:	81a3      	strh	r3, [r4, #12]
 8011036:	6126      	str	r6, [r4, #16]
 8011038:	6165      	str	r5, [r4, #20]
 801103a:	444e      	add	r6, r9
 801103c:	eba5 0509 	sub.w	r5, r5, r9
 8011040:	6026      	str	r6, [r4, #0]
 8011042:	60a5      	str	r5, [r4, #8]
 8011044:	463e      	mov	r6, r7
 8011046:	42be      	cmp	r6, r7
 8011048:	d900      	bls.n	801104c <__ssputs_r+0x70>
 801104a:	463e      	mov	r6, r7
 801104c:	6820      	ldr	r0, [r4, #0]
 801104e:	4632      	mov	r2, r6
 8011050:	4641      	mov	r1, r8
 8011052:	f000 fb81 	bl	8011758 <memmove>
 8011056:	68a3      	ldr	r3, [r4, #8]
 8011058:	1b9b      	subs	r3, r3, r6
 801105a:	60a3      	str	r3, [r4, #8]
 801105c:	6823      	ldr	r3, [r4, #0]
 801105e:	4433      	add	r3, r6
 8011060:	6023      	str	r3, [r4, #0]
 8011062:	2000      	movs	r0, #0
 8011064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011068:	462a      	mov	r2, r5
 801106a:	f000 fbf0 	bl	801184e <_realloc_r>
 801106e:	4606      	mov	r6, r0
 8011070:	2800      	cmp	r0, #0
 8011072:	d1e0      	bne.n	8011036 <__ssputs_r+0x5a>
 8011074:	6921      	ldr	r1, [r4, #16]
 8011076:	4650      	mov	r0, sl
 8011078:	f7ff fb34 	bl	80106e4 <_free_r>
 801107c:	230c      	movs	r3, #12
 801107e:	f8ca 3000 	str.w	r3, [sl]
 8011082:	89a3      	ldrh	r3, [r4, #12]
 8011084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011088:	81a3      	strh	r3, [r4, #12]
 801108a:	f04f 30ff 	mov.w	r0, #4294967295
 801108e:	e7e9      	b.n	8011064 <__ssputs_r+0x88>

08011090 <_svfiprintf_r>:
 8011090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011094:	4698      	mov	r8, r3
 8011096:	898b      	ldrh	r3, [r1, #12]
 8011098:	061b      	lsls	r3, r3, #24
 801109a:	b09d      	sub	sp, #116	; 0x74
 801109c:	4607      	mov	r7, r0
 801109e:	460d      	mov	r5, r1
 80110a0:	4614      	mov	r4, r2
 80110a2:	d50e      	bpl.n	80110c2 <_svfiprintf_r+0x32>
 80110a4:	690b      	ldr	r3, [r1, #16]
 80110a6:	b963      	cbnz	r3, 80110c2 <_svfiprintf_r+0x32>
 80110a8:	2140      	movs	r1, #64	; 0x40
 80110aa:	f7ff fb8f 	bl	80107cc <_malloc_r>
 80110ae:	6028      	str	r0, [r5, #0]
 80110b0:	6128      	str	r0, [r5, #16]
 80110b2:	b920      	cbnz	r0, 80110be <_svfiprintf_r+0x2e>
 80110b4:	230c      	movs	r3, #12
 80110b6:	603b      	str	r3, [r7, #0]
 80110b8:	f04f 30ff 	mov.w	r0, #4294967295
 80110bc:	e0d0      	b.n	8011260 <_svfiprintf_r+0x1d0>
 80110be:	2340      	movs	r3, #64	; 0x40
 80110c0:	616b      	str	r3, [r5, #20]
 80110c2:	2300      	movs	r3, #0
 80110c4:	9309      	str	r3, [sp, #36]	; 0x24
 80110c6:	2320      	movs	r3, #32
 80110c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80110cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80110d0:	2330      	movs	r3, #48	; 0x30
 80110d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011278 <_svfiprintf_r+0x1e8>
 80110d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80110da:	f04f 0901 	mov.w	r9, #1
 80110de:	4623      	mov	r3, r4
 80110e0:	469a      	mov	sl, r3
 80110e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80110e6:	b10a      	cbz	r2, 80110ec <_svfiprintf_r+0x5c>
 80110e8:	2a25      	cmp	r2, #37	; 0x25
 80110ea:	d1f9      	bne.n	80110e0 <_svfiprintf_r+0x50>
 80110ec:	ebba 0b04 	subs.w	fp, sl, r4
 80110f0:	d00b      	beq.n	801110a <_svfiprintf_r+0x7a>
 80110f2:	465b      	mov	r3, fp
 80110f4:	4622      	mov	r2, r4
 80110f6:	4629      	mov	r1, r5
 80110f8:	4638      	mov	r0, r7
 80110fa:	f7ff ff6f 	bl	8010fdc <__ssputs_r>
 80110fe:	3001      	adds	r0, #1
 8011100:	f000 80a9 	beq.w	8011256 <_svfiprintf_r+0x1c6>
 8011104:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011106:	445a      	add	r2, fp
 8011108:	9209      	str	r2, [sp, #36]	; 0x24
 801110a:	f89a 3000 	ldrb.w	r3, [sl]
 801110e:	2b00      	cmp	r3, #0
 8011110:	f000 80a1 	beq.w	8011256 <_svfiprintf_r+0x1c6>
 8011114:	2300      	movs	r3, #0
 8011116:	f04f 32ff 	mov.w	r2, #4294967295
 801111a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801111e:	f10a 0a01 	add.w	sl, sl, #1
 8011122:	9304      	str	r3, [sp, #16]
 8011124:	9307      	str	r3, [sp, #28]
 8011126:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801112a:	931a      	str	r3, [sp, #104]	; 0x68
 801112c:	4654      	mov	r4, sl
 801112e:	2205      	movs	r2, #5
 8011130:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011134:	4850      	ldr	r0, [pc, #320]	; (8011278 <_svfiprintf_r+0x1e8>)
 8011136:	f7ef f84b 	bl	80001d0 <memchr>
 801113a:	9a04      	ldr	r2, [sp, #16]
 801113c:	b9d8      	cbnz	r0, 8011176 <_svfiprintf_r+0xe6>
 801113e:	06d0      	lsls	r0, r2, #27
 8011140:	bf44      	itt	mi
 8011142:	2320      	movmi	r3, #32
 8011144:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011148:	0711      	lsls	r1, r2, #28
 801114a:	bf44      	itt	mi
 801114c:	232b      	movmi	r3, #43	; 0x2b
 801114e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011152:	f89a 3000 	ldrb.w	r3, [sl]
 8011156:	2b2a      	cmp	r3, #42	; 0x2a
 8011158:	d015      	beq.n	8011186 <_svfiprintf_r+0xf6>
 801115a:	9a07      	ldr	r2, [sp, #28]
 801115c:	4654      	mov	r4, sl
 801115e:	2000      	movs	r0, #0
 8011160:	f04f 0c0a 	mov.w	ip, #10
 8011164:	4621      	mov	r1, r4
 8011166:	f811 3b01 	ldrb.w	r3, [r1], #1
 801116a:	3b30      	subs	r3, #48	; 0x30
 801116c:	2b09      	cmp	r3, #9
 801116e:	d94d      	bls.n	801120c <_svfiprintf_r+0x17c>
 8011170:	b1b0      	cbz	r0, 80111a0 <_svfiprintf_r+0x110>
 8011172:	9207      	str	r2, [sp, #28]
 8011174:	e014      	b.n	80111a0 <_svfiprintf_r+0x110>
 8011176:	eba0 0308 	sub.w	r3, r0, r8
 801117a:	fa09 f303 	lsl.w	r3, r9, r3
 801117e:	4313      	orrs	r3, r2
 8011180:	9304      	str	r3, [sp, #16]
 8011182:	46a2      	mov	sl, r4
 8011184:	e7d2      	b.n	801112c <_svfiprintf_r+0x9c>
 8011186:	9b03      	ldr	r3, [sp, #12]
 8011188:	1d19      	adds	r1, r3, #4
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	9103      	str	r1, [sp, #12]
 801118e:	2b00      	cmp	r3, #0
 8011190:	bfbb      	ittet	lt
 8011192:	425b      	neglt	r3, r3
 8011194:	f042 0202 	orrlt.w	r2, r2, #2
 8011198:	9307      	strge	r3, [sp, #28]
 801119a:	9307      	strlt	r3, [sp, #28]
 801119c:	bfb8      	it	lt
 801119e:	9204      	strlt	r2, [sp, #16]
 80111a0:	7823      	ldrb	r3, [r4, #0]
 80111a2:	2b2e      	cmp	r3, #46	; 0x2e
 80111a4:	d10c      	bne.n	80111c0 <_svfiprintf_r+0x130>
 80111a6:	7863      	ldrb	r3, [r4, #1]
 80111a8:	2b2a      	cmp	r3, #42	; 0x2a
 80111aa:	d134      	bne.n	8011216 <_svfiprintf_r+0x186>
 80111ac:	9b03      	ldr	r3, [sp, #12]
 80111ae:	1d1a      	adds	r2, r3, #4
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	9203      	str	r2, [sp, #12]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	bfb8      	it	lt
 80111b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80111bc:	3402      	adds	r4, #2
 80111be:	9305      	str	r3, [sp, #20]
 80111c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011288 <_svfiprintf_r+0x1f8>
 80111c4:	7821      	ldrb	r1, [r4, #0]
 80111c6:	2203      	movs	r2, #3
 80111c8:	4650      	mov	r0, sl
 80111ca:	f7ef f801 	bl	80001d0 <memchr>
 80111ce:	b138      	cbz	r0, 80111e0 <_svfiprintf_r+0x150>
 80111d0:	9b04      	ldr	r3, [sp, #16]
 80111d2:	eba0 000a 	sub.w	r0, r0, sl
 80111d6:	2240      	movs	r2, #64	; 0x40
 80111d8:	4082      	lsls	r2, r0
 80111da:	4313      	orrs	r3, r2
 80111dc:	3401      	adds	r4, #1
 80111de:	9304      	str	r3, [sp, #16]
 80111e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111e4:	4825      	ldr	r0, [pc, #148]	; (801127c <_svfiprintf_r+0x1ec>)
 80111e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80111ea:	2206      	movs	r2, #6
 80111ec:	f7ee fff0 	bl	80001d0 <memchr>
 80111f0:	2800      	cmp	r0, #0
 80111f2:	d038      	beq.n	8011266 <_svfiprintf_r+0x1d6>
 80111f4:	4b22      	ldr	r3, [pc, #136]	; (8011280 <_svfiprintf_r+0x1f0>)
 80111f6:	bb1b      	cbnz	r3, 8011240 <_svfiprintf_r+0x1b0>
 80111f8:	9b03      	ldr	r3, [sp, #12]
 80111fa:	3307      	adds	r3, #7
 80111fc:	f023 0307 	bic.w	r3, r3, #7
 8011200:	3308      	adds	r3, #8
 8011202:	9303      	str	r3, [sp, #12]
 8011204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011206:	4433      	add	r3, r6
 8011208:	9309      	str	r3, [sp, #36]	; 0x24
 801120a:	e768      	b.n	80110de <_svfiprintf_r+0x4e>
 801120c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011210:	460c      	mov	r4, r1
 8011212:	2001      	movs	r0, #1
 8011214:	e7a6      	b.n	8011164 <_svfiprintf_r+0xd4>
 8011216:	2300      	movs	r3, #0
 8011218:	3401      	adds	r4, #1
 801121a:	9305      	str	r3, [sp, #20]
 801121c:	4619      	mov	r1, r3
 801121e:	f04f 0c0a 	mov.w	ip, #10
 8011222:	4620      	mov	r0, r4
 8011224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011228:	3a30      	subs	r2, #48	; 0x30
 801122a:	2a09      	cmp	r2, #9
 801122c:	d903      	bls.n	8011236 <_svfiprintf_r+0x1a6>
 801122e:	2b00      	cmp	r3, #0
 8011230:	d0c6      	beq.n	80111c0 <_svfiprintf_r+0x130>
 8011232:	9105      	str	r1, [sp, #20]
 8011234:	e7c4      	b.n	80111c0 <_svfiprintf_r+0x130>
 8011236:	fb0c 2101 	mla	r1, ip, r1, r2
 801123a:	4604      	mov	r4, r0
 801123c:	2301      	movs	r3, #1
 801123e:	e7f0      	b.n	8011222 <_svfiprintf_r+0x192>
 8011240:	ab03      	add	r3, sp, #12
 8011242:	9300      	str	r3, [sp, #0]
 8011244:	462a      	mov	r2, r5
 8011246:	4b0f      	ldr	r3, [pc, #60]	; (8011284 <_svfiprintf_r+0x1f4>)
 8011248:	a904      	add	r1, sp, #16
 801124a:	4638      	mov	r0, r7
 801124c:	f7fd fc7e 	bl	800eb4c <_printf_float>
 8011250:	1c42      	adds	r2, r0, #1
 8011252:	4606      	mov	r6, r0
 8011254:	d1d6      	bne.n	8011204 <_svfiprintf_r+0x174>
 8011256:	89ab      	ldrh	r3, [r5, #12]
 8011258:	065b      	lsls	r3, r3, #25
 801125a:	f53f af2d 	bmi.w	80110b8 <_svfiprintf_r+0x28>
 801125e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011260:	b01d      	add	sp, #116	; 0x74
 8011262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011266:	ab03      	add	r3, sp, #12
 8011268:	9300      	str	r3, [sp, #0]
 801126a:	462a      	mov	r2, r5
 801126c:	4b05      	ldr	r3, [pc, #20]	; (8011284 <_svfiprintf_r+0x1f4>)
 801126e:	a904      	add	r1, sp, #16
 8011270:	4638      	mov	r0, r7
 8011272:	f7fd ff0f 	bl	800f094 <_printf_i>
 8011276:	e7eb      	b.n	8011250 <_svfiprintf_r+0x1c0>
 8011278:	0801262c 	.word	0x0801262c
 801127c:	08012636 	.word	0x08012636
 8011280:	0800eb4d 	.word	0x0800eb4d
 8011284:	08010fdd 	.word	0x08010fdd
 8011288:	08012632 	.word	0x08012632

0801128c <__sfputc_r>:
 801128c:	6893      	ldr	r3, [r2, #8]
 801128e:	3b01      	subs	r3, #1
 8011290:	2b00      	cmp	r3, #0
 8011292:	b410      	push	{r4}
 8011294:	6093      	str	r3, [r2, #8]
 8011296:	da08      	bge.n	80112aa <__sfputc_r+0x1e>
 8011298:	6994      	ldr	r4, [r2, #24]
 801129a:	42a3      	cmp	r3, r4
 801129c:	db01      	blt.n	80112a2 <__sfputc_r+0x16>
 801129e:	290a      	cmp	r1, #10
 80112a0:	d103      	bne.n	80112aa <__sfputc_r+0x1e>
 80112a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112a6:	f7fe b9aa 	b.w	800f5fe <__swbuf_r>
 80112aa:	6813      	ldr	r3, [r2, #0]
 80112ac:	1c58      	adds	r0, r3, #1
 80112ae:	6010      	str	r0, [r2, #0]
 80112b0:	7019      	strb	r1, [r3, #0]
 80112b2:	4608      	mov	r0, r1
 80112b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112b8:	4770      	bx	lr

080112ba <__sfputs_r>:
 80112ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112bc:	4606      	mov	r6, r0
 80112be:	460f      	mov	r7, r1
 80112c0:	4614      	mov	r4, r2
 80112c2:	18d5      	adds	r5, r2, r3
 80112c4:	42ac      	cmp	r4, r5
 80112c6:	d101      	bne.n	80112cc <__sfputs_r+0x12>
 80112c8:	2000      	movs	r0, #0
 80112ca:	e007      	b.n	80112dc <__sfputs_r+0x22>
 80112cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112d0:	463a      	mov	r2, r7
 80112d2:	4630      	mov	r0, r6
 80112d4:	f7ff ffda 	bl	801128c <__sfputc_r>
 80112d8:	1c43      	adds	r3, r0, #1
 80112da:	d1f3      	bne.n	80112c4 <__sfputs_r+0xa>
 80112dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080112e0 <_vfiprintf_r>:
 80112e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112e4:	460d      	mov	r5, r1
 80112e6:	b09d      	sub	sp, #116	; 0x74
 80112e8:	4614      	mov	r4, r2
 80112ea:	4698      	mov	r8, r3
 80112ec:	4606      	mov	r6, r0
 80112ee:	b118      	cbz	r0, 80112f8 <_vfiprintf_r+0x18>
 80112f0:	6a03      	ldr	r3, [r0, #32]
 80112f2:	b90b      	cbnz	r3, 80112f8 <_vfiprintf_r+0x18>
 80112f4:	f7fe f87c 	bl	800f3f0 <__sinit>
 80112f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112fa:	07d9      	lsls	r1, r3, #31
 80112fc:	d405      	bmi.n	801130a <_vfiprintf_r+0x2a>
 80112fe:	89ab      	ldrh	r3, [r5, #12]
 8011300:	059a      	lsls	r2, r3, #22
 8011302:	d402      	bmi.n	801130a <_vfiprintf_r+0x2a>
 8011304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011306:	f7fe fb42 	bl	800f98e <__retarget_lock_acquire_recursive>
 801130a:	89ab      	ldrh	r3, [r5, #12]
 801130c:	071b      	lsls	r3, r3, #28
 801130e:	d501      	bpl.n	8011314 <_vfiprintf_r+0x34>
 8011310:	692b      	ldr	r3, [r5, #16]
 8011312:	b99b      	cbnz	r3, 801133c <_vfiprintf_r+0x5c>
 8011314:	4629      	mov	r1, r5
 8011316:	4630      	mov	r0, r6
 8011318:	f7fe f9ae 	bl	800f678 <__swsetup_r>
 801131c:	b170      	cbz	r0, 801133c <_vfiprintf_r+0x5c>
 801131e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011320:	07dc      	lsls	r4, r3, #31
 8011322:	d504      	bpl.n	801132e <_vfiprintf_r+0x4e>
 8011324:	f04f 30ff 	mov.w	r0, #4294967295
 8011328:	b01d      	add	sp, #116	; 0x74
 801132a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801132e:	89ab      	ldrh	r3, [r5, #12]
 8011330:	0598      	lsls	r0, r3, #22
 8011332:	d4f7      	bmi.n	8011324 <_vfiprintf_r+0x44>
 8011334:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011336:	f7fe fb2b 	bl	800f990 <__retarget_lock_release_recursive>
 801133a:	e7f3      	b.n	8011324 <_vfiprintf_r+0x44>
 801133c:	2300      	movs	r3, #0
 801133e:	9309      	str	r3, [sp, #36]	; 0x24
 8011340:	2320      	movs	r3, #32
 8011342:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011346:	f8cd 800c 	str.w	r8, [sp, #12]
 801134a:	2330      	movs	r3, #48	; 0x30
 801134c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011500 <_vfiprintf_r+0x220>
 8011350:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011354:	f04f 0901 	mov.w	r9, #1
 8011358:	4623      	mov	r3, r4
 801135a:	469a      	mov	sl, r3
 801135c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011360:	b10a      	cbz	r2, 8011366 <_vfiprintf_r+0x86>
 8011362:	2a25      	cmp	r2, #37	; 0x25
 8011364:	d1f9      	bne.n	801135a <_vfiprintf_r+0x7a>
 8011366:	ebba 0b04 	subs.w	fp, sl, r4
 801136a:	d00b      	beq.n	8011384 <_vfiprintf_r+0xa4>
 801136c:	465b      	mov	r3, fp
 801136e:	4622      	mov	r2, r4
 8011370:	4629      	mov	r1, r5
 8011372:	4630      	mov	r0, r6
 8011374:	f7ff ffa1 	bl	80112ba <__sfputs_r>
 8011378:	3001      	adds	r0, #1
 801137a:	f000 80a9 	beq.w	80114d0 <_vfiprintf_r+0x1f0>
 801137e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011380:	445a      	add	r2, fp
 8011382:	9209      	str	r2, [sp, #36]	; 0x24
 8011384:	f89a 3000 	ldrb.w	r3, [sl]
 8011388:	2b00      	cmp	r3, #0
 801138a:	f000 80a1 	beq.w	80114d0 <_vfiprintf_r+0x1f0>
 801138e:	2300      	movs	r3, #0
 8011390:	f04f 32ff 	mov.w	r2, #4294967295
 8011394:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011398:	f10a 0a01 	add.w	sl, sl, #1
 801139c:	9304      	str	r3, [sp, #16]
 801139e:	9307      	str	r3, [sp, #28]
 80113a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80113a4:	931a      	str	r3, [sp, #104]	; 0x68
 80113a6:	4654      	mov	r4, sl
 80113a8:	2205      	movs	r2, #5
 80113aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113ae:	4854      	ldr	r0, [pc, #336]	; (8011500 <_vfiprintf_r+0x220>)
 80113b0:	f7ee ff0e 	bl	80001d0 <memchr>
 80113b4:	9a04      	ldr	r2, [sp, #16]
 80113b6:	b9d8      	cbnz	r0, 80113f0 <_vfiprintf_r+0x110>
 80113b8:	06d1      	lsls	r1, r2, #27
 80113ba:	bf44      	itt	mi
 80113bc:	2320      	movmi	r3, #32
 80113be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113c2:	0713      	lsls	r3, r2, #28
 80113c4:	bf44      	itt	mi
 80113c6:	232b      	movmi	r3, #43	; 0x2b
 80113c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113cc:	f89a 3000 	ldrb.w	r3, [sl]
 80113d0:	2b2a      	cmp	r3, #42	; 0x2a
 80113d2:	d015      	beq.n	8011400 <_vfiprintf_r+0x120>
 80113d4:	9a07      	ldr	r2, [sp, #28]
 80113d6:	4654      	mov	r4, sl
 80113d8:	2000      	movs	r0, #0
 80113da:	f04f 0c0a 	mov.w	ip, #10
 80113de:	4621      	mov	r1, r4
 80113e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113e4:	3b30      	subs	r3, #48	; 0x30
 80113e6:	2b09      	cmp	r3, #9
 80113e8:	d94d      	bls.n	8011486 <_vfiprintf_r+0x1a6>
 80113ea:	b1b0      	cbz	r0, 801141a <_vfiprintf_r+0x13a>
 80113ec:	9207      	str	r2, [sp, #28]
 80113ee:	e014      	b.n	801141a <_vfiprintf_r+0x13a>
 80113f0:	eba0 0308 	sub.w	r3, r0, r8
 80113f4:	fa09 f303 	lsl.w	r3, r9, r3
 80113f8:	4313      	orrs	r3, r2
 80113fa:	9304      	str	r3, [sp, #16]
 80113fc:	46a2      	mov	sl, r4
 80113fe:	e7d2      	b.n	80113a6 <_vfiprintf_r+0xc6>
 8011400:	9b03      	ldr	r3, [sp, #12]
 8011402:	1d19      	adds	r1, r3, #4
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	9103      	str	r1, [sp, #12]
 8011408:	2b00      	cmp	r3, #0
 801140a:	bfbb      	ittet	lt
 801140c:	425b      	neglt	r3, r3
 801140e:	f042 0202 	orrlt.w	r2, r2, #2
 8011412:	9307      	strge	r3, [sp, #28]
 8011414:	9307      	strlt	r3, [sp, #28]
 8011416:	bfb8      	it	lt
 8011418:	9204      	strlt	r2, [sp, #16]
 801141a:	7823      	ldrb	r3, [r4, #0]
 801141c:	2b2e      	cmp	r3, #46	; 0x2e
 801141e:	d10c      	bne.n	801143a <_vfiprintf_r+0x15a>
 8011420:	7863      	ldrb	r3, [r4, #1]
 8011422:	2b2a      	cmp	r3, #42	; 0x2a
 8011424:	d134      	bne.n	8011490 <_vfiprintf_r+0x1b0>
 8011426:	9b03      	ldr	r3, [sp, #12]
 8011428:	1d1a      	adds	r2, r3, #4
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	9203      	str	r2, [sp, #12]
 801142e:	2b00      	cmp	r3, #0
 8011430:	bfb8      	it	lt
 8011432:	f04f 33ff 	movlt.w	r3, #4294967295
 8011436:	3402      	adds	r4, #2
 8011438:	9305      	str	r3, [sp, #20]
 801143a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011510 <_vfiprintf_r+0x230>
 801143e:	7821      	ldrb	r1, [r4, #0]
 8011440:	2203      	movs	r2, #3
 8011442:	4650      	mov	r0, sl
 8011444:	f7ee fec4 	bl	80001d0 <memchr>
 8011448:	b138      	cbz	r0, 801145a <_vfiprintf_r+0x17a>
 801144a:	9b04      	ldr	r3, [sp, #16]
 801144c:	eba0 000a 	sub.w	r0, r0, sl
 8011450:	2240      	movs	r2, #64	; 0x40
 8011452:	4082      	lsls	r2, r0
 8011454:	4313      	orrs	r3, r2
 8011456:	3401      	adds	r4, #1
 8011458:	9304      	str	r3, [sp, #16]
 801145a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801145e:	4829      	ldr	r0, [pc, #164]	; (8011504 <_vfiprintf_r+0x224>)
 8011460:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011464:	2206      	movs	r2, #6
 8011466:	f7ee feb3 	bl	80001d0 <memchr>
 801146a:	2800      	cmp	r0, #0
 801146c:	d03f      	beq.n	80114ee <_vfiprintf_r+0x20e>
 801146e:	4b26      	ldr	r3, [pc, #152]	; (8011508 <_vfiprintf_r+0x228>)
 8011470:	bb1b      	cbnz	r3, 80114ba <_vfiprintf_r+0x1da>
 8011472:	9b03      	ldr	r3, [sp, #12]
 8011474:	3307      	adds	r3, #7
 8011476:	f023 0307 	bic.w	r3, r3, #7
 801147a:	3308      	adds	r3, #8
 801147c:	9303      	str	r3, [sp, #12]
 801147e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011480:	443b      	add	r3, r7
 8011482:	9309      	str	r3, [sp, #36]	; 0x24
 8011484:	e768      	b.n	8011358 <_vfiprintf_r+0x78>
 8011486:	fb0c 3202 	mla	r2, ip, r2, r3
 801148a:	460c      	mov	r4, r1
 801148c:	2001      	movs	r0, #1
 801148e:	e7a6      	b.n	80113de <_vfiprintf_r+0xfe>
 8011490:	2300      	movs	r3, #0
 8011492:	3401      	adds	r4, #1
 8011494:	9305      	str	r3, [sp, #20]
 8011496:	4619      	mov	r1, r3
 8011498:	f04f 0c0a 	mov.w	ip, #10
 801149c:	4620      	mov	r0, r4
 801149e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80114a2:	3a30      	subs	r2, #48	; 0x30
 80114a4:	2a09      	cmp	r2, #9
 80114a6:	d903      	bls.n	80114b0 <_vfiprintf_r+0x1d0>
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d0c6      	beq.n	801143a <_vfiprintf_r+0x15a>
 80114ac:	9105      	str	r1, [sp, #20]
 80114ae:	e7c4      	b.n	801143a <_vfiprintf_r+0x15a>
 80114b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80114b4:	4604      	mov	r4, r0
 80114b6:	2301      	movs	r3, #1
 80114b8:	e7f0      	b.n	801149c <_vfiprintf_r+0x1bc>
 80114ba:	ab03      	add	r3, sp, #12
 80114bc:	9300      	str	r3, [sp, #0]
 80114be:	462a      	mov	r2, r5
 80114c0:	4b12      	ldr	r3, [pc, #72]	; (801150c <_vfiprintf_r+0x22c>)
 80114c2:	a904      	add	r1, sp, #16
 80114c4:	4630      	mov	r0, r6
 80114c6:	f7fd fb41 	bl	800eb4c <_printf_float>
 80114ca:	4607      	mov	r7, r0
 80114cc:	1c78      	adds	r0, r7, #1
 80114ce:	d1d6      	bne.n	801147e <_vfiprintf_r+0x19e>
 80114d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80114d2:	07d9      	lsls	r1, r3, #31
 80114d4:	d405      	bmi.n	80114e2 <_vfiprintf_r+0x202>
 80114d6:	89ab      	ldrh	r3, [r5, #12]
 80114d8:	059a      	lsls	r2, r3, #22
 80114da:	d402      	bmi.n	80114e2 <_vfiprintf_r+0x202>
 80114dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80114de:	f7fe fa57 	bl	800f990 <__retarget_lock_release_recursive>
 80114e2:	89ab      	ldrh	r3, [r5, #12]
 80114e4:	065b      	lsls	r3, r3, #25
 80114e6:	f53f af1d 	bmi.w	8011324 <_vfiprintf_r+0x44>
 80114ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114ec:	e71c      	b.n	8011328 <_vfiprintf_r+0x48>
 80114ee:	ab03      	add	r3, sp, #12
 80114f0:	9300      	str	r3, [sp, #0]
 80114f2:	462a      	mov	r2, r5
 80114f4:	4b05      	ldr	r3, [pc, #20]	; (801150c <_vfiprintf_r+0x22c>)
 80114f6:	a904      	add	r1, sp, #16
 80114f8:	4630      	mov	r0, r6
 80114fa:	f7fd fdcb 	bl	800f094 <_printf_i>
 80114fe:	e7e4      	b.n	80114ca <_vfiprintf_r+0x1ea>
 8011500:	0801262c 	.word	0x0801262c
 8011504:	08012636 	.word	0x08012636
 8011508:	0800eb4d 	.word	0x0800eb4d
 801150c:	080112bb 	.word	0x080112bb
 8011510:	08012632 	.word	0x08012632

08011514 <__sflush_r>:
 8011514:	898a      	ldrh	r2, [r1, #12]
 8011516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801151a:	4605      	mov	r5, r0
 801151c:	0710      	lsls	r0, r2, #28
 801151e:	460c      	mov	r4, r1
 8011520:	d458      	bmi.n	80115d4 <__sflush_r+0xc0>
 8011522:	684b      	ldr	r3, [r1, #4]
 8011524:	2b00      	cmp	r3, #0
 8011526:	dc05      	bgt.n	8011534 <__sflush_r+0x20>
 8011528:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801152a:	2b00      	cmp	r3, #0
 801152c:	dc02      	bgt.n	8011534 <__sflush_r+0x20>
 801152e:	2000      	movs	r0, #0
 8011530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011534:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011536:	2e00      	cmp	r6, #0
 8011538:	d0f9      	beq.n	801152e <__sflush_r+0x1a>
 801153a:	2300      	movs	r3, #0
 801153c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011540:	682f      	ldr	r7, [r5, #0]
 8011542:	6a21      	ldr	r1, [r4, #32]
 8011544:	602b      	str	r3, [r5, #0]
 8011546:	d032      	beq.n	80115ae <__sflush_r+0x9a>
 8011548:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801154a:	89a3      	ldrh	r3, [r4, #12]
 801154c:	075a      	lsls	r2, r3, #29
 801154e:	d505      	bpl.n	801155c <__sflush_r+0x48>
 8011550:	6863      	ldr	r3, [r4, #4]
 8011552:	1ac0      	subs	r0, r0, r3
 8011554:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011556:	b10b      	cbz	r3, 801155c <__sflush_r+0x48>
 8011558:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801155a:	1ac0      	subs	r0, r0, r3
 801155c:	2300      	movs	r3, #0
 801155e:	4602      	mov	r2, r0
 8011560:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011562:	6a21      	ldr	r1, [r4, #32]
 8011564:	4628      	mov	r0, r5
 8011566:	47b0      	blx	r6
 8011568:	1c43      	adds	r3, r0, #1
 801156a:	89a3      	ldrh	r3, [r4, #12]
 801156c:	d106      	bne.n	801157c <__sflush_r+0x68>
 801156e:	6829      	ldr	r1, [r5, #0]
 8011570:	291d      	cmp	r1, #29
 8011572:	d82b      	bhi.n	80115cc <__sflush_r+0xb8>
 8011574:	4a29      	ldr	r2, [pc, #164]	; (801161c <__sflush_r+0x108>)
 8011576:	410a      	asrs	r2, r1
 8011578:	07d6      	lsls	r6, r2, #31
 801157a:	d427      	bmi.n	80115cc <__sflush_r+0xb8>
 801157c:	2200      	movs	r2, #0
 801157e:	6062      	str	r2, [r4, #4]
 8011580:	04d9      	lsls	r1, r3, #19
 8011582:	6922      	ldr	r2, [r4, #16]
 8011584:	6022      	str	r2, [r4, #0]
 8011586:	d504      	bpl.n	8011592 <__sflush_r+0x7e>
 8011588:	1c42      	adds	r2, r0, #1
 801158a:	d101      	bne.n	8011590 <__sflush_r+0x7c>
 801158c:	682b      	ldr	r3, [r5, #0]
 801158e:	b903      	cbnz	r3, 8011592 <__sflush_r+0x7e>
 8011590:	6560      	str	r0, [r4, #84]	; 0x54
 8011592:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011594:	602f      	str	r7, [r5, #0]
 8011596:	2900      	cmp	r1, #0
 8011598:	d0c9      	beq.n	801152e <__sflush_r+0x1a>
 801159a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801159e:	4299      	cmp	r1, r3
 80115a0:	d002      	beq.n	80115a8 <__sflush_r+0x94>
 80115a2:	4628      	mov	r0, r5
 80115a4:	f7ff f89e 	bl	80106e4 <_free_r>
 80115a8:	2000      	movs	r0, #0
 80115aa:	6360      	str	r0, [r4, #52]	; 0x34
 80115ac:	e7c0      	b.n	8011530 <__sflush_r+0x1c>
 80115ae:	2301      	movs	r3, #1
 80115b0:	4628      	mov	r0, r5
 80115b2:	47b0      	blx	r6
 80115b4:	1c41      	adds	r1, r0, #1
 80115b6:	d1c8      	bne.n	801154a <__sflush_r+0x36>
 80115b8:	682b      	ldr	r3, [r5, #0]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d0c5      	beq.n	801154a <__sflush_r+0x36>
 80115be:	2b1d      	cmp	r3, #29
 80115c0:	d001      	beq.n	80115c6 <__sflush_r+0xb2>
 80115c2:	2b16      	cmp	r3, #22
 80115c4:	d101      	bne.n	80115ca <__sflush_r+0xb6>
 80115c6:	602f      	str	r7, [r5, #0]
 80115c8:	e7b1      	b.n	801152e <__sflush_r+0x1a>
 80115ca:	89a3      	ldrh	r3, [r4, #12]
 80115cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115d0:	81a3      	strh	r3, [r4, #12]
 80115d2:	e7ad      	b.n	8011530 <__sflush_r+0x1c>
 80115d4:	690f      	ldr	r7, [r1, #16]
 80115d6:	2f00      	cmp	r7, #0
 80115d8:	d0a9      	beq.n	801152e <__sflush_r+0x1a>
 80115da:	0793      	lsls	r3, r2, #30
 80115dc:	680e      	ldr	r6, [r1, #0]
 80115de:	bf08      	it	eq
 80115e0:	694b      	ldreq	r3, [r1, #20]
 80115e2:	600f      	str	r7, [r1, #0]
 80115e4:	bf18      	it	ne
 80115e6:	2300      	movne	r3, #0
 80115e8:	eba6 0807 	sub.w	r8, r6, r7
 80115ec:	608b      	str	r3, [r1, #8]
 80115ee:	f1b8 0f00 	cmp.w	r8, #0
 80115f2:	dd9c      	ble.n	801152e <__sflush_r+0x1a>
 80115f4:	6a21      	ldr	r1, [r4, #32]
 80115f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80115f8:	4643      	mov	r3, r8
 80115fa:	463a      	mov	r2, r7
 80115fc:	4628      	mov	r0, r5
 80115fe:	47b0      	blx	r6
 8011600:	2800      	cmp	r0, #0
 8011602:	dc06      	bgt.n	8011612 <__sflush_r+0xfe>
 8011604:	89a3      	ldrh	r3, [r4, #12]
 8011606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801160a:	81a3      	strh	r3, [r4, #12]
 801160c:	f04f 30ff 	mov.w	r0, #4294967295
 8011610:	e78e      	b.n	8011530 <__sflush_r+0x1c>
 8011612:	4407      	add	r7, r0
 8011614:	eba8 0800 	sub.w	r8, r8, r0
 8011618:	e7e9      	b.n	80115ee <__sflush_r+0xda>
 801161a:	bf00      	nop
 801161c:	dfbffffe 	.word	0xdfbffffe

08011620 <_fflush_r>:
 8011620:	b538      	push	{r3, r4, r5, lr}
 8011622:	690b      	ldr	r3, [r1, #16]
 8011624:	4605      	mov	r5, r0
 8011626:	460c      	mov	r4, r1
 8011628:	b913      	cbnz	r3, 8011630 <_fflush_r+0x10>
 801162a:	2500      	movs	r5, #0
 801162c:	4628      	mov	r0, r5
 801162e:	bd38      	pop	{r3, r4, r5, pc}
 8011630:	b118      	cbz	r0, 801163a <_fflush_r+0x1a>
 8011632:	6a03      	ldr	r3, [r0, #32]
 8011634:	b90b      	cbnz	r3, 801163a <_fflush_r+0x1a>
 8011636:	f7fd fedb 	bl	800f3f0 <__sinit>
 801163a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d0f3      	beq.n	801162a <_fflush_r+0xa>
 8011642:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011644:	07d0      	lsls	r0, r2, #31
 8011646:	d404      	bmi.n	8011652 <_fflush_r+0x32>
 8011648:	0599      	lsls	r1, r3, #22
 801164a:	d402      	bmi.n	8011652 <_fflush_r+0x32>
 801164c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801164e:	f7fe f99e 	bl	800f98e <__retarget_lock_acquire_recursive>
 8011652:	4628      	mov	r0, r5
 8011654:	4621      	mov	r1, r4
 8011656:	f7ff ff5d 	bl	8011514 <__sflush_r>
 801165a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801165c:	07da      	lsls	r2, r3, #31
 801165e:	4605      	mov	r5, r0
 8011660:	d4e4      	bmi.n	801162c <_fflush_r+0xc>
 8011662:	89a3      	ldrh	r3, [r4, #12]
 8011664:	059b      	lsls	r3, r3, #22
 8011666:	d4e1      	bmi.n	801162c <_fflush_r+0xc>
 8011668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801166a:	f7fe f991 	bl	800f990 <__retarget_lock_release_recursive>
 801166e:	e7dd      	b.n	801162c <_fflush_r+0xc>

08011670 <fiprintf>:
 8011670:	b40e      	push	{r1, r2, r3}
 8011672:	b503      	push	{r0, r1, lr}
 8011674:	4601      	mov	r1, r0
 8011676:	ab03      	add	r3, sp, #12
 8011678:	4805      	ldr	r0, [pc, #20]	; (8011690 <fiprintf+0x20>)
 801167a:	f853 2b04 	ldr.w	r2, [r3], #4
 801167e:	6800      	ldr	r0, [r0, #0]
 8011680:	9301      	str	r3, [sp, #4]
 8011682:	f7ff fe2d 	bl	80112e0 <_vfiprintf_r>
 8011686:	b002      	add	sp, #8
 8011688:	f85d eb04 	ldr.w	lr, [sp], #4
 801168c:	b003      	add	sp, #12
 801168e:	4770      	bx	lr
 8011690:	2000012c 	.word	0x2000012c

08011694 <__swhatbuf_r>:
 8011694:	b570      	push	{r4, r5, r6, lr}
 8011696:	460c      	mov	r4, r1
 8011698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801169c:	2900      	cmp	r1, #0
 801169e:	b096      	sub	sp, #88	; 0x58
 80116a0:	4615      	mov	r5, r2
 80116a2:	461e      	mov	r6, r3
 80116a4:	da0d      	bge.n	80116c2 <__swhatbuf_r+0x2e>
 80116a6:	89a3      	ldrh	r3, [r4, #12]
 80116a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80116ac:	f04f 0100 	mov.w	r1, #0
 80116b0:	bf0c      	ite	eq
 80116b2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80116b6:	2340      	movne	r3, #64	; 0x40
 80116b8:	2000      	movs	r0, #0
 80116ba:	6031      	str	r1, [r6, #0]
 80116bc:	602b      	str	r3, [r5, #0]
 80116be:	b016      	add	sp, #88	; 0x58
 80116c0:	bd70      	pop	{r4, r5, r6, pc}
 80116c2:	466a      	mov	r2, sp
 80116c4:	f000 f862 	bl	801178c <_fstat_r>
 80116c8:	2800      	cmp	r0, #0
 80116ca:	dbec      	blt.n	80116a6 <__swhatbuf_r+0x12>
 80116cc:	9901      	ldr	r1, [sp, #4]
 80116ce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80116d2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80116d6:	4259      	negs	r1, r3
 80116d8:	4159      	adcs	r1, r3
 80116da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80116de:	e7eb      	b.n	80116b8 <__swhatbuf_r+0x24>

080116e0 <__smakebuf_r>:
 80116e0:	898b      	ldrh	r3, [r1, #12]
 80116e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80116e4:	079d      	lsls	r5, r3, #30
 80116e6:	4606      	mov	r6, r0
 80116e8:	460c      	mov	r4, r1
 80116ea:	d507      	bpl.n	80116fc <__smakebuf_r+0x1c>
 80116ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80116f0:	6023      	str	r3, [r4, #0]
 80116f2:	6123      	str	r3, [r4, #16]
 80116f4:	2301      	movs	r3, #1
 80116f6:	6163      	str	r3, [r4, #20]
 80116f8:	b002      	add	sp, #8
 80116fa:	bd70      	pop	{r4, r5, r6, pc}
 80116fc:	ab01      	add	r3, sp, #4
 80116fe:	466a      	mov	r2, sp
 8011700:	f7ff ffc8 	bl	8011694 <__swhatbuf_r>
 8011704:	9900      	ldr	r1, [sp, #0]
 8011706:	4605      	mov	r5, r0
 8011708:	4630      	mov	r0, r6
 801170a:	f7ff f85f 	bl	80107cc <_malloc_r>
 801170e:	b948      	cbnz	r0, 8011724 <__smakebuf_r+0x44>
 8011710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011714:	059a      	lsls	r2, r3, #22
 8011716:	d4ef      	bmi.n	80116f8 <__smakebuf_r+0x18>
 8011718:	f023 0303 	bic.w	r3, r3, #3
 801171c:	f043 0302 	orr.w	r3, r3, #2
 8011720:	81a3      	strh	r3, [r4, #12]
 8011722:	e7e3      	b.n	80116ec <__smakebuf_r+0xc>
 8011724:	89a3      	ldrh	r3, [r4, #12]
 8011726:	6020      	str	r0, [r4, #0]
 8011728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801172c:	81a3      	strh	r3, [r4, #12]
 801172e:	9b00      	ldr	r3, [sp, #0]
 8011730:	6163      	str	r3, [r4, #20]
 8011732:	9b01      	ldr	r3, [sp, #4]
 8011734:	6120      	str	r0, [r4, #16]
 8011736:	b15b      	cbz	r3, 8011750 <__smakebuf_r+0x70>
 8011738:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801173c:	4630      	mov	r0, r6
 801173e:	f000 f837 	bl	80117b0 <_isatty_r>
 8011742:	b128      	cbz	r0, 8011750 <__smakebuf_r+0x70>
 8011744:	89a3      	ldrh	r3, [r4, #12]
 8011746:	f023 0303 	bic.w	r3, r3, #3
 801174a:	f043 0301 	orr.w	r3, r3, #1
 801174e:	81a3      	strh	r3, [r4, #12]
 8011750:	89a3      	ldrh	r3, [r4, #12]
 8011752:	431d      	orrs	r5, r3
 8011754:	81a5      	strh	r5, [r4, #12]
 8011756:	e7cf      	b.n	80116f8 <__smakebuf_r+0x18>

08011758 <memmove>:
 8011758:	4288      	cmp	r0, r1
 801175a:	b510      	push	{r4, lr}
 801175c:	eb01 0402 	add.w	r4, r1, r2
 8011760:	d902      	bls.n	8011768 <memmove+0x10>
 8011762:	4284      	cmp	r4, r0
 8011764:	4623      	mov	r3, r4
 8011766:	d807      	bhi.n	8011778 <memmove+0x20>
 8011768:	1e43      	subs	r3, r0, #1
 801176a:	42a1      	cmp	r1, r4
 801176c:	d008      	beq.n	8011780 <memmove+0x28>
 801176e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011772:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011776:	e7f8      	b.n	801176a <memmove+0x12>
 8011778:	4402      	add	r2, r0
 801177a:	4601      	mov	r1, r0
 801177c:	428a      	cmp	r2, r1
 801177e:	d100      	bne.n	8011782 <memmove+0x2a>
 8011780:	bd10      	pop	{r4, pc}
 8011782:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011786:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801178a:	e7f7      	b.n	801177c <memmove+0x24>

0801178c <_fstat_r>:
 801178c:	b538      	push	{r3, r4, r5, lr}
 801178e:	4d07      	ldr	r5, [pc, #28]	; (80117ac <_fstat_r+0x20>)
 8011790:	2300      	movs	r3, #0
 8011792:	4604      	mov	r4, r0
 8011794:	4608      	mov	r0, r1
 8011796:	4611      	mov	r1, r2
 8011798:	602b      	str	r3, [r5, #0]
 801179a:	f7f1 fc9e 	bl	80030da <_fstat>
 801179e:	1c43      	adds	r3, r0, #1
 80117a0:	d102      	bne.n	80117a8 <_fstat_r+0x1c>
 80117a2:	682b      	ldr	r3, [r5, #0]
 80117a4:	b103      	cbz	r3, 80117a8 <_fstat_r+0x1c>
 80117a6:	6023      	str	r3, [r4, #0]
 80117a8:	bd38      	pop	{r3, r4, r5, pc}
 80117aa:	bf00      	nop
 80117ac:	200035c4 	.word	0x200035c4

080117b0 <_isatty_r>:
 80117b0:	b538      	push	{r3, r4, r5, lr}
 80117b2:	4d06      	ldr	r5, [pc, #24]	; (80117cc <_isatty_r+0x1c>)
 80117b4:	2300      	movs	r3, #0
 80117b6:	4604      	mov	r4, r0
 80117b8:	4608      	mov	r0, r1
 80117ba:	602b      	str	r3, [r5, #0]
 80117bc:	f7f1 fc9d 	bl	80030fa <_isatty>
 80117c0:	1c43      	adds	r3, r0, #1
 80117c2:	d102      	bne.n	80117ca <_isatty_r+0x1a>
 80117c4:	682b      	ldr	r3, [r5, #0]
 80117c6:	b103      	cbz	r3, 80117ca <_isatty_r+0x1a>
 80117c8:	6023      	str	r3, [r4, #0]
 80117ca:	bd38      	pop	{r3, r4, r5, pc}
 80117cc:	200035c4 	.word	0x200035c4

080117d0 <_sbrk_r>:
 80117d0:	b538      	push	{r3, r4, r5, lr}
 80117d2:	4d06      	ldr	r5, [pc, #24]	; (80117ec <_sbrk_r+0x1c>)
 80117d4:	2300      	movs	r3, #0
 80117d6:	4604      	mov	r4, r0
 80117d8:	4608      	mov	r0, r1
 80117da:	602b      	str	r3, [r5, #0]
 80117dc:	f7f1 fca6 	bl	800312c <_sbrk>
 80117e0:	1c43      	adds	r3, r0, #1
 80117e2:	d102      	bne.n	80117ea <_sbrk_r+0x1a>
 80117e4:	682b      	ldr	r3, [r5, #0]
 80117e6:	b103      	cbz	r3, 80117ea <_sbrk_r+0x1a>
 80117e8:	6023      	str	r3, [r4, #0]
 80117ea:	bd38      	pop	{r3, r4, r5, pc}
 80117ec:	200035c4 	.word	0x200035c4

080117f0 <abort>:
 80117f0:	b508      	push	{r3, lr}
 80117f2:	2006      	movs	r0, #6
 80117f4:	f000 f890 	bl	8011918 <raise>
 80117f8:	2001      	movs	r0, #1
 80117fa:	f7f1 fc1f 	bl	800303c <_exit>

080117fe <_calloc_r>:
 80117fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011800:	fba1 2402 	umull	r2, r4, r1, r2
 8011804:	b94c      	cbnz	r4, 801181a <_calloc_r+0x1c>
 8011806:	4611      	mov	r1, r2
 8011808:	9201      	str	r2, [sp, #4]
 801180a:	f7fe ffdf 	bl	80107cc <_malloc_r>
 801180e:	9a01      	ldr	r2, [sp, #4]
 8011810:	4605      	mov	r5, r0
 8011812:	b930      	cbnz	r0, 8011822 <_calloc_r+0x24>
 8011814:	4628      	mov	r0, r5
 8011816:	b003      	add	sp, #12
 8011818:	bd30      	pop	{r4, r5, pc}
 801181a:	220c      	movs	r2, #12
 801181c:	6002      	str	r2, [r0, #0]
 801181e:	2500      	movs	r5, #0
 8011820:	e7f8      	b.n	8011814 <_calloc_r+0x16>
 8011822:	4621      	mov	r1, r4
 8011824:	f7fd ff90 	bl	800f748 <memset>
 8011828:	e7f4      	b.n	8011814 <_calloc_r+0x16>

0801182a <__ascii_mbtowc>:
 801182a:	b082      	sub	sp, #8
 801182c:	b901      	cbnz	r1, 8011830 <__ascii_mbtowc+0x6>
 801182e:	a901      	add	r1, sp, #4
 8011830:	b142      	cbz	r2, 8011844 <__ascii_mbtowc+0x1a>
 8011832:	b14b      	cbz	r3, 8011848 <__ascii_mbtowc+0x1e>
 8011834:	7813      	ldrb	r3, [r2, #0]
 8011836:	600b      	str	r3, [r1, #0]
 8011838:	7812      	ldrb	r2, [r2, #0]
 801183a:	1e10      	subs	r0, r2, #0
 801183c:	bf18      	it	ne
 801183e:	2001      	movne	r0, #1
 8011840:	b002      	add	sp, #8
 8011842:	4770      	bx	lr
 8011844:	4610      	mov	r0, r2
 8011846:	e7fb      	b.n	8011840 <__ascii_mbtowc+0x16>
 8011848:	f06f 0001 	mvn.w	r0, #1
 801184c:	e7f8      	b.n	8011840 <__ascii_mbtowc+0x16>

0801184e <_realloc_r>:
 801184e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011852:	4680      	mov	r8, r0
 8011854:	4614      	mov	r4, r2
 8011856:	460e      	mov	r6, r1
 8011858:	b921      	cbnz	r1, 8011864 <_realloc_r+0x16>
 801185a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801185e:	4611      	mov	r1, r2
 8011860:	f7fe bfb4 	b.w	80107cc <_malloc_r>
 8011864:	b92a      	cbnz	r2, 8011872 <_realloc_r+0x24>
 8011866:	f7fe ff3d 	bl	80106e4 <_free_r>
 801186a:	4625      	mov	r5, r4
 801186c:	4628      	mov	r0, r5
 801186e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011872:	f000 f86d 	bl	8011950 <_malloc_usable_size_r>
 8011876:	4284      	cmp	r4, r0
 8011878:	4607      	mov	r7, r0
 801187a:	d802      	bhi.n	8011882 <_realloc_r+0x34>
 801187c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011880:	d812      	bhi.n	80118a8 <_realloc_r+0x5a>
 8011882:	4621      	mov	r1, r4
 8011884:	4640      	mov	r0, r8
 8011886:	f7fe ffa1 	bl	80107cc <_malloc_r>
 801188a:	4605      	mov	r5, r0
 801188c:	2800      	cmp	r0, #0
 801188e:	d0ed      	beq.n	801186c <_realloc_r+0x1e>
 8011890:	42bc      	cmp	r4, r7
 8011892:	4622      	mov	r2, r4
 8011894:	4631      	mov	r1, r6
 8011896:	bf28      	it	cs
 8011898:	463a      	movcs	r2, r7
 801189a:	f7fe f87a 	bl	800f992 <memcpy>
 801189e:	4631      	mov	r1, r6
 80118a0:	4640      	mov	r0, r8
 80118a2:	f7fe ff1f 	bl	80106e4 <_free_r>
 80118a6:	e7e1      	b.n	801186c <_realloc_r+0x1e>
 80118a8:	4635      	mov	r5, r6
 80118aa:	e7df      	b.n	801186c <_realloc_r+0x1e>

080118ac <__ascii_wctomb>:
 80118ac:	b149      	cbz	r1, 80118c2 <__ascii_wctomb+0x16>
 80118ae:	2aff      	cmp	r2, #255	; 0xff
 80118b0:	bf85      	ittet	hi
 80118b2:	238a      	movhi	r3, #138	; 0x8a
 80118b4:	6003      	strhi	r3, [r0, #0]
 80118b6:	700a      	strbls	r2, [r1, #0]
 80118b8:	f04f 30ff 	movhi.w	r0, #4294967295
 80118bc:	bf98      	it	ls
 80118be:	2001      	movls	r0, #1
 80118c0:	4770      	bx	lr
 80118c2:	4608      	mov	r0, r1
 80118c4:	4770      	bx	lr

080118c6 <_raise_r>:
 80118c6:	291f      	cmp	r1, #31
 80118c8:	b538      	push	{r3, r4, r5, lr}
 80118ca:	4604      	mov	r4, r0
 80118cc:	460d      	mov	r5, r1
 80118ce:	d904      	bls.n	80118da <_raise_r+0x14>
 80118d0:	2316      	movs	r3, #22
 80118d2:	6003      	str	r3, [r0, #0]
 80118d4:	f04f 30ff 	mov.w	r0, #4294967295
 80118d8:	bd38      	pop	{r3, r4, r5, pc}
 80118da:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80118dc:	b112      	cbz	r2, 80118e4 <_raise_r+0x1e>
 80118de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80118e2:	b94b      	cbnz	r3, 80118f8 <_raise_r+0x32>
 80118e4:	4620      	mov	r0, r4
 80118e6:	f000 f831 	bl	801194c <_getpid_r>
 80118ea:	462a      	mov	r2, r5
 80118ec:	4601      	mov	r1, r0
 80118ee:	4620      	mov	r0, r4
 80118f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118f4:	f000 b818 	b.w	8011928 <_kill_r>
 80118f8:	2b01      	cmp	r3, #1
 80118fa:	d00a      	beq.n	8011912 <_raise_r+0x4c>
 80118fc:	1c59      	adds	r1, r3, #1
 80118fe:	d103      	bne.n	8011908 <_raise_r+0x42>
 8011900:	2316      	movs	r3, #22
 8011902:	6003      	str	r3, [r0, #0]
 8011904:	2001      	movs	r0, #1
 8011906:	e7e7      	b.n	80118d8 <_raise_r+0x12>
 8011908:	2400      	movs	r4, #0
 801190a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801190e:	4628      	mov	r0, r5
 8011910:	4798      	blx	r3
 8011912:	2000      	movs	r0, #0
 8011914:	e7e0      	b.n	80118d8 <_raise_r+0x12>
	...

08011918 <raise>:
 8011918:	4b02      	ldr	r3, [pc, #8]	; (8011924 <raise+0xc>)
 801191a:	4601      	mov	r1, r0
 801191c:	6818      	ldr	r0, [r3, #0]
 801191e:	f7ff bfd2 	b.w	80118c6 <_raise_r>
 8011922:	bf00      	nop
 8011924:	2000012c 	.word	0x2000012c

08011928 <_kill_r>:
 8011928:	b538      	push	{r3, r4, r5, lr}
 801192a:	4d07      	ldr	r5, [pc, #28]	; (8011948 <_kill_r+0x20>)
 801192c:	2300      	movs	r3, #0
 801192e:	4604      	mov	r4, r0
 8011930:	4608      	mov	r0, r1
 8011932:	4611      	mov	r1, r2
 8011934:	602b      	str	r3, [r5, #0]
 8011936:	f7f1 fb71 	bl	800301c <_kill>
 801193a:	1c43      	adds	r3, r0, #1
 801193c:	d102      	bne.n	8011944 <_kill_r+0x1c>
 801193e:	682b      	ldr	r3, [r5, #0]
 8011940:	b103      	cbz	r3, 8011944 <_kill_r+0x1c>
 8011942:	6023      	str	r3, [r4, #0]
 8011944:	bd38      	pop	{r3, r4, r5, pc}
 8011946:	bf00      	nop
 8011948:	200035c4 	.word	0x200035c4

0801194c <_getpid_r>:
 801194c:	f7f1 bb5e 	b.w	800300c <_getpid>

08011950 <_malloc_usable_size_r>:
 8011950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011954:	1f18      	subs	r0, r3, #4
 8011956:	2b00      	cmp	r3, #0
 8011958:	bfbc      	itt	lt
 801195a:	580b      	ldrlt	r3, [r1, r0]
 801195c:	18c0      	addlt	r0, r0, r3
 801195e:	4770      	bx	lr

08011960 <_init>:
 8011960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011962:	bf00      	nop
 8011964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011966:	bc08      	pop	{r3}
 8011968:	469e      	mov	lr, r3
 801196a:	4770      	bx	lr

0801196c <_fini>:
 801196c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801196e:	bf00      	nop
 8011970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011972:	bc08      	pop	{r3}
 8011974:	469e      	mov	lr, r3
 8011976:	4770      	bx	lr
